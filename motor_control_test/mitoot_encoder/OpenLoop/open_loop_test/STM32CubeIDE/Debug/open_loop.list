
open_loop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ad4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eec  08008eec  0002070c  2**0
                  CONTENTS
  4 .ARM          00000008  08008eec  08008eec  00018eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ef4  08008ef4  0002070c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ef4  08008ef4  00018ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ef8  08008ef8  00018ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000070c  20000000  08008efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  2000070c  08009608  0002070c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b38  08009608  00020b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002070c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0004387b  00000000  00000000  0002073c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0005a5f2  00000000  00000000  00063fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000845b  00000000  00000000  000be5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d50  00000000  00000000  000c6a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fd462  00000000  00000000  000c8758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004e30  00000000  00000000  001c5bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0002a093  00000000  00000000  001ca9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b95d  00000000  00000000  001f4a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002203e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052f0  00000000  00000000  00220430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000070c 	.word	0x2000070c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008c94 	.word	0x08008c94

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000710 	.word	0x20000710
 8000214:	08008c94 	.word	0x08008c94

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800051c:	480d      	ldr	r0, [pc, #52]	; (8000554 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <LoopForever+0x6>)
  ldr r1, =_edata
 8000522:	490e      	ldr	r1, [pc, #56]	; (800055c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000524:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <LoopForever+0xe>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000538:	4c0b      	ldr	r4, [pc, #44]	; (8000568 <LoopForever+0x16>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000546:	f003 f8fd 	bl	8003744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800054a:	f008 fb77 	bl	8008c3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800054e:	f000 f87b 	bl	8000648 <main>

08000552 <LoopForever>:

LoopForever:
    b LoopForever
 8000552:	e7fe      	b.n	8000552 <LoopForever>
  ldr   r0, =_estack
 8000554:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800055c:	2000070c 	.word	0x2000070c
  ldr r2, =_sidata
 8000560:	08008efc 	.word	0x08008efc
  ldr r2, =_sbss
 8000564:	2000070c 	.word	0x2000070c
  ldr r4, =_ebss
 8000568:	20000b38 	.word	0x20000b38

0800056c <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800056c:	e7fe      	b.n	800056c <BusFault_Handler>
	...

08000570 <DAC_Init>:
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 8000570:	4a02      	ldr	r2, [pc, #8]	; (800057c <DAC_Init+0xc>)
 8000572:	6813      	ldr	r3, [r2, #0]
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]
  */
__weak void DAC_Init(UI_Handle_t *pHandle)
{
  /* Enable DAC Channel1 */
  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_1);
}
 800057a:	4770      	bx	lr
 800057c:	50000800 	.word	0x50000800

08000580 <DAC_Exec>:
  *         variables will be provided in the related output channels. This is
  *         the implementation of the virtual function.
  * @param  pHandle pointer on related component instance.
  */
__weak void DAC_Exec(UI_Handle_t *pHandle)
{
 8000580:	b508      	push	{r3, lr}
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  MC_Protocol_REG_t bCh_var;

  bCh_var = pDacHandle->bChannel_variable[DAC_CH0];
  LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_1,
                                  DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var,MC_NULL)));
 8000582:	2200      	movs	r2, #0
 8000584:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8000588:	f002 fdcc 	bl	8003124 <UI_GetReg>
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 800058c:	4908      	ldr	r1, [pc, #32]	; (80005b0 <DAC_Exec+0x30>)
  SET_BIT(DACx->SWTRIGR,
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <DAC_Exec+0x34>)
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8000590:	684b      	ldr	r3, [r1, #4]
 8000592:	b200      	sxth	r0, r0
 8000594:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000598:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800059c:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 80005a0:	4318      	orrs	r0, r3
 80005a2:	6048      	str	r0, [r1, #4]
  SET_BIT(DACx->SWTRIGR,
 80005a4:	6853      	ldr	r3, [r2, #4]
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6053      	str	r3, [r2, #4]
  LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_1);
}
 80005ac:	bd08      	pop	{r3, pc}
 80005ae:	bf00      	nop
 80005b0:	50000808 	.word	0x50000808
 80005b4:	50000800 	.word	0x50000800

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b500      	push	{lr}
 80005ba:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005bc:	2238      	movs	r2, #56	; 0x38
 80005be:	2100      	movs	r1, #0
 80005c0:	a806      	add	r0, sp, #24
 80005c2:	f008 fb5f 	bl	8008c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c6:	2000      	movs	r0, #0
 80005c8:	e9cd 0000 	strd	r0, r0, [sp]
 80005cc:	e9cd 0002 	strd	r0, r0, [sp, #8]
 80005d0:	9004      	str	r0, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005d2:	f004 fa7b 	bl	8004acc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d6:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8000630 <SystemClock_Config+0x78>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005dc:	2103      	movs	r1, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80005de:	2206      	movs	r2, #6
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e0:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80005e4:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80005e6:	2155      	movs	r1, #85	; 0x55
 80005e8:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80005f0:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f4:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f004 fae6 	bl	8004bc8 <HAL_RCC_OscConfig>
 80005fc:	b108      	cbz	r0, 8000602 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005fe:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000600:	e7fe      	b.n	8000600 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8000638 <SystemClock_Config+0x80>
 8000606:	ed8d 7b00 	vstr	d7, [sp]
 800060a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8000640 <SystemClock_Config+0x88>
 800060e:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000610:	2104      	movs	r1, #4
 8000612:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800061a:	f004 fd59 	bl	80050d0 <HAL_RCC_ClockConfig>
 800061e:	b108      	cbz	r0, 8000624 <SystemClock_Config+0x6c>
 8000620:	b672      	cpsid	i
  while (1)
 8000622:	e7fe      	b.n	8000622 <SystemClock_Config+0x6a>
  HAL_RCC_EnableCSS();
 8000624:	f004 fe90 	bl	8005348 <HAL_RCC_EnableCSS>
}
 8000628:	b015      	add	sp, #84	; 0x54
 800062a:	f85d fb04 	ldr.w	pc, [sp], #4
 800062e:	bf00      	nop
 8000630:	00000001 	.word	0x00000001
 8000634:	00010000 	.word	0x00010000
 8000638:	0000000f 	.word	0x0000000f
 800063c:	00000003 	.word	0x00000003
	...

08000648 <main>:
{
 8000648:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	2400      	movs	r4, #0
{
 800064e:	b0ad      	sub	sp, #180	; 0xb4
  HAL_Init();
 8000650:	f003 f8a8 	bl	80037a4 <HAL_Init>
  SystemClock_Config();
 8000654:	f7ff ffb0 	bl	80005b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 800065c:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	4ba9      	ldr	r3, [pc, #676]	; (8000908 <main+0x2c0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	9420      	str	r4, [sp, #128]	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000664:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hadc1.Instance = ADC1;
 8000666:	4da9      	ldr	r5, [pc, #676]	; (800090c <main+0x2c4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000668:	f042 0204 	orr.w	r2, r2, #4
 800066c:	64da      	str	r2, [r3, #76]	; 0x4c
 800066e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000670:	f002 0204 	and.w	r2, r2, #4
 8000674:	9202      	str	r2, [sp, #8]
 8000676:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000678:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800067a:	2120      	movs	r1, #32
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800067c:	430a      	orrs	r2, r1
 800067e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000680:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000682:	400a      	ands	r2, r1
 8000684:	9203      	str	r2, [sp, #12]
 8000686:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800068a:	f042 0201 	orr.w	r2, r2, #1
 800068e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000690:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000692:	f002 0201 	and.w	r2, r2, #1
 8000696:	9204      	str	r2, [sp, #16]
 8000698:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800069c:	f042 0202 	orr.w	r2, r2, #2
 80006a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80006a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a4:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006a8:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b0:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006b2:	f004 fa05 	bl	8004ac0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 80006b6:	4622      	mov	r2, r4
 80006b8:	4895      	ldr	r0, [pc, #596]	; (8000910 <main+0x2c8>)
 80006ba:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80006be:	f004 f9ff 	bl	8004ac0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80006c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80006ca:	4892      	ldr	r0, [pc, #584]	; (8000914 <main+0x2cc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80006ce:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80006d0:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f004 f8fc 	bl	80048d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 80006d8:	2220      	movs	r2, #32
 80006da:	2301      	movs	r3, #1
 80006dc:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006e0:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = LD2_Pin;
 80006e2:	2200      	movs	r2, #0
 80006e4:	2300      	movs	r3, #0
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin;
 80006ea:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006ee:	f004 f8ef 	bl	80048d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80006f2:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80006f6:	2301      	movs	r3, #1
 80006f8:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fc:	4884      	ldr	r0, [pc, #528]	; (8000910 <main+0x2c8>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80006fe:	2302      	movs	r3, #2
 8000700:	2202      	movs	r2, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000702:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000704:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000708:	f004 f8e2 	bl	80048d0 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800070c:	4621      	mov	r1, r4
 800070e:	223c      	movs	r2, #60	; 0x3c
 8000710:	a81c      	add	r0, sp, #112	; 0x70
  ADC_MultiModeTypeDef multimode = {0};
 8000712:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8000716:	9416      	str	r4, [sp, #88]	; 0x58
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000718:	f44f 2800 	mov.w	r8, #524288	; 0x80000
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800071c:	f008 fab2 	bl	8008c84 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000720:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000724:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000728:	60ac      	str	r4, [r5, #8]
  hadc1.Init.GainCompensation = 0;
 800072a:	612c      	str	r4, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800072c:	83ac      	strh	r4, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800072e:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000732:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000736:	63ec      	str	r4, [r5, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000738:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073c:	2604      	movs	r6, #4
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800073e:	2401      	movs	r4, #1
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000740:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000742:	e9c5 3800 	strd	r3, r8, [r5]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000746:	616c      	str	r4, [r5, #20]
  hadc1.Init.NbrOfConversion = 1;
 8000748:	622c      	str	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800074a:	60ef      	str	r7, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074c:	61ae      	str	r6, [r5, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074e:	f003 f85d 	bl	800380c <HAL_ADC_Init>
 8000752:	b108      	cbz	r0, 8000758 <main+0x110>
 8000754:	b672      	cpsid	i
  while (1)
 8000756:	e7fe      	b.n	8000756 <main+0x10e>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000758:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800075a:	a914      	add	r1, sp, #80	; 0x50
 800075c:	4628      	mov	r0, r5
 800075e:	f003 febf 	bl	80044e0 <HAL_ADCEx_MultiModeConfigChannel>
 8000762:	b108      	cbz	r0, 8000768 <main+0x120>
 8000764:	b672      	cpsid	i
  while (1)
 8000766:	e7fe      	b.n	8000766 <main+0x11e>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000768:	ed9f 8b61 	vldr	d8, [pc, #388]	; 80008f0 <main+0x2a8>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800076c:	4b6a      	ldr	r3, [pc, #424]	; (8000918 <main+0x2d0>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800076e:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
  sConfigInjected.InjectedOffset = 0;
 8000772:	e9cd 6020 	strd	r6, r0, [sp, #128]	; 0x80
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000776:	f88d 0096 	strb.w	r0, [sp, #150]	; 0x96
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800077a:	f88d 00a0 	strb.w	r0, [sp, #160]	; 0xa0
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800077e:	f04f 0b09 	mov.w	fp, #9
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000782:	f04f 0a7f 	mov.w	sl, #127	; 0x7f
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000786:	f04f 0902 	mov.w	r9, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800078a:	a91c      	add	r1, sp, #112	; 0x70
 800078c:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800078e:	e9cd 3b1c 	strd	r3, fp, [sp, #112]	; 0x70
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000792:	ed8d 8b26 	vstr	d8, [sp, #152]	; 0x98
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000796:	941e      	str	r4, [sp, #120]	; 0x78
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000798:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  sConfigInjected.InjectedNbrOfConversion = 2;
 800079c:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007a0:	f003 fba4 	bl	8003eec <HAL_ADCEx_InjectedConfigChannel>
 80007a4:	b108      	cbz	r0, 80007aa <main+0x162>
 80007a6:	b672      	cpsid	i
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <main+0x160>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 80007aa:	4a5c      	ldr	r2, [pc, #368]	; (800091c <main+0x2d4>)
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007ac:	a91c      	add	r1, sp, #112	; 0x70
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 80007ae:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007b2:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 80007b4:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007b8:	f003 fb98 	bl	8003eec <HAL_ADCEx_InjectedConfigChannel>
 80007bc:	4601      	mov	r1, r0
 80007be:	b108      	cbz	r0, 80007c4 <main+0x17c>
 80007c0:	b672      	cpsid	i
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <main+0x17a>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80007c4:	223c      	movs	r2, #60	; 0x3c
 80007c6:	9001      	str	r0, [sp, #4]
 80007c8:	a81c      	add	r0, sp, #112	; 0x70
  hadc2.Instance = ADC2;
 80007ca:	4d55      	ldr	r5, [pc, #340]	; (8000920 <main+0x2d8>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80007cc:	f008 fa5a 	bl	8008c84 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80007d0:	9901      	ldr	r1, [sp, #4]
 80007d2:	2220      	movs	r2, #32
 80007d4:	a814      	add	r0, sp, #80	; 0x50
 80007d6:	f008 fa55 	bl	8008c84 <memset>
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007da:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 80007dc:	4b51      	ldr	r3, [pc, #324]	; (8000924 <main+0x2dc>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007de:	83a9      	strh	r1, [r5, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007e0:	4628      	mov	r0, r5
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007e2:	e9c5 1404 	strd	r1, r4, [r5, #16]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e6:	e9c5 110b 	strd	r1, r1, [r5, #44]	; 0x2c
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80007ea:	f8c5 8004 	str.w	r8, [r5, #4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80007ee:	60ef      	str	r7, [r5, #12]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007f0:	60a9      	str	r1, [r5, #8]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f2:	61ae      	str	r6, [r5, #24]
  hadc2.Init.NbrOfConversion = 2;
 80007f4:	f8c5 9020 	str.w	r9, [r5, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007f8:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007fc:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000800:	63e9      	str	r1, [r5, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000802:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
  hadc2.Instance = ADC2;
 8000806:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000808:	f003 f800 	bl	800380c <HAL_ADC_Init>
 800080c:	b108      	cbz	r0, 8000812 <main+0x1ca>
 800080e:	b672      	cpsid	i
  while (1)
 8000810:	e7fe      	b.n	8000810 <main+0x1c8>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8000812:	4b42      	ldr	r3, [pc, #264]	; (800091c <main+0x2d4>)
  sConfigInjected.InjectedOffset = 0;
 8000814:	9021      	str	r0, [sp, #132]	; 0x84
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000816:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
  sConfigInjected.QueueInjectedContext = DISABLE;
 800081a:	f88d 0096 	strb.w	r0, [sp, #150]	; 0x96
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800081e:	f88d 00a0 	strb.w	r0, [sp, #160]	; 0xa0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000822:	a91c      	add	r1, sp, #112	; 0x70
 8000824:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000826:	ed8d 8b26 	vstr	d8, [sp, #152]	; 0x98
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800082a:	e9cd b41d 	strd	fp, r4, [sp, #116]	; 0x74
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800082e:	e9cd a61f 	strd	sl, r6, [sp, #124]	; 0x7c
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000832:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8000836:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000838:	f003 fb58 	bl	8003eec <HAL_ADCEx_InjectedConfigChannel>
 800083c:	b108      	cbz	r0, 8000842 <main+0x1fa>
 800083e:	b672      	cpsid	i
  while (1)
 8000840:	e7fe      	b.n	8000840 <main+0x1f8>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000842:	4a39      	ldr	r2, [pc, #228]	; (8000928 <main+0x2e0>)
 8000844:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000848:	a91c      	add	r1, sp, #112	; 0x70
 800084a:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800084c:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000850:	f003 fb4c 	bl	8003eec <HAL_ADCEx_InjectedConfigChannel>
 8000854:	b108      	cbz	r0, 800085a <main+0x212>
 8000856:	b672      	cpsid	i
  while (1)
 8000858:	e7fe      	b.n	8000858 <main+0x210>
  sConfig.Channel = ADC_CHANNEL_11;
 800085a:	a327      	add	r3, pc, #156	; (adr r3, 80008f8 <main+0x2b0>)
 800085c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000860:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8000864:	2204      	movs	r2, #4
 8000866:	237f      	movs	r3, #127	; 0x7f
 8000868:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800086c:	a914      	add	r1, sp, #80	; 0x50
  sConfig.Channel = ADC_CHANNEL_11;
 800086e:	2204      	movs	r2, #4
 8000870:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000872:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_11;
 8000874:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000878:	f003 f8cc 	bl	8003a14 <HAL_ADC_ConfigChannel>
 800087c:	b108      	cbz	r0, 8000882 <main+0x23a>
 800087e:	b672      	cpsid	i
  while (1)
 8000880:	e7fe      	b.n	8000880 <main+0x238>
  sConfig.Channel = ADC_CHANNEL_5;
 8000882:	a31f      	add	r3, pc, #124	; (adr r3, 8000900 <main+0x2b8>)
 8000884:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000888:	4628      	mov	r0, r5
 800088a:	a914      	add	r1, sp, #80	; 0x50
  sConfig.Channel = ADC_CHANNEL_5;
 800088c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000890:	f003 f8c0 	bl	8003a14 <HAL_ADC_ConfigChannel>
 8000894:	b108      	cbz	r0, 800089a <main+0x252>
 8000896:	b672      	cpsid	i
  while (1)
 8000898:	e7fe      	b.n	8000898 <main+0x250>
  hcordic.Instance = CORDIC;
 800089a:	4824      	ldr	r0, [pc, #144]	; (800092c <main+0x2e4>)
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <main+0x2e8>)
 800089e:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80008a0:	f003 fe84 	bl	80045ac <HAL_CORDIC_Init>
 80008a4:	b108      	cbz	r0, 80008aa <main+0x262>
 80008a6:	b672      	cpsid	i
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <main+0x260>
  hdac1.Instance = DAC1;
 80008aa:	4c22      	ldr	r4, [pc, #136]	; (8000934 <main+0x2ec>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80008ac:	2230      	movs	r2, #48	; 0x30
 80008ae:	2100      	movs	r1, #0
 80008b0:	a81c      	add	r0, sp, #112	; 0x70
 80008b2:	f008 f9e7 	bl	8008c84 <memset>
  hdac1.Instance = DAC1;
 80008b6:	4b20      	ldr	r3, [pc, #128]	; (8000938 <main+0x2f0>)
 80008b8:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008ba:	4620      	mov	r0, r4
 80008bc:	f003 ff0e 	bl	80046dc <HAL_DAC_Init>
 80008c0:	4602      	mov	r2, r0
 80008c2:	b108      	cbz	r0, 80008c8 <main+0x280>
 80008c4:	b672      	cpsid	i
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <main+0x27e>
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80008c8:	2602      	movs	r6, #2
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008ca:	4620      	mov	r0, r4
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80008cc:	2701      	movs	r7, #1
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008ce:	a91c      	add	r1, sp, #112	; 0x70
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80008d0:	e9cd 261e 	strd	r2, r6, [sp, #120]	; 0x78
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80008d4:	e9cd 2620 	strd	r2, r6, [sp, #128]	; 0x80
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80008d8:	961c      	str	r6, [sp, #112]	; 0x70
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80008da:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80008de:	9223      	str	r2, [sp, #140]	; 0x8c
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80008e0:	9722      	str	r7, [sp, #136]	; 0x88
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008e2:	f003 ff11 	bl	8004708 <HAL_DAC_ConfigChannel>
 80008e6:	4604      	mov	r4, r0
 80008e8:	b340      	cbz	r0, 800093c <main+0x2f4>
 80008ea:	b672      	cpsid	i
  while (1)
 80008ec:	e7fe      	b.n	80008ec <main+0x2a4>
 80008ee:	bf00      	nop
 80008f0:	00000080 	.word	0x00000080
 80008f4:	00000080 	.word	0x00000080
 80008f8:	2e300800 	.word	0x2e300800
 80008fc:	00000006 	.word	0x00000006
 8000900:	14f00020 	.word	0x14f00020
 8000904:	0000000c 	.word	0x0000000c
 8000908:	40021000 	.word	0x40021000
 800090c:	20000728 	.word	0x20000728
 8000910:	48000400 	.word	0x48000400
 8000914:	48000800 	.word	0x48000800
 8000918:	08600004 	.word	0x08600004
 800091c:	3ac04000 	.word	0x3ac04000
 8000920:	20000794 	.word	0x20000794
 8000924:	50000100 	.word	0x50000100
 8000928:	10c00010 	.word	0x10c00010
 800092c:	20000800 	.word	0x20000800
 8000930:	40020c00 	.word	0x40020c00
 8000934:	20000828 	.word	0x20000828
 8000938:	50000800 	.word	0x50000800
  htim1.Instance = TIM1;
 800093c:	4d90      	ldr	r5, [pc, #576]	; (8000b80 <main+0x538>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800093e:	900e      	str	r0, [sp, #56]	; 0x38
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000940:	4601      	mov	r1, r0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000942:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
 8000946:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
 800094a:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800094e:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
 8000952:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000956:	e9cd 0007 	strd	r0, r0, [sp, #28]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800095a:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095e:	9006      	str	r0, [sp, #24]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000960:	900a      	str	r0, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000962:	901a      	str	r0, [sp, #104]	; 0x68
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000964:	2234      	movs	r2, #52	; 0x34
 8000966:	a81c      	add	r0, sp, #112	; 0x70
 8000968:	f008 f98c 	bl	8008c84 <memset>
  htim1.Instance = TIM1;
 800096c:	4b85      	ldr	r3, [pc, #532]	; (8000b84 <main+0x53c>)
 800096e:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000970:	2120      	movs	r1, #32
 8000972:	f640 3311 	movw	r3, #2833	; 0xb11
 8000976:	e9c5 1302 	strd	r1, r3, [r5, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800097a:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800097c:	f44f 7380 	mov.w	r3, #256	; 0x100
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000980:	e9c5 7405 	strd	r7, r4, [r5, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000984:	606c      	str	r4, [r5, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000986:	612b      	str	r3, [r5, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000988:	f004 feee 	bl	8005768 <HAL_TIM_Base_Init>
 800098c:	b108      	cbz	r0, 8000992 <main+0x34a>
 800098e:	b672      	cpsid	i
  while (1)
 8000990:	e7fe      	b.n	8000990 <main+0x348>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000992:	4628      	mov	r0, r5
 8000994:	f004 ff72 	bl	800587c <HAL_TIM_PWM_Init>
 8000998:	b108      	cbz	r0, 800099e <main+0x356>
 800099a:	b672      	cpsid	i
  while (1)
 800099c:	e7fe      	b.n	800099c <main+0x354>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800099e:	2206      	movs	r2, #6
 80009a0:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80009a2:	a90e      	add	r1, sp, #56	; 0x38
 80009a4:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80009a6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80009aa:	f004 ffef 	bl	800598c <HAL_TIM_SlaveConfigSynchro>
 80009ae:	b108      	cbz	r0, 80009b4 <main+0x36c>
 80009b0:	b672      	cpsid	i
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <main+0x36a>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b4:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80009b6:	2270      	movs	r2, #112	; 0x70
 80009b8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ba:	a906      	add	r1, sp, #24
 80009bc:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80009be:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c2:	f005 f9c7 	bl	8005d54 <HAL_TIMEx_MasterConfigSynchronization>
 80009c6:	b108      	cbz	r0, 80009cc <main+0x384>
 80009c8:	b672      	cpsid	i
  while (1)
 80009ca:	e7fe      	b.n	80009ca <main+0x382>
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 80009cc:	970c      	str	r7, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80009ce:	aa0a      	add	r2, sp, #40	; 0x28
 80009d0:	4631      	mov	r1, r6
 80009d2:	4628      	mov	r0, r5
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80009d4:	2601      	movs	r6, #1
 80009d6:	2701      	movs	r7, #1
 80009d8:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80009dc:	f005 fa52 	bl	8005e84 <HAL_TIMEx_ConfigBreakInput>
 80009e0:	4602      	mov	r2, r0
 80009e2:	b108      	cbz	r0, 80009e8 <main+0x3a0>
 80009e4:	b672      	cpsid	i
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <main+0x39e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e8:	2100      	movs	r1, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009ea:	901a      	str	r0, [sp, #104]	; 0x68
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ec:	2060      	movs	r0, #96	; 0x60
 80009ee:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80009f2:	2000      	movs	r0, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80009fa:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009fe:	a914      	add	r1, sp, #80	; 0x50
 8000a00:	4628      	mov	r0, r5
 8000a02:	f005 f8a9 	bl	8005b58 <HAL_TIM_PWM_ConfigChannel>
 8000a06:	b108      	cbz	r0, 8000a0c <main+0x3c4>
 8000a08:	b672      	cpsid	i
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <main+0x3c2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a0c:	2204      	movs	r2, #4
 8000a0e:	a914      	add	r1, sp, #80	; 0x50
 8000a10:	4628      	mov	r0, r5
 8000a12:	f005 f8a1 	bl	8005b58 <HAL_TIM_PWM_ConfigChannel>
 8000a16:	b108      	cbz	r0, 8000a1c <main+0x3d4>
 8000a18:	b672      	cpsid	i
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <main+0x3d2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	a914      	add	r1, sp, #80	; 0x50
 8000a20:	4628      	mov	r0, r5
 8000a22:	f005 f899 	bl	8005b58 <HAL_TIM_PWM_ConfigChannel>
 8000a26:	b108      	cbz	r0, 8000a2c <main+0x3e4>
 8000a28:	b672      	cpsid	i
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <main+0x3e2>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000a2c:	2370      	movs	r3, #112	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a2e:	4854      	ldr	r0, [pc, #336]	; (8000b80 <main+0x538>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000a30:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a32:	220c      	movs	r2, #12
 8000a34:	a914      	add	r1, sp, #80	; 0x50
 8000a36:	f005 f88f 	bl	8005b58 <HAL_TIM_PWM_ConfigChannel>
 8000a3a:	b108      	cbz	r0, 8000a40 <main+0x3f8>
 8000a3c:	b672      	cpsid	i
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <main+0x3f6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a48:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8000a4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a50:	2300      	movs	r3, #0
 8000a52:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8000a56:	2200      	movs	r2, #0
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8000a5e:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 8000a62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a6a:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a6e:	9028      	str	r0, [sp, #160]	; 0xa0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a70:	2203      	movs	r2, #3
 8000a72:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a74:	4842      	ldr	r0, [pc, #264]	; (8000b80 <main+0x538>)
 8000a76:	a91c      	add	r1, sp, #112	; 0x70
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a78:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a7c:	f005 f9b4 	bl	8005de8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a80:	4605      	mov	r5, r0
 8000a82:	b108      	cbz	r0, 8000a88 <main+0x440>
 8000a84:	b672      	cpsid	i
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <main+0x43e>
  huart2.Instance = USART2;
 8000a88:	4c3f      	ldr	r4, [pc, #252]	; (8000b88 <main+0x540>)
  HAL_TIM_MspPostInit(&htim1);
 8000a8a:	483d      	ldr	r0, [pc, #244]	; (8000b80 <main+0x538>)
 8000a8c:	f001 ff08 	bl	80028a0 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 8000a90:	493e      	ldr	r1, [pc, #248]	; (8000b8c <main+0x544>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a92:	62a5      	str	r5, [r4, #40]	; 0x28
  huart2.Init.BaudRate = 115200;
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a98:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9a:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 115200;
 8000a9c:	e9c4 1200 	strd	r1, r2, [r4]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	e9c4 5304 	strd	r5, r3, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	e9c4 5506 	strd	r5, r5, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aac:	e9c4 5508 	strd	r5, r5, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab0:	f005 fc84 	bl	80063bc <HAL_UART_Init>
 8000ab4:	4601      	mov	r1, r0
 8000ab6:	b108      	cbz	r0, 8000abc <main+0x474>
 8000ab8:	b672      	cpsid	i
  while (1)
 8000aba:	e7fe      	b.n	8000aba <main+0x472>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000abc:	4620      	mov	r0, r4
 8000abe:	f005 fd07 	bl	80064d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000ac2:	4601      	mov	r1, r0
 8000ac4:	b108      	cbz	r0, 8000aca <main+0x482>
 8000ac6:	b672      	cpsid	i
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <main+0x480>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aca:	4620      	mov	r0, r4
 8000acc:	f005 fd42 	bl	8006554 <HAL_UARTEx_SetRxFifoThreshold>
 8000ad0:	b108      	cbz	r0, 8000ad6 <main+0x48e>
 8000ad2:	b672      	cpsid	i
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <main+0x48c>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ad6:	4620      	mov	r0, r4
 8000ad8:	f005 fcdc 	bl	8006494 <HAL_UARTEx_DisableFifoMode>
 8000adc:	4604      	mov	r4, r0
 8000ade:	b108      	cbz	r0, 8000ae4 <main+0x49c>
 8000ae0:	b672      	cpsid	i
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <main+0x49a>
  MX_MotorControl_Init();
 8000ae4:	f001 fafa 	bl	80020dc <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2104      	movs	r1, #4
 8000aec:	2018      	movs	r0, #24
 8000aee:	f003 fd89 	bl	8004604 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000af2:	2018      	movs	r0, #24
 8000af4:	f003 fdc4 	bl	8004680 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000af8:	4622      	mov	r2, r4
 8000afa:	4621      	mov	r1, r4
 8000afc:	2019      	movs	r0, #25
 8000afe:	f003 fd81 	bl	8004604 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b02:	2019      	movs	r0, #25
 8000b04:	f003 fdbc 	bl	8004680 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000b08:	4622      	mov	r2, r4
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	2012      	movs	r0, #18
 8000b0e:	f003 fd79 	bl	8004604 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b12:	2012      	movs	r0, #18
 8000b14:	f003 fdb4 	bl	8004680 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000b18:	2103      	movs	r1, #3
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2026      	movs	r0, #38	; 0x26
 8000b1e:	f003 fd71 	bl	8004604 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b22:	2026      	movs	r0, #38	; 0x26
 8000b24:	f003 fdac 	bl	8004680 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000b28:	4622      	mov	r2, r4
 8000b2a:	2103      	movs	r1, #3
 8000b2c:	2028      	movs	r0, #40	; 0x28
 8000b2e:	f003 fd69 	bl	8004604 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b32:	2028      	movs	r0, #40	; 0x28
 8000b34:	f003 fda4 	bl	8004680 <HAL_NVIC_EnableIRQ>
	 MC_ProgramSpeedRampMotor1(-1000, 0);
 8000b38:	4c15      	ldr	r4, [pc, #84]	; (8000b90 <main+0x548>)
	 MC_ProgramSpeedRampMotor1(1000, 0);
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b40:	f000 f836 	bl	8000bb0 <MC_ProgramSpeedRampMotor1>
	 MC_StartMotor1();
 8000b44:	f000 f828 	bl	8000b98 <MC_StartMotor1>
	 HAL_Delay(3000);
 8000b48:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b4c:	f002 fe4c 	bl	80037e8 <HAL_Delay>
	 MC_ProgramSpeedRampMotor1(0, 0);
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	f000 f82c 	bl	8000bb0 <MC_ProgramSpeedRampMotor1>
	 MC_StopMotor1();
 8000b58:	f000 f824 	bl	8000ba4 <MC_StopMotor1>
	 MC_ProgramSpeedRampMotor1(-1000, 0);
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4620      	mov	r0, r4
 8000b60:	f000 f826 	bl	8000bb0 <MC_ProgramSpeedRampMotor1>
	 MC_StartMotor1();
 8000b64:	f000 f818 	bl	8000b98 <MC_StartMotor1>
	 HAL_Delay(3000);
 8000b68:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b6c:	f002 fe3c 	bl	80037e8 <HAL_Delay>
	 MC_ProgramSpeedRampMotor1(0, 0);
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	f000 f81c 	bl	8000bb0 <MC_ProgramSpeedRampMotor1>
	 MC_StopMotor1();
 8000b78:	f000 f814 	bl	8000ba4 <MC_StopMotor1>
  while (1)
 8000b7c:	e7dd      	b.n	8000b3a <main+0x4f2>
 8000b7e:	bf00      	nop
 8000b80:	2000083c 	.word	0x2000083c
 8000b84:	40012c00 	.word	0x40012c00
 8000b88:	20000888 	.word	0x20000888
 8000b8c:	40004400 	.word	0x40004400
 8000b90:	fffffc18 	.word	0xfffffc18

08000b94 <Error_Handler>:
 8000b94:	b672      	cpsid	i
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <Error_Handler+0x2>

08000b98 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8000b98:	4b01      	ldr	r3, [pc, #4]	; (8000ba0 <MC_StartMotor1+0x8>)
 8000b9a:	6818      	ldr	r0, [r3, #0]
 8000b9c:	f000 b846 	b.w	8000c2c <MCI_StartMotor>
 8000ba0:	20000a00 	.word	0x20000a00

08000ba4 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8000ba4:	4b01      	ldr	r3, [pc, #4]	; (8000bac <MC_StopMotor1+0x8>)
 8000ba6:	6818      	ldr	r0, [r3, #0]
 8000ba8:	f000 b84a 	b.w	8000c40 <MCI_StopMotor>
 8000bac:	20000a00 	.word	0x20000a00

08000bb0 <MC_ProgramSpeedRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
{
 8000bb0:	b410      	push	{r4}
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8000bb2:	4c04      	ldr	r4, [pc, #16]	; (8000bc4 <MC_ProgramSpeedRampMotor1+0x14>)
{
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	460a      	mov	r2, r1
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8000bb8:	6820      	ldr	r0, [r4, #0]
}
 8000bba:	f85d 4b04 	ldr.w	r4, [sp], #4
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f000 b816 	b.w	8000bf0 <MCI_ExecSpeedRamp>
 8000bc4:	20000a00 	.word	0x20000a00

08000bc8 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8000bc8:	4b01      	ldr	r3, [pc, #4]	; (8000bd0 <MC_GetSTMStateMotor1+0x8>)
 8000bca:	6818      	ldr	r0, [r3, #0]
 8000bcc:	f000 b880 	b.w	8000cd0 <MCI_GetSTMState>
 8000bd0:	20000a00 	.word	0x20000a00

08000bd4 <MCI_Init>:
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000bd4:	f04f 0c00 	mov.w	ip, #0
  pHandle->pSTC = pSTC;
 8000bd8:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 8000bdc:	6083      	str	r3, [r0, #8]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000bde:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000be2:	f8c0 c00e 	str.w	ip, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8000be6:	f8a0 c016 	strh.w	ip, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000bea:	f880 c018 	strb.w	ip, [r0, #24]
}
 8000bee:	4770      	bx	lr

08000bf0 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000bf0:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000bf4:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000bf8:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8000bfc:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8000bfe:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c00:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8000c02:	4770      	bx	lr

08000c04 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000c04:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c08:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000c0a:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8000c0e:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8000c10:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c12:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000c18:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000c1a:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c1c:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000c1e:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.q = Iqdref.q;
 8000c20:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c24:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000c26:	b002      	add	sp, #8
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000c2c:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000c2e:	2103      	movs	r1, #3
{
 8000c30:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000c32:	6800      	ldr	r0, [r0, #0]
 8000c34:	f007 fa54 	bl	80080e0 <STM_NextState>

  if ( RetVal == true )
 8000c38:	b108      	cbz	r0, 8000c3e <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000c3e:	bd10      	pop	{r4, pc}

08000c40 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000c40:	6800      	ldr	r0, [r0, #0]
 8000c42:	2107      	movs	r1, #7
 8000c44:	f007 ba4c 	b.w	80080e0 <STM_NextState>

08000c48 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000c48:	6800      	ldr	r0, [r0, #0]
 8000c4a:	f007 babf 	b.w	80081cc <STM_FaultAcknowledged>
 8000c4e:	bf00      	nop

08000c50 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000c50:	6800      	ldr	r0, [r0, #0]
 8000c52:	2101      	movs	r1, #1
 8000c54:	f007 ba44 	b.w	80080e0 <STM_NextState>

08000c58 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000c58:	b178      	cbz	r0, 8000c7a <MCI_ExecBufferedCommands+0x22>
{
 8000c5a:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000c5c:	7e03      	ldrb	r3, [r0, #24]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	4604      	mov	r4, r0
 8000c62:	d000      	beq.n	8000c66 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000c64:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8000c66:	7b01      	ldrb	r1, [r0, #12]
 8000c68:	2902      	cmp	r1, #2
 8000c6a:	d020      	beq.n	8000cae <MCI_ExecBufferedCommands+0x56>
 8000c6c:	2903      	cmp	r1, #3
 8000c6e:	d005      	beq.n	8000c7c <MCI_ExecBufferedCommands+0x24>
 8000c70:	2901      	cmp	r1, #1
 8000c72:	d00c      	beq.n	8000c8e <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000c74:	2303      	movs	r3, #3
 8000c76:	7623      	strb	r3, [r4, #24]
}
 8000c78:	bd10      	pop	{r4, pc}
 8000c7a:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000c7c:	6882      	ldr	r2, [r0, #8]
 8000c7e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000c82:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8000c86:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	7623      	strb	r3, [r4, #24]
}
 8000c8c:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000c8e:	6883      	ldr	r3, [r0, #8]
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000c96:	6840      	ldr	r0, [r0, #4]
 8000c98:	f007 f95e 	bl	8007f58 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000c9c:	8ae2      	ldrh	r2, [r4, #22]
 8000c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ca2:	6860      	ldr	r0, [r4, #4]
 8000ca4:	f007 f95c 	bl	8007f60 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000ca8:	2800      	cmp	r0, #0
 8000caa:	d0e3      	beq.n	8000c74 <MCI_ExecBufferedCommands+0x1c>
 8000cac:	e7ec      	b.n	8000c88 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000cae:	6883      	ldr	r3, [r0, #8]
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000cb6:	6840      	ldr	r0, [r0, #4]
 8000cb8:	f007 f94e 	bl	8007f58 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000cbc:	8ae2      	ldrh	r2, [r4, #22]
 8000cbe:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000cc2:	6860      	ldr	r0, [r4, #4]
 8000cc4:	f007 f94c 	bl	8007f60 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	d0d3      	beq.n	8000c74 <MCI_ExecBufferedCommands+0x1c>
 8000ccc:	e7dc      	b.n	8000c88 <MCI_ExecBufferedCommands+0x30>
 8000cce:	bf00      	nop

08000cd0 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000cd0:	6800      	ldr	r0, [r0, #0]
 8000cd2:	f007 ba79 	b.w	80081c8 <STM_GetState>
 8000cd6:	bf00      	nop

08000cd8 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000cd8:	7e40      	ldrb	r0, [r0, #25]
 8000cda:	4770      	bx	lr

08000cdc <MCI_GetImposedMotorDirection>:
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 8000cdc:	7b03      	ldrb	r3, [r0, #12]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d005      	beq.n	8000cee <MCI_GetImposedMotorDirection+0x12>
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d013      	beq.n	8000d0e <MCI_GetImposedMotorDirection+0x32>
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d009      	beq.n	8000cfe <MCI_GetImposedMotorDirection+0x22>
 8000cea:	2001      	movs	r0, #1
      break;
    default:
      break;
  }
  return retVal;
}
 8000cec:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 8000cee:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
        retVal = -1;
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	bfac      	ite	ge
 8000cf6:	2001      	movge	r0, #1
 8000cf8:	f04f 30ff 	movlt.w	r0, #4294967295
 8000cfc:	4770      	bx	lr
      if ( pHandle->hFinalSpeed < 0 )
 8000cfe:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
        retVal = -1;
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	bfac      	ite	ge
 8000d06:	2001      	movge	r0, #1
 8000d08:	f04f 30ff 	movlt.w	r0, #4294967295
 8000d0c:	4770      	bx	lr
      if ( pHandle->Iqdref.q < 0 )
 8000d0e:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
        retVal = -1;
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	bfac      	ite	ge
 8000d16:	2001      	movge	r0, #1
 8000d18:	f04f 30ff 	movlt.w	r0, #4294967295
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000d20:	7b03      	ldrb	r3, [r0, #12]
 8000d22:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000d24:	bf0c      	ite	eq
 8000d26:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000d2a:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000d30:	6840      	ldr	r0, [r0, #4]
 8000d32:	f007 b95d 	b.w	8007ff0 <STC_StopRamp>
 8000d36:	bf00      	nop

08000d38 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000d38:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000d3a:	6840      	ldr	r0, [r0, #4]
 8000d3c:	f007 f8f2 	bl	8007f24 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000d40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000d44:	f007 b88e 	b.w	8007e64 <SPD_GetAvrgMecSpeedUnit>

08000d48 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000d48:	6840      	ldr	r0, [r0, #4]
 8000d4a:	f007 b8f5 	b.w	8007f38 <STC_GetMecSpeedRefUnit>
 8000d4e:	bf00      	nop

08000d50 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000d50:	6882      	ldr	r2, [r0, #8]
 8000d52:	6810      	ldr	r0, [r2, #0]
 8000d54:	2300      	movs	r3, #0
 8000d56:	b282      	uxth	r2, r0
 8000d58:	f362 030f 	bfi	r3, r2, #0, #16
 8000d5c:	0c00      	lsrs	r0, r0, #16
 8000d5e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000d62:	b082      	sub	sp, #8
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	b002      	add	sp, #8
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000d6c:	6882      	ldr	r2, [r0, #8]
 8000d6e:	6850      	ldr	r0, [r2, #4]
 8000d70:	2300      	movs	r3, #0
 8000d72:	b282      	uxth	r2, r0
 8000d74:	f362 030f 	bfi	r3, r2, #0, #16
 8000d78:	0c00      	lsrs	r0, r0, #16
 8000d7a:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000d7e:	b082      	sub	sp, #8
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	b002      	add	sp, #8
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000d88:	6882      	ldr	r2, [r0, #8]
 8000d8a:	68d0      	ldr	r0, [r2, #12]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	b282      	uxth	r2, r0
 8000d90:	f362 030f 	bfi	r3, r2, #0, #16
 8000d94:	0c00      	lsrs	r0, r0, #16
 8000d96:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000d9a:	b082      	sub	sp, #8
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	b002      	add	sp, #8
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000da4:	6882      	ldr	r2, [r0, #8]
 8000da6:	6910      	ldr	r0, [r2, #16]
 8000da8:	2300      	movs	r3, #0
 8000daa:	b282      	uxth	r2, r0
 8000dac:	f362 030f 	bfi	r3, r2, #0, #16
 8000db0:	0c00      	lsrs	r0, r0, #16
 8000db2:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000db6:	b082      	sub	sp, #8
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	b002      	add	sp, #8
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000dc0:	6882      	ldr	r2, [r0, #8]
 8000dc2:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	b282      	uxth	r2, r0
 8000dca:	f362 030f 	bfi	r3, r2, #0, #16
 8000dce:	0c00      	lsrs	r0, r0, #16
 8000dd0:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000dd4:	b082      	sub	sp, #8
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	b002      	add	sp, #8
 8000dda:	4770      	bx	lr

08000ddc <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000ddc:	6882      	ldr	r2, [r0, #8]
 8000dde:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8000de2:	2300      	movs	r3, #0
 8000de4:	b282      	uxth	r2, r0
 8000de6:	f362 030f 	bfi	r3, r2, #0, #16
 8000dea:	0c00      	lsrs	r0, r0, #16
 8000dec:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000df0:	b082      	sub	sp, #8
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	b002      	add	sp, #8
 8000df6:	4770      	bx	lr

08000df8 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000df8:	6883      	ldr	r3, [r0, #8]
}
 8000dfa:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000dfe:	4770      	bx	lr

08000e00 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000e00:	2300      	movs	r3, #0
 8000e02:	6882      	ldr	r2, [r0, #8]
 8000e04:	f361 030f 	bfi	r3, r1, #0, #16
 8000e08:	f361 431f 	bfi	r3, r1, #16, #16
 8000e0c:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000e14:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000e16:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000e1a:	f007 f929 	bl	8008070 <STC_GetDefaultIqdref>
 8000e1e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000e22:	8220      	strh	r0, [r4, #16]
 8000e24:	8263      	strh	r3, [r4, #18]
}
 8000e26:	bd10      	pop	{r4, pc}

08000e28 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000e28:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000e2c:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000e2e:	fb13 f201 	smulbb	r2, r3, r1
{
 8000e32:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000e36:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000e3a:	4250      	negs	r0, r2
 8000e3c:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000e40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8000e44:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000e46:	da05      	bge.n	8000e54 <MCM_Clarke+0x2c>
 8000e48:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000e4a:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8000e4e:	da0c      	bge.n	8000e6a <MCM_Clarke+0x42>
 8000e50:	4a09      	ldr	r2, [pc, #36]	; (8000e78 <MCM_Clarke+0x50>)
 8000e52:	e001      	b.n	8000e58 <MCM_Clarke+0x30>
 8000e54:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f363 000f 	bfi	r0, r3, #0, #16
 8000e60:	b293      	uxth	r3, r2
 8000e62:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000e66:	b004      	add	sp, #16
 8000e68:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000e6a:	4803      	ldr	r0, [pc, #12]	; (8000e78 <MCM_Clarke+0x50>)
 8000e6c:	b20a      	sxth	r2, r1
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	bfb8      	it	lt
 8000e72:	4602      	movlt	r2, r0
 8000e74:	e7f0      	b.n	8000e58 <MCM_Clarke+0x30>
 8000e76:	bf00      	nop
 8000e78:	ffff8001 	.word	0xffff8001

08000e7c <MCM_Trig_Functions>:
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;

  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MCM_Trig_Functions+0x28>)
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <MCM_Trig_Functions+0x2c>)
 8000e80:	601a      	str	r2, [r3, #0]
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 8000e82:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 8000e86:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8000e8a:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8000e8c:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	f362 000f 	bfi	r0, r2, #0, #16
 8000e96:	0c1b      	lsrs	r3, r3, #16
{
 8000e98:	b082      	sub	sp, #8
  return (CosSin.Components);
 8000e9a:	f363 401f 	bfi	r0, r3, #16, #16

}
 8000e9e:	b002      	add	sp, #8
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40020c00 	.word	0x40020c00
 8000ea8:	00600040 	.word	0x00600040

08000eac <MCM_Park>:
{
 8000eac:	b530      	push	{r4, r5, lr}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	141c      	asrs	r4, r3, #16
{
 8000eb8:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000eba:	f7ff ffdf 	bl	8000e7c <MCM_Trig_Functions>
 8000ebe:	b22d      	sxth	r5, r5
 8000ec0:	fa0f fc80 	sxth.w	ip, r0
 8000ec4:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000ec6:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000eca:	fb04 1113 	mls	r1, r4, r3, r1
  if ( wqd_tmp > INT16_MAX )
 8000ece:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8000ed2:	da05      	bge.n	8000ee0 <MCM_Park+0x34>
 8000ed4:	13ca      	asrs	r2, r1, #15
  else if ( wqd_tmp < ( -32768 ) )
 8000ed6:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000eda:	da22      	bge.n	8000f22 <MCM_Park+0x76>
 8000edc:	4914      	ldr	r1, [pc, #80]	; (8000f30 <MCM_Park+0x84>)
 8000ede:	e001      	b.n	8000ee4 <MCM_Park+0x38>
 8000ee0:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000ee4:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000ee8:	fb05 4403 	mla	r4, r5, r3, r4
  if ( wqd_tmp > INT16_MAX )
 8000eec:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000ef0:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 8000ef4:	da04      	bge.n	8000f00 <MCM_Park+0x54>
  else if ( wqd_tmp < ( -32768 ) )
 8000ef6:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000efa:	da0c      	bge.n	8000f16 <MCM_Park+0x6a>
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MCM_Park+0x84>)
 8000efe:	e001      	b.n	8000f04 <MCM_Park+0x58>
 8000f00:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8000f04:	b28a      	uxth	r2, r1
 8000f06:	2000      	movs	r0, #0
 8000f08:	f362 000f 	bfi	r0, r2, #0, #16
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000f12:	b005      	add	sp, #20
 8000f14:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000f16:	4806      	ldr	r0, [pc, #24]	; (8000f30 <MCM_Park+0x84>)
 8000f18:	b213      	sxth	r3, r2
 8000f1a:	4283      	cmp	r3, r0
 8000f1c:	bfb8      	it	lt
 8000f1e:	4603      	movlt	r3, r0
 8000f20:	e7f0      	b.n	8000f04 <MCM_Park+0x58>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000f22:	4903      	ldr	r1, [pc, #12]	; (8000f30 <MCM_Park+0x84>)
 8000f24:	b212      	sxth	r2, r2
 8000f26:	4291      	cmp	r1, r2
 8000f28:	bfb8      	it	lt
 8000f2a:	4611      	movlt	r1, r2
 8000f2c:	e7da      	b.n	8000ee4 <MCM_Park+0x38>
 8000f2e:	bf00      	nop
 8000f30:	ffff8001 	.word	0xffff8001

08000f34 <MCM_Rev_Park>:
{
 8000f34:	b530      	push	{r4, r5, lr}
 8000f36:	b085      	sub	sp, #20
 8000f38:	4604      	mov	r4, r0
 8000f3a:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000f3c:	4608      	mov	r0, r1
{
 8000f3e:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000f40:	f7ff ff9c 	bl	8000e7c <MCM_Trig_Functions>
 8000f44:	1424      	asrs	r4, r4, #16
 8000f46:	1402      	asrs	r2, r0, #16
 8000f48:	b22d      	sxth	r5, r5
 8000f4a:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000f4c:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000f50:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000f54:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000f58:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 8000f5c:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000f60:	2000      	movs	r0, #0
 8000f62:	f363 000f 	bfi	r0, r3, #0, #16
 8000f66:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8000f6a:	f364 401f 	bfi	r0, r4, #16, #16
}
 8000f6e:	b005      	add	sp, #20
 8000f70:	bd30      	pop	{r4, r5, pc}
 8000f72:	bf00      	nop

08000f74 <FOC_Clear>:
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8000f74:	2226      	movs	r2, #38	; 0x26
{
 8000f76:	b538      	push	{r3, r4, r5, lr}
 8000f78:	fb00 f202 	mul.w	r2, r0, r2
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 8000f7e:	2400      	movs	r4, #0
 8000f80:	509c      	str	r4, [r3, r2]
{
 8000f82:	4605      	mov	r5, r0
 8000f84:	f102 0108 	add.w	r1, r2, #8
 8000f88:	1898      	adds	r0, r3, r2
 8000f8a:	3210      	adds	r2, #16
 8000f8c:	4419      	add	r1, r3
 8000f8e:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000f90:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8000f92:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000f94:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000f98:	604c      	str	r4, [r1, #4]
 8000f9a:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000f9c:	f8c3 4006 	str.w	r4, [r3, #6]
 8000fa0:	f8c3 400a 	str.w	r4, [r3, #10]
 8000fa4:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000fa8:	4621      	mov	r1, r4
 8000faa:	f005 fc23 	bl	80067f4 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <FOC_Clear+0x68>)
 8000fb0:	4621      	mov	r1, r4
 8000fb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000fb6:	f005 fc1d 	bl	80067f4 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <FOC_Clear+0x6c>)
 8000fbc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000fc0:	f006 ffb2 	bl	8007f28 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <FOC_Clear+0x70>)
 8000fc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000fce:	f005 be31 	b.w	8006c34 <PWMC_SwitchOffPWM>
 8000fd2:	bf00      	nop
 8000fd4:	20000924 	.word	0x20000924
 8000fd8:	200009e0 	.word	0x200009e0
 8000fdc:	200009dc 	.word	0x200009dc
 8000fe0:	200009ec 	.word	0x200009ec
 8000fe4:	200009f4 	.word	0x200009f4

08000fe8 <MCboot>:
{
 8000fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fec:	4603      	mov	r3, r0
 8000fee:	b089      	sub	sp, #36	; 0x24
  STM_Init(&STM[M1]);
 8000ff0:	4861      	ldr	r0, [pc, #388]	; (8001178 <MCboot+0x190>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000ff2:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 80011d4 <MCboot+0x1ec>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000ff6:	4e61      	ldr	r6, [pc, #388]	; (800117c <MCboot+0x194>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000ff8:	4d61      	ldr	r5, [pc, #388]	; (8001180 <MCboot+0x198>)
  STO_PLL_Init (&STO_PLL_M1);
 8000ffa:	4f62      	ldr	r7, [pc, #392]	; (8001184 <MCboot+0x19c>)
  PID_HandleInit(&PIDIqHandle_M1);
 8000ffc:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 80011d8 <MCboot+0x1f0>
  PID_HandleInit(&PIDIdHandle_M1);
 8001000:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 80011dc <MCboot+0x1f4>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001004:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 80011e0 <MCboot+0x1f8>
{
 8001008:	e9cd 3103 	strd	r3, r1, [sp, #12]
  STM_Init(&STM[M1]);
 800100c:	f007 f846 	bl	800809c <STM_Init>
  bMCBootCompleted = 0;
 8001010:	4a5d      	ldr	r2, [pc, #372]	; (8001188 <MCboot+0x1a0>)
  pCLM[M1] = &CircleLimitationM1;
 8001012:	4b5e      	ldr	r3, [pc, #376]	; (800118c <MCboot+0x1a4>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001014:	485e      	ldr	r0, [pc, #376]	; (8001190 <MCboot+0x1a8>)
 8001016:	f8c9 0000 	str.w	r0, [r9]
  bMCBootCompleted = 0;
 800101a:	2400      	movs	r4, #0
 800101c:	7014      	strb	r4, [r2, #0]
  pCLM[M1] = &CircleLimitationM1;
 800101e:	4a5d      	ldr	r2, [pc, #372]	; (8001194 <MCboot+0x1ac>)
 8001020:	601a      	str	r2, [r3, #0]
  R3_2_Init(&PWM_Handle_M1);
 8001022:	f006 f997 	bl	8007354 <R3_2_Init>
  startTimers();
 8001026:	f005 fc6d 	bl	8006904 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 800102a:	4630      	mov	r0, r6
 800102c:	f005 fbce 	bl	80067cc <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001030:	4a59      	ldr	r2, [pc, #356]	; (8001198 <MCboot+0x1b0>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001032:	4b5a      	ldr	r3, [pc, #360]	; (800119c <MCboot+0x1b4>)
 8001034:	602b      	str	r3, [r5, #0]
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001036:	6016      	str	r6, [r2, #0]
  STO_PLL_Init (&STO_PLL_M1);
 8001038:	4638      	mov	r0, r7
 800103a:	f007 fac3 	bl	80085c4 <STO_PLL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 800103e:	4856      	ldr	r0, [pc, #344]	; (8001198 <MCboot+0x1b0>)
  VSS_Init (&VirtualSpeedSensorM1);
 8001040:	4e57      	ldr	r6, [pc, #348]	; (80011a0 <MCboot+0x1b8>)
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 8001042:	6801      	ldr	r1, [r0, #0]
 8001044:	6828      	ldr	r0, [r5, #0]
 8001046:	463a      	mov	r2, r7
 8001048:	f006 ff54 	bl	8007ef4 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 800104c:	4630      	mov	r0, r6
 800104e:	f007 fceb 	bl	8008a28 <VSS_Init>
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8001052:	f8d9 3000 	ldr.w	r3, [r9]
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	4632      	mov	r2, r6
 800105a:	6829      	ldr	r1, [r5, #0]
 800105c:	4b51      	ldr	r3, [pc, #324]	; (80011a4 <MCboot+0x1bc>)
 800105e:	4852      	ldr	r0, [pc, #328]	; (80011a8 <MCboot+0x1c0>)
 8001060:	f006 fe14 	bl	8007c8c <RUC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8001064:	4658      	mov	r0, fp
 8001066:	f005 fbb1 	bl	80067cc <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 800106a:	4650      	mov	r0, sl
 800106c:	f005 fbae 	bl	80067cc <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8001070:	4b4e      	ldr	r3, [pc, #312]	; (80011ac <MCboot+0x1c4>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8001072:	494f      	ldr	r1, [pc, #316]	; (80011b0 <MCboot+0x1c8>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001074:	484f      	ldr	r0, [pc, #316]	; (80011b4 <MCboot+0x1cc>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8001076:	f8c3 b000 	str.w	fp, [r3]
  pPIDId[M1] = &PIDIdHandle_M1;
 800107a:	f8c1 a000 	str.w	sl, [r1]
  NTC_Init(&TempSensorParamsM1);
 800107e:	f8df b164 	ldr.w	fp, [pc, #356]	; 80011e4 <MCboot+0x1fc>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001082:	f8c8 0000 	str.w	r0, [r8]
  RVBS_Init(pBusSensorM1);
 8001086:	f006 fd29 	bl	8007adc <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 800108a:	494b      	ldr	r1, [pc, #300]	; (80011b8 <MCboot+0x1d0>)
 800108c:	4b4b      	ldr	r3, [pc, #300]	; (80011bc <MCboot+0x1d4>)
 800108e:	600b      	str	r3, [r1, #0]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001090:	f8df a154 	ldr.w	sl, [pc, #340]	; 80011e8 <MCboot+0x200>
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001094:	f8d8 2000 	ldr.w	r2, [r8]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001098:	f8c3 a10c 	str.w	sl, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 800109c:	4658      	mov	r0, fp
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 800109e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  NTC_Init(&TempSensorParamsM1);
 80010a2:	f005 fb4f 	bl	8006744 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80010a6:	4a46      	ldr	r2, [pc, #280]	; (80011c0 <MCboot+0x1d8>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 80010a8:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <MCboot+0x1dc>)
 80010aa:	4847      	ldr	r0, [pc, #284]	; (80011c8 <MCboot+0x1e0>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80010ac:	f8c2 b000 	str.w	fp, [r2]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 80010b0:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 80010b2:	f006 fd61 	bl	8007b78 <REMNG_Init>
  FOCVars[M1].bDriveInput = EXTERNAL;
 80010b6:	f04f 0b01 	mov.w	fp, #1
  FOC_Clear(M1);
 80010ba:	4620      	mov	r0, r4
 80010bc:	f7ff ff5a 	bl	8000f74 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 80010c0:	f88a b024 	strb.w	fp, [sl, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80010c4:	6828      	ldr	r0, [r5, #0]
 80010c6:	f006 ffd3 	bl	8008070 <STC_GetDefaultIqdref>
 80010ca:	f8ca 0010 	str.w	r0, [sl, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80010ce:	6828      	ldr	r0, [r5, #0]
 80010d0:	f006 ffce 	bl	8008070 <STC_GetDefaultIqdref>
 80010d4:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80010d8:	f8aa 0014 	strh.w	r0, [sl, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80010dc:	4653      	mov	r3, sl
  oMCInterface[M1] = & Mci[M1];
 80010de:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80011ec <MCboot+0x204>
 80010e2:	483a      	ldr	r0, [pc, #232]	; (80011cc <MCboot+0x1e4>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80010e4:	682a      	ldr	r2, [r5, #0]
 80010e6:	4924      	ldr	r1, [pc, #144]	; (8001178 <MCboot+0x190>)
  oMCInterface[M1] = & Mci[M1];
 80010e8:	f8ca 0000 	str.w	r0, [sl]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80010ec:	f7ff fd72 	bl	8000bd4 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 80010f0:	f8da 3000 	ldr.w	r3, [sl]
 80010f4:	6828      	ldr	r0, [r5, #0]
 80010f6:	9305      	str	r3, [sp, #20]
 80010f8:	f006 ffb0 	bl	800805c <STC_GetMecSpeedRefUnitDefault>
 80010fc:	9b05      	ldr	r3, [sp, #20]
 80010fe:	4601      	mov	r1, r0
 8001100:	4622      	mov	r2, r4
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fd74 	bl	8000bf0 <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 8001108:	9803      	ldr	r0, [sp, #12]
 800110a:	f8da 3000 	ldr.w	r3, [sl]
 800110e:	6003      	str	r3, [r0, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001110:	4b26      	ldr	r3, [pc, #152]	; (80011ac <MCboot+0x1c4>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001112:	4821      	ldr	r0, [pc, #132]	; (8001198 <MCboot+0x1b0>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001114:	f8d3 c000 	ldr.w	ip, [r3]
  MCT[M1].pPIDId = pPIDId[M1];
 8001118:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <MCboot+0x1c8>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 800111a:	f8d0 e000 	ldr.w	lr, [r0]
  MCT[M1].pPIDId = pPIDId[M1];
 800111e:	6818      	ldr	r0, [r3, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <MCboot+0x1d0>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001122:	f8d9 1000 	ldr.w	r1, [r9]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001126:	f8d3 9000 	ldr.w	r9, [r3]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 800112a:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <MCboot+0x1e8>)
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 800112c:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 800112e:	6098      	str	r0, [r3, #8]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001130:	4d23      	ldr	r5, [pc, #140]	; (80011c0 <MCboot+0x1d8>)
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 8001132:	481d      	ldr	r0, [pc, #116]	; (80011a8 <MCboot+0x1c0>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001134:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001136:	f8d8 8000 	ldr.w	r8, [r8]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 800113a:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 800113c:	e9c3 0705 	strd	r0, r7, [r3, #20]
  MCT[M1].pStateMachine = &STM[M1];
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <MCboot+0x190>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001142:	f8c3 8030 	str.w	r8, [r3, #48]	; 0x30
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001146:	e9c3 6208 	strd	r6, r2, [r3, #32]
  MCT[M1].pPIDIq = pPIDIq[M1];
 800114a:	e9c3 ec00 	strd	lr, ip, [r3]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 800114e:	e9c3 050a 	strd	r0, r5, [r3, #40]	; 0x28
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8001152:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 8001156:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 800115a:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  bMCBootCompleted = 1;
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <MCboot+0x1a0>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001160:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8001164:	60dc      	str	r4, [r3, #12]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 8001166:	61dc      	str	r4, [r3, #28]
  MCT[M1].pOTT = MC_NULL;
 8001168:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 800116a:	9904      	ldr	r1, [sp, #16]
 800116c:	600b      	str	r3, [r1, #0]
  bMCBootCompleted = 1;
 800116e:	f882 b000 	strb.w	fp, [r2]
}
 8001172:	b009      	add	sp, #36	; 0x24
 8001174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001178:	200009bc 	.word	0x200009bc
 800117c:	20000148 	.word	0x20000148
 8001180:	200009ec 	.word	0x200009ec
 8001184:	200003d0 	.word	0x200003d0
 8001188:	200009c2 	.word	0x200009c2
 800118c:	200009d4 	.word	0x200009d4
 8001190:	20000288 	.word	0x20000288
 8001194:	20000000 	.word	0x20000000
 8001198:	200009e4 	.word	0x200009e4
 800119c:	200004f8 	.word	0x200004f8
 80011a0:	20000584 	.word	0x20000584
 80011a4:	200003bc 	.word	0x200003bc
 80011a8:	20000344 	.word	0x20000344
 80011ac:	200009e0 	.word	0x200009e0
 80011b0:	200009dc 	.word	0x200009dc
 80011b4:	2000031c 	.word	0x2000031c
 80011b8:	200009d8 	.word	0x200009d8
 80011bc:	20000174 	.word	0x20000174
 80011c0:	200009f0 	.word	0x200009f0
 80011c4:	200009e8 	.word	0x200009e8
 80011c8:	20000304 	.word	0x20000304
 80011cc:	200009a0 	.word	0x200009a0
 80011d0:	2000094c 	.word	0x2000094c
 80011d4:	200009f4 	.word	0x200009f4
 80011d8:	2000011c 	.word	0x2000011c
 80011dc:	200000f0 	.word	0x200000f0
 80011e0:	200009d0 	.word	0x200009d0
 80011e4:	2000052c 	.word	0x2000052c
 80011e8:	20000924 	.word	0x20000924
 80011ec:	200009cc 	.word	0x200009cc

080011f0 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop

080011f4 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80011f4:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 80011f6:	4c08      	ldr	r4, [pc, #32]	; (8001218 <FOC_CalcCurrRef+0x24>)
 80011f8:	2326      	movs	r3, #38	; 0x26
 80011fa:	fb03 4400 	mla	r4, r3, r0, r4
 80011fe:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001202:	b103      	cbz	r3, 8001206 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001204:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <FOC_CalcCurrRef+0x28>)
 8001208:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800120c:	f006 fef4 	bl	8007ff8 <STC_CalcTorqueReference>
 8001210:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001212:	8220      	strh	r0, [r4, #16]
}
 8001214:	bd10      	pop	{r4, pc}
 8001216:	bf00      	nop
 8001218:	20000924 	.word	0x20000924
 800121c:	200009ec 	.word	0x200009ec

08001220 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001220:	4b01      	ldr	r3, [pc, #4]	; (8001228 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001222:	8018      	strh	r0, [r3, #0]
}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	200009c4 	.word	0x200009c4

0800122c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800122e:	8818      	ldrh	r0, [r3, #0]
 8001230:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001232:	fab0 f080 	clz	r0, r0
 8001236:	0940      	lsrs	r0, r0, #5
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200009c4 	.word	0x200009c4

08001240 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001240:	4b01      	ldr	r3, [pc, #4]	; (8001248 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001242:	8018      	strh	r0, [r3, #0]
}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200009c8 	.word	0x200009c8

0800124c <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800124e:	8818      	ldrh	r0, [r3, #0]
 8001250:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001252:	fab0 f080 	clz	r0, r0
 8001256:	0940      	lsrs	r0, r0, #5
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200009c8 	.word	0x200009c8

08001260 <TSK_MediumFrequencyTaskM1>:
{
 8001260:	b530      	push	{r4, r5, lr}
 8001262:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001264:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8001266:	4669      	mov	r1, sp
 8001268:	489c      	ldr	r0, [pc, #624]	; (80014dc <TSK_MediumFrequencyTaskM1+0x27c>)
  int16_t wAux = 0;
 800126a:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 800126e:	f007 f8ad 	bl	80083cc <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8001272:	4d9b      	ldr	r5, [pc, #620]	; (80014e0 <TSK_MediumFrequencyTaskM1+0x280>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8001274:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8001276:	6828      	ldr	r0, [r5, #0]
 8001278:	f005 fb0e 	bl	8006898 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 800127c:	4899      	ldr	r0, [pc, #612]	; (80014e4 <TSK_MediumFrequencyTaskM1+0x284>)
 800127e:	f006 ffa3 	bl	80081c8 <STM_GetState>
  switch ( StateM1 )
 8001282:	1ec3      	subs	r3, r0, #3
 8001284:	2b10      	cmp	r3, #16
 8001286:	d81e      	bhi.n	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
 8001288:	e8df f013 	tbh	[pc, r3, lsl #1]
 800128c:	00560042 	.word	0x00560042
 8001290:	00b800a1 	.word	0x00b800a1
 8001294:	00db00c8 	.word	0x00db00c8
 8001298:	001d0011 	.word	0x001d0011
 800129c:	001d001d 	.word	0x001d001d
 80012a0:	001d001d 	.word	0x001d001d
 80012a4:	00e5001d 	.word	0x00e5001d
 80012a8:	010100f4 	.word	0x010100f4
 80012ac:	001f      	.short	0x001f
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 80012ae:	4b8e      	ldr	r3, [pc, #568]	; (80014e8 <TSK_MediumFrequencyTaskM1+0x288>)
 80012b0:	498e      	ldr	r1, [pc, #568]	; (80014ec <TSK_MediumFrequencyTaskM1+0x28c>)
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	f006 fe34 	bl	8007f20 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 80012b8:	488c      	ldr	r0, [pc, #560]	; (80014ec <TSK_MediumFrequencyTaskM1+0x28c>)
 80012ba:	f007 fba7 	bl	8008a0c <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 80012be:	4889      	ldr	r0, [pc, #548]	; (80014e4 <TSK_MediumFrequencyTaskM1+0x284>)
 80012c0:	2100      	movs	r1, #0
 80012c2:	f006 ff0d 	bl	80080e0 <STM_NextState>
}
 80012c6:	b003      	add	sp, #12
 80012c8:	bd30      	pop	{r4, r5, pc}
      if( ! RUC_Exec( &RevUpControlM1 ) )
 80012ca:	4889      	ldr	r0, [pc, #548]	; (80014f0 <TSK_MediumFrequencyTaskM1+0x290>)
 80012cc:	f006 fd5a 	bl	8007d84 <RUC_Exec>
 80012d0:	2800      	cmp	r0, #0
 80012d2:	f000 80fd 	beq.w	80014d0 <TSK_MediumFrequencyTaskM1+0x270>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 80012d6:	4885      	ldr	r0, [pc, #532]	; (80014ec <TSK_MediumFrequencyTaskM1+0x28c>)
 80012d8:	a901      	add	r1, sp, #4
 80012da:	f007 fbfd 	bl	8008ad8 <VSS_CalcAvrgMecSpeedUnit>
 80012de:	4604      	mov	r4, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 80012e0:	4882      	ldr	r0, [pc, #520]	; (80014ec <TSK_MediumFrequencyTaskM1+0x28c>)
 80012e2:	f007 fca7 	bl	8008c34 <VSS_TransitionEnded>
        if ( LoopClosed == true )
 80012e6:	b90c      	cbnz	r4, 80012ec <TSK_MediumFrequencyTaskM1+0x8c>
 80012e8:	2800      	cmp	r0, #0
 80012ea:	d0ec      	beq.n	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80012ec:	4a81      	ldr	r2, [pc, #516]	; (80014f4 <TSK_MediumFrequencyTaskM1+0x294>)
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 80012ee:	4b82      	ldr	r3, [pc, #520]	; (80014f8 <TSK_MediumFrequencyTaskM1+0x298>)
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80012f0:	6814      	ldr	r4, [r2, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 80012f2:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 80012f6:	4620      	mov	r0, r4
 80012f8:	f005 fa80 	bl	80067fc <PID_GetKIDivisor>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80012fc:	fb05 f100 	mul.w	r1, r5, r0
 8001300:	4620      	mov	r0, r4
 8001302:	f005 fa77 	bl	80067f4 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 8001306:	2105      	movs	r1, #5
 8001308:	4876      	ldr	r0, [pc, #472]	; (80014e4 <TSK_MediumFrequencyTaskM1+0x284>)
 800130a:	f006 fee9 	bl	80080e0 <STM_NextState>
    break;
 800130e:	e7da      	b.n	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 8001310:	4b7a      	ldr	r3, [pc, #488]	; (80014fc <TSK_MediumFrequencyTaskM1+0x29c>)
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	f7ff fce2 	bl	8000cdc <MCI_GetImposedMotorDirection>
 8001318:	4601      	mov	r1, r0
 800131a:	4875      	ldr	r0, [pc, #468]	; (80014f0 <TSK_MediumFrequencyTaskM1+0x290>)
 800131c:	f006 fcee 	bl	8007cfc <RUC_Clear>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8001320:	4b77      	ldr	r3, [pc, #476]	; (8001500 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001322:	6818      	ldr	r0, [r3, #0]
 8001324:	f005 fe6e 	bl	8007004 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001328:	2014      	movs	r0, #20
 800132a:	f7ff ff79 	bl	8001220 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 800132e:	2110      	movs	r1, #16
 8001330:	486c      	ldr	r0, [pc, #432]	; (80014e4 <TSK_MediumFrequencyTaskM1+0x284>)
 8001332:	f006 fed5 	bl	80080e0 <STM_NextState>
    break;
 8001336:	e7c6      	b.n	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8001338:	486d      	ldr	r0, [pc, #436]	; (80014f0 <TSK_MediumFrequencyTaskM1+0x290>)
 800133a:	f006 fd23 	bl	8007d84 <RUC_Exec>
 800133e:	2800      	cmp	r0, #0
 8001340:	f000 80c0 	beq.w	80014c4 <TSK_MediumFrequencyTaskM1+0x264>
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8001344:	4b68      	ldr	r3, [pc, #416]	; (80014e8 <TSK_MediumFrequencyTaskM1+0x288>)
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	f006 fe56 	bl	8007ff8 <STC_CalcTorqueReference>
        IqdRef.d = FOCVars[M1].UserIdref;
 800134c:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <TSK_MediumFrequencyTaskM1+0x298>)
 800134e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 8001352:	8218      	strh	r0, [r3, #16]
 8001354:	825a      	strh	r2, [r3, #18]
      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 8001356:	4865      	ldr	r0, [pc, #404]	; (80014ec <TSK_MediumFrequencyTaskM1+0x28c>)
 8001358:	f10d 0102 	add.w	r1, sp, #2
 800135c:	f007 fbbc 	bl	8008ad8 <VSS_CalcAvrgMecSpeedUnit>
      if (RUC_FirstAccelerationStageReached(&RevUpControlM1) == true)
 8001360:	4863      	ldr	r0, [pc, #396]	; (80014f0 <TSK_MediumFrequencyTaskM1+0x290>)
 8001362:	f006 fd45 	bl	8007df0 <RUC_FirstAccelerationStageReached>
 8001366:	2800      	cmp	r0, #0
 8001368:	d0ad      	beq.n	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 800136a:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 800136e:	485b      	ldr	r0, [pc, #364]	; (80014dc <TSK_MediumFrequencyTaskM1+0x27c>)
 8001370:	f007 f962 	bl	8008638 <STO_PLL_IsObserverConverged>
 8001374:	4604      	mov	r4, r0
        STO_SetDirection(&STO_PLL_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 8001376:	4863      	ldr	r0, [pc, #396]	; (8001504 <TSK_MediumFrequencyTaskM1+0x2a4>)
 8001378:	f7ff fcb0 	bl	8000cdc <MCI_GetImposedMotorDirection>
 800137c:	b2c1      	uxtb	r1, r0
 800137e:	4857      	ldr	r0, [pc, #348]	; (80014dc <TSK_MediumFrequencyTaskM1+0x27c>)
 8001380:	f007 fa1c 	bl	80087bc <STO_SetDirection>
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 8001384:	4859      	ldr	r0, [pc, #356]	; (80014ec <TSK_MediumFrequencyTaskM1+0x28c>)
 8001386:	4621      	mov	r1, r4
 8001388:	f007 fc46 	bl	8008c18 <VSS_SetStartTransition>
      if ( ObserverConverged )
 800138c:	2c00      	cmp	r4, #0
 800138e:	d09a      	beq.n	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8001390:	4852      	ldr	r0, [pc, #328]	; (80014dc <TSK_MediumFrequencyTaskM1+0x27c>)
 8001392:	4d59      	ldr	r5, [pc, #356]	; (80014f8 <TSK_MediumFrequencyTaskM1+0x298>)
        REMNG_Init( pREMNG[M1] );
 8001394:	4c5c      	ldr	r4, [pc, #368]	; (8001508 <TSK_MediumFrequencyTaskM1+0x2a8>)
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8001396:	f006 fd61 	bl	8007e5c <SPD_GetElAngle>
 800139a:	4601      	mov	r1, r0
 800139c:	6868      	ldr	r0, [r5, #4]
 800139e:	f7ff fd85 	bl	8000eac <MCM_Park>
 80013a2:	4603      	mov	r3, r0
        REMNG_Init( pREMNG[M1] );
 80013a4:	6820      	ldr	r0, [r4, #0]
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80013a6:	9301      	str	r3, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 80013a8:	f006 fbe6 	bl	8007b78 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 80013ac:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 80013b0:	6820      	ldr	r0, [r4, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f006 fc26 	bl	8007c04 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 80013b8:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 80013bc:	6820      	ldr	r0, [r4, #0]
 80013be:	2219      	movs	r2, #25
 80013c0:	f006 fc20 	bl	8007c04 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 80013c4:	2113      	movs	r1, #19
 80013c6:	4847      	ldr	r0, [pc, #284]	; (80014e4 <TSK_MediumFrequencyTaskM1+0x284>)
 80013c8:	f006 fe8a 	bl	80080e0 <STM_NextState>
    break;
 80013cc:	e77b      	b.n	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 80013ce:	4c46      	ldr	r4, [pc, #280]	; (80014e8 <TSK_MediumFrequencyTaskM1+0x288>)
 80013d0:	4942      	ldr	r1, [pc, #264]	; (80014dc <TSK_MediumFrequencyTaskM1+0x27c>)
 80013d2:	6820      	ldr	r0, [r4, #0]
 80013d4:	f006 fda4 	bl	8007f20 <STC_SetSpeedSensor>
	  FOC_InitAdditionalMethods(M1);
 80013d8:	2000      	movs	r0, #0
 80013da:	f7ff ff09 	bl	80011f0 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 80013de:	2000      	movs	r0, #0
 80013e0:	f7ff ff08 	bl	80011f4 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 80013e4:	2106      	movs	r1, #6
 80013e6:	483f      	ldr	r0, [pc, #252]	; (80014e4 <TSK_MediumFrequencyTaskM1+0x284>)
 80013e8:	f006 fe7a 	bl	80080e0 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 80013ec:	6820      	ldr	r0, [r4, #0]
 80013ee:	f006 fe4d 	bl	800808c <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 80013f2:	4b42      	ldr	r3, [pc, #264]	; (80014fc <TSK_MediumFrequencyTaskM1+0x29c>)
 80013f4:	6818      	ldr	r0, [r3, #0]
 80013f6:	f7ff fc2f 	bl	8000c58 <MCI_ExecBufferedCommands>
    break;
 80013fa:	e764      	b.n	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 80013fc:	4b3f      	ldr	r3, [pc, #252]	; (80014fc <TSK_MediumFrequencyTaskM1+0x29c>)
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	f7ff fc2a 	bl	8000c58 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001404:	2000      	movs	r0, #0
 8001406:	f7ff fef5 	bl	80011f4 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 800140a:	2c00      	cmp	r4, #0
 800140c:	f47f af5b 	bne.w	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8001410:	4622      	mov	r2, r4
 8001412:	2120      	movs	r1, #32
 8001414:	4833      	ldr	r0, [pc, #204]	; (80014e4 <TSK_MediumFrequencyTaskM1+0x284>)
 8001416:	f006 fe47 	bl	80080a8 <STM_FaultProcessing>
 800141a:	e754      	b.n	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 800141c:	4b38      	ldr	r3, [pc, #224]	; (8001500 <TSK_MediumFrequencyTaskM1+0x2a0>)
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	f005 fe66 	bl	80070f0 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 8001424:	2000      	movs	r0, #0
 8001426:	f7ff fda5 	bl	8000f74 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 800142a:	6828      	ldr	r0, [r5, #0]
 800142c:	f005 f948 	bl	80066c0 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8001430:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001434:	f7ff ff04 	bl	8001240 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8001438:	2108      	movs	r1, #8
 800143a:	482a      	ldr	r0, [pc, #168]	; (80014e4 <TSK_MediumFrequencyTaskM1+0x284>)
 800143c:	f006 fe50 	bl	80080e0 <STM_NextState>
    break;
 8001440:	e741      	b.n	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001442:	f7ff ff03 	bl	800124c <TSK_StopPermanencyTimeHasElapsedM1>
 8001446:	2800      	cmp	r0, #0
 8001448:	f43f af3d 	beq.w	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
      STM_NextState( &STM[M1], STOP_IDLE );
 800144c:	2109      	movs	r1, #9
 800144e:	4825      	ldr	r0, [pc, #148]	; (80014e4 <TSK_MediumFrequencyTaskM1+0x284>)
 8001450:	f006 fe46 	bl	80080e0 <STM_NextState>
 8001454:	e737      	b.n	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001456:	f7ff fee9 	bl	800122c <TSK_ChargeBootCapDelayHasElapsedM1>
 800145a:	2800      	cmp	r0, #0
 800145c:	f43f af33 	beq.w	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001462:	2100      	movs	r1, #0
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	f005 fbe7 	bl	8006c38 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 800146a:	2111      	movs	r1, #17
 800146c:	481d      	ldr	r0, [pc, #116]	; (80014e4 <TSK_MediumFrequencyTaskM1+0x284>)
 800146e:	f006 fe37 	bl	80080e0 <STM_NextState>
 8001472:	e728      	b.n	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001476:	2101      	movs	r1, #1
 8001478:	6818      	ldr	r0, [r3, #0]
 800147a:	f005 fbdd 	bl	8006c38 <PWMC_CurrentReadingCalibr>
 800147e:	2800      	cmp	r0, #0
 8001480:	f43f af21 	beq.w	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
      STM_NextState( &STM[M1], CLEAR );
 8001484:	2112      	movs	r1, #18
 8001486:	4817      	ldr	r0, [pc, #92]	; (80014e4 <TSK_MediumFrequencyTaskM1+0x284>)
 8001488:	f006 fe2a 	bl	80080e0 <STM_NextState>
 800148c:	e71b      	b.n	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800148e:	4a16      	ldr	r2, [pc, #88]	; (80014e8 <TSK_MediumFrequencyTaskM1+0x288>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <TSK_MediumFrequencyTaskM1+0x298>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001492:	6810      	ldr	r0, [r2, #0]
 8001494:	4915      	ldr	r1, [pc, #84]	; (80014ec <TSK_MediumFrequencyTaskM1+0x28c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800149c:	f006 fd40 	bl	8007f20 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 80014a0:	480e      	ldr	r0, [pc, #56]	; (80014dc <TSK_MediumFrequencyTaskM1+0x27c>)
 80014a2:	f007 f869 	bl	8008578 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 80014a6:	480f      	ldr	r0, [pc, #60]	; (80014e4 <TSK_MediumFrequencyTaskM1+0x284>)
 80014a8:	2104      	movs	r1, #4
 80014aa:	f006 fe19 	bl	80080e0 <STM_NextState>
 80014ae:	2800      	cmp	r0, #0
 80014b0:	f43f af09 	beq.w	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
      FOC_Clear( M1 );
 80014b4:	2000      	movs	r0, #0
 80014b6:	f7ff fd5d 	bl	8000f74 <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <TSK_MediumFrequencyTaskM1+0x2a0>)
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	f005 fdcb 	bl	8007058 <R3_2_SwitchOnPWM>
 80014c2:	e700      	b.n	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 80014c4:	4602      	mov	r2, r0
 80014c6:	2110      	movs	r1, #16
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <TSK_MediumFrequencyTaskM1+0x284>)
 80014ca:	f006 fded 	bl	80080a8 <STM_FaultProcessing>
 80014ce:	e742      	b.n	8001356 <TSK_MediumFrequencyTaskM1+0xf6>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 80014d0:	4602      	mov	r2, r0
 80014d2:	2110      	movs	r1, #16
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <TSK_MediumFrequencyTaskM1+0x284>)
 80014d6:	f006 fde7 	bl	80080a8 <STM_FaultProcessing>
 80014da:	e6f4      	b.n	80012c6 <TSK_MediumFrequencyTaskM1+0x66>
 80014dc:	200003d0 	.word	0x200003d0
 80014e0:	200009d8 	.word	0x200009d8
 80014e4:	200009bc 	.word	0x200009bc
 80014e8:	200009ec 	.word	0x200009ec
 80014ec:	20000584 	.word	0x20000584
 80014f0:	20000344 	.word	0x20000344
 80014f4:	200009e4 	.word	0x200009e4
 80014f8:	20000924 	.word	0x20000924
 80014fc:	200009cc 	.word	0x200009cc
 8001500:	200009f4 	.word	0x200009f4
 8001504:	200009a0 	.word	0x200009a0
 8001508:	200009e8 	.word	0x200009e8

0800150c <MC_Scheduler>:
{
 800150c:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MC_Scheduler+0x48>)
 8001510:	781c      	ldrb	r4, [r3, #0]
 8001512:	2c01      	cmp	r4, #1
 8001514:	d000      	beq.n	8001518 <MC_Scheduler+0xc>
}
 8001516:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8001518:	4d0f      	ldr	r5, [pc, #60]	; (8001558 <MC_Scheduler+0x4c>)
 800151a:	882b      	ldrh	r3, [r5, #0]
 800151c:	b29b      	uxth	r3, r3
 800151e:	b1ab      	cbz	r3, 800154c <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 8001520:	882b      	ldrh	r3, [r5, #0]
 8001522:	3b01      	subs	r3, #1
 8001524:	b29b      	uxth	r3, r3
 8001526:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001528:	4a0c      	ldr	r2, [pc, #48]	; (800155c <MC_Scheduler+0x50>)
 800152a:	8813      	ldrh	r3, [r2, #0]
 800152c:	b29b      	uxth	r3, r3
 800152e:	b11b      	cbz	r3, 8001538 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8001530:	8813      	ldrh	r3, [r2, #0]
 8001532:	3b01      	subs	r3, #1
 8001534:	b29b      	uxth	r3, r3
 8001536:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001538:	4a09      	ldr	r2, [pc, #36]	; (8001560 <MC_Scheduler+0x54>)
 800153a:	8813      	ldrh	r3, [r2, #0]
 800153c:	b29b      	uxth	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0e9      	beq.n	8001516 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001542:	8813      	ldrh	r3, [r2, #0]
 8001544:	3b01      	subs	r3, #1
 8001546:	b29b      	uxth	r3, r3
 8001548:	8013      	strh	r3, [r2, #0]
}
 800154a:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 800154c:	f7ff fe88 	bl	8001260 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001550:	802c      	strh	r4, [r5, #0]
 8001552:	e7e9      	b.n	8001528 <MC_Scheduler+0x1c>
 8001554:	200009c2 	.word	0x200009c2
 8001558:	200009c6 	.word	0x200009c6
 800155c:	200009c4 	.word	0x200009c4
 8001560:	200009c8 	.word	0x200009c8

08001564 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if ( STM[M1].bState == SWITCH_OVER )
 8001568:	4b55      	ldr	r3, [pc, #340]	; (80016c0 <TSK_HighFrequencyTask+0x15c>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800156a:	4c56      	ldr	r4, [pc, #344]	; (80016c4 <TSK_HighFrequencyTask+0x160>)
  if ( STM[M1].bState == SWITCH_OVER )
 800156c:	781b      	ldrb	r3, [r3, #0]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800156e:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8001572:	b088      	sub	sp, #32
  if ( STM[M1].bState == SWITCH_OVER )
 8001574:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001576:	9005      	str	r0, [sp, #20]
  if ( STM[M1].bState == SWITCH_OVER )
 8001578:	f000 8095 	beq.w	80016a6 <TSK_HighFrequencyTask+0x142>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 800157c:	4b52      	ldr	r3, [pc, #328]	; (80016c8 <TSK_HighFrequencyTask+0x164>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800157e:	4f53      	ldr	r7, [pc, #332]	; (80016cc <TSK_HighFrequencyTask+0x168>)
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001580:	6818      	ldr	r0, [r3, #0]
 8001582:	f006 fccf 	bl	8007f24 <STC_GetSpeedSensor>
 8001586:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001588:	f006 fc68 	bl	8007e5c <SPD_GetElAngle>
 800158c:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 800158e:	4628      	mov	r0, r5
 8001590:	f006 fc6c 	bl	8007e6c <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001594:	a902      	add	r1, sp, #8
 8001596:	6838      	ldr	r0, [r7, #0]
 8001598:	f005 fa14 	bl	80069c4 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 800159c:	f000 fff8 	bl	8002590 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 80015a0:	f000 ffa0 	bl	80024e4 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 80015a4:	9802      	ldr	r0, [sp, #8]
 80015a6:	f7ff fc3f 	bl	8000e28 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80015aa:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 80015ac:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80015ae:	f7ff fc7d 	bl	8000eac <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80015b2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80015b6:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80015b8:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 80015ba:	1ac9      	subs	r1, r1, r3
 80015bc:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <TSK_HighFrequencyTask+0x16c>)
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	f005 f924 	bl	800680c <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80015c4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80015c8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 80015cc:	1ac9      	subs	r1, r1, r3
 80015ce:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <TSK_HighFrequencyTask+0x170>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 80015d0:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	f005 f91a 	bl	800680c <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80015d8:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <TSK_HighFrequencyTask+0x174>)
 80015da:	f8ad 8004 	strh.w	r8, [sp, #4]
 80015de:	f8ad 0006 	strh.w	r0, [sp, #6]
 80015e2:	9901      	ldr	r1, [sp, #4]
 80015e4:	6818      	ldr	r0, [r3, #0]
 80015e6:	f004 ffff 	bl	80065e8 <Circle_Limitation>
 80015ea:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80015ec:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80015ee:	fa0f f883 	sxth.w	r8, r3
 80015f2:	141d      	asrs	r5, r3, #16
 80015f4:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80015f6:	f006 fc39 	bl	8007e6c <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80015fa:	4631      	mov	r1, r6
 80015fc:	9801      	ldr	r0, [sp, #4]
 80015fe:	f7ff fc99 	bl	8000f34 <MCM_Rev_Park>
 8001602:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001604:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001606:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001608:	f005 f9de 	bl	80069c8 <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 800160c:	9b02      	ldr	r3, [sp, #8]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800160e:	9a03      	ldr	r2, [sp, #12]
  FOCVars[M1].Iab = Iab;
 8001610:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001612:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 8001614:	9b00      	ldr	r3, [sp, #0]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001616:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 8001618:	f8a4 8016 	strh.w	r8, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 800161c:	2901      	cmp	r1, #1
  FOCVars[M1].Vqd = Vqd;
 800161e:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001620:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001622:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001624:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8001628:	8426      	strh	r6, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 800162a:	d034      	beq.n	8001696 <TSK_HighFrequencyTask+0x132>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 800162c:	482b      	ldr	r0, [pc, #172]	; (80016dc <TSK_HighFrequencyTask+0x178>)
 800162e:	f006 fbdf 	bl	8007df0 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001632:	492b      	ldr	r1, [pc, #172]	; (80016e0 <TSK_HighFrequencyTask+0x17c>)
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8001634:	6862      	ldr	r2, [r4, #4]
 8001636:	9206      	str	r2, [sp, #24]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001638:	4603      	mov	r3, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800163a:	6808      	ldr	r0, [r1, #0]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 800163c:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800163e:	f004 ffcb 	bl	80065d8 <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001642:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001644:	4603      	mov	r3, r0
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001646:	4827      	ldr	r0, [pc, #156]	; (80016e4 <TSK_HighFrequencyTask+0x180>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001648:	f8ad 301c 	strh.w	r3, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 800164c:	f006 fdd0 	bl	80081f0 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8001650:	4824      	ldr	r0, [pc, #144]	; (80016e4 <TSK_HighFrequencyTask+0x180>)
 8001652:	f006 ff5f 	bl	8008514 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 8001656:	b164      	cbz	r4, 8001672 <TSK_HighFrequencyTask+0x10e>
    hState = STM_GetState(&STM[M1]);
 8001658:	4819      	ldr	r0, [pc, #100]	; (80016c0 <TSK_HighFrequencyTask+0x15c>)
 800165a:	f006 fdb5 	bl	80081c8 <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 800165e:	1f03      	subs	r3, r0, #4
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b01      	cmp	r3, #1
 8001664:	d909      	bls.n	800167a <TSK_HighFrequencyTask+0x116>
 8001666:	2813      	cmp	r0, #19
 8001668:	d007      	beq.n	800167a <TSK_HighFrequencyTask+0x116>
}
 800166a:	2000      	movs	r0, #0
 800166c:	b008      	add	sp, #32
 800166e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8001672:	481c      	ldr	r0, [pc, #112]	; (80016e4 <TSK_HighFrequencyTask+0x180>)
 8001674:	f007 f886 	bl	8008784 <STO_ResetPLL>
 8001678:	e7ee      	b.n	8001658 <TSK_HighFrequencyTask+0xf4>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 800167a:	481a      	ldr	r0, [pc, #104]	; (80016e4 <TSK_HighFrequencyTask+0x180>)
 800167c:	f006 fbee 	bl	8007e5c <SPD_GetElAngle>
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8001680:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001682:	4603      	mov	r3, r0
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8001684:	4818      	ldr	r0, [pc, #96]	; (80016e8 <TSK_HighFrequencyTask+0x184>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001686:	f8ad 3010 	strh.w	r3, [sp, #16]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 800168a:	f007 f9d1 	bl	8008a30 <VSS_CalcElAngle>
}
 800168e:	2000      	movs	r0, #0
 8001690:	b008      	add	sp, #32
 8001692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	4809      	ldr	r0, [pc, #36]	; (80016c0 <TSK_HighFrequencyTask+0x15c>)
 800169a:	f006 fd05 	bl	80080a8 <STM_FaultProcessing>
}
 800169e:	2000      	movs	r0, #0
 80016a0:	b008      	add	sp, #32
 80016a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 80016a6:	4d11      	ldr	r5, [pc, #68]	; (80016ec <TSK_HighFrequencyTask+0x188>)
 80016a8:	6828      	ldr	r0, [r5, #0]
 80016aa:	f006 fa8f 	bl	8007bcc <REMNG_RampCompleted>
 80016ae:	2800      	cmp	r0, #0
 80016b0:	f47f af64 	bne.w	800157c <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 80016b4:	6828      	ldr	r0, [r5, #0]
 80016b6:	f006 fa67 	bl	8007b88 <REMNG_Calc>
 80016ba:	8220      	strh	r0, [r4, #16]
 80016bc:	e75e      	b.n	800157c <TSK_HighFrequencyTask+0x18>
 80016be:	bf00      	nop
 80016c0:	200009bc 	.word	0x200009bc
 80016c4:	20000924 	.word	0x20000924
 80016c8:	200009ec 	.word	0x200009ec
 80016cc:	200009f4 	.word	0x200009f4
 80016d0:	200009e0 	.word	0x200009e0
 80016d4:	200009dc 	.word	0x200009dc
 80016d8:	200009d4 	.word	0x200009d4
 80016dc:	20000344 	.word	0x20000344
 80016e0:	200009d0 	.word	0x200009d0
 80016e4:	200003d0 	.word	0x200003d0
 80016e8:	20000584 	.word	0x20000584
 80016ec:	200009e8 	.word	0x200009e8

080016f0 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80016f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80016f4:	4e20      	ldr	r6, [pc, #128]	; (8001778 <TSK_SafetyTask_PWMOFF+0x88>)
{
 80016f6:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80016f8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80016fc:	f005 f834 	bl	8006768 <NTC_CalcAvTemp>
 8001700:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001702:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001706:	f005 fac1 	bl	8006c8c <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800170a:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800170e:	4328      	orrs	r0, r5
 8001710:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8001712:	b334      	cbz	r4, 8001762 <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001714:	4f19      	ldr	r7, [pc, #100]	; (800177c <TSK_SafetyTask_PWMOFF+0x8c>)
 8001716:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800171a:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 800171e:	43ea      	mvns	r2, r5
 8001720:	b292      	uxth	r2, r2
 8001722:	4629      	mov	r1, r5
 8001724:	4638      	mov	r0, r7
 8001726:	f006 fcbf 	bl	80080a8 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 800172a:	4638      	mov	r0, r7
 800172c:	f006 fd4c 	bl	80081c8 <STM_GetState>
 8001730:	280a      	cmp	r0, #10
 8001732:	d002      	beq.n	800173a <TSK_SafetyTask_PWMOFF+0x4a>
 8001734:	280b      	cmp	r0, #11
 8001736:	d00e      	beq.n	8001756 <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800173a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800173e:	f005 fa79 	bl	8006c34 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001742:	4620      	mov	r0, r4
 8001744:	f7ff fc16 	bl	8000f74 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <TSK_SafetyTask_PWMOFF+0x90>)
 800174a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 800174e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001752:	f004 bfb5 	b.w	80066c0 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001756:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 800175a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800175e:	f005 ba69 	b.w	8006c34 <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <TSK_SafetyTask_PWMOFF+0x94>)
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	f006 f9d1 	bl	8007b0c <RVBS_CalcAvVbus>
 800176a:	f000 000e 	and.w	r0, r0, #14
 800176e:	4305      	orrs	r5, r0
 8001770:	e7d0      	b.n	8001714 <TSK_SafetyTask_PWMOFF+0x24>
 8001772:	bf00      	nop
 8001774:	200009f0 	.word	0x200009f0
 8001778:	200009f4 	.word	0x200009f4
 800177c:	200009bc 	.word	0x200009bc
 8001780:	200009d8 	.word	0x200009d8
 8001784:	200009d0 	.word	0x200009d0

08001788 <TSK_SafetyTask>:
{
 8001788:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <TSK_SafetyTask+0x1c>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d000      	beq.n	8001794 <TSK_SafetyTask+0xc>
}
 8001792:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001794:	2000      	movs	r0, #0
 8001796:	f7ff ffab 	bl	80016f0 <TSK_SafetyTask_PWMOFF>
}
 800179a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 800179e:	f000 be71 	b.w	8002484 <RCM_ExecUserConv>
 80017a2:	bf00      	nop
 80017a4:	200009c2 	.word	0x200009c2

080017a8 <MC_RunMotorControlTasks>:
{
 80017a8:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MC_RunMotorControlTasks+0x1c>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b903      	cbnz	r3, 80017b2 <MC_RunMotorControlTasks+0xa>
}
 80017b0:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 80017b2:	f7ff feab 	bl	800150c <MC_Scheduler>
    TSK_SafetyTask();
 80017b6:	f7ff ffe7 	bl	8001788 <TSK_SafetyTask>
}
 80017ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 80017be:	f001 ba2b 	b.w	8002c18 <UI_Scheduler>
 80017c2:	bf00      	nop
 80017c4:	200009c2 	.word	0x200009c2

080017c8 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80017c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <TSK_HardwareFaultTask+0x18>)
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	f005 fc8f 	bl	80070f0 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80017d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 80017d6:	4803      	ldr	r0, [pc, #12]	; (80017e4 <TSK_HardwareFaultTask+0x1c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	2180      	movs	r1, #128	; 0x80
 80017dc:	f006 bc64 	b.w	80080a8 <STM_FaultProcessing>
 80017e0:	200009f4 	.word	0x200009f4
 80017e4:	200009bc 	.word	0x200009bc

080017e8 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 80017e8:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017ea:	4a39      	ldr	r2, [pc, #228]	; (80018d0 <mc_lock_pins+0xe8>)
 80017ec:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <mc_lock_pins+0xec>)
 80017ee:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017f0:	2120      	movs	r1, #32
 80017f2:	61d1      	str	r1, [r2, #28]
 80017f4:	b08c      	sub	sp, #48	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017f6:	61d3      	str	r3, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 80017f8:	69d3      	ldr	r3, [r2, #28]
 80017fa:	930b      	str	r3, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017fc:	2110      	movs	r1, #16
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017fe:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <mc_lock_pins+0xf0>)
  (void) temp;
 8001800:	980b      	ldr	r0, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001802:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001804:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001806:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001808:	69d2      	ldr	r2, [r2, #28]
 800180a:	920a      	str	r2, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800180c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001810:	4a32      	ldr	r2, [pc, #200]	; (80018dc <mc_lock_pins+0xf4>)
  (void) temp;
 8001812:	980a      	ldr	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001814:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001816:	2180      	movs	r1, #128	; 0x80
 8001818:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800181a:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800181c:	69da      	ldr	r2, [r3, #28]
 800181e:	9209      	str	r2, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001820:	f44f 7180 	mov.w	r1, #256	; 0x100
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001824:	4a2e      	ldr	r2, [pc, #184]	; (80018e0 <mc_lock_pins+0xf8>)
  (void) temp;
 8001826:	9809      	ldr	r0, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001828:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800182a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800182c:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800182e:	69da      	ldr	r2, [r3, #28]
 8001830:	9208      	str	r2, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001832:	f44f 7100 	mov.w	r1, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001836:	f44f 3281 	mov.w	r2, #66048	; 0x10200
  (void) temp;
 800183a:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800183c:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800183e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001840:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001842:	69da      	ldr	r2, [r3, #28]
 8001844:	9207      	str	r2, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001846:	f44f 3184 	mov.w	r1, #67584	; 0x10800
  WRITE_REG(GPIOx->LCKR, PinMask);
 800184a:	f44f 6000 	mov.w	r0, #2048	; 0x800
  (void) temp;
 800184e:	9a07      	ldr	r2, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001850:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001852:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001854:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001856:	69da      	ldr	r2, [r3, #28]
 8001858:	9206      	str	r2, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800185a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800185e:	f44f 3282 	mov.w	r2, #66560	; 0x10400
  (void) temp;
 8001862:	9d06      	ldr	r5, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001864:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001866:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001868:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800186a:	69dc      	ldr	r4, [r3, #28]
 800186c:	9405      	str	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800186e:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <mc_lock_pins+0xfc>)
  (void) temp;
 8001870:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001872:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001876:	f44f 34a0 	mov.w	r4, #81920	; 0x14000
 800187a:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800187c:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800187e:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001880:	69d4      	ldr	r4, [r2, #28]
 8001882:	9404      	str	r4, [sp, #16]
  (void) temp;
 8001884:	9d04      	ldr	r5, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001886:	f44f 3490 	mov.w	r4, #73728	; 0x12000
  WRITE_REG(GPIOx->LCKR, PinMask);
 800188a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800188e:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001890:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001892:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001894:	69d4      	ldr	r4, [r2, #28]
 8001896:	9403      	str	r4, [sp, #12]
  (void) temp;
 8001898:	9d03      	ldr	r5, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800189a:	f44f 34c0 	mov.w	r4, #98304	; 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 800189e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018a2:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018a4:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018a6:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018a8:	69d4      	ldr	r4, [r2, #28]
 80018aa:	9402      	str	r4, [sp, #8]
  (void) temp;
 80018ac:	9d02      	ldr	r5, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ae:	4c0e      	ldr	r4, [pc, #56]	; (80018e8 <mc_lock_pins+0x100>)
 80018b0:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018b2:	2502      	movs	r5, #2
 80018b4:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018b6:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	9301      	str	r3, [sp, #4]
  (void) temp;
 80018bc:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018be:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018c0:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018c2:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018c4:	69d3      	ldr	r3, [r2, #28]
 80018c6:	9300      	str	r3, [sp, #0]
  (void) temp;
 80018c8:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_EN_V_GPIO_Port, M1_PWM_EN_V_Pin);
LL_GPIO_LockPin(M1_PWM_EN_U_GPIO_Port, M1_PWM_EN_U_Pin);
LL_GPIO_LockPin(M1_PWM_EN_W_GPIO_Port, M1_PWM_EN_W_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
}
 80018ca:	b00c      	add	sp, #48	; 0x30
 80018cc:	bc30      	pop	{r4, r5}
 80018ce:	4770      	bx	lr
 80018d0:	48000800 	.word	0x48000800
 80018d4:	00010020 	.word	0x00010020
 80018d8:	00010010 	.word	0x00010010
 80018dc:	00010080 	.word	0x00010080
 80018e0:	00010100 	.word	0x00010100
 80018e4:	48000400 	.word	0x48000400
 80018e8:	00010002 	.word	0x00010002

080018ec <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 80018ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018f0:	b08e      	sub	sp, #56	; 0x38
 80018f2:	4616      	mov	r6, r2
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 80018f4:	2700      	movs	r7, #0
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 80018f6:	094a      	lsrs	r2, r1, #5
{
 80018f8:	460c      	mov	r4, r1
 80018fa:	4605      	mov	r5, r0
 80018fc:	4698      	mov	r8, r3
  bool bNoError = false; // Default is error
 80018fe:	f88d 7011 	strb.w	r7, [sp, #17]
  if (bMotorSelection != 0)
 8001902:	d123      	bne.n	800194c <MCP_ReceivedFrame+0x60>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8001904:	2912      	cmp	r1, #18
 8001906:	d814      	bhi.n	8001932 <MCP_ReceivedFrame+0x46>
 8001908:	e8df f011 	tbh	[pc, r1, lsl #1]
 800190c:	02100016 	.word	0x02100016
 8001910:	020400e9 	.word	0x020400e9
 8001914:	00130013 	.word	0x00130013
 8001918:	00810057 	.word	0x00810057
 800191c:	00c70096 	.word	0x00c70096
 8001920:	02b302a2 	.word	0x02b302a2
 8001924:	02ca02da 	.word	0x02ca02da
 8001928:	00130013 	.word	0x00130013
 800192c:	00130013 	.word	0x00130013
 8001930:	0016      	.short	0x0016
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001932:	2301      	movs	r3, #1
 8001934:	f88d 3016 	strb.w	r3, [sp, #22]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001938:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 800193c:	2301      	movs	r3, #1
 800193e:	f10d 0216 	add.w	r2, sp, #22
 8001942:	21ff      	movs	r1, #255	; 0xff
 8001944:	47a0      	blx	r4
    }
  }
}
 8001946:	b00e      	add	sp, #56	; 0x38
 8001948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 800194c:	3a01      	subs	r2, #1
 800194e:	4639      	mov	r1, r7
 8001950:	9203      	str	r2, [sp, #12]
 8001952:	f001 f9c1 	bl	8002cd8 <UI_SetReg>
 8001956:	b300      	cbz	r0, 800199a <MCP_ReceivedFrame+0xae>
      if (pHandle->pDAC)
 8001958:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
      Code &= 0x1F; /* Mask: 0001|1111 */
 800195c:	f004 041f 	and.w	r4, r4, #31
      if (pHandle->pDAC)
 8001960:	b118      	cbz	r0, 800196a <MCP_ReceivedFrame+0x7e>
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 8001962:	9a03      	ldr	r2, [sp, #12]
 8001964:	4639      	mov	r1, r7
 8001966:	f001 f9b7 	bl	8002cd8 <UI_SetReg>
  switch (Code)
 800196a:	2c12      	cmp	r4, #18
 800196c:	f200 82c9 	bhi.w	8001f02 <MCP_ReceivedFrame+0x616>
 8001970:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001974:	01dc0090 	.word	0x01dc0090
 8001978:	01d000b5 	.word	0x01d000b5
 800197c:	02c702c7 	.word	0x02c702c7
 8001980:	004d0023 	.word	0x004d0023
 8001984:	00930062 	.word	0x00930062
 8001988:	027f026e 	.word	0x027f026e
 800198c:	029602a6 	.word	0x029602a6
 8001990:	02c702c7 	.word	0x02c702c7
 8001994:	02c702c7 	.word	0x02c702c7
 8001998:	0090      	.short	0x0090
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 800199a:	230b      	movs	r3, #11
    if (bNoError)
 800199c:	f89d 0011 	ldrb.w	r0, [sp, #17]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80019a0:	f88d 3016 	strb.w	r3, [sp, #22]
    if (bNoError)
 80019a4:	2800      	cmp	r0, #0
 80019a6:	d0c7      	beq.n	8001938 <MCP_ReceivedFrame+0x4c>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 80019a8:	2300      	movs	r3, #0
 80019aa:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 80019ae:	461a      	mov	r2, r3
 80019b0:	21f0      	movs	r1, #240	; 0xf0
 80019b2:	47a0      	blx	r4
}
 80019b4:	b00e      	add	sp, #56	; 0x38
 80019b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        outBuff[i] = 0;
 80019ba:	ac06      	add	r4, sp, #24
 80019bc:	2100      	movs	r1, #0
 80019be:	2220      	movs	r2, #32
 80019c0:	4620      	mov	r0, r4
 80019c2:	f007 f95f 	bl	8008c84 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80019c6:	f8d5 70c0 	ldr.w	r7, [r5, #192]	; 0xc0
 80019ca:	f10d 001a 	add.w	r0, sp, #26
 80019ce:	1e79      	subs	r1, r7, #1
 80019d0:	2300      	movs	r3, #0
 80019d2:	e004      	b.n	80019de <MCP_ReceivedFrame+0xf2>
 80019d4:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 80019d6:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80019da:	f000 833e 	beq.w	800205a <MCP_ReceivedFrame+0x76e>
 80019de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80019e2:	2a09      	cmp	r2, #9
 80019e4:	b2de      	uxtb	r6, r3
 80019e6:	f103 0301 	add.w	r3, r3, #1
 80019ea:	d1f3      	bne.n	80019d4 <MCP_ReceivedFrame+0xe8>
      outBuff[0] = pHandle->s_fwVer[i+5];
 80019ec:	1d72      	adds	r2, r6, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 80019ee:	1df3      	adds	r3, r6, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 80019f0:	3609      	adds	r6, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 80019f2:	b2d2      	uxtb	r2, r2
      outBuff[1] = pHandle->s_fwVer[i+7];
 80019f4:	b2db      	uxtb	r3, r3
      outBuff[2] = pHandle->s_fwVer[i+9];
 80019f6:	b2f6      	uxtb	r6, r6
      outBuff[0] = pHandle->s_fwVer[i+5];
 80019f8:	5cba      	ldrb	r2, [r7, r2]
 80019fa:	f88d 2018 	strb.w	r2, [sp, #24]
      outBuff[1] = pHandle->s_fwVer[i+7];
 80019fe:	5cfb      	ldrb	r3, [r7, r3]
 8001a00:	f88d 3019 	strb.w	r3, [sp, #25]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001a04:	5dbb      	ldrb	r3, [r7, r6]
 8001a06:	f88d 301a 	strb.w	r3, [sp, #26]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001a0a:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8001a0c:	e270      	b.n	8001ef0 <MCP_ReceivedFrame+0x604>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001a0e:	7871      	ldrb	r1, [r6, #1]
 8001a10:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001a12:	7970      	ldrb	r0, [r6, #5]
 8001a14:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001a16:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8001a1a:	78b1      	ldrb	r1, [r6, #2]
 8001a1c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8001a20:	78f1      	ldrb	r1, [r6, #3]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001a22:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001a26:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8001a2a:	b292      	uxth	r2, r2
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	f001 fb01 	bl	8003034 <UI_ExecSpeedRamp>
 8001a32:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001a36:	e7b5      	b.n	80019a4 <MCP_ReceivedFrame+0xb8>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001a38:	f10d 0016 	add.w	r0, sp, #22
 8001a3c:	7831      	ldrb	r1, [r6, #0]
 8001a3e:	9000      	str	r0, [sp, #0]
 8001a40:	ab05      	add	r3, sp, #20
 8001a42:	f10d 0212 	add.w	r2, sp, #18
 8001a46:	4628      	mov	r0, r5
 8001a48:	f001 fb10 	bl	800306c <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001a4c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001a50:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
      outBuff[6] = (uint8_t)(Durationms);
 8001a54:	f8bd 2012 	ldrh.w	r2, [sp, #18]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001a58:	f88d 101c 	strb.w	r1, [sp, #28]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001a5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a60:	005b      	lsls	r3, r3, #1
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001a62:	1218      	asrs	r0, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 8001a64:	f88d 3018 	strb.w	r3, [sp, #24]
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001a68:	f88d 0019 	strb.w	r0, [sp, #25]
      outBuff[2] = (uint8_t)(rpm >> 16);
 8001a6c:	1418      	asrs	r0, r3, #16
      outBuff[3] = (uint8_t)(rpm >> 24);
 8001a6e:	161b      	asrs	r3, r3, #24
      outBuff[2] = (uint8_t)(rpm >> 16);
 8001a70:	f88d 001a 	strb.w	r0, [sp, #26]
      outBuff[3] = (uint8_t)(rpm >> 24);
 8001a74:	f88d 301b 	strb.w	r3, [sp, #27]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001a78:	1208      	asrs	r0, r1, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001a7a:	0a13      	lsrs	r3, r2, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001a7c:	f88d 001d 	strb.w	r0, [sp, #29]
      outBuff[6] = (uint8_t)(Durationms);
 8001a80:	f88d 201e 	strb.w	r2, [sp, #30]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001a84:	f88d 301f 	strb.w	r3, [sp, #31]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001a88:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8001a8a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	aa06      	add	r2, sp, #24
 8001a90:	21f0      	movs	r1, #240	; 0xf0
 8001a92:	47a0      	blx	r4
    if (bNoError)
 8001a94:	f89d 0011 	ldrb.w	r0, [sp, #17]
 8001a98:	e784      	b.n	80019a4 <MCP_ReceivedFrame+0xb8>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001a9a:	78b1      	ldrb	r1, [r6, #2]
 8001a9c:	7873      	ldrb	r3, [r6, #1]
 8001a9e:	78f2      	ldrb	r2, [r6, #3]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001aa0:	7970      	ldrb	r0, [r6, #5]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001aa2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8001aa6:	7931      	ldrb	r1, [r6, #4]
 8001aa8:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001aac:	4a9e      	ldr	r2, [pc, #632]	; (8001d28 <MCP_ReceivedFrame+0x43c>)
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001aae:	eb03 6301 	add.w	r3, r3, r1, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001ab2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ab6:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001aba:	7a31      	ldrb	r1, [r6, #8]
 8001abc:	79f2      	ldrb	r2, [r6, #7]
 8001abe:	eb02 2201 	add.w	r2, r2, r1, lsl #8
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001ac2:	79b1      	ldrb	r1, [r6, #6]
 8001ac4:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001ac8:	b200      	sxth	r0, r0
 8001aca:	7831      	ldrb	r1, [r6, #0]
 8001acc:	9000      	str	r0, [sp, #0]
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	b292      	uxth	r2, r2
 8001ad2:	4628      	mov	r0, r5
 8001ad4:	f001 fae8 	bl	80030a8 <UI_SetRevupData>
 8001ad8:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001adc:	e762      	b.n	80019a4 <MCP_ReceivedFrame+0xb8>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001ade:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	f88d 3016 	strb.w	r3, [sp, #22]
      switch (bRegID)
 8001ae6:	2988      	cmp	r1, #136	; 0x88
 8001ae8:	d8d4      	bhi.n	8001a94 <MCP_ReceivedFrame+0x1a8>
 8001aea:	a301      	add	r3, pc, #4	; (adr r3, 8001af0 <MCP_ReceivedFrame+0x204>)
 8001aec:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8001af0:	08001f97 	.word	0x08001f97
 8001af4:	08001f53 	.word	0x08001f53
 8001af8:	08001f97 	.word	0x08001f97
 8001afc:	08001f97 	.word	0x08001f97
 8001b00:	08001f53 	.word	0x08001f53
 8001b04:	08001f0f 	.word	0x08001f0f
 8001b08:	08001f0f 	.word	0x08001f0f
 8001b0c:	08001f0f 	.word	0x08001f0f
 8001b10:	08001f0f 	.word	0x08001f0f
 8001b14:	08001f0f 	.word	0x08001f0f
 8001b18:	08001f0f 	.word	0x08001f0f
 8001b1c:	08001f0f 	.word	0x08001f0f
 8001b20:	08001f0f 	.word	0x08001f0f
 8001b24:	08001f0f 	.word	0x08001f0f
 8001b28:	08001f0f 	.word	0x08001f0f
 8001b2c:	08001f0f 	.word	0x08001f0f
 8001b30:	08001f0f 	.word	0x08001f0f
 8001b34:	08001f0f 	.word	0x08001f0f
 8001b38:	08001f0f 	.word	0x08001f0f
 8001b3c:	08001f0f 	.word	0x08001f0f
 8001b40:	08001f0f 	.word	0x08001f0f
 8001b44:	08001f0f 	.word	0x08001f0f
 8001b48:	08001f0f 	.word	0x08001f0f
 8001b4c:	08001f0f 	.word	0x08001f0f
 8001b50:	08001f0f 	.word	0x08001f0f
 8001b54:	08001f0f 	.word	0x08001f0f
 8001b58:	08001f0f 	.word	0x08001f0f
 8001b5c:	08001f0f 	.word	0x08001f0f
 8001b60:	08002037 	.word	0x08002037
 8001b64:	0800200f 	.word	0x0800200f
 8001b68:	08001f53 	.word	0x08001f53
 8001b6c:	08001f0f 	.word	0x08001f0f
 8001b70:	08001f0f 	.word	0x08001f0f
 8001b74:	08001f0f 	.word	0x08001f0f
 8001b78:	08001f97 	.word	0x08001f97
 8001b7c:	08001a95 	.word	0x08001a95
 8001b80:	08001a95 	.word	0x08001a95
 8001b84:	08001a95 	.word	0x08001a95
 8001b88:	08001a95 	.word	0x08001a95
 8001b8c:	08001a95 	.word	0x08001a95
 8001b90:	08001a95 	.word	0x08001a95
 8001b94:	08001a95 	.word	0x08001a95
 8001b98:	08001a95 	.word	0x08001a95
 8001b9c:	08001a95 	.word	0x08001a95
 8001ba0:	08001a95 	.word	0x08001a95
 8001ba4:	08001a95 	.word	0x08001a95
 8001ba8:	08001a95 	.word	0x08001a95
 8001bac:	08001a95 	.word	0x08001a95
 8001bb0:	08001a95 	.word	0x08001a95
 8001bb4:	08001a95 	.word	0x08001a95
 8001bb8:	08001a95 	.word	0x08001a95
 8001bbc:	08001a95 	.word	0x08001a95
 8001bc0:	08001a95 	.word	0x08001a95
 8001bc4:	08001a95 	.word	0x08001a95
 8001bc8:	08001a95 	.word	0x08001a95
 8001bcc:	08001a95 	.word	0x08001a95
 8001bd0:	08001a95 	.word	0x08001a95
 8001bd4:	08001a95 	.word	0x08001a95
 8001bd8:	08001a95 	.word	0x08001a95
 8001bdc:	08001a95 	.word	0x08001a95
 8001be0:	08001a95 	.word	0x08001a95
 8001be4:	08001a95 	.word	0x08001a95
 8001be8:	08001a95 	.word	0x08001a95
 8001bec:	08001a95 	.word	0x08001a95
 8001bf0:	08001a95 	.word	0x08001a95
 8001bf4:	08001f0f 	.word	0x08001f0f
 8001bf8:	08001a95 	.word	0x08001a95
 8001bfc:	08001a95 	.word	0x08001a95
 8001c00:	08001a95 	.word	0x08001a95
 8001c04:	08001a95 	.word	0x08001a95
 8001c08:	08001f53 	.word	0x08001f53
 8001c0c:	08001f53 	.word	0x08001f53
 8001c10:	08001f53 	.word	0x08001f53
 8001c14:	08001f0f 	.word	0x08001f0f
 8001c18:	08001f0f 	.word	0x08001f0f
 8001c1c:	08001f0f 	.word	0x08001f0f
 8001c20:	08001f0f 	.word	0x08001f0f
 8001c24:	08001f97 	.word	0x08001f97
 8001c28:	08001f53 	.word	0x08001f53
 8001c2c:	08001f0f 	.word	0x08001f0f
 8001c30:	08001f0f 	.word	0x08001f0f
 8001c34:	08001f0f 	.word	0x08001f0f
 8001c38:	08001f0f 	.word	0x08001f0f
 8001c3c:	08001f0f 	.word	0x08001f0f
 8001c40:	08001f0f 	.word	0x08001f0f
 8001c44:	08001f0f 	.word	0x08001f0f
 8001c48:	08001f0f 	.word	0x08001f0f
 8001c4c:	08001f0f 	.word	0x08001f0f
 8001c50:	08001f0f 	.word	0x08001f0f
 8001c54:	08001f0f 	.word	0x08001f0f
 8001c58:	08001f97 	.word	0x08001f97
 8001c5c:	08001f53 	.word	0x08001f53
 8001c60:	08001a95 	.word	0x08001a95
 8001c64:	08001f0f 	.word	0x08001f0f
 8001c68:	08001f0f 	.word	0x08001f0f
 8001c6c:	08001f0f 	.word	0x08001f0f
 8001c70:	08001f0f 	.word	0x08001f0f
 8001c74:	08001f0f 	.word	0x08001f0f
 8001c78:	08001a95 	.word	0x08001a95
 8001c7c:	08001a95 	.word	0x08001a95
 8001c80:	08001f0f 	.word	0x08001f0f
 8001c84:	08001f0f 	.word	0x08001f0f
 8001c88:	08001f97 	.word	0x08001f97
 8001c8c:	08001f97 	.word	0x08001f97
 8001c90:	08001f53 	.word	0x08001f53
 8001c94:	08001f53 	.word	0x08001f53
 8001c98:	08001f53 	.word	0x08001f53
 8001c9c:	08001f53 	.word	0x08001f53
 8001ca0:	08001f53 	.word	0x08001f53
 8001ca4:	08001f97 	.word	0x08001f97
 8001ca8:	08001f0f 	.word	0x08001f0f
 8001cac:	08001f0f 	.word	0x08001f0f
 8001cb0:	08001f53 	.word	0x08001f53
 8001cb4:	08001a95 	.word	0x08001a95
 8001cb8:	08001f0f 	.word	0x08001f0f
 8001cbc:	08001f0f 	.word	0x08001f0f
 8001cc0:	08001f97 	.word	0x08001f97
 8001cc4:	08001f53 	.word	0x08001f53
 8001cc8:	08001f53 	.word	0x08001f53
 8001ccc:	08001f53 	.word	0x08001f53
 8001cd0:	08001f53 	.word	0x08001f53
 8001cd4:	08001f53 	.word	0x08001f53
 8001cd8:	08001f53 	.word	0x08001f53
 8001cdc:	08001f53 	.word	0x08001f53
 8001ce0:	08001f53 	.word	0x08001f53
 8001ce4:	08001f53 	.word	0x08001f53
 8001ce8:	08001f53 	.word	0x08001f53
 8001cec:	08001f53 	.word	0x08001f53
 8001cf0:	08001f97 	.word	0x08001f97
 8001cf4:	08001a95 	.word	0x08001a95
 8001cf8:	08001f97 	.word	0x08001f97
 8001cfc:	08001f53 	.word	0x08001f53
 8001d00:	08001f53 	.word	0x08001f53
 8001d04:	08001f53 	.word	0x08001f53
 8001d08:	08001f0f 	.word	0x08001f0f
 8001d0c:	08001f0f 	.word	0x08001f0f
 8001d10:	08001f0f 	.word	0x08001f0f
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001d14:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001d16:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001d18:	f88d 3016 	strb.w	r3, [sp, #22]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001d1c:	4628      	mov	r0, r5
 8001d1e:	f001 f94b 	bl	8002fb8 <UI_ExecCmd>
 8001d22:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001d26:	e63d      	b.n	80019a4 <MCP_ReceivedFrame+0xb8>
 8001d28:	2aaaaaab 	.word	0x2aaaaaab
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001d2c:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001d2e:	2305      	movs	r3, #5
 8001d30:	f88d 3016 	strb.w	r3, [sp, #22]
      switch (bRegID)
 8001d34:	2988      	cmp	r1, #136	; 0x88
 8001d36:	f200 80fc 	bhi.w	8001f32 <MCP_ReceivedFrame+0x646>
 8001d3a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001d3e:	0159      	.short	0x0159
 8001d40:	00fa00fa 	.word	0x00fa00fa
 8001d44:	00fa013e 	.word	0x00fa013e
 8001d48:	01000100 	.word	0x01000100
 8001d4c:	01000100 	.word	0x01000100
 8001d50:	01000100 	.word	0x01000100
 8001d54:	01000100 	.word	0x01000100
 8001d58:	01000100 	.word	0x01000100
 8001d5c:	011c0100 	.word	0x011c0100
 8001d60:	00fa011c 	.word	0x00fa011c
 8001d64:	010000fa 	.word	0x010000fa
 8001d68:	01000100 	.word	0x01000100
 8001d6c:	01000100 	.word	0x01000100
 8001d70:	00fa00fa 	.word	0x00fa00fa
 8001d74:	014f00fa 	.word	0x014f00fa
 8001d78:	00fa0145 	.word	0x00fa0145
 8001d7c:	00fa00fa 	.word	0x00fa00fa
 8001d80:	00fa00fa 	.word	0x00fa00fa
 8001d84:	00fa00fa 	.word	0x00fa00fa
 8001d88:	00fa00fa 	.word	0x00fa00fa
 8001d8c:	00fa00fa 	.word	0x00fa00fa
 8001d90:	00fa00fa 	.word	0x00fa00fa
 8001d94:	00fa00fa 	.word	0x00fa00fa
 8001d98:	00fa00fa 	.word	0x00fa00fa
 8001d9c:	00fa00fa 	.word	0x00fa00fa
 8001da0:	00fa00fa 	.word	0x00fa00fa
 8001da4:	00fa00fa 	.word	0x00fa00fa
 8001da8:	00fa00fa 	.word	0x00fa00fa
 8001dac:	00fa00fa 	.word	0x00fa00fa
 8001db0:	00fa00fa 	.word	0x00fa00fa
 8001db4:	00fa00fa 	.word	0x00fa00fa
 8001db8:	00fa00fa 	.word	0x00fa00fa
 8001dbc:	00fa00fa 	.word	0x00fa00fa
 8001dc0:	00fa0100 	.word	0x00fa0100
 8001dc4:	00fa00fa 	.word	0x00fa00fa
 8001dc8:	011c00fa 	.word	0x011c00fa
 8001dcc:	011c011c 	.word	0x011c011c
 8001dd0:	00fa00fa 	.word	0x00fa00fa
 8001dd4:	00fa00fa 	.word	0x00fa00fa
 8001dd8:	00fa00fa 	.word	0x00fa00fa
 8001ddc:	00fa0100 	.word	0x00fa0100
 8001de0:	00fa00fa 	.word	0x00fa00fa
 8001de4:	01000100 	.word	0x01000100
 8001de8:	01000100 	.word	0x01000100
 8001dec:	01000100 	.word	0x01000100
 8001df0:	00fa0100 	.word	0x00fa0100
 8001df4:	00fa011c 	.word	0x00fa011c
 8001df8:	00fa00fa 	.word	0x00fa00fa
 8001dfc:	00fa00fa 	.word	0x00fa00fa
 8001e00:	00fa0100 	.word	0x00fa0100
 8001e04:	010000fa 	.word	0x010000fa
 8001e08:	00fa0100 	.word	0x00fa0100
 8001e0c:	00fa00fa 	.word	0x00fa00fa
 8001e10:	00fa00fa 	.word	0x00fa00fa
 8001e14:	00fa00fa 	.word	0x00fa00fa
 8001e18:	00fa00fa 	.word	0x00fa00fa
 8001e1c:	00fa00fa 	.word	0x00fa00fa
 8001e20:	00fa00fa 	.word	0x00fa00fa
 8001e24:	013e00fa 	.word	0x013e00fa
 8001e28:	011c011c 	.word	0x011c011c
 8001e2c:	011c011c 	.word	0x011c011c
 8001e30:	00fa011c 	.word	0x00fa011c
 8001e34:	00fa00fa 	.word	0x00fa00fa
 8001e38:	011c011c 	.word	0x011c011c
 8001e3c:	00fa00fa 	.word	0x00fa00fa
 8001e40:	00fa00fa 	.word	0x00fa00fa
 8001e44:	00fa00fa 	.word	0x00fa00fa
 8001e48:	010000fa 	.word	0x010000fa
 8001e4c:	01000100 	.word	0x01000100
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001e50:	78f3      	ldrb	r3, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001e52:	7870      	ldrb	r0, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001e54:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001e56:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001e58:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001e5c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001e60:	b212      	sxth	r2, r2
 8001e62:	b209      	sxth	r1, r1
 8001e64:	4628      	mov	r0, r5
 8001e66:	f001 f93b 	bl	80030e0 <UI_SetCurrentReferences>
      bNoError = true;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001e70:	e59a      	b.n	80019a8 <MCP_ReceivedFrame+0xbc>
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001e72:	4c7c      	ldr	r4, [pc, #496]	; (8002064 <MCP_ReceivedFrame+0x778>)
      stepList.data = buffer;
 8001e74:	9606      	str	r6, [sp, #24]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001e76:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001e78:	4621      	mov	r1, r4
 8001e7a:	a806      	add	r0, sp, #24
      stepList.len = Size;
 8001e7c:	f88d 801c 	strb.w	r8, [sp, #28]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001e80:	f88d 3016 	strb.w	r3, [sp, #22]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001e84:	f001 f93a 	bl	80030fc <UI_GetMPInfo>
 8001e88:	f88d 0011 	strb.w	r0, [sp, #17]
      if (bNoError)
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	f43f ad53 	beq.w	8001938 <MCP_ReceivedFrame+0x4c>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001e92:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8001e94:	7923      	ldrb	r3, [r4, #4]
 8001e96:	6822      	ldr	r2, [r4, #0]
 8001e98:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001e9a:	21f0      	movs	r1, #240	; 0xf0
 8001e9c:	47b0      	blx	r6
  if (RequireAck)
 8001e9e:	e552      	b.n	8001946 <MCP_ReceivedFrame+0x5a>
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001ea0:	7870      	ldrb	r0, [r6, #1]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001ea2:	7973      	ldrb	r3, [r6, #5]
 8001ea4:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001ea6:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001ea8:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001eac:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001eb0:	b292      	uxth	r2, r2
 8001eb2:	b209      	sxth	r1, r1
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	f001 f8cf 	bl	8003058 <UI_ExecTorqueRamp>
 8001eba:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001ebe:	e571      	b.n	80019a4 <MCP_ReceivedFrame+0xb8>
 8001ec0:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8001ec4:	ac06      	add	r4, sp, #24
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001eca:	2000      	movs	r0, #0
 8001ecc:	e004      	b.n	8001ed8 <MCP_ReceivedFrame+0x5ec>
 8001ece:	3001      	adds	r0, #1
 8001ed0:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8001ed2:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001ed6:	d00a      	beq.n	8001eee <MCP_ReceivedFrame+0x602>
 8001ed8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001edc:	b2c6      	uxtb	r6, r0
 8001ede:	2900      	cmp	r1, #0
 8001ee0:	d1f5      	bne.n	8001ece <MCP_ReceivedFrame+0x5e2>
        outBuff[i] = 0;
 8001ee2:	f1c6 0220 	rsb	r2, r6, #32
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	4420      	add	r0, r4
 8001eea:	f006 fecb 	bl	8008c84 <memset>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001eee:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8001ef0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	4622      	mov	r2, r4
 8001ef6:	21f0      	movs	r1, #240	; 0xf0
 8001ef8:	47b0      	blx	r6
      bNoError = true;
 8001efa:	2301      	movs	r3, #1
 8001efc:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001f00:	e552      	b.n	80019a8 <MCP_ReceivedFrame+0xbc>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001f02:	2301      	movs	r3, #1
    if (bNoError)
 8001f04:	f89d 0011 	ldrb.w	r0, [sp, #17]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001f08:	f88d 3016 	strb.w	r3, [sp, #22]
  if (RequireAck)
 8001f0c:	e54a      	b.n	80019a4 <MCP_ReceivedFrame+0xb8>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001f0e:	f10d 0211 	add.w	r2, sp, #17
 8001f12:	4628      	mov	r0, r5
 8001f14:	f001 f906 	bl	8003124 <UI_GetReg>
          if ( bNoError == true )
 8001f18:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001f1c:	9006      	str	r0, [sp, #24]
          if ( bNoError == true )
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f43f ad0a 	beq.w	8001938 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001f24:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001f28:	2302      	movs	r3, #2
 8001f2a:	aa06      	add	r2, sp, #24
 8001f2c:	21f0      	movs	r1, #240	; 0xf0
 8001f2e:	47a0      	blx	r4
  if (RequireAck)
 8001f30:	e509      	b.n	8001946 <MCP_ReceivedFrame+0x5a>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001f32:	2302      	movs	r3, #2
    if (bNoError)
 8001f34:	f89d 0011 	ldrb.w	r0, [sp, #17]
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001f38:	f88d 3016 	strb.w	r3, [sp, #22]
  if (RequireAck)
 8001f3c:	e532      	b.n	80019a4 <MCP_ReceivedFrame+0xb8>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001f3e:	78b2      	ldrb	r2, [r6, #2]
 8001f40:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001f42:	4628      	mov	r0, r5
 8001f44:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001f48:	f000 fec6 	bl	8002cd8 <UI_SetReg>
 8001f4c:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001f50:	e528      	b.n	80019a4 <MCP_ReceivedFrame+0xb8>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001f52:	f10d 0211 	add.w	r2, sp, #17
 8001f56:	4628      	mov	r0, r5
 8001f58:	f001 f8e4 	bl	8003124 <UI_GetReg>
          if ( bNoError == true )
 8001f5c:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001f60:	9006      	str	r0, [sp, #24]
          if ( bNoError == true )
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f43f ace8 	beq.w	8001938 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001f68:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001f6c:	2304      	movs	r3, #4
 8001f6e:	aa06      	add	r2, sp, #24
 8001f70:	21f0      	movs	r1, #240	; 0xf0
 8001f72:	47a0      	blx	r4
  if (RequireAck)
 8001f74:	e4e7      	b.n	8001946 <MCP_ReceivedFrame+0x5a>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001f76:	78b2      	ldrb	r2, [r6, #2]
 8001f78:	7873      	ldrb	r3, [r6, #1]
 8001f7a:	78f0      	ldrb	r0, [r6, #3]
 8001f7c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001f80:	7932      	ldrb	r2, [r6, #4]
 8001f82:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001f86:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001f8a:	4628      	mov	r0, r5
 8001f8c:	f000 fea4 	bl	8002cd8 <UI_SetReg>
 8001f90:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001f94:	e506      	b.n	80019a4 <MCP_ReceivedFrame+0xb8>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001f96:	f10d 0211 	add.w	r2, sp, #17
 8001f9a:	4628      	mov	r0, r5
 8001f9c:	f001 f8c2 	bl	8003124 <UI_GetReg>
           if ( bNoError == true )
 8001fa0:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001fa4:	9006      	str	r0, [sp, #24]
           if ( bNoError == true )
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f43f acc6 	beq.w	8001938 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001fac:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	aa06      	add	r2, sp, #24
 8001fb4:	21f0      	movs	r1, #240	; 0xf0
 8001fb6:	47a0      	blx	r4
  if (RequireAck)
 8001fb8:	e4c5      	b.n	8001946 <MCP_ReceivedFrame+0x5a>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001fba:	7872      	ldrb	r2, [r6, #1]
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	f000 fe8b 	bl	8002cd8 <UI_SetReg>
 8001fc2:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001fc6:	e4ed      	b.n	80019a4 <MCP_ReceivedFrame+0xb8>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 8001fc8:	7872      	ldrb	r2, [r6, #1]
 8001fca:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001fce:	2101      	movs	r1, #1
 8001fd0:	f001 f89e 	bl	8003110 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001fda:	e4e5      	b.n	80019a8 <MCP_ReceivedFrame+0xbc>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH0, (MC_Protocol_REG_t)(buffer[1]));
 8001fdc:	7872      	ldrb	r2, [r6, #1]
 8001fde:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	f001 f894 	bl	8003110 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001fee:	e4db      	b.n	80019a8 <MCP_ReceivedFrame+0xbc>
          int32_t wValue = (int32_t)(buffer[1]);
 8001ff0:	7872      	ldrb	r2, [r6, #1]
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 8001ff2:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001ff6:	9203      	str	r2, [sp, #12]
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	f000 fe6d 	bl	8002cd8 <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001ffe:	9a03      	ldr	r2, [sp, #12]
 8002000:	2100      	movs	r1, #0
 8002002:	4628      	mov	r0, r5
 8002004:	f000 fe68 	bl	8002cd8 <UI_SetReg>
 8002008:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 800200c:	e4ca      	b.n	80019a4 <MCP_ReceivedFrame+0xb8>
          if (pHandle->pDAC)
 800200e:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8002012:	2800      	cmp	r0, #0
 8002014:	f43f ad3e 	beq.w	8001a94 <MCP_ReceivedFrame+0x1a8>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8002018:	2101      	movs	r1, #1
 800201a:	f001 f87d 	bl	8003118 <UI_GetDAC>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 800201e:	2301      	movs	r3, #1
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8002020:	f88d 0018 	strb.w	r0, [sp, #24]
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8002024:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8002026:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002028:	aa06      	add	r2, sp, #24
 800202a:	21f0      	movs	r1, #240	; 0xf0
 800202c:	47a0      	blx	r4
            bNoError = true;
 800202e:	2301      	movs	r3, #1
 8002030:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8002034:	e4b8      	b.n	80019a8 <MCP_ReceivedFrame+0xbc>
          if (pHandle->pDAC)
 8002036:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 800203a:	2800      	cmp	r0, #0
 800203c:	f43f ad2a 	beq.w	8001a94 <MCP_ReceivedFrame+0x1a8>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8002040:	2100      	movs	r1, #0
 8002042:	f001 f869 	bl	8003118 <UI_GetDAC>
 8002046:	4603      	mov	r3, r0
 8002048:	f88d 3018 	strb.w	r3, [sp, #24]
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 800204c:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8002050:	2301      	movs	r3, #1
 8002052:	aa06      	add	r2, sp, #24
 8002054:	21f0      	movs	r1, #240	; 0xf0
 8002056:	47a0      	blx	r4
  if (RequireAck)
 8002058:	e475      	b.n	8001946 <MCP_ReceivedFrame+0x5a>
 800205a:	2626      	movs	r6, #38	; 0x26
 800205c:	2324      	movs	r3, #36	; 0x24
 800205e:	2222      	movs	r2, #34	; 0x22
 8002060:	e4ca      	b.n	80019f8 <MCP_ReceivedFrame+0x10c>
 8002062:	bf00      	nop
 8002064:	200009f8 	.word	0x200009f8

08002068 <MCP_WaitNextFrame>:
{
 8002068:	b510      	push	{r4, lr}
 800206a:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 800206c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800206e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002070:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8002072:	2280      	movs	r2, #128	; 0x80
 8002074:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
  pHandle->fFcpReceive(pHandle->pFCP);
 8002078:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800207a:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 800207c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8002080:	4718      	bx	r3
 8002082:	bf00      	nop

08002084 <MCP_Init>:
{
 8002084:	b570      	push	{r4, r5, r6, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	4604      	mov	r4, r0
 800208a:	461d      	mov	r5, r3
 800208c:	9b07      	ldr	r3, [sp, #28]
  pHandle->pDAC = pDAC;
 800208e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
{
 8002092:	9b08      	ldr	r3, [sp, #32]
  pHandle->s_fwVer = s_fwVer;
 8002094:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  FCP_SetClient( pFCP, pHandle,
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <MCP_Init+0x3c>)
  pHandle->pFCP = pFCP;
 800209a:	6321      	str	r1, [r4, #48]	; 0x30
{
 800209c:	4608      	mov	r0, r1
 800209e:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <MCP_Init+0x40>)
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <MCP_Init+0x44>)
 80020a6:	4621      	mov	r1, r4
 80020a8:	f004 faec 	bl	8006684 <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 80020ac:	9b06      	ldr	r3, [sp, #24]
 80020ae:	63e3      	str	r3, [r4, #60]	; 0x3c
  pHandle->fFcpReceive = fFcpReceive;
 80020b0:	e9c4 650d 	strd	r6, r5, [r4, #52]	; 0x34
  MCP_WaitNextFrame(pHandle);
 80020b4:	4620      	mov	r0, r4
 80020b6:	f7ff ffd7 	bl	8002068 <MCP_WaitNextFrame>
}
 80020ba:	b002      	add	sp, #8
 80020bc:	bd70      	pop	{r4, r5, r6, pc}
 80020be:	bf00      	nop
 80020c0:	080020cd 	.word	0x080020cd
 80020c4:	080020d5 	.word	0x080020d5
 80020c8:	080018ed 	.word	0x080018ed

080020cc <MCP_OnTimeOut>:
{
 80020cc:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 80020ce:	f7ff ffcb 	bl	8002068 <MCP_WaitNextFrame>
}
 80020d2:	bd08      	pop	{r3, pc}

080020d4 <MCP_SentFrame>:
{
 80020d4:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 80020d6:	f7ff ffc7 	bl	8002068 <MCP_WaitNextFrame>
}
 80020da:	bd08      	pop	{r3, pc}

080020dc <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80020dc:	b530      	push	{r4, r5, lr}
 80020de:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80020e0:	f003 f908 	bl	80052f4 <HAL_RCC_GetHCLKFreq>
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 80020e6:	4d0c      	ldr	r5, [pc, #48]	; (8002118 <MX_MotorControl_Init+0x3c>)
 80020e8:	4c0c      	ldr	r4, [pc, #48]	; (800211c <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80020ea:	fba3 3000 	umull	r3, r0, r3, r0
 80020ee:	09c0      	lsrs	r0, r0, #7
 80020f0:	f002 fad4 	bl	800469c <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 80020f4:	4629      	mov	r1, r5
 80020f6:	4620      	mov	r0, r4
 80020f8:	f7fe ff76 	bl	8000fe8 <MCboot>
  mc_lock_pins();
 80020fc:	f7ff fb74 	bl	80017e8 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8002100:	4b07      	ldr	r3, [pc, #28]	; (8002120 <MX_MotorControl_Init+0x44>)
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	4807      	ldr	r0, [pc, #28]	; (8002124 <MX_MotorControl_Init+0x48>)
 8002106:	462b      	mov	r3, r5
 8002108:	4622      	mov	r2, r4
 800210a:	2101      	movs	r1, #1
 800210c:	f000 fd14 	bl	8002b38 <UI_TaskInit>
}
 8002110:	b003      	add	sp, #12
 8002112:	bd30      	pop	{r4, r5, pc}
 8002114:	10624dd3 	.word	0x10624dd3
 8002118:	20000a04 	.word	0x20000a04
 800211c:	20000a00 	.word	0x20000a00
 8002120:	08008d70 	.word	0x08008d70
 8002124:	200006f8 	.word	0x200006f8

08002128 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002128:	4a6f      	ldr	r2, [pc, #444]	; (80022e8 <RCM_RegisterRegConv+0x1c0>)
{
 800212a:	b530      	push	{r4, r5, lr}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800212c:	6814      	ldr	r4, [r2, #0]
{
 800212e:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002130:	2c00      	cmp	r4, #0
 8002132:	f000 8088 	beq.w	8002246 <RCM_RegisterRegConv+0x11e>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002136:	f890 c004 	ldrb.w	ip, [r0, #4]
 800213a:	7923      	ldrb	r3, [r4, #4]
 800213c:	459c      	cmp	ip, r3
 800213e:	d01f      	beq.n	8002180 <RCM_RegisterRegConv+0x58>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002140:	6853      	ldr	r3, [r2, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 8097 	beq.w	8002276 <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002148:	791c      	ldrb	r4, [r3, #4]
 800214a:	4564      	cmp	r4, ip
  uint8_t handle=255;
 800214c:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002150:	f000 8083 	beq.w	800225a <RCM_RegisterRegConv+0x132>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002154:	6894      	ldr	r4, [r2, #8]
 8002156:	2c00      	cmp	r4, #0
 8002158:	f000 80ad 	beq.w	80022b6 <RCM_RegisterRegConv+0x18e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800215c:	7923      	ldrb	r3, [r4, #4]
 800215e:	4563      	cmp	r3, ip
 8002160:	f000 8082 	beq.w	8002268 <RCM_RegisterRegConv+0x140>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002164:	68d3      	ldr	r3, [r2, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 80ae 	beq.w	80022c8 <RCM_RegisterRegConv+0x1a0>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800216c:	791c      	ldrb	r4, [r3, #4]
 800216e:	4564      	cmp	r4, ip
 8002170:	f000 808c 	beq.w	800228c <RCM_RegisterRegConv+0x164>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8002174:	2803      	cmp	r0, #3
 8002176:	bf88      	it	hi
 8002178:	20ff      	movhi	r0, #255	; 0xff
 800217a:	f240 80b1 	bls.w	80022e0 <RCM_RegisterRegConv+0x1b8>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 800217e:	bd30      	pop	{r4, r5, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002180:	6803      	ldr	r3, [r0, #0]
 8002182:	6820      	ldr	r0, [r4, #0]
 8002184:	4283      	cmp	r3, r0
 8002186:	d1db      	bne.n	8002140 <RCM_RegisterRegConv+0x18>
  uint8_t i=0;
 8002188:	2000      	movs	r0, #0
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800218a:	4c58      	ldr	r4, [pc, #352]	; (80022ec <RCM_RegisterRegConv+0x1c4>)
      RCM_handle_array [handle] = regConv;
 800218c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002190:	689a      	ldr	r2, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002192:	2500      	movs	r5, #0
 8002194:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8002198:	07d5      	lsls	r5, r2, #31
 800219a:	d422      	bmi.n	80021e2 <RCM_RegisterRegConv+0xba>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800219c:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800219e:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80021a0:	f022 0204 	bic.w	r2, r2, #4
 80021a4:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80021a6:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80021a8:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80021aa:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80021ac:	f022 0220 	bic.w	r2, r2, #32
 80021b0:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80021b2:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80021ba:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80021be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021c2:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	2a00      	cmp	r2, #0
 80021c8:	dbfc      	blt.n	80021c4 <RCM_RegisterRegConv+0x9c>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80021ca:	681a      	ldr	r2, [r3, #0]
        while (  LL_ADC_IsActiveFlag_ADRDY( regConv->regADC ) == 0)
 80021cc:	07d4      	lsls	r4, r2, #31
 80021ce:	d408      	bmi.n	80021e2 <RCM_RegisterRegConv+0xba>
  MODIFY_REG(ADCx->CR,
 80021d0:	4c47      	ldr	r4, [pc, #284]	; (80022f0 <RCM_RegisterRegConv+0x1c8>)
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	4022      	ands	r2, r4
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	07d2      	lsls	r2, r2, #31
 80021e0:	d5f7      	bpl.n	80021d2 <RCM_RegisterRegConv+0xaa>
      RCM_NoInj_array [handle].enable = false;
 80021e2:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 80021e6:	4c43      	ldr	r4, [pc, #268]	; (80022f4 <RCM_RegisterRegConv+0x1cc>)
 80021e8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80021ec:	2200      	movs	r2, #0
 80021ee:	f804 200c 	strb.w	r2, [r4, ip]
      RCM_NoInj_array [handle].prev = handle;
 80021f2:	4464      	add	r4, ip
 80021f4:	f360 0207 	bfi	r2, r0, #0, #8
 80021f8:	f360 220f 	bfi	r2, r0, #8, #8
 80021fc:	80a2      	strh	r2, [r4, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80021fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002200:	f022 020f 	bic.w	r2, r2, #15
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002206:	790c      	ldrb	r4, [r1, #4]
 8002208:	2c09      	cmp	r4, #9
 800220a:	d846      	bhi.n	800229a <RCM_RegisterRegConv+0x172>
 800220c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8002210:	06a2      	lsls	r2, r4, #26
 8002212:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 8002216:	2501      	movs	r5, #1
 8002218:	fa05 f404 	lsl.w	r4, r5, r4
 800221c:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800221e:	0dd4      	lsrs	r4, r2, #23
  MODIFY_REG(*preg,
 8002220:	6889      	ldr	r1, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002222:	f004 0404 	and.w	r4, r4, #4
 8002226:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8002228:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800222c:	fa01 fc02 	lsl.w	ip, r1, r2
 8002230:	f04f 0e07 	mov.w	lr, #7
 8002234:	58e1      	ldr	r1, [r4, r3]
 8002236:	fa0e f202 	lsl.w	r2, lr, r2
 800223a:	ea21 0202 	bic.w	r2, r1, r2
 800223e:	ea42 020c 	orr.w	r2, r2, ip
 8002242:	50e2      	str	r2, [r4, r3]
}
 8002244:	bd30      	pop	{r4, r5, pc}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002246:	6853      	ldr	r3, [r2, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d041      	beq.n	80022d0 <RCM_RegisterRegConv+0x1a8>
 800224c:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 8002250:	4620      	mov	r0, r4
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002252:	791c      	ldrb	r4, [r3, #4]
 8002254:	4564      	cmp	r4, ip
 8002256:	f47f af7d 	bne.w	8002154 <RCM_RegisterRegConv+0x2c>
 800225a:	681c      	ldr	r4, [r3, #0]
 800225c:	680b      	ldr	r3, [r1, #0]
 800225e:	429c      	cmp	r4, r3
 8002260:	f47f af78 	bne.w	8002154 <RCM_RegisterRegConv+0x2c>
      i++;
 8002264:	2001      	movs	r0, #1
 8002266:	e790      	b.n	800218a <RCM_RegisterRegConv+0x62>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002268:	6824      	ldr	r4, [r4, #0]
 800226a:	680b      	ldr	r3, [r1, #0]
 800226c:	429c      	cmp	r4, r3
 800226e:	f47f af79 	bne.w	8002164 <RCM_RegisterRegConv+0x3c>
      i++;
 8002272:	2002      	movs	r0, #2
 8002274:	e789      	b.n	800218a <RCM_RegisterRegConv+0x62>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002276:	6894      	ldr	r4, [r2, #8]
      i++;
 8002278:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800227a:	2c00      	cmp	r4, #0
 800227c:	f47f af6e 	bne.w	800215c <RCM_RegisterRegConv+0x34>
 8002280:	68d3      	ldr	r3, [r2, #12]
 8002282:	b36b      	cbz	r3, 80022e0 <RCM_RegisterRegConv+0x1b8>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002284:	791d      	ldrb	r5, [r3, #4]
 8002286:	790c      	ldrb	r4, [r1, #4]
 8002288:	42a5      	cmp	r5, r4
 800228a:	d129      	bne.n	80022e0 <RCM_RegisterRegConv+0x1b8>
 800228c:	681c      	ldr	r4, [r3, #0]
 800228e:	680b      	ldr	r3, [r1, #0]
 8002290:	429c      	cmp	r4, r3
 8002292:	f47f af6f 	bne.w	8002174 <RCM_RegisterRegConv+0x4c>
      i++;
 8002296:	2003      	movs	r0, #3
 8002298:	e777      	b.n	800218a <RCM_RegisterRegConv+0x62>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 800229a:	2203      	movs	r2, #3
 800229c:	f06f 051d 	mvn.w	r5, #29
 80022a0:	fb12 5504 	smlabb	r5, r2, r4, r5
 80022a4:	2201      	movs	r2, #1
 80022a6:	40a2      	lsls	r2, r4
 80022a8:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 80022ac:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 80022b0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80022b4:	e7b3      	b.n	800221e <RCM_RegisterRegConv+0xf6>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80022b6:	2804      	cmp	r0, #4
 80022b8:	d910      	bls.n	80022dc <RCM_RegisterRegConv+0x1b4>
 80022ba:	68d3      	ldr	r3, [r2, #12]
 80022bc:	b113      	cbz	r3, 80022c4 <RCM_RegisterRegConv+0x19c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80022be:	7918      	ldrb	r0, [r3, #4]
 80022c0:	4584      	cmp	ip, r0
 80022c2:	d00f      	beq.n	80022e4 <RCM_RegisterRegConv+0x1bc>
 80022c4:	680b      	ldr	r3, [r1, #0]
 80022c6:	e7d4      	b.n	8002272 <RCM_RegisterRegConv+0x14a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80022c8:	2804      	cmp	r0, #4
 80022ca:	680b      	ldr	r3, [r1, #0]
 80022cc:	d8e3      	bhi.n	8002296 <RCM_RegisterRegConv+0x16e>
 80022ce:	e75c      	b.n	800218a <RCM_RegisterRegConv+0x62>
 80022d0:	6894      	ldr	r4, [r2, #8]
 80022d2:	b11c      	cbz	r4, 80022dc <RCM_RegisterRegConv+0x1b4>
 80022d4:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 80022d8:	4618      	mov	r0, r3
 80022da:	e73f      	b.n	800215c <RCM_RegisterRegConv+0x34>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80022dc:	4620      	mov	r0, r4
 80022de:	e7cf      	b.n	8002280 <RCM_RegisterRegConv+0x158>
 80022e0:	680b      	ldr	r3, [r1, #0]
 80022e2:	e752      	b.n	800218a <RCM_RegisterRegConv+0x62>
      i++;
 80022e4:	2002      	movs	r0, #2
 80022e6:	e7d1      	b.n	800228c <RCM_RegisterRegConv+0x164>
 80022e8:	20000a48 	.word	0x20000a48
 80022ec:	20000a08 	.word	0x20000a08
 80022f0:	7fffffc0 	.word	0x7fffffc0
 80022f4:	20000a28 	.word	0x20000a28

080022f8 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 80022f8:	4b5e      	ldr	r3, [pc, #376]	; (8002474 <RCM_ExecRegularConv+0x17c>)
 80022fa:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 80022fe:	b510      	push	{r4, lr}
  if (RCM_NoInj_array [handle].enable == false)
 8002300:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8002304:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 8002308:	2a00      	cmp	r2, #0
 800230a:	d13c      	bne.n	8002386 <RCM_ExecRegularConv+0x8e>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 800230c:	7819      	ldrb	r1, [r3, #0]
 800230e:	b9a9      	cbnz	r1, 800233c <RCM_ExecRegularConv+0x44>
  uint8_t LastEnable = RCM_MAX_CONV;
 8002310:	2204      	movs	r2, #4
      if (RCM_NoInj_array [i].enable == true)
 8002312:	7999      	ldrb	r1, [r3, #6]
 8002314:	2900      	cmp	r1, #0
 8002316:	d07e      	beq.n	8002416 <RCM_ExecRegularConv+0x11e>
      {
        if (RCM_NoInj_array [i].next > handle)
 8002318:	7ad9      	ldrb	r1, [r3, #11]
 800231a:	4288      	cmp	r0, r1
 800231c:	f0c0 809a 	bcc.w	8002454 <RCM_ExecRegularConv+0x15c>
      if (RCM_NoInj_array [i].enable == true)
 8002320:	7b1a      	ldrb	r2, [r3, #12]
 8002322:	2a00      	cmp	r2, #0
 8002324:	f000 8099 	beq.w	800245a <RCM_ExecRegularConv+0x162>
        if (RCM_NoInj_array [i].next > handle)
 8002328:	7c59      	ldrb	r1, [r3, #17]
 800232a:	4288      	cmp	r0, r1
 800232c:	f0c0 809f 	bcc.w	800246e <RCM_ExecRegularConv+0x176>
      if (RCM_NoInj_array [i].enable == true)
 8002330:	7c9a      	ldrb	r2, [r3, #18]
 8002332:	2a00      	cmp	r2, #0
 8002334:	f040 8095 	bne.w	8002462 <RCM_ExecRegularConv+0x16a>
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 8002338:	2202      	movs	r2, #2
 800233a:	e073      	b.n	8002424 <RCM_ExecRegularConv+0x12c>
        if (RCM_NoInj_array [i].next > handle)
 800233c:	7959      	ldrb	r1, [r3, #5]
 800233e:	4281      	cmp	r1, r0
 8002340:	d9e7      	bls.n	8002312 <RCM_ExecRegularConv+0x1a>
      if (RCM_NoInj_array [i].enable == true)
 8002342:	4696      	mov	lr, r2
          RCM_NoInj_array [handle].next = formerNext;
 8002344:	eb0c 0400 	add.w	r4, ip, r0
 8002348:	eb03 0444 	add.w	r4, r3, r4, lsl #1
          RCM_NoInj_array [i].next = handle;
 800234c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
          RCM_NoInj_array [handle].prev = i;
 8002350:	7122      	strb	r2, [r4, #4]
          RCM_NoInj_array [handle].next = formerNext;
 8002352:	7161      	strb	r1, [r4, #5]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002354:	4c48      	ldr	r4, [pc, #288]	; (8002478 <RCM_ExecRegularConv+0x180>)
          RCM_NoInj_array [formerNext].prev = handle;
 8002356:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array [i].next = handle;
 800235a:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 800235e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002362:	7822      	ldrb	r2, [r4, #0]
          RCM_NoInj_array [i].next = handle;
 8002364:	f88e 0005 	strb.w	r0, [lr, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 8002368:	7108      	strb	r0, [r1, #4]
    RCM_NoInj_array [handle].enable = true;
 800236a:	eb0c 0100 	add.w	r1, ip, r0
 800236e:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002372:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array [handle].enable = true;
 8002376:	f823 e011 	strh.w	lr, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 800237a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800237e:	7852      	ldrb	r2, [r2, #1]
 8002380:	4572      	cmp	r2, lr
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 8002382:	bf18      	it	ne
 8002384:	7020      	strbne	r0, [r4, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 8002386:	4a3d      	ldr	r2, [pc, #244]	; (800247c <RCM_ExecRegularConv+0x184>)
 8002388:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800238c:	2a00      	cmp	r2, #0
 800238e:	d132      	bne.n	80023f6 <RCM_ExecRegularConv+0xfe>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002390:	4a3b      	ldr	r2, [pc, #236]	; (8002480 <RCM_ExecRegularConv+0x188>)
 8002392:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002396:	7914      	ldrb	r4, [r2, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002398:	6811      	ldr	r1, [r2, #0]
 800239a:	2c09      	cmp	r4, #9
 800239c:	d930      	bls.n	8002400 <RCM_ExecRegularConv+0x108>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800239e:	2203      	movs	r2, #3
 80023a0:	f06f 0e1d 	mvn.w	lr, #29
 80023a4:	fb12 ee04 	smlabb	lr, r2, r4, lr
 80023a8:	2201      	movs	r2, #1
 80023aa:	40a2      	lsls	r2, r4
 80023ac:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 80023b0:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80023b4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 80023b8:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80023ba:	0d12      	lsrs	r2, r2, #20
 80023bc:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 80023c0:	f424 64f8 	bic.w	r4, r4, #1984	; 0x7c0
 80023c4:	4322      	orrs	r2, r4
 80023c6:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80023c8:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80023ca:	688a      	ldr	r2, [r1, #8]
 80023cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023d0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80023d4:	f042 0204 	orr.w	r2, r2, #4
 80023d8:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80023da:	680a      	ldr	r2, [r1, #0]
 80023dc:	0752      	lsls	r2, r2, #29
 80023de:	d5fc      	bpl.n	80023da <RCM_ExecRegularConv+0xe2>
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 80023e0:	eb0c 0200 	add.w	r2, ip, r0
 80023e4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80023e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023ea:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 80023ec:	4922      	ldr	r1, [pc, #136]	; (8002478 <RCM_ExecRegularConv+0x180>)
 80023ee:	7954      	ldrb	r4, [r2, #5]
 80023f0:	700c      	strb	r4, [r1, #0]
    RCM_NoInj_array [handle].status = valid;
 80023f2:	2102      	movs	r1, #2
 80023f4:	7051      	strb	r1, [r2, #1]
  }
  retVal = RCM_NoInj_array [handle].value;
 80023f6:	4460      	add	r0, ip
 80023f8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
return retVal;
}
 80023fc:	8858      	ldrh	r0, [r3, #2]
 80023fe:	bd10      	pop	{r4, pc}
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002400:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8002404:	06a2      	lsls	r2, r4, #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002406:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800240a:	f04f 0e01 	mov.w	lr, #1
 800240e:	fa0e f404 	lsl.w	r4, lr, r4
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002412:	4322      	orrs	r2, r4
 8002414:	e7d0      	b.n	80023b8 <RCM_ExecRegularConv+0xc0>
      if (RCM_NoInj_array [i].enable == true)
 8002416:	7b19      	ldrb	r1, [r3, #12]
 8002418:	2900      	cmp	r1, #0
 800241a:	d185      	bne.n	8002328 <RCM_ExecRegularConv+0x30>
 800241c:	7c99      	ldrb	r1, [r3, #18]
 800241e:	bb01      	cbnz	r1, 8002462 <RCM_ExecRegularConv+0x16a>
       if (LastEnable != RCM_MAX_CONV )
 8002420:	2a04      	cmp	r2, #4
 8002422:	d013      	beq.n	800244c <RCM_ExecRegularConv+0x154>
         formerNext = RCM_NoInj_array [LastEnable].next;
 8002424:	eb02 0142 	add.w	r1, r2, r2, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 8002428:	eb0c 0400 	add.w	r4, ip, r0
 800242c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
         formerNext = RCM_NoInj_array [LastEnable].next;
 8002430:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 8002434:	7122      	strb	r2, [r4, #4]
         formerNext = RCM_NoInj_array [LastEnable].next;
 8002436:	794a      	ldrb	r2, [r1, #5]
         RCM_NoInj_array [handle].next = formerNext;
 8002438:	7162      	strb	r2, [r4, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 800243a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800243e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002442:	4c0d      	ldr	r4, [pc, #52]	; (8002478 <RCM_ExecRegularConv+0x180>)
         RCM_NoInj_array [formerNext].prev = handle;
 8002444:	7110      	strb	r0, [r2, #4]
         RCM_NoInj_array [LastEnable].next = handle;
 8002446:	7148      	strb	r0, [r1, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002448:	7822      	ldrb	r2, [r4, #0]
 800244a:	e78e      	b.n	800236a <RCM_ExecRegularConv+0x72>
         RCM_currentHandle = handle;
 800244c:	4c0a      	ldr	r4, [pc, #40]	; (8002478 <RCM_ExecRegularConv+0x180>)
 800244e:	4602      	mov	r2, r0
 8002450:	7020      	strb	r0, [r4, #0]
    while (i < RCM_MAX_CONV)
 8002452:	e78a      	b.n	800236a <RCM_ExecRegularConv+0x72>
      i++;
 8002454:	2201      	movs	r2, #1
      if (RCM_NoInj_array [i].enable == true)
 8002456:	4696      	mov	lr, r2
 8002458:	e774      	b.n	8002344 <RCM_ExecRegularConv+0x4c>
 800245a:	7c9a      	ldrb	r2, [r3, #18]
 800245c:	b90a      	cbnz	r2, 8002462 <RCM_ExecRegularConv+0x16a>
      i++;
 800245e:	2201      	movs	r2, #1
 8002460:	e7e0      	b.n	8002424 <RCM_ExecRegularConv+0x12c>
        if (RCM_NoInj_array [i].next > handle)
 8002462:	7dd9      	ldrb	r1, [r3, #23]
 8002464:	4281      	cmp	r1, r0
      i++;
 8002466:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array [i].next > handle)
 800246a:	d9db      	bls.n	8002424 <RCM_ExecRegularConv+0x12c>
 800246c:	e769      	b.n	8002342 <RCM_ExecRegularConv+0x4a>
      i++;
 800246e:	2202      	movs	r2, #2
 8002470:	e767      	b.n	8002342 <RCM_ExecRegularConv+0x4a>
 8002472:	bf00      	nop
 8002474:	20000a28 	.word	0x20000a28
 8002478:	20000a44 	.word	0x20000a44
 800247c:	20000288 	.word	0x20000288
 8002480:	20000a48 	.word	0x20000a48

08002484 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8002484:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8002486:	4c12      	ldr	r4, [pc, #72]	; (80024d0 <RCM_ExecUserConv+0x4c>)
 8002488:	7823      	ldrb	r3, [r4, #0]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d000      	beq.n	8002490 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 800248e:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002490:	4d10      	ldr	r5, [pc, #64]	; (80024d4 <RCM_ExecUserConv+0x50>)
 8002492:	7828      	ldrb	r0, [r5, #0]
 8002494:	f7ff ff30 	bl	80022f8 <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8002498:	782b      	ldrb	r3, [r5, #0]
 800249a:	4a0f      	ldr	r2, [pc, #60]	; (80024d8 <RCM_ExecUserConv+0x54>)
 800249c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80024a0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80024a4:	490d      	ldr	r1, [pc, #52]	; (80024dc <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80024a6:	7852      	ldrb	r2, [r2, #1]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80024a8:	8008      	strh	r0, [r1, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80024aa:	b10a      	cbz	r2, 80024b0 <RCM_ExecUserConv+0x2c>
      RCM_UserConvState = RCM_USERCONV_EOC;
 80024ac:	2202      	movs	r2, #2
 80024ae:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80024b0:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <RCM_ExecUserConv+0x5c>)
 80024b2:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80024b6:	2d00      	cmp	r5, #0
 80024b8:	d0e9      	beq.n	800248e <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80024ba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80024be:	4601      	mov	r1, r0
 80024c0:	4618      	mov	r0, r3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80024c6:	6852      	ldr	r2, [r2, #4]
 80024c8:	462b      	mov	r3, r5
}
 80024ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80024ce:	4718      	bx	r3
 80024d0:	20000a41 	.word	0x20000a41
 80024d4:	20000a40 	.word	0x20000a40
 80024d8:	20000a28 	.word	0x20000a28
 80024dc:	20000a42 	.word	0x20000a42
 80024e0:	20000a08 	.word	0x20000a08

080024e4 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 80024e4:	4a27      	ldr	r2, [pc, #156]	; (8002584 <RCM_ExecNextConv+0xa0>)
 80024e6:	4928      	ldr	r1, [pc, #160]	; (8002588 <RCM_ExecNextConv+0xa4>)
 80024e8:	7813      	ldrb	r3, [r2, #0]
 80024ea:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80024ee:	f811 0010 	ldrb.w	r0, [r1, r0, lsl #1]
 80024f2:	2800      	cmp	r0, #0
 80024f4:	d038      	beq.n	8002568 <RCM_ExecNextConv+0x84>
{
 80024f6:	b410      	push	{r4}
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 80024f8:	4c24      	ldr	r4, [pc, #144]	; (800258c <RCM_ExecNextConv+0xa8>)
 80024fa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80024fe:	681b      	ldr	r3, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002500:	2004      	movs	r0, #4
 8002502:	6018      	str	r0, [r3, #0]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8002504:	7810      	ldrb	r0, [r2, #0]
 8002506:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 800250a:	f893 c004 	ldrb.w	ip, [r3, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	f1bc 0f09 	cmp.w	ip, #9
 8002514:	d929      	bls.n	800256a <RCM_ExecNextConv+0x86>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8002516:	2303      	movs	r3, #3
 8002518:	f06f 041d 	mvn.w	r4, #29
 800251c:	fb13 440c 	smlabb	r4, r3, ip, r4
 8002520:	2301      	movs	r3, #1
 8002522:	fa03 f30c 	lsl.w	r3, r3, ip
 8002526:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 800252a:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 800252e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8002532:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8002534:	0d1b      	lsrs	r3, r3, #20
 8002536:	f424 6cf8 	bic.w	ip, r4, #1984	; 0x7c0
 800253a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800253e:	ea43 030c 	orr.w	r3, r3, ip
 8002542:	6313      	str	r3, [r2, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002544:	6c13      	ldr	r3, [r2, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8002546:	6893      	ldr	r3, [r2, #8]

    LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 8002548:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800254c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002550:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8002554:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002558:	f043 0304 	orr.w	r3, r3, #4
 800255c:	2001      	movs	r0, #1
 800255e:	6093      	str	r3, [r2, #8]
 8002560:	7048      	strb	r0, [r1, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8002562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 800256a:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 800256e:	ea4f 638c 	mov.w	r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8002572:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8002576:	2401      	movs	r4, #1
 8002578:	fa04 fc0c 	lsl.w	ip, r4, ip
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 800257c:	ea43 030c 	orr.w	r3, r3, ip
 8002580:	e7d7      	b.n	8002532 <RCM_ExecNextConv+0x4e>
 8002582:	bf00      	nop
 8002584:	20000a44 	.word	0x20000a44
 8002588:	20000a28 	.word	0x20000a28
 800258c:	20000a48 	.word	0x20000a48

08002590 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 8002590:	b470      	push	{r4, r5, r6}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 8002592:	4c10      	ldr	r4, [pc, #64]	; (80025d4 <RCM_ReadOngoingConv+0x44>)
 8002594:	4a10      	ldr	r2, [pc, #64]	; (80025d8 <RCM_ReadOngoingConv+0x48>)
 8002596:	7823      	ldrb	r3, [r4, #0]
 8002598:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800259c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80025a0:	0058      	lsls	r0, r3, #1
 80025a2:	f891 c001 	ldrb.w	ip, [r1, #1]
 80025a6:	f1bc 0f01 	cmp.w	ip, #1
 80025aa:	d006      	beq.n	80025ba <RCM_ReadOngoingConv+0x2a>
    RCM_NoInj_array [RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 80025ac:	4403      	add	r3, r0
 80025ae:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80025b2:	7953      	ldrb	r3, [r2, #5]
 80025b4:	7023      	strb	r3, [r4, #0]
}
 80025b6:	bc70      	pop	{r4, r5, r6}
 80025b8:	4770      	bx	lr
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 80025ba:	4d08      	ldr	r5, [pc, #32]	; (80025dc <RCM_ReadOngoingConv+0x4c>)
 80025bc:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 80025c0:	682d      	ldr	r5, [r5, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80025c2:	682e      	ldr	r6, [r5, #0]
 80025c4:	0776      	lsls	r6, r6, #29
 80025c6:	d5f1      	bpl.n	80025ac <RCM_ReadOngoingConv+0x1c>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80025c8:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 80025ca:	804d      	strh	r5, [r1, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 80025cc:	2502      	movs	r5, #2
 80025ce:	704d      	strb	r5, [r1, #1]
 80025d0:	e7ec      	b.n	80025ac <RCM_ReadOngoingConv+0x1c>
 80025d2:	bf00      	nop
 80025d4:	20000a44 	.word	0x20000a44
 80025d8:	20000a28 	.word	0x20000a28
 80025dc:	20000a48 	.word	0x20000a48

080025e0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_MspInit+0x30>)
 80025e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025e4:	f042 0201 	orr.w	r2, r2, #1
 80025e8:	661a      	str	r2, [r3, #96]	; 0x60
 80025ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80025ec:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	f002 0201 	and.w	r2, r2, #1
 80025f2:	9200      	str	r2, [sp, #0]
 80025f4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025fc:	659a      	str	r2, [r3, #88]	; 0x58
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002608:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800260a:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800260c:	f001 bfe8 	b.w	80045e0 <HAL_NVIC_SetPriorityGrouping>
 8002610:	40021000 	.word	0x40021000

08002614 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002614:	b510      	push	{r4, lr}
 8002616:	4604      	mov	r4, r0
 8002618:	b09e      	sub	sp, #120	; 0x78
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800261c:	2244      	movs	r2, #68	; 0x44
 800261e:	a80d      	add	r0, sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8002624:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
 8002628:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800262a:	f006 fb2b 	bl	8008c84 <memset>
  if(hadc->Instance==ADC1)
 800262e:	6823      	ldr	r3, [r4, #0]
 8002630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002634:	d004      	beq.n	8002640 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002636:	4a4d      	ldr	r2, [pc, #308]	; (800276c <HAL_ADC_MspInit+0x158>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d047      	beq.n	80026cc <HAL_ADC_MspInit+0xb8>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800263c:	b01e      	add	sp, #120	; 0x78
 800263e:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002640:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8002644:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002648:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800264a:	920d      	str	r2, [sp, #52]	; 0x34
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800264c:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800264e:	f002 fe83 	bl	8005358 <HAL_RCCEx_PeriphCLKConfig>
 8002652:	2800      	cmp	r0, #0
 8002654:	f040 8084 	bne.w	8002760 <HAL_ADC_MspInit+0x14c>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002658:	4a45      	ldr	r2, [pc, #276]	; (8002770 <HAL_ADC_MspInit+0x15c>)
 800265a:	6813      	ldr	r3, [r2, #0]
 800265c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800265e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002660:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002662:	d109      	bne.n	8002678 <HAL_ADC_MspInit+0x64>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002664:	4b43      	ldr	r3, [pc, #268]	; (8002774 <HAL_ADC_MspInit+0x160>)
 8002666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800266c:	64da      	str	r2, [r3, #76]	; 0x4c
 800266e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002678:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <HAL_ADC_MspInit+0x160>)
 800267a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	64da      	str	r2, [r3, #76]	; 0x4c
 8002682:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002684:	f002 0201 	and.w	r2, r2, #1
 8002688:	9202      	str	r2, [sp, #8]
 800268a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800268e:	f042 0202 	orr.w	r2, r2, #2
 8002692:	64da      	str	r2, [r3, #76]	; 0x4c
 8002694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 800269c:	2202      	movs	r2, #2
 800269e:	2303      	movs	r3, #3
 80026a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2400      	movs	r4, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 80026aa:	a908      	add	r1, sp, #32
 80026ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b0:	f002 f90e 	bl	80048d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 80026b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026b8:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80026ba:	482f      	ldr	r0, [pc, #188]	; (8002778 <HAL_ADC_MspInit+0x164>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80026be:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 80026c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80026c4:	f002 f904 	bl	80048d0 <HAL_GPIO_Init>
}
 80026c8:	b01e      	add	sp, #120	; 0x78
 80026ca:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80026cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80026d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026d4:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80026d6:	920d      	str	r2, [sp, #52]	; 0x34
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80026d8:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026da:	f002 fe3d 	bl	8005358 <HAL_RCCEx_PeriphCLKConfig>
 80026de:	2800      	cmp	r0, #0
 80026e0:	d141      	bne.n	8002766 <HAL_ADC_MspInit+0x152>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80026e2:	4a23      	ldr	r2, [pc, #140]	; (8002770 <HAL_ADC_MspInit+0x15c>)
 80026e4:	6813      	ldr	r3, [r2, #0]
 80026e6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80026e8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80026ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80026ec:	d109      	bne.n	8002702 <HAL_ADC_MspInit+0xee>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80026ee:	4b21      	ldr	r3, [pc, #132]	; (8002774 <HAL_ADC_MspInit+0x160>)
 80026f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80026f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026fe:	9304      	str	r3, [sp, #16]
 8002700:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <HAL_ADC_MspInit+0x160>)
 8002704:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	64da      	str	r2, [r3, #76]	; 0x4c
 800270c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800270e:	f002 0201 	and.w	r2, r2, #1
 8002712:	9205      	str	r2, [sp, #20]
 8002714:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002718:	f042 0204 	orr.w	r2, r2, #4
 800271c:	64da      	str	r2, [r3, #76]	; 0x4c
 800271e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002720:	f002 0204 	and.w	r2, r2, #4
 8002724:	9206      	str	r2, [sp, #24]
 8002726:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002728:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800272a:	f042 0202 	orr.w	r2, r2, #2
 800272e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin;
 8002738:	2280      	movs	r2, #128	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2400      	movs	r4, #0
    HAL_GPIO_Init(M1_CURR_AMPL_W_GPIO_Port, &GPIO_InitStruct);
 800273c:	a908      	add	r1, sp, #32
 800273e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin;
 8002742:	2303      	movs	r3, #3
 8002744:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800274a:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(M1_CURR_AMPL_W_GPIO_Port, &GPIO_InitStruct);
 800274c:	f002 f8c0 	bl	80048d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_BUS_VOLTAGE_Pin;
 8002750:	2230      	movs	r2, #48	; 0x30
 8002752:	2303      	movs	r3, #3
 8002754:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002758:	4808      	ldr	r0, [pc, #32]	; (800277c <HAL_ADC_MspInit+0x168>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275c:	a908      	add	r1, sp, #32
 800275e:	e7a7      	b.n	80026b0 <HAL_ADC_MspInit+0x9c>
      Error_Handler();
 8002760:	f7fe fa18 	bl	8000b94 <Error_Handler>
 8002764:	e778      	b.n	8002658 <HAL_ADC_MspInit+0x44>
      Error_Handler();
 8002766:	f7fe fa15 	bl	8000b94 <Error_Handler>
 800276a:	e7ba      	b.n	80026e2 <HAL_ADC_MspInit+0xce>
 800276c:	50000100 	.word	0x50000100
 8002770:	20000a58 	.word	0x20000a58
 8002774:	40021000 	.word	0x40021000
 8002778:	48000400 	.word	0x48000400
 800277c:	48000800 	.word	0x48000800

08002780 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8002780:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <HAL_CORDIC_MspInit+0x2c>)
 8002782:	6802      	ldr	r2, [r0, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d000      	beq.n	800278a <HAL_CORDIC_MspInit+0xa>
 8002788:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800278a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 800278e:	f042 0208 	orr.w	r2, r2, #8
 8002792:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8002796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 800279a:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800279c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 80027a6:	b002      	add	sp, #8
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40020c00 	.word	0x40020c00

080027b0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80027b0:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 80027b2:	4a1b      	ldr	r2, [pc, #108]	; (8002820 <HAL_DAC_MspInit+0x70>)
 80027b4:	6801      	ldr	r1, [r0, #0]
{
 80027b6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	2300      	movs	r3, #0
  if(hdac->Instance==DAC1)
 80027ba:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80027c0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80027c4:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC1)
 80027c6:	d002      	beq.n	80027ce <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80027c8:	b009      	add	sp, #36	; 0x24
 80027ca:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 80027ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027d2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 80027d6:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8002818 <HAL_DAC_MspInit+0x68>
    __HAL_RCC_DAC1_CLK_ENABLE();
 80027da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80027e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027e4:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80027e8:	9200      	str	r2, [sp, #0]
 80027ea:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 80027fc:	a902      	add	r1, sp, #8
 80027fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 8002802:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002806:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8002808:	f002 f862 	bl	80048d0 <HAL_GPIO_Init>
}
 800280c:	b009      	add	sp, #36	; 0x24
 800280e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002812:	bf00      	nop
 8002814:	f3af 8000 	nop.w
 8002818:	00000010 	.word	0x00000010
 800281c:	00000003 	.word	0x00000003
 8002820:	50000800 	.word	0x50000800
 8002824:	00000000 	.word	0x00000000

08002828 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002828:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 800282a:	4a1b      	ldr	r2, [pc, #108]	; (8002898 <HAL_TIM_Base_MspInit+0x70>)
 800282c:	6801      	ldr	r1, [r0, #0]
{
 800282e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8002832:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002838:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800283c:	9306      	str	r3, [sp, #24]
  if(htim_base->Instance==TIM1)
 800283e:	d001      	beq.n	8002844 <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002840:	b008      	add	sp, #32
 8002842:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002844:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002848:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 800284c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8002890 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002850:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002856:	661a      	str	r2, [r3, #96]	; 0x60
 8002858:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800285a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800285e:	9200      	str	r2, [sp, #0]
 8002860:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002864:	f042 0201 	orr.w	r2, r2, #1
 8002868:	64da      	str	r2, [r3, #76]	; 0x4c
 800286a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002872:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8002874:	230c      	movs	r3, #12
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002876:	a902      	add	r1, sp, #8
 8002878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 800287c:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002880:	9c01      	ldr	r4, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002882:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8002884:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002886:	f002 f823 	bl	80048d0 <HAL_GPIO_Init>
}
 800288a:	b008      	add	sp, #32
 800288c:	bd10      	pop	{r4, pc}
 800288e:	bf00      	nop
 8002890:	00000800 	.word	0x00000800
 8002894:	00000012 	.word	0x00000012
 8002898:	40012c00 	.word	0x40012c00
 800289c:	00000000 	.word	0x00000000

080028a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028a0:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80028a2:	4a1b      	ldr	r2, [pc, #108]	; (8002910 <HAL_TIM_MspPostInit+0x70>)
 80028a4:	6801      	ldr	r1, [r0, #0]
{
 80028a6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80028aa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80028b0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80028b4:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 80028b6:	d002      	beq.n	80028be <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028b8:	b009      	add	sp, #36	; 0x24
 80028ba:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028c2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80028c6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8002900 <HAL_TIM_MspPostInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028cc:	f042 0201 	orr.w	r2, r2, #1
 80028d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80028d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80028d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80028d8:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8002908 <HAL_TIM_MspPostInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80028e4:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80028ea:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ee:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80028f0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f2:	f001 ffed 	bl	80048d0 <HAL_GPIO_Init>
}
 80028f6:	b009      	add	sp, #36	; 0x24
 80028f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80028fc:	f3af 8000 	nop.w
 8002900:	00000700 	.word	0x00000700
 8002904:	00000002 	.word	0x00000002
 8002908:	00000002 	.word	0x00000002
 800290c:	00000002 	.word	0x00000002
 8002910:	40012c00 	.word	0x40012c00
 8002914:	00000000 	.word	0x00000000

08002918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002918:	b510      	push	{r4, lr}
 800291a:	4604      	mov	r4, r0
 800291c:	b098      	sub	sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002920:	2244      	movs	r2, #68	; 0x44
 8002922:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002928:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800292c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800292e:	f006 f9a9 	bl	8008c84 <memset>
  if(huart->Instance==USART2)
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <HAL_UART_MspInit+0x90>)
 8002934:	6822      	ldr	r2, [r4, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d001      	beq.n	800293e <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800293a:	b018      	add	sp, #96	; 0x60
 800293c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800293e:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002940:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002942:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002944:	f002 fd08 	bl	8005358 <HAL_RCCEx_PeriphCLKConfig>
 8002948:	bb18      	cbnz	r0, 8002992 <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <HAL_UART_MspInit+0x94>)
 800294c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800294e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002952:	659a      	str	r2, [r3, #88]	; 0x58
 8002954:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002956:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800295a:	9200      	str	r2, [sp, #0]
 800295c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002960:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8002998 <HAL_UART_MspInit+0x80>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	64da      	str	r2, [r3, #76]	; 0x4c
 800296a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800296c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002970:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 80029a0 <HAL_UART_MspInit+0x88>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800297c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002982:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002988:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298a:	f001 ffa1 	bl	80048d0 <HAL_GPIO_Init>
}
 800298e:	b018      	add	sp, #96	; 0x60
 8002990:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002992:	f7fe f8ff 	bl	8000b94 <Error_Handler>
 8002996:	e7d8      	b.n	800294a <HAL_UART_MspInit+0x32>
 8002998:	0000000c 	.word	0x0000000c
 800299c:	00000002 	.word	0x00000002
	...
 80029a8:	40004400 	.word	0x40004400
 80029ac:	40021000 	.word	0x40021000

080029b0 <ADC1_2_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC1_2_IRQHandler(void)
{
 80029b0:	b508      	push	{r3, lr}
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80029b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029b6:	2240      	movs	r2, #64	; 0x40
 80029b8:	601a      	str	r2, [r3, #0]

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task
  UI_DACUpdate(TSK_HighFrequencyTask());
 80029ba:	f7fe fdd3 	bl	8001564 <TSK_HighFrequencyTask>
 /* USER CODE END HighFreq  */

 /* USER CODE BEGIN ADC1_2_IRQn 1 */

 /* USER CODE END ADC1_2_IRQn 1 */
}
 80029be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UI_DACUpdate(TSK_HighFrequencyTask());
 80029c2:	f000 b94b 	b.w	8002c5c <UI_DACUpdate>
 80029c6:	bf00      	nop

080029c8 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80029c8:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80029ca:	4804      	ldr	r0, [pc, #16]	; (80029dc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80029cc:	f06f 0201 	mvn.w	r2, #1
 80029d0:	611a      	str	r2, [r3, #16]
 80029d2:	f004 bea5 	b.w	8007720 <R3_2_TIMx_UP_IRQHandler>
 80029d6:	bf00      	nop
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	20000288 	.word	0x20000288

080029e0 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 80029e0:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80029e2:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	0611      	lsls	r1, r2, #24
 80029e8:	d505      	bpl.n	80029f6 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80029ea:	f06f 0280 	mvn.w	r2, #128	; 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 80029ee:	480a      	ldr	r0, [pc, #40]	; (8002a18 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80029f0:	611a      	str	r2, [r3, #16]
 80029f2:	f004 fef1 	bl	80077d8 <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80029f6:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	05d2      	lsls	r2, r2, #23
 80029fc:	d505      	bpl.n	8002a0a <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80029fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 8002a02:	4805      	ldr	r0, [pc, #20]	; (8002a18 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002a04:	611a      	str	r2, [r3, #16]
 8002a06:	f004 fec7 	bl	8007798 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8002a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8002a0e:	f7fe bd7d 	b.w	800150c <MC_Scheduler>
 8002a12:	bf00      	nop
 8002a14:	40012c00 	.word	0x40012c00
 8002a18:	20000288 	.word	0x20000288

08002a1c <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8002a1c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002a1e:	4c18      	ldr	r4, [pc, #96]	; (8002a80 <USART2_IRQHandler+0x64>)
 8002a20:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002a24:	69da      	ldr	r2, [r3, #28]
 8002a26:	0691      	lsls	r1, r2, #26
 8002a28:	d50b      	bpl.n	8002a42 <USART2_IRQHandler+0x26>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002a2a:	6a59      	ldr	r1, [r3, #36]	; 0x24
  {
    uint16_t retVal;
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	b2c9      	uxtb	r1, r1
 8002a30:	f005 ff6e 	bl	8008910 <UFCP_RX_IRQ_Handler>
 8002a34:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d01a      	beq.n	8002a70 <USART2_IRQHandler+0x54>
    {
      UI_SerialCommunicationTimeOutStart();
    }
    if (retVal == 2)
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d01d      	beq.n	8002a7a <USART2_IRQHandler+0x5e>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002a3e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	0612      	lsls	r2, r2, #24
 8002a46:	d504      	bpl.n	8002a52 <USART2_IRQHandler+0x36>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8002a48:	480d      	ldr	r0, [pc, #52]	; (8002a80 <USART2_IRQHandler+0x64>)
 8002a4a:	f005 febd 	bl	80087c8 <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002a4e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	071b      	lsls	r3, r3, #28
 8002a56:	d50a      	bpl.n	8002a6e <USART2_IRQHandler+0x52>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8002a58:	4809      	ldr	r0, [pc, #36]	; (8002a80 <USART2_IRQHandler+0x64>)
 8002a5a:	f005 ffc3 	bl	80089e4 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002a5e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002a62:	2208      	movs	r2, #8
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8002a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a68:	621a      	str	r2, [r3, #32]
    UI_SerialCommunicationTimeOutStop();
 8002a6a:	f000 b907 	b.w	8002c7c <UI_SerialCommunicationTimeOutStop>
}
 8002a6e:	bd10      	pop	{r4, pc}
      UI_SerialCommunicationTimeOutStart();
 8002a70:	f000 f90a 	bl	8002c88 <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002a74:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002a78:	e7e3      	b.n	8002a42 <USART2_IRQHandler+0x26>
      UI_SerialCommunicationTimeOutStop();
 8002a7a:	f000 f8ff 	bl	8002c7c <UI_SerialCommunicationTimeOutStop>
 8002a7e:	e7de      	b.n	8002a3e <USART2_IRQHandler+0x22>
 8002a80:	200005bc 	.word	0x200005bc

08002a84 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002a84:	b538      	push	{r3, r4, r5, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8002a86:	f7fe fe9f 	bl	80017c8 <TSK_HardwareFaultTask>
 8002a8a:	4c18      	ldr	r4, [pc, #96]	; (8002aec <HardFault_Handler+0x68>)
 8002a8c:	2508      	movs	r5, #8

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002a8e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002a92:	69da      	ldr	r2, [r3, #28]
 8002a94:	0711      	lsls	r1, r2, #28
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8002a96:	4620      	mov	r0, r4
 8002a98:	d508      	bpl.n	8002aac <HardFault_Handler+0x28>
 8002a9a:	f005 ffa3 	bl	80089e4 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002a9e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002aa2:	621d      	str	r5, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 8002aa4:	f000 f8ea 	bl	8002c7c <UI_SerialCommunicationTimeOutStop>
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002aa8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	0612      	lsls	r2, r2, #24
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	d513      	bpl.n	8002adc <HardFault_Handler+0x58>
 8002ab4:	f005 fe88 	bl	80087c8 <UFCP_TX_IRQ_Handler>
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002ab8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002abc:	69da      	ldr	r2, [r3, #28]
 8002abe:	0691      	lsls	r1, r2, #26
 8002ac0:	d5e7      	bpl.n	8002a92 <HardFault_Handler+0xe>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002ac2:	6a59      	ldr	r1, [r3, #36]	; 0x24
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	b2c9      	uxtb	r1, r1
 8002ac8:	f005 ff22 	bl	8008910 <UFCP_RX_IRQ_Handler>
 8002acc:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d008      	beq.n	8002ae4 <HardFault_Handler+0x60>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d1db      	bne.n	8002a8e <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 8002ad6:	f000 f8d1 	bl	8002c7c <UI_SerialCommunicationTimeOutStop>
 8002ada:	e7d8      	b.n	8002a8e <HardFault_Handler+0xa>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002adc:	69da      	ldr	r2, [r3, #28]
 8002ade:	0692      	lsls	r2, r2, #26
 8002ae0:	d5d7      	bpl.n	8002a92 <HardFault_Handler+0xe>
 8002ae2:	e7ee      	b.n	8002ac2 <HardFault_Handler+0x3e>
          UI_SerialCommunicationTimeOutStart();
 8002ae4:	f000 f8d0 	bl	8002c88 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8002ae8:	e7d1      	b.n	8002a8e <HardFault_Handler+0xa>
 8002aea:	bf00      	nop
 8002aec:	200005bc 	.word	0x200005bc

08002af0 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002af0:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002af2:	4c0a      	ldr	r4, [pc, #40]	; (8002b1c <SysTick_Handler+0x2c>)
 8002af4:	7823      	ldrb	r3, [r4, #0]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d006      	beq.n	8002b08 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8002afa:	3301      	adds	r3, #1
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002b04:	f7fe be50 	b.w	80017a8 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8002b08:	f000 fe5c 	bl	80037c4 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002b0c:	f001 fde2 	bl	80046d4 <HAL_SYSTICK_IRQHandler>
 8002b10:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8002b12:	7023      	strb	r3, [r4, #0]
}
 8002b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002b18:	f7fe be46 	b.w	80017a8 <MC_RunMotorControlTasks>
 8002b1c:	200006fc 	.word	0x200006fc

08002b20 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <EXTI15_10_IRQHandler+0x14>)
 8002b22:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 8002b24:	0492      	lsls	r2, r2, #18
 8002b26:	d400      	bmi.n	8002b2a <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    UI_HandleStartStopButton_cb ();
  }

}
 8002b28:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b2e:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8002b30:	f000 b8b0 	b.w	8002c94 <UI_HandleStartStopButton_cb>
 8002b34:	40010400 	.word	0x40010400

08002b38 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pDAC = &DAC_UI_Params;
      pDAC->_Super = UI_Params;
 8002b3c:	4d2d      	ldr	r5, [pc, #180]	; (8002bf4 <UI_TaskInit+0xbc>)
      pDAC = &DAC_UI_Params;
 8002b3e:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8002c0c <UI_TaskInit+0xd4>
 8002b42:	4e2d      	ldr	r6, [pc, #180]	; (8002bf8 <UI_TaskInit+0xc0>)
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_I_A );
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );

    pMCP = &MCP_UI_Params;
 8002b44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002c10 <UI_TaskInit+0xd8>
      pDAC = &DAC_UI_Params;
 8002b48:	f8c6 e000 	str.w	lr, [r6]
{
 8002b4c:	b087      	sub	sp, #28
 8002b4e:	4690      	mov	r8, r2
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 8002b50:	9000      	str	r0, [sp, #0]
{
 8002b52:	9a10      	ldr	r2, [sp, #64]	; 0x40
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 8002b54:	9004      	str	r0, [sp, #16]
      pDAC->_Super = UI_Params;
 8002b56:	462c      	mov	r4, r5
{
 8002b58:	460f      	mov	r7, r1
 8002b5a:	4699      	mov	r9, r3
 8002b5c:	9205      	str	r2, [sp, #20]
      pDAC->_Super = UI_Params;
 8002b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b60:	46f4      	mov	ip, lr
 8002b62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002b6c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b70:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 8002b74:	4670      	mov	r0, lr
 8002b76:	464b      	mov	r3, r9
 8002b78:	4642      	mov	r2, r8
 8002b7a:	4639      	mov	r1, r7
 8002b7c:	f000 f896 	bl	8002cac <UI_Init>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 8002b80:	6830      	ldr	r0, [r6, #0]
    pMCP->_Super = UI_Params;

    UFCP_Init( & pUSART );
 8002b82:	f8df b090 	ldr.w	fp, [pc, #144]	; 8002c14 <UI_TaskInit+0xdc>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 8002b86:	f000 fabb 	bl	8003100 <UI_DACInit>
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_I_A );
 8002b8a:	6830      	ldr	r0, [r6, #0]
 8002b8c:	2223      	movs	r2, #35	; 0x23
 8002b8e:	2100      	movs	r1, #0
 8002b90:	f000 fabe 	bl	8003110 <UI_SetDAC>
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );
 8002b94:	6830      	ldr	r0, [r6, #0]
 8002b96:	2224      	movs	r2, #36	; 0x24
 8002b98:	2101      	movs	r1, #1
 8002b9a:	f000 fab9 	bl	8003110 <UI_SetDAC>
    pMCP = &MCP_UI_Params;
 8002b9e:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <UI_TaskInit+0xc4>)
 8002ba0:	f8ca 3000 	str.w	r3, [sl]
    pMCP->_Super = UI_Params;
 8002ba4:	469c      	mov	ip, r3
 8002ba6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ba8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002bb2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002bb6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    UFCP_Init( & pUSART );
 8002bba:	4658      	mov	r0, fp
 8002bbc:	f005 fe02 	bl	80087c4 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 8002bc0:	6833      	ldr	r3, [r6, #0]
 8002bc2:	9a05      	ldr	r2, [sp, #20]
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <UI_TaskInit+0xc8>)
 8002bc8:	f8da 0000 	ldr.w	r0, [sl]
 8002bcc:	9202      	str	r2, [sp, #8]
 8002bce:	4659      	mov	r1, fp
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	4a0c      	ldr	r2, [pc, #48]	; (8002c04 <UI_TaskInit+0xcc>)
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <UI_TaskInit+0xd0>)
 8002bd6:	f7ff fa55 	bl	8002084 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002bda:	9b04      	ldr	r3, [sp, #16]
 8002bdc:	f8da 0000 	ldr.w	r0, [sl]
 8002be0:	9310      	str	r3, [sp, #64]	; 0x40
 8002be2:	4642      	mov	r2, r8
 8002be4:	464b      	mov	r3, r9
 8002be6:	4639      	mov	r1, r7

}
 8002be8:	b007      	add	sp, #28
 8002bea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002bee:	f000 b85d 	b.w	8002cac <UI_Init>
 8002bf2:	bf00      	nop
 8002bf4:	20000554 	.word	0x20000554
 8002bf8:	20000b2c 	.word	0x20000b2c
 8002bfc:	20000a5c 	.word	0x20000a5c
 8002c00:	08008a05 	.word	0x08008a05
 8002c04:	08008859 	.word	0x08008859
 8002c08:	08008831 	.word	0x08008831
 8002c0c:	200000b4 	.word	0x200000b4
 8002c10:	20000b30 	.word	0x20000b30
 8002c14:	200005bc 	.word	0x200005bc

08002c18 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002c18:	4a0d      	ldr	r2, [pc, #52]	; (8002c50 <UI_Scheduler+0x38>)
 8002c1a:	8813      	ldrh	r3, [r2, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	b11b      	cbz	r3, 8002c28 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002c20:	8813      	ldrh	r3, [r2, #0]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002c28:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <UI_Scheduler+0x3c>)
 8002c2a:	8813      	ldrh	r3, [r2, #0]
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d903      	bls.n	8002c3a <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8002c32:	8813      	ldrh	r3, [r2, #0]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002c3a:	4a07      	ldr	r2, [pc, #28]	; (8002c58 <UI_Scheduler+0x40>)
 8002c3c:	8813      	ldrh	r3, [r2, #0]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d903      	bls.n	8002c4c <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8002c44:	8813      	ldrh	r3, [r2, #0]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	8013      	strh	r3, [r2, #0]
  }
}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000b2a 	.word	0x20000b2a
 8002c54:	20000b28 	.word	0x20000b28
 8002c58:	200006fe 	.word	0x200006fe

08002c5c <UI_DACUpdate>:

__weak void UI_DACUpdate(uint8_t bMotorNbr)
{
 8002c5c:	b538      	push	{r3, r4, r5, lr}
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 8002c5e:	4d06      	ldr	r5, [pc, #24]	; (8002c78 <UI_DACUpdate+0x1c>)
{
 8002c60:	4604      	mov	r4, r0
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 8002c62:	6828      	ldr	r0, [r5, #0]
 8002c64:	f000 f834 	bl	8002cd0 <UI_GetSelectedMC>
 8002c68:	42a0      	cmp	r0, r4
 8002c6a:	d000      	beq.n	8002c6e <UI_DACUpdate+0x12>
  {
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
  }
}
 8002c6c:	bd38      	pop	{r3, r4, r5, pc}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 8002c6e:	6828      	ldr	r0, [r5, #0]
}
 8002c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 8002c74:	f000 ba48 	b.w	8003108 <UI_DACExec>
 8002c78:	20000b2c 	.word	0x20000b2c

08002c7c <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002c7c:	4b01      	ldr	r3, [pc, #4]	; (8002c84 <UI_SerialCommunicationTimeOutStop+0x8>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	801a      	strh	r2, [r3, #0]
}
 8002c82:	4770      	bx	lr
 8002c84:	20000b28 	.word	0x20000b28

08002c88 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002c88:	4b01      	ldr	r3, [pc, #4]	; (8002c90 <UI_SerialCommunicationTimeOutStart+0x8>)
 8002c8a:	224f      	movs	r2, #79	; 0x4f
 8002c8c:	801a      	strh	r2, [r3, #0]
}
 8002c8e:	4770      	bx	lr
 8002c90:	20000b28 	.word	0x20000b28

08002c94 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002c94:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 8002c96:	f7fd ff97 	bl	8000bc8 <MC_GetSTMStateMotor1>
 8002c9a:	b918      	cbnz	r0, 8002ca4 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002c9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 8002ca0:	f7fd bf7a 	b.w	8000b98 <MC_StartMotor1>
}
 8002ca4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8002ca8:	f7fd bf7c 	b.w	8000ba4 <MC_StopMotor1>

08002cac <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 8002cac:	e9c0 2308 	strd	r2, r3, [r0, #32]
  pHandle->bDriveNum = bMCNum;
 8002cb0:	7701      	strb	r1, [r0, #28]
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8002cb2:	9b00      	ldr	r3, [sp, #0]
 8002cb4:	6283      	str	r3, [r0, #40]	; 0x28
  pHandle->bSelectedDrive = 0u;
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop

08002cc0 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002cc0:	7f03      	ldrb	r3, [r0, #28]
 8002cc2:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002cc4:	bf86      	itte	hi
 8002cc6:	f880 102c 	strbhi.w	r1, [r0, #44]	; 0x2c
  bool retVal = true;
 8002cca:	2001      	movhi	r0, #1
    retVal = false;
 8002ccc:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002cce:	4770      	bx	lr

08002cd0 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002cd0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop

08002cd8 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002cd8:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002cda:	6a04      	ldr	r4, [r0, #32]
 8002cdc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002ce0:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 8002ce4:	4614      	mov	r4, r2
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002ce6:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
 8002ce8:	b083      	sub	sp, #12
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002cea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 8002cee:	295b      	cmp	r1, #91	; 0x5b
 8002cf0:	d85d      	bhi.n	8002dae <UI_SetReg+0xd6>
 8002cf2:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002cf6:	011c      	.short	0x011c
 8002cf8:	005c005c 	.word	0x005c005c
 8002cfc:	005c010c 	.word	0x005c010c
 8002d00:	01000106 	.word	0x01000106
 8002d04:	0120012c 	.word	0x0120012c
 8002d08:	00b600bc 	.word	0x00b600bc
 8002d0c:	00ce00da 	.word	0x00ce00da
 8002d10:	00c200c8 	.word	0x00c200c8
 8002d14:	00e000fa 	.word	0x00e000fa
 8002d18:	005c009b 	.word	0x005c009b
 8002d1c:	0080005c 	.word	0x0080005c
 8002d20:	005c0071 	.word	0x005c0071
 8002d24:	005c005c 	.word	0x005c005c
 8002d28:	005c005c 	.word	0x005c005c
 8002d2c:	005c005c 	.word	0x005c005c
 8002d30:	005c005c 	.word	0x005c005c
 8002d34:	005c005c 	.word	0x005c005c
 8002d38:	005c005c 	.word	0x005c005c
 8002d3c:	005c005c 	.word	0x005c005c
 8002d40:	005c005c 	.word	0x005c005c
 8002d44:	005c005c 	.word	0x005c005c
 8002d48:	005c005c 	.word	0x005c005c
 8002d4c:	005c005c 	.word	0x005c005c
 8002d50:	005c005c 	.word	0x005c005c
 8002d54:	005c005c 	.word	0x005c005c
 8002d58:	005c005c 	.word	0x005c005c
 8002d5c:	005c005c 	.word	0x005c005c
 8002d60:	005c005c 	.word	0x005c005c
 8002d64:	005c005c 	.word	0x005c005c
 8002d68:	005c005c 	.word	0x005c005c
 8002d6c:	005c005c 	.word	0x005c005c
 8002d70:	005c005c 	.word	0x005c005c
 8002d74:	005c005c 	.word	0x005c005c
 8002d78:	005c006b 	.word	0x005c006b
 8002d7c:	005c005c 	.word	0x005c005c
 8002d80:	005c005c 	.word	0x005c005c
 8002d84:	005c005c 	.word	0x005c005c
 8002d88:	005c005c 	.word	0x005c005c
 8002d8c:	005c005c 	.word	0x005c005c
 8002d90:	005c005c 	.word	0x005c005c
 8002d94:	005c005c 	.word	0x005c005c
 8002d98:	005c005c 	.word	0x005c005c
 8002d9c:	005c005c 	.word	0x005c005c
 8002da0:	005c005c 	.word	0x005c005c
 8002da4:	005c005c 	.word	0x005c005c
 8002da8:	005c005c 	.word	0x005c005c
 8002dac:	005f      	.short	0x005f
 8002dae:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8002db0:	b003      	add	sp, #12
 8002db2:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002db4:	497f      	ldr	r1, [pc, #508]	; (8002fb4 <UI_SetReg+0x2dc>)
 8002db6:	fb81 3104 	smull	r3, r1, r1, r4
 8002dba:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	b209      	sxth	r1, r1
 8002dc4:	f7fd ff14 	bl	8000bf0 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002dc8:	2001      	movs	r0, #1
    break;
 8002dca:	e7f1      	b.n	8002db0 <UI_SetReg+0xd8>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8002dcc:	4628      	mov	r0, r5
 8002dce:	b221      	sxth	r1, r4
 8002dd0:	f7fe f816 	bl	8000e00 <MCI_SetIdref>
  bool retVal = true;
 8002dd4:	2001      	movs	r0, #1
    break;
 8002dd6:	e7eb      	b.n	8002db0 <UI_SetReg+0xd8>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002dd8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002dda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002dde:	0f19      	lsrs	r1, r3, #28
 8002de0:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002de2:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002de6:	f000 80c6 	beq.w	8002f76 <UI_SetReg+0x29e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002dea:	2b09      	cmp	r3, #9
 8002dec:	f000 80c6 	beq.w	8002f7c <UI_SetReg+0x2a4>
  bool retVal = true;
 8002df0:	2001      	movs	r0, #1
}
 8002df2:	b003      	add	sp, #12
 8002df4:	bd30      	pop	{r4, r5, pc}
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002df6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002df8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002dfc:	0f19      	lsrs	r1, r3, #28
 8002dfe:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e00:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e04:	f000 80b2 	beq.w	8002f6c <UI_SetReg+0x294>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e08:	2b09      	cmp	r3, #9
 8002e0a:	d1f1      	bne.n	8002df0 <UI_SetReg+0x118>
        pSPD = pMCT->pSpeedSensorAux;
 8002e0c:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002e0e:	2d00      	cmp	r5, #0
 8002e10:	d0ee      	beq.n	8002df0 <UI_SetReg+0x118>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002e12:	aa01      	add	r2, sp, #4
 8002e14:	f10d 0102 	add.w	r1, sp, #2
 8002e18:	4628      	mov	r0, r5
 8002e1a:	f005 fc91 	bl	8008740 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 8002e1e:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002e22:	b222      	sxth	r2, r4
 8002e24:	4628      	mov	r0, r5
 8002e26:	f005 fc99 	bl	800875c <STO_SetPLLGains>
    break;
 8002e2a:	e7e1      	b.n	8002df0 <UI_SetReg+0x118>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002e2c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002e2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e32:	0f19      	lsrs	r1, r3, #28
 8002e34:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e36:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e3a:	f000 8092 	beq.w	8002f62 <UI_SetReg+0x28a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e3e:	2b09      	cmp	r3, #9
 8002e40:	d1d6      	bne.n	8002df0 <UI_SetReg+0x118>
        pSPD = pMCT->pSpeedSensorAux;
 8002e42:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002e44:	2d00      	cmp	r5, #0
 8002e46:	d0d3      	beq.n	8002df0 <UI_SetReg+0x118>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002e48:	aa01      	add	r2, sp, #4
 8002e4a:	f10d 0102 	add.w	r1, sp, #2
 8002e4e:	4628      	mov	r0, r5
 8002e50:	f005 fc6a 	bl	8008728 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 8002e54:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002e58:	b222      	sxth	r2, r4
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	f005 fc6c 	bl	8008738 <STO_PLL_SetObserverGains>
    break;
 8002e60:	e7c6      	b.n	8002df0 <UI_SetReg+0x118>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8002e62:	6850      	ldr	r0, [r2, #4]
 8002e64:	b221      	sxth	r1, r4
 8002e66:	f003 fcbb 	bl	80067e0 <PID_SetKI>
  bool retVal = true;
 8002e6a:	2001      	movs	r0, #1
    break;
 8002e6c:	e7a0      	b.n	8002db0 <UI_SetReg+0xd8>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002e6e:	6850      	ldr	r0, [r2, #4]
 8002e70:	b221      	sxth	r1, r4
 8002e72:	f003 fcb3 	bl	80067dc <PID_SetKP>
  bool retVal = true;
 8002e76:	2001      	movs	r0, #1
    break;
 8002e78:	e79a      	b.n	8002db0 <UI_SetReg+0xd8>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8002e7a:	6890      	ldr	r0, [r2, #8]
 8002e7c:	b221      	sxth	r1, r4
 8002e7e:	f003 fcaf 	bl	80067e0 <PID_SetKI>
  bool retVal = true;
 8002e82:	2001      	movs	r0, #1
    break;
 8002e84:	e794      	b.n	8002db0 <UI_SetReg+0xd8>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002e86:	6890      	ldr	r0, [r2, #8]
 8002e88:	b221      	sxth	r1, r4
 8002e8a:	f003 fca7 	bl	80067dc <PID_SetKP>
  bool retVal = true;
 8002e8e:	2001      	movs	r0, #1
    break;
 8002e90:	e78e      	b.n	8002db0 <UI_SetReg+0xd8>
      currComp = MCI_GetIqdref(pMCI);
 8002e92:	4628      	mov	r0, r5
 8002e94:	f7fd ff86 	bl	8000da4 <MCI_GetIqdref>
 8002e98:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8002e9a:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	9901      	ldr	r1, [sp, #4]
 8002ea2:	f7fd feb9 	bl	8000c18 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002ea6:	2001      	movs	r0, #1
    break;
 8002ea8:	e782      	b.n	8002db0 <UI_SetReg+0xd8>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002eaa:	6850      	ldr	r0, [r2, #4]
 8002eac:	b221      	sxth	r1, r4
 8002eae:	f003 fca7 	bl	8006800 <PID_SetKD>
  bool retVal = true;
 8002eb2:	2001      	movs	r0, #1
    break;
 8002eb4:	e77c      	b.n	8002db0 <UI_SetReg+0xd8>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002eb6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002eb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ebc:	0f19      	lsrs	r1, r3, #28
 8002ebe:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ec0:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ec4:	d049      	beq.n	8002f5a <UI_SetReg+0x282>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ec6:	2b09      	cmp	r3, #9
 8002ec8:	d192      	bne.n	8002df0 <UI_SetReg+0x118>
        pSPD = pMCT->pSpeedSensorAux;
 8002eca:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002ecc:	2d00      	cmp	r5, #0
 8002ece:	d08f      	beq.n	8002df0 <UI_SetReg+0x118>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002ed0:	aa01      	add	r2, sp, #4
 8002ed2:	f10d 0102 	add.w	r1, sp, #2
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	f005 fc26 	bl	8008728 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 8002edc:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002ee0:	b221      	sxth	r1, r4
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	f005 fc28 	bl	8008738 <STO_PLL_SetObserverGains>
    break;
 8002ee8:	e782      	b.n	8002df0 <UI_SetReg+0x118>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8002eea:	6890      	ldr	r0, [r2, #8]
 8002eec:	b221      	sxth	r1, r4
 8002eee:	f003 fc87 	bl	8006800 <PID_SetKD>
  bool retVal = true;
 8002ef2:	2001      	movs	r0, #1
    break;
 8002ef4:	e75c      	b.n	8002db0 <UI_SetReg+0xd8>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002ef6:	6810      	ldr	r0, [r2, #0]
 8002ef8:	b221      	sxth	r1, r4
 8002efa:	f003 fc71 	bl	80067e0 <PID_SetKI>
  bool retVal = true;
 8002efe:	2001      	movs	r0, #1
    break;
 8002f00:	e756      	b.n	8002db0 <UI_SetReg+0xd8>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002f02:	6810      	ldr	r0, [r2, #0]
 8002f04:	b221      	sxth	r1, r4
 8002f06:	f003 fc69 	bl	80067dc <PID_SetKP>
  bool retVal = true;
 8002f0a:	2001      	movs	r0, #1
    break;
 8002f0c:	e750      	b.n	8002db0 <UI_SetReg+0xd8>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002f0e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002f12:	d044      	beq.n	8002f9e <UI_SetReg+0x2c6>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002f14:	2c01      	cmp	r4, #1
 8002f16:	f47f af6b 	bne.w	8002df0 <UI_SetReg+0x118>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	f7fd ff14 	bl	8000d48 <MCI_GetMecSpeedRefUnit>
 8002f20:	2200      	movs	r2, #0
 8002f22:	4601      	mov	r1, r0
 8002f24:	4628      	mov	r0, r5
 8002f26:	f7fd fe63 	bl	8000bf0 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	e740      	b.n	8002db0 <UI_SetReg+0xd8>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002f2e:	b2e1      	uxtb	r1, r4
 8002f30:	f7ff fec6 	bl	8002cc0 <UI_SelectMC>
    break;
 8002f34:	e73c      	b.n	8002db0 <UI_SetReg+0xd8>
      currComp = MCI_GetIqdref(pMCI);
 8002f36:	4628      	mov	r0, r5
 8002f38:	f7fd ff34 	bl	8000da4 <MCI_GetIqdref>
 8002f3c:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002f3e:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002f42:	4628      	mov	r0, r5
 8002f44:	9901      	ldr	r1, [sp, #4]
 8002f46:	f7fd fe67 	bl	8000c18 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002f4a:	2001      	movs	r0, #1
    break;
 8002f4c:	e730      	b.n	8002db0 <UI_SetReg+0xd8>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002f4e:	6810      	ldr	r0, [r2, #0]
 8002f50:	b221      	sxth	r1, r4
 8002f52:	f003 fc55 	bl	8006800 <PID_SetKD>
  bool retVal = true;
 8002f56:	2001      	movs	r0, #1
    break;
 8002f58:	e72a      	b.n	8002db0 <UI_SetReg+0xd8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f5a:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002f5c:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f5e:	d1b5      	bne.n	8002ecc <UI_SetReg+0x1f4>
 8002f60:	e7b3      	b.n	8002eca <UI_SetReg+0x1f2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f62:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002f64:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f66:	f47f af6d 	bne.w	8002e44 <UI_SetReg+0x16c>
 8002f6a:	e76a      	b.n	8002e42 <UI_SetReg+0x16a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f6c:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002f6e:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f70:	f47f af4d 	bne.w	8002e0e <UI_SetReg+0x136>
 8002f74:	e74a      	b.n	8002e0c <UI_SetReg+0x134>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f76:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002f78:	6995      	ldr	r5, [r2, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f7a:	d100      	bne.n	8002f7e <UI_SetReg+0x2a6>
        pSPD = pMCT->pSpeedSensorAux;
 8002f7c:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002f7e:	2d00      	cmp	r5, #0
 8002f80:	f43f af36 	beq.w	8002df0 <UI_SetReg+0x118>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002f84:	aa01      	add	r2, sp, #4
 8002f86:	f10d 0102 	add.w	r1, sp, #2
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	f005 fbd8 	bl	8008740 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 8002f90:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002f94:	b221      	sxth	r1, r4
 8002f96:	4628      	mov	r0, r5
 8002f98:	f005 fbe0 	bl	800875c <STO_SetPLLGains>
    break;
 8002f9c:	e728      	b.n	8002df0 <UI_SetReg+0x118>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002f9e:	4628      	mov	r0, r5
 8002fa0:	f7fd ff2a 	bl	8000df8 <MCI_GetTeref>
 8002fa4:	4622      	mov	r2, r4
 8002fa6:	4601      	mov	r1, r0
 8002fa8:	4628      	mov	r0, r5
 8002faa:	f7fd fe2b 	bl	8000c04 <MCI_ExecTorqueRamp>
  bool retVal = true;
 8002fae:	2001      	movs	r0, #1
 8002fb0:	e6fe      	b.n	8002db0 <UI_SetReg+0xd8>
 8002fb2:	bf00      	nop
 8002fb4:	2aaaaaab 	.word	0x2aaaaaab

08002fb8 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8002fb8:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002fba:	6a03      	ldr	r3, [r0, #32]
 8002fbc:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c

  switch (bCmdID)
 8002fc0:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002fc2:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8002fc6:	290d      	cmp	r1, #13
 8002fc8:	d808      	bhi.n	8002fdc <UI_ExecCmd+0x24>
 8002fca:	e8df f001 	tbb	[pc, r1]
 8002fce:	1419      	.short	0x1419
 8002fd0:	100e0e09 	.word	0x100e0e09
 8002fd4:	0728231e 	.word	0x0728231e
 8002fd8:	14070707 	.word	0x14070707
 8002fdc:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8002fde:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f7fd fe75 	bl	8000cd0 <MCI_GetSTMState>
 8002fe6:	2806      	cmp	r0, #6
 8002fe8:	d01e      	beq.n	8003028 <UI_ExecCmd+0x70>
  bool retVal = true;
 8002fea:	2001      	movs	r0, #1
}
 8002fec:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f7fd fe6e 	bl	8000cd0 <MCI_GetSTMState>
 8002ff4:	b120      	cbz	r0, 8003000 <UI_ExecCmd+0x48>
        MCI_StopMotor(pMCI);
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	f7fd fe22 	bl	8000c40 <MCI_StopMotor>
  bool retVal = true;
 8002ffc:	2001      	movs	r0, #1
}
 8002ffe:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8003000:	4620      	mov	r0, r4
 8003002:	f7fd fe13 	bl	8000c2c <MCI_StartMotor>
  bool retVal = true;
 8003006:	2001      	movs	r0, #1
}
 8003008:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 800300a:	4620      	mov	r0, r4
 800300c:	f7fd fe1c 	bl	8000c48 <MCI_FaultAcknowledged>
  bool retVal = true;
 8003010:	2001      	movs	r0, #1
}
 8003012:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8003014:	4620      	mov	r0, r4
 8003016:	f7fd fe1b 	bl	8000c50 <MCI_EncoderAlign>
  bool retVal = true;
 800301a:	2001      	movs	r0, #1
}
 800301c:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 800301e:	4620      	mov	r0, r4
 8003020:	f7fd fef8 	bl	8000e14 <MCI_Clear_Iqdref>
  bool retVal = true;
 8003024:	2001      	movs	r0, #1
}
 8003026:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8003028:	4620      	mov	r0, r4
 800302a:	f7fd fe81 	bl	8000d30 <MCI_StopRamp>
  bool retVal = true;
 800302e:	2001      	movs	r0, #1
}
 8003030:	bd10      	pop	{r4, pc}
 8003032:	bf00      	nop

08003034 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8003034:	b508      	push	{r3, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8003036:	4b07      	ldr	r3, [pc, #28]	; (8003054 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003038:	f890 c02c 	ldrb.w	ip, [r0, #44]	; 0x2c
 800303c:	6a00      	ldr	r0, [r0, #32]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800303e:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 8003042:	fb83 c301 	smull	ip, r3, r3, r1
 8003046:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 800304a:	b209      	sxth	r1, r1
 800304c:	f7fd fdd0 	bl	8000bf0 <MCI_ExecSpeedRamp>
  return true;
}
 8003050:	2001      	movs	r0, #1
 8003052:	bd08      	pop	{r3, pc}
 8003054:	2aaaaaab 	.word	0x2aaaaaab

08003058 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8003058:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800305a:	6a03      	ldr	r3, [r0, #32]
 800305c:	f890 c02c 	ldrb.w	ip, [r0, #44]	; 0x2c

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8003060:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8003064:	f7fd fdce 	bl	8000c04 <MCI_ExecTorqueRamp>
  return true;
}
 8003068:	2001      	movs	r0, #1
 800306a:	bd08      	pop	{r3, pc}

0800306c <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306e:	4617      	mov	r7, r2
 8003070:	461e      	mov	r6, r3
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003072:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8003076:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307c:	695c      	ldr	r4, [r3, #20]
  if (pRevupCtrl)
 800307e:	b18c      	cbz	r4, 80030a4 <UI_GetRevupData+0x38>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8003080:	4620      	mov	r0, r4
 8003082:	460d      	mov	r5, r1
 8003084:	f004 fed0 	bl	8007e28 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8003088:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 800308a:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800308c:	4620      	mov	r0, r4
 800308e:	f004 fed1 	bl	8007e34 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8003092:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8003094:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8003096:	4620      	mov	r0, r4
 8003098:	f004 fed4 	bl	8007e44 <RUC_GetPhaseFinalTorque>
 800309c:	9b06      	ldr	r3, [sp, #24]
 800309e:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 80030a0:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 80030a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 80030a4:	4620      	mov	r0, r4
}
 80030a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080030a8 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 80030a8:	b570      	push	{r4, r5, r6, lr}
 80030aa:	461d      	mov	r5, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80030ac:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 80030b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80030b2:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80030b4:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
{
 80030b8:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80030bc:	6958      	ldr	r0, [r3, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 80030be:	9001      	str	r0, [sp, #4]
{
 80030c0:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 80030c2:	f004 fe9f 	bl	8007e04 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 80030c6:	9801      	ldr	r0, [sp, #4]
 80030c8:	462a      	mov	r2, r5
 80030ca:	4621      	mov	r1, r4
 80030cc:	f004 fea0 	bl	8007e10 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 80030d0:	9801      	ldr	r0, [sp, #4]
 80030d2:	4632      	mov	r2, r6
 80030d4:	4621      	mov	r1, r4
 80030d6:	f004 fea1 	bl	8007e1c <RUC_SetPhaseFinalTorque>
  return true;
}
 80030da:	2001      	movs	r0, #1
 80030dc:	b002      	add	sp, #8
 80030de:	bd70      	pop	{r4, r5, r6, pc}

080030e0 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 80030e0:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80030e2:	f890 c02c 	ldrb.w	ip, [r0, #44]	; 0x2c
 80030e6:	6a03      	ldr	r3, [r0, #32]
  qd_t currComp;
  currComp.q = hIqRef;
 80030e8:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 80030ec:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 80030f0:	9901      	ldr	r1, [sp, #4]
 80030f2:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
}
 80030f6:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 80030f8:	f7fd bd8e 	b.w	8000c18 <MCI_SetCurrentReferences>

080030fc <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 80030fc:	2000      	movs	r0, #0
 80030fe:	4770      	bx	lr

08003100 <UI_DACInit>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
__weak void UI_DACInit(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACInit)
 8003100:	6943      	ldr	r3, [r0, #20]
 8003102:	b103      	cbz	r3, 8003106 <UI_DACInit+0x6>
  {
	  pHandle->pFct_DACInit(pHandle);
 8003104:	4718      	bx	r3
  }
}
 8003106:	4770      	bx	lr

08003108 <UI_DACExec>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
void UI_DACExec(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACExec)
 8003108:	6983      	ldr	r3, [r0, #24]
 800310a:	b103      	cbz	r3, 800310e <UI_DACExec+0x6>
  {
    pHandle->pFct_DACExec(pHandle);
 800310c:	4718      	bx	r3
  }
}
 800310e:	4770      	bx	lr

08003110 <UI_SetDAC>:
  * @retval none.
  */
void UI_SetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                         MC_Protocol_REG_t bVariable)
{
  if (pHandle->pFctDACSetChannelConfig)
 8003110:	6843      	ldr	r3, [r0, #4]
 8003112:	b103      	cbz	r3, 8003116 <UI_SetDAC+0x6>
  {
	  pHandle->pFctDACSetChannelConfig(pHandle, bChannel, bVariable);
 8003114:	4718      	bx	r3
  }
}
 8003116:	4770      	bx	lr

08003118 <UI_GetDAC>:
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t UI_GetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
  if (pHandle->pFctDACGetChannelConfig)
 8003118:	6883      	ldr	r3, [r0, #8]
 800311a:	b103      	cbz	r3, 800311e <UI_GetDAC+0x6>
  {
    retVal = pHandle->pFctDACGetChannelConfig(pHandle, bChannel);
 800311c:	4718      	bx	r3
  }
  return retVal;
}
 800311e:	2089      	movs	r0, #137	; 0x89
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop

08003124 <UI_GetReg>:
{
 8003124:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003126:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003128:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800312c:	6a05      	ldr	r5, [r0, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800312e:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003132:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
{
 8003136:	b091      	sub	sp, #68	; 0x44
  if ( success != (bool *) 0 )
 8003138:	2a00      	cmp	r2, #0
 800313a:	f000 808b 	beq.w	8003254 <UI_GetReg+0x130>
    *success = true;
 800313e:	f04f 0c01 	mov.w	ip, #1
 8003142:	f882 c000 	strb.w	ip, [r2]
  switch (bRegID)
 8003146:	2981      	cmp	r1, #129	; 0x81
 8003148:	f200 80ff 	bhi.w	800334a <UI_GetReg+0x226>
 800314c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003150:	02130219 	.word	0x02130219
 8003154:	029a029e 	.word	0x029a029e
 8003158:	028f0293 	.word	0x028f0293
 800315c:	02a202a6 	.word	0x02a202a6
 8003160:	01500105 	.word	0x01500105
 8003164:	019c01a0 	.word	0x019c01a0
 8003168:	01540100 	.word	0x01540100
 800316c:	01a401a8 	.word	0x01a401a8
 8003170:	024a0265 	.word	0x024a0265
 8003174:	00fd00fd 	.word	0x00fd00fd
 8003178:	022e023b 	.word	0x022e023b
 800317c:	00fd00fd 	.word	0x00fd00fd
 8003180:	022a00fd 	.word	0x022a00fd
 8003184:	02220226 	.word	0x02220226
 8003188:	025c021e 	.word	0x025c021e
 800318c:	010f027e 	.word	0x010f027e
 8003190:	00fd010a 	.word	0x00fd010a
 8003194:	028a01ef 	.word	0x028a01ef
 8003198:	02600285 	.word	0x02600285
 800319c:	010f014b 	.word	0x010f014b
 80031a0:	0105010a 	.word	0x0105010a
 80031a4:	02790100 	.word	0x02790100
 80031a8:	01fb0158 	.word	0x01fb0158
 80031ac:	00fd01f6 	.word	0x00fd01f6
 80031b0:	020000fd 	.word	0x020000fd
 80031b4:	0128013a 	.word	0x0128013a
 80031b8:	01c701db 	.word	0x01c701db
 80031bc:	00fd01b3 	.word	0x00fd01b3
 80031c0:	00fd00fd 	.word	0x00fd00fd
 80031c4:	00fd00fd 	.word	0x00fd00fd
 80031c8:	01ac00fd 	.word	0x01ac00fd
 80031cc:	011b0122 	.word	0x011b0122
 80031d0:	01000114 	.word	0x01000114
 80031d4:	01740188 	.word	0x01740188
 80031d8:	00fd00fd 	.word	0x00fd00fd
 80031dc:	00fd00fd 	.word	0x00fd00fd
 80031e0:	00fd00fd 	.word	0x00fd00fd
 80031e4:	00fd00fd 	.word	0x00fd00fd
 80031e8:	00fd00fd 	.word	0x00fd00fd
 80031ec:	00fd00fd 	.word	0x00fd00fd
 80031f0:	00fd00fd 	.word	0x00fd00fd
 80031f4:	00fd00fd 	.word	0x00fd00fd
 80031f8:	00fd00fd 	.word	0x00fd00fd
 80031fc:	00fd00fd 	.word	0x00fd00fd
 8003200:	00fd00fd 	.word	0x00fd00fd
 8003204:	016700fd 	.word	0x016700fd
 8003208:	00fd00fd 	.word	0x00fd00fd
 800320c:	00fd00fd 	.word	0x00fd00fd
 8003210:	00fd00fd 	.word	0x00fd00fd
 8003214:	00fd00fd 	.word	0x00fd00fd
 8003218:	00fd00fd 	.word	0x00fd00fd
 800321c:	00fd00fd 	.word	0x00fd00fd
 8003220:	00fd00fd 	.word	0x00fd00fd
 8003224:	00fd00fd 	.word	0x00fd00fd
 8003228:	00fd00fd 	.word	0x00fd00fd
 800322c:	015f0163 	.word	0x015f0163
 8003230:	00fd015d 	.word	0x00fd015d
 8003234:	0277021c 	.word	0x0277021c
 8003238:	00fd00fd 	.word	0x00fd00fd
 800323c:	00fd00fd 	.word	0x00fd00fd
 8003240:	00fd00fd 	.word	0x00fd00fd
 8003244:	00fd00fd 	.word	0x00fd00fd
 8003248:	00fd00fd 	.word	0x00fd00fd
 800324c:	00fd00fd 	.word	0x00fd00fd
 8003250:	00fa00fd 	.word	0x00fa00fd
 8003254:	2973      	cmp	r1, #115	; 0x73
 8003256:	d875      	bhi.n	8003344 <UI_GetReg+0x220>
 8003258:	e8df f011 	tbh	[pc, r1, lsl #1]
 800325c:	018d0193 	.word	0x018d0193
 8003260:	02140218 	.word	0x02140218
 8003264:	0209020d 	.word	0x0209020d
 8003268:	021c0220 	.word	0x021c0220
 800326c:	00ca007f 	.word	0x00ca007f
 8003270:	0116011a 	.word	0x0116011a
 8003274:	00ce007a 	.word	0x00ce007a
 8003278:	011e0122 	.word	0x011e0122
 800327c:	01c401df 	.word	0x01c401df
 8003280:	00740074 	.word	0x00740074
 8003284:	01a801b5 	.word	0x01a801b5
 8003288:	00740074 	.word	0x00740074
 800328c:	01a40074 	.word	0x01a40074
 8003290:	019c01a0 	.word	0x019c01a0
 8003294:	01d60198 	.word	0x01d60198
 8003298:	008901f8 	.word	0x008901f8
 800329c:	00740084 	.word	0x00740084
 80032a0:	02040169 	.word	0x02040169
 80032a4:	01da01ff 	.word	0x01da01ff
 80032a8:	008900c5 	.word	0x008900c5
 80032ac:	007f0084 	.word	0x007f0084
 80032b0:	01f3007a 	.word	0x01f3007a
 80032b4:	017500d2 	.word	0x017500d2
 80032b8:	00740170 	.word	0x00740170
 80032bc:	017a0074 	.word	0x017a0074
 80032c0:	00a200b4 	.word	0x00a200b4
 80032c4:	01410155 	.word	0x01410155
 80032c8:	0074012d 	.word	0x0074012d
 80032cc:	00740074 	.word	0x00740074
 80032d0:	00740074 	.word	0x00740074
 80032d4:	01260074 	.word	0x01260074
 80032d8:	0095009c 	.word	0x0095009c
 80032dc:	007a008e 	.word	0x007a008e
 80032e0:	00ee0102 	.word	0x00ee0102
 80032e4:	00740074 	.word	0x00740074
 80032e8:	00740074 	.word	0x00740074
 80032ec:	00740074 	.word	0x00740074
 80032f0:	00740074 	.word	0x00740074
 80032f4:	00740074 	.word	0x00740074
 80032f8:	00740074 	.word	0x00740074
 80032fc:	00740074 	.word	0x00740074
 8003300:	00740074 	.word	0x00740074
 8003304:	00740074 	.word	0x00740074
 8003308:	00740074 	.word	0x00740074
 800330c:	00740074 	.word	0x00740074
 8003310:	00e10074 	.word	0x00e10074
 8003314:	00740074 	.word	0x00740074
 8003318:	00740074 	.word	0x00740074
 800331c:	00740074 	.word	0x00740074
 8003320:	00740074 	.word	0x00740074
 8003324:	00740074 	.word	0x00740074
 8003328:	00740074 	.word	0x00740074
 800332c:	00740074 	.word	0x00740074
 8003330:	00740074 	.word	0x00740074
 8003334:	00740074 	.word	0x00740074
 8003338:	00d900dd 	.word	0x00d900dd
 800333c:	007400d7 	.word	0x007400d7
 8003340:	01f10196 	.word	0x01f10196
  int32_t bRetVal = 0;
 8003344:	2000      	movs	r0, #0
}
 8003346:	b011      	add	sp, #68	; 0x44
 8003348:	bd30      	pop	{r4, r5, pc}
        *success = false;
 800334a:	2000      	movs	r0, #0
 800334c:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 800334e:	e7fa      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = MCI_GetIqdref(pMCI).d;
 8003350:	4628      	mov	r0, r5
 8003352:	f7fd fd27 	bl	8000da4 <MCI_GetIqdref>
 8003356:	1400      	asrs	r0, r0, #16
    break;
 8003358:	e7f5      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = MCI_GetIqdref(pMCI).q;
 800335a:	4628      	mov	r0, r5
 800335c:	f7fd fd22 	bl	8000da4 <MCI_GetIqdref>
 8003360:	b200      	sxth	r0, r0
    break;
 8003362:	e7f0      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = MCI_GetIqd(pMCI).d;
 8003364:	4628      	mov	r0, r5
 8003366:	f7fd fd0f 	bl	8000d88 <MCI_GetIqd>
 800336a:	1400      	asrs	r0, r0, #16
    break;
 800336c:	e7eb      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = MCI_GetIqd(pMCI).q;
 800336e:	4628      	mov	r0, r5
 8003370:	f7fd fd0a 	bl	8000d88 <MCI_GetIqd>
 8003374:	b200      	sxth	r0, r0
    break;
 8003376:	e7e6      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8003378:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800337a:	f004 fe75 	bl	8008068 <STC_GetMinAppNegativeMecSpeedUnit>
 800337e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003382:	0040      	lsls	r0, r0, #1
    break;
 8003384:	e7df      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8003386:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003388:	f004 fe6c 	bl	8008064 <STC_GetMaxAppPositiveMecSpeedUnit>
 800338c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003390:	0040      	lsls	r0, r0, #1
    break;
 8003392:	e7d8      	b.n	8003346 <UI_GetReg+0x222>
      if (pHandle->pFctDACGetUserChannelValue)
 8003394:	6903      	ldr	r3, [r0, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0d4      	beq.n	8003344 <UI_GetReg+0x220>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 1);
 800339a:	2101      	movs	r1, #1
 800339c:	4798      	blx	r3
 800339e:	e7d2      	b.n	8003346 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80033a0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80033a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033a6:	0f1a      	lsrs	r2, r3, #28
 80033a8:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033aa:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033ae:	f000 81c3 	beq.w	8003738 <UI_GetReg+0x614>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033b2:	2b09      	cmp	r3, #9
 80033b4:	d1c6      	bne.n	8003344 <UI_GetReg+0x220>
        pSPD = pMCT->pSpeedSensorAux;
 80033b6:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d0c3      	beq.n	8003344 <UI_GetReg+0x220>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 80033bc:	f005 f9a0 	bl	8008700 <STO_PLL_GetEstimatedCurrent>
 80033c0:	b200      	sxth	r0, r0
 80033c2:	e7c0      	b.n	8003346 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80033c4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80033c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033ca:	0f1a      	lsrs	r2, r3, #28
 80033cc:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033ce:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033d2:	f000 8183 	beq.w	80036dc <UI_GetReg+0x5b8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033d6:	2b09      	cmp	r3, #9
 80033d8:	d1b4      	bne.n	8003344 <UI_GetReg+0x220>
        pSPD = pMCT->pSpeedSensorAux;
 80033da:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80033dc:	2800      	cmp	r0, #0
 80033de:	d0b1      	beq.n	8003344 <UI_GetReg+0x220>
        bRetVal = SPD_GetS16Speed(pSPD);
 80033e0:	f004 fd7e 	bl	8007ee0 <SPD_GetS16Speed>
 80033e4:	e7af      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 80033e6:	4628      	mov	r0, r5
 80033e8:	f7fd fcc0 	bl	8000d6c <MCI_GetIalphabeta>
 80033ec:	1400      	asrs	r0, r0, #16
    break;
 80033ee:	e7aa      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 80033f0:	6860      	ldr	r0, [r4, #4]
 80033f2:	f003 f9f7 	bl	80067e4 <PID_GetKP>
    break;
 80033f6:	e7a6      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 80033f8:	68a0      	ldr	r0, [r4, #8]
 80033fa:	f003 f9f3 	bl	80067e4 <PID_GetKP>
    break;
 80033fe:	e7a2      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = MCI_GetVqd(pMCI).d;
 8003400:	4628      	mov	r0, r5
 8003402:	f7fd fcdd 	bl	8000dc0 <MCI_GetVqd>
 8003406:	1400      	asrs	r0, r0, #16
    break;
 8003408:	e79d      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)(MC_UID);
 800340a:	48b3      	ldr	r0, [pc, #716]	; (80036d8 <UI_GetReg+0x5b4>)
 800340c:	e79b      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 800340e:	6820      	ldr	r0, [r4, #0]
 8003410:	f003 f9f4 	bl	80067fc <PID_GetKIDivisor>
    break;
 8003414:	e797      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8003416:	6820      	ldr	r0, [r4, #0]
 8003418:	f003 f9ee 	bl	80067f8 <PID_GetKPDivisor>
    break;
 800341c:	e793      	b.n	8003346 <UI_GetReg+0x222>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 800341e:	4628      	mov	r0, r5
 8003420:	f7fd fc5a 	bl	8000cd8 <MCI_GetControlMode>
 8003424:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003426:	4628      	mov	r0, r5
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8003428:	f000 8176 	beq.w	8003718 <UI_GetReg+0x5f4>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 800342c:	f7fd fc8c 	bl	8000d48 <MCI_GetMecSpeedRefUnit>
 8003430:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003434:	0040      	lsls	r0, r0, #1
 8003436:	e786      	b.n	8003346 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003438:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800343a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800343e:	0f1a      	lsrs	r2, r3, #28
 8003440:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003442:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003446:	f000 816d 	beq.w	8003724 <UI_GetReg+0x600>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800344a:	2b09      	cmp	r3, #9
 800344c:	f47f af7a 	bne.w	8003344 <UI_GetReg+0x220>
        pSPD = pMCT->pSpeedSensorAux;
 8003450:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003452:	2800      	cmp	r0, #0
 8003454:	f43f af76 	beq.w	8003344 <UI_GetReg+0x220>
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8003458:	f005 f99c 	bl	8008794 <STO_PLL_GetObservedBemfLevel>
 800345c:	1400      	asrs	r0, r0, #16
 800345e:	e772      	b.n	8003346 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003460:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003466:	0f1a      	lsrs	r2, r3, #28
 8003468:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800346a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800346e:	f000 815e 	beq.w	800372e <UI_GetReg+0x60a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003472:	2b09      	cmp	r3, #9
 8003474:	f47f af66 	bne.w	8003344 <UI_GetReg+0x220>
        pSPD = pMCT->pSpeedSensorAux;
 8003478:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800347a:	2800      	cmp	r0, #0
 800347c:	f43f af62 	beq.w	8003344 <UI_GetReg+0x220>
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8003480:	f005 f984 	bl	800878c <STO_PLL_GetEstimatedBemfLevel>
 8003484:	1400      	asrs	r0, r0, #16
 8003486:	e75e      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8003488:	6860      	ldr	r0, [r4, #4]
 800348a:	f003 f9bb 	bl	8006804 <PID_GetKD>
    break;
 800348e:	e75a      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8003490:	6860      	ldr	r0, [r4, #4]
 8003492:	f003 f9ab 	bl	80067ec <PID_GetKI>
    break;
 8003496:	e756      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8003498:	68a0      	ldr	r0, [r4, #8]
 800349a:	f003 f9b3 	bl	8006804 <PID_GetKD>
    break;
 800349e:	e752      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 80034a0:	68a0      	ldr	r0, [r4, #8]
 80034a2:	f003 f9a3 	bl	80067ec <PID_GetKI>
    break;
 80034a6:	e74e      	b.n	8003346 <UI_GetReg+0x222>
      if (pHandle->pFctDACGetUserChannelValue)
 80034a8:	6903      	ldr	r3, [r0, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f43f af4a 	beq.w	8003344 <UI_GetReg+0x220>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 0);
 80034b0:	2100      	movs	r1, #0
 80034b2:	4798      	blx	r3
 80034b4:	e747      	b.n	8003346 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80034b6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80034b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034bc:	0f1a      	lsrs	r2, r3, #28
 80034be:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034c0:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034c4:	f000 80fe 	beq.w	80036c4 <UI_GetReg+0x5a0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034c8:	2b09      	cmp	r3, #9
 80034ca:	f47f af3b 	bne.w	8003344 <UI_GetReg+0x220>
        pSPD = pMCT->pSpeedSensorAux;
 80034ce:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80034d0:	2800      	cmp	r0, #0
 80034d2:	f43f af37 	beq.w	8003344 <UI_GetReg+0x220>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 80034d6:	f005 f907 	bl	80086e8 <STO_PLL_GetEstimatedBemf>
 80034da:	1400      	asrs	r0, r0, #16
 80034dc:	e733      	b.n	8003346 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80034de:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80034e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034e4:	0f1a      	lsrs	r2, r3, #28
 80034e6:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034e8:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034ec:	f000 80ef 	beq.w	80036ce <UI_GetReg+0x5aa>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034f0:	2b09      	cmp	r3, #9
 80034f2:	f47f af27 	bne.w	8003344 <UI_GetReg+0x220>
        pSPD =  pMCT->pSpeedSensorAux;
 80034f6:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80034f8:	2800      	cmp	r0, #0
 80034fa:	f43f af23 	beq.w	8003344 <UI_GetReg+0x220>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 80034fe:	f005 f8f3 	bl	80086e8 <STO_PLL_GetEstimatedBemf>
 8003502:	b200      	sxth	r0, r0
 8003504:	e71f      	b.n	8003346 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003506:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800350c:	0f1a      	lsrs	r2, r3, #28
 800350e:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003510:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003514:	f000 80c6 	beq.w	80036a4 <UI_GetReg+0x580>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003518:	2b09      	cmp	r3, #9
 800351a:	f47f af13 	bne.w	8003344 <UI_GetReg+0x220>
        pSPD = pMCT->pSpeedSensorAux;
 800351e:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003520:	2800      	cmp	r0, #0
 8003522:	f43f af0f 	beq.w	8003344 <UI_GetReg+0x220>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 8003526:	f005 f8eb 	bl	8008700 <STO_PLL_GetEstimatedCurrent>
 800352a:	1400      	asrs	r0, r0, #16
 800352c:	e70b      	b.n	8003346 <UI_GetReg+0x222>
      if (pMCT->pRevupCtrl)
 800352e:	6960      	ldr	r0, [r4, #20]
 8003530:	2800      	cmp	r0, #0
 8003532:	f43f af07 	beq.w	8003344 <UI_GetReg+0x220>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8003536:	f004 fc8d 	bl	8007e54 <RUC_GetNumberOfPhases>
 800353a:	e704      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 800353c:	4628      	mov	r0, r5
 800353e:	f7fd fc4d 	bl	8000ddc <MCI_GetValphabeta>
 8003542:	1400      	asrs	r0, r0, #16
    break;
 8003544:	e6ff      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8003546:	4628      	mov	r0, r5
 8003548:	f7fd fc48 	bl	8000ddc <MCI_GetValphabeta>
 800354c:	b200      	sxth	r0, r0
    break;
 800354e:	e6fa      	b.n	8003346 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003550:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003556:	0f1a      	lsrs	r2, r3, #28
 8003558:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800355a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800355e:	f000 80ca 	beq.w	80036f6 <UI_GetReg+0x5d2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003562:	2b09      	cmp	r3, #9
 8003564:	f47f aeee 	bne.w	8003344 <UI_GetReg+0x220>
        pSPD = pMCT->pSpeedSensorAux;
 8003568:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800356a:	2800      	cmp	r0, #0
 800356c:	f43f aeea 	beq.w	8003344 <UI_GetReg+0x220>
        bRetVal = SPD_GetElAngle(pSPD);
 8003570:	f004 fc74 	bl	8007e5c <SPD_GetElAngle>
 8003574:	e6e7      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003576:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 8003578:	b011      	add	sp, #68	; 0x44
 800357a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 800357e:	f004 be31 	b.w	80081e4 <STM_GetFaultState>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8003582:	f7ff fba5 	bl	8002cd0 <UI_GetSelectedMC>
    break;
 8003586:	e6de      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = CTRBDID;
 8003588:	201d      	movs	r0, #29
 800358a:	e6dc      	b.n	8003346 <UI_GetReg+0x222>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH0);
 800358c:	2100      	movs	r1, #0
 800358e:	f7ff fdc3 	bl	8003118 <UI_GetDAC>
    break;
 8003592:	e6d8      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8003594:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003596:	f003 f8bf 	bl	8006718 <MPM_GetAvrgElMotorPowerW>
    break;
 800359a:	e6d4      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 800359c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800359e:	f003 f8ff 	bl	80067a0 <NTC_GetAvTemp_C>
    break;
 80035a2:	e6d0      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 80035a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80035a6:	f003 f819 	bl	80065dc <VBS_GetAvBusVoltage_V>
    break;
 80035aa:	e6cc      	b.n	8003346 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80035ac:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80035ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035b2:	0f1a      	lsrs	r2, r3, #28
 80035b4:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035b6:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035ba:	d078      	beq.n	80036ae <UI_GetReg+0x58a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035bc:	2b09      	cmp	r3, #9
 80035be:	d079      	beq.n	80036b4 <UI_GetReg+0x590>
      bRetVal = (int32_t)hPgain;
 80035c0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
    break;
 80035c4:	e6bf      	b.n	8003346 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80035c6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80035c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035cc:	0f1a      	lsrs	r2, r3, #28
 80035ce:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035d0:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035d4:	f000 8094 	beq.w	8003700 <UI_GetReg+0x5dc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035d8:	2b09      	cmp	r3, #9
 80035da:	f000 8094 	beq.w	8003706 <UI_GetReg+0x5e2>
      bRetVal = (int32_t)hIgain;
 80035de:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
    break;
 80035e2:	e6b0      	b.n	8003346 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80035e4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80035e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035ea:	0f1a      	lsrs	r2, r3, #28
 80035ec:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035ee:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035f2:	d078      	beq.n	80036e6 <UI_GetReg+0x5c2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035f4:	2b09      	cmp	r3, #9
 80035f6:	d1f2      	bne.n	80035de <UI_GetReg+0x4ba>
        pSPD = pMCT->pSpeedSensorAux;
 80035f8:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80035fa:	2800      	cmp	r0, #0
 80035fc:	d0ef      	beq.n	80035de <UI_GetReg+0x4ba>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80035fe:	aa0f      	add	r2, sp, #60	; 0x3c
 8003600:	a90e      	add	r1, sp, #56	; 0x38
 8003602:	f005 f891 	bl	8008728 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC2;
 8003606:	e7ea      	b.n	80035de <UI_GetReg+0x4ba>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH1);
 8003608:	2101      	movs	r1, #1
 800360a:	f7ff fd85 	bl	8003118 <UI_GetDAC>
    break;
 800360e:	e69a      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8003610:	4628      	mov	r0, r5
 8003612:	f7fd fbab 	bl	8000d6c <MCI_GetIalphabeta>
 8003616:	b200      	sxth	r0, r0
    break;
 8003618:	e695      	b.n	8003346 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800361a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800361c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003620:	0f1a      	lsrs	r2, r3, #28
 8003622:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003624:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003628:	d061      	beq.n	80036ee <UI_GetReg+0x5ca>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800362a:	2b09      	cmp	r3, #9
 800362c:	d1c8      	bne.n	80035c0 <UI_GetReg+0x49c>
        pSPD = pMCT->pSpeedSensorAux;
 800362e:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003630:	2800      	cmp	r0, #0
 8003632:	d0c5      	beq.n	80035c0 <UI_GetReg+0x49c>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8003634:	aa0f      	add	r2, sp, #60	; 0x3c
 8003636:	a90e      	add	r1, sp, #56	; 0x38
 8003638:	f005 f876 	bl	8008728 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC1;
 800363c:	e7c0      	b.n	80035c0 <UI_GetReg+0x49c>
      bRetVal = PWBDID;
 800363e:	2035      	movs	r0, #53	; 0x35
 8003640:	e681      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = MCI_GetVqd(pMCI).q;
 8003642:	4628      	mov	r0, r5
 8003644:	f7fd fbbc 	bl	8000dc0 <MCI_GetVqd>
 8003648:	b200      	sxth	r0, r0
    break;
 800364a:	e67c      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 800364c:	4628      	mov	r0, r5
 800364e:	f7fd fb73 	bl	8000d38 <MCI_GetAvrgMecSpeedUnit>
 8003652:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003656:	0040      	lsls	r0, r0, #1
    break;
 8003658:	e675      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = MCI_GetIab(pMCI).b;
 800365a:	4628      	mov	r0, r5
 800365c:	f7fd fb78 	bl	8000d50 <MCI_GetIab>
 8003660:	1400      	asrs	r0, r0, #16
    break;
 8003662:	e670      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = MCI_GetIab(pMCI).a;
 8003664:	4628      	mov	r0, r5
 8003666:	f7fd fb73 	bl	8000d50 <MCI_GetIab>
 800366a:	b200      	sxth	r0, r0
    break;
 800366c:	e66b      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 800366e:	6820      	ldr	r0, [r4, #0]
 8003670:	f003 f8b8 	bl	80067e4 <PID_GetKP>
    break;
 8003674:	e667      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8003676:	4628      	mov	r0, r5
 8003678:	f7fd fb66 	bl	8000d48 <MCI_GetMecSpeedRefUnit>
 800367c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003680:	0040      	lsls	r0, r0, #1
    break;
 8003682:	e660      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8003684:	4628      	mov	r0, r5
 8003686:	f7fd fb27 	bl	8000cd8 <MCI_GetControlMode>
    break;
 800368a:	e65c      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 800368c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800368e:	f004 fd9b 	bl	80081c8 <STM_GetState>
	break;
 8003692:	e658      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8003694:	6820      	ldr	r0, [r4, #0]
 8003696:	f003 f8b5 	bl	8006804 <PID_GetKD>
    break;
 800369a:	e654      	b.n	8003346 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 800369c:	6820      	ldr	r0, [r4, #0]
 800369e:	f003 f8a5 	bl	80067ec <PID_GetKI>
    break;
 80036a2:	e650      	b.n	8003346 <UI_GetReg+0x222>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036a4:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80036a6:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036a8:	f47f af3a 	bne.w	8003520 <UI_GetReg+0x3fc>
 80036ac:	e737      	b.n	800351e <UI_GetReg+0x3fa>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036ae:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80036b0:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036b2:	d100      	bne.n	80036b6 <UI_GetReg+0x592>
        pSPD = pMCT->pSpeedSensorAux;
 80036b4:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d082      	beq.n	80035c0 <UI_GetReg+0x49c>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80036ba:	aa0f      	add	r2, sp, #60	; 0x3c
 80036bc:	a90e      	add	r1, sp, #56	; 0x38
 80036be:	f005 f83f 	bl	8008740 <STO_GetPLLGains>
 80036c2:	e77d      	b.n	80035c0 <UI_GetReg+0x49c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036c4:	2b09      	cmp	r3, #9
       pSPD = pMCT->pSpeedSensorMain;
 80036c6:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036c8:	f47f af02 	bne.w	80034d0 <UI_GetReg+0x3ac>
 80036cc:	e6ff      	b.n	80034ce <UI_GetReg+0x3aa>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036ce:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80036d0:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036d2:	f47f af11 	bne.w	80034f8 <UI_GetReg+0x3d4>
 80036d6:	e70e      	b.n	80034f6 <UI_GetReg+0x3d2>
 80036d8:	34a6847a 	.word	0x34a6847a
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036dc:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80036de:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036e0:	f47f ae7c 	bne.w	80033dc <UI_GetReg+0x2b8>
 80036e4:	e679      	b.n	80033da <UI_GetReg+0x2b6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036e6:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80036e8:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036ea:	d186      	bne.n	80035fa <UI_GetReg+0x4d6>
 80036ec:	e784      	b.n	80035f8 <UI_GetReg+0x4d4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036ee:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80036f0:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036f2:	d19d      	bne.n	8003630 <UI_GetReg+0x50c>
 80036f4:	e79b      	b.n	800362e <UI_GetReg+0x50a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036f6:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80036f8:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036fa:	f47f af36 	bne.w	800356a <UI_GetReg+0x446>
 80036fe:	e733      	b.n	8003568 <UI_GetReg+0x444>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003700:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003702:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003704:	d100      	bne.n	8003708 <UI_GetReg+0x5e4>
        pSPD = pMCT->pSpeedSensorAux;
 8003706:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003708:	2800      	cmp	r0, #0
 800370a:	f43f af68 	beq.w	80035de <UI_GetReg+0x4ba>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800370e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003710:	a90e      	add	r1, sp, #56	; 0x38
 8003712:	f005 f815 	bl	8008740 <STO_GetPLLGains>
 8003716:	e762      	b.n	80035de <UI_GetReg+0x4ba>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003718:	f7fd fb02 	bl	8000d20 <MCI_GetLastRampFinalSpeed>
 800371c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003720:	0040      	lsls	r0, r0, #1
 8003722:	e610      	b.n	8003346 <UI_GetReg+0x222>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003724:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003726:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003728:	f47f ae93 	bne.w	8003452 <UI_GetReg+0x32e>
 800372c:	e690      	b.n	8003450 <UI_GetReg+0x32c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800372e:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003730:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003732:	f47f aea2 	bne.w	800347a <UI_GetReg+0x356>
 8003736:	e69f      	b.n	8003478 <UI_GetReg+0x354>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003738:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800373a:	69a0      	ldr	r0, [r4, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800373c:	f47f ae3c 	bne.w	80033b8 <UI_GetReg+0x294>
 8003740:	e639      	b.n	80033b6 <UI_GetReg+0x292>
 8003742:	bf00      	nop

08003744 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003744:	4a03      	ldr	r2, [pc, #12]	; (8003754 <SystemInit+0x10>)
 8003746:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800374a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800374e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003752:	4770      	bx	lr
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003758:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800375a:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <HAL_InitTick+0x40>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	b90b      	cbnz	r3, 8003764 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003760:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003762:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003764:	490d      	ldr	r1, [pc, #52]	; (800379c <HAL_InitTick+0x44>)
 8003766:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800376a:	4605      	mov	r5, r0
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	6808      	ldr	r0, [r1, #0]
 8003772:	fbb0 f0f3 	udiv	r0, r0, r3
 8003776:	f000 ff91 	bl	800469c <HAL_SYSTICK_Config>
 800377a:	4604      	mov	r4, r0
 800377c:	2800      	cmp	r0, #0
 800377e:	d1ef      	bne.n	8003760 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003780:	2d0f      	cmp	r5, #15
 8003782:	d8ed      	bhi.n	8003760 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003784:	4602      	mov	r2, r0
 8003786:	4629      	mov	r1, r5
 8003788:	f04f 30ff 	mov.w	r0, #4294967295
 800378c:	f000 ff3a 	bl	8004604 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_InitTick+0x48>)
 8003792:	4620      	mov	r0, r4
 8003794:	601d      	str	r5, [r3, #0]
}
 8003796:	bd38      	pop	{r3, r4, r5, pc}
 8003798:	20000704 	.word	0x20000704
 800379c:	20000700 	.word	0x20000700
 80037a0:	20000708 	.word	0x20000708

080037a4 <HAL_Init>:
{
 80037a4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037a6:	2003      	movs	r0, #3
 80037a8:	f000 ff1a 	bl	80045e0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037ac:	2004      	movs	r0, #4
 80037ae:	f7ff ffd3 	bl	8003758 <HAL_InitTick>
 80037b2:	b110      	cbz	r0, 80037ba <HAL_Init+0x16>
    status = HAL_ERROR;
 80037b4:	2401      	movs	r4, #1
}
 80037b6:	4620      	mov	r0, r4
 80037b8:	bd10      	pop	{r4, pc}
 80037ba:	4604      	mov	r4, r0
    HAL_MspInit();
 80037bc:	f7fe ff10 	bl	80025e0 <HAL_MspInit>
}
 80037c0:	4620      	mov	r0, r4
 80037c2:	bd10      	pop	{r4, pc}

080037c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80037c4:	4a03      	ldr	r2, [pc, #12]	; (80037d4 <HAL_IncTick+0x10>)
 80037c6:	4904      	ldr	r1, [pc, #16]	; (80037d8 <HAL_IncTick+0x14>)
 80037c8:	6813      	ldr	r3, [r2, #0]
 80037ca:	6809      	ldr	r1, [r1, #0]
 80037cc:	440b      	add	r3, r1
 80037ce:	6013      	str	r3, [r2, #0]
}
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000b34 	.word	0x20000b34
 80037d8:	20000704 	.word	0x20000704

080037dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80037dc:	4b01      	ldr	r3, [pc, #4]	; (80037e4 <HAL_GetTick+0x8>)
 80037de:	6818      	ldr	r0, [r3, #0]
}
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	20000b34 	.word	0x20000b34

080037e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037e8:	b538      	push	{r3, r4, r5, lr}
 80037ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80037ec:	f7ff fff6 	bl	80037dc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037f0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80037f2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80037f4:	d002      	beq.n	80037fc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80037f6:	4b04      	ldr	r3, [pc, #16]	; (8003808 <HAL_Delay+0x20>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037fc:	f7ff ffee 	bl	80037dc <HAL_GetTick>
 8003800:	1b43      	subs	r3, r0, r5
 8003802:	42a3      	cmp	r3, r4
 8003804:	d3fa      	bcc.n	80037fc <HAL_Delay+0x14>
  {
  }
}
 8003806:	bd38      	pop	{r3, r4, r5, pc}
 8003808:	20000704 	.word	0x20000704

0800380c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800380c:	b530      	push	{r4, r5, lr}
 800380e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003810:	2300      	movs	r3, #0
 8003812:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003814:	2800      	cmp	r0, #0
 8003816:	f000 80c9 	beq.w	80039ac <HAL_ADC_Init+0x1a0>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800381a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800381c:	4604      	mov	r4, r0
 800381e:	2d00      	cmp	r5, #0
 8003820:	f000 8092 	beq.w	8003948 <HAL_ADC_Init+0x13c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003824:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003826:	6893      	ldr	r3, [r2, #8]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	d505      	bpl.n	8003838 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800382c:	6893      	ldr	r3, [r2, #8]
 800382e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003832:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003836:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003838:	6893      	ldr	r3, [r2, #8]
 800383a:	00dd      	lsls	r5, r3, #3
 800383c:	d419      	bmi.n	8003872 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800383e:	4b70      	ldr	r3, [pc, #448]	; (8003a00 <HAL_ADC_Init+0x1f4>)
 8003840:	4870      	ldr	r0, [pc, #448]	; (8003a04 <HAL_ADC_Init+0x1f8>)
 8003842:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003844:	6891      	ldr	r1, [r2, #8]
 8003846:	099b      	lsrs	r3, r3, #6
 8003848:	fba0 0303 	umull	r0, r3, r0, r3
 800384c:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8003850:	099b      	lsrs	r3, r3, #6
 8003852:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003856:	3301      	adds	r3, #1
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800385e:	6091      	str	r1, [r2, #8]
 8003860:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003862:	9b01      	ldr	r3, [sp, #4]
 8003864:	b12b      	cbz	r3, 8003872 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8003866:	9b01      	ldr	r3, [sp, #4]
 8003868:	3b01      	subs	r3, #1
 800386a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800386c:	9b01      	ldr	r3, [sp, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f9      	bne.n	8003866 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003872:	6893      	ldr	r3, [r2, #8]
 8003874:	00d8      	lsls	r0, r3, #3
 8003876:	d459      	bmi.n	800392c <HAL_ADC_Init+0x120>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003878:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800387a:	f043 0310 	orr.w	r3, r3, #16
 800387e:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003880:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003882:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003884:	4303      	orrs	r3, r0
 8003886:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003888:	6893      	ldr	r3, [r2, #8]
 800388a:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800388e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003890:	d153      	bne.n	800393a <HAL_ADC_Init+0x12e>
 8003892:	06d9      	lsls	r1, r3, #27
 8003894:	d451      	bmi.n	800393a <HAL_ADC_Init+0x12e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003896:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003898:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800389c:	f043 0302 	orr.w	r3, r3, #2
 80038a0:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038a2:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038a4:	07db      	lsls	r3, r3, #31
 80038a6:	d40e      	bmi.n	80038c6 <HAL_ADC_Init+0xba>
 80038a8:	4b57      	ldr	r3, [pc, #348]	; (8003a08 <HAL_ADC_Init+0x1fc>)
 80038aa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80038ae:	6889      	ldr	r1, [r1, #8]
 80038b0:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038b2:	430b      	orrs	r3, r1
 80038b4:	07dd      	lsls	r5, r3, #31
 80038b6:	d406      	bmi.n	80038c6 <HAL_ADC_Init+0xba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80038b8:	4954      	ldr	r1, [pc, #336]	; (8003a0c <HAL_ADC_Init+0x200>)
 80038ba:	6865      	ldr	r5, [r4, #4]
 80038bc:	688b      	ldr	r3, [r1, #8]
 80038be:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80038c2:	432b      	orrs	r3, r5
 80038c4:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80038c6:	68e5      	ldr	r5, [r4, #12]
 80038c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80038ca:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 80038ce:	432b      	orrs	r3, r5
 80038d0:	68a5      	ldr	r5, [r4, #8]
 80038d2:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038d4:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038d6:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 80038d8:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038e0:	d05f      	beq.n	80039a2 <HAL_ADC_Init+0x196>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80038e4:	b121      	cbz	r1, 80038f0 <HAL_ADC_Init+0xe4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80038e6:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038e8:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80038ec:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038ee:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80038f0:	68d5      	ldr	r5, [r2, #12]
 80038f2:	4947      	ldr	r1, [pc, #284]	; (8003a10 <HAL_ADC_Init+0x204>)
 80038f4:	4029      	ands	r1, r5
 80038f6:	430b      	orrs	r3, r1
 80038f8:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80038fa:	6913      	ldr	r3, [r2, #16]
 80038fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038fe:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003902:	430b      	orrs	r3, r1
 8003904:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003906:	6893      	ldr	r3, [r2, #8]
 8003908:	0759      	lsls	r1, r3, #29
 800390a:	d523      	bpl.n	8003954 <HAL_ADC_Init+0x148>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800390c:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800390e:	6963      	ldr	r3, [r4, #20]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d04e      	beq.n	80039b2 <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003914:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003916:	f023 030f 	bic.w	r3, r3, #15
 800391a:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800391c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800391e:	f023 0303 	bic.w	r3, r3, #3
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003928:	b003      	add	sp, #12
 800392a:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800392c:	6893      	ldr	r3, [r2, #8]
 800392e:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003932:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003936:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003938:	d0ab      	beq.n	8003892 <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 800393c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393e:	f043 0310 	orr.w	r3, r3, #16
 8003942:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8003944:	b003      	add	sp, #12
 8003946:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8003948:	f7fe fe64 	bl	8002614 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800394c:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 800394e:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8003952:	e767      	b.n	8003824 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003954:	6893      	ldr	r3, [r2, #8]
 8003956:	071b      	lsls	r3, r3, #28
 8003958:	d4d9      	bmi.n	800390e <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800395a:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800395c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003960:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003962:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003966:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003968:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800396c:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003970:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8003972:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003974:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003976:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8003978:	bb19      	cbnz	r1, 80039c2 <HAL_ADC_Init+0x1b6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800397a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003980:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003984:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003988:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800398c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8003990:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003994:	2b01      	cmp	r3, #1
 8003996:	d021      	beq.n	80039dc <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003998:	6913      	ldr	r3, [r2, #16]
 800399a:	f023 0301 	bic.w	r3, r3, #1
 800399e:	6113      	str	r3, [r2, #16]
 80039a0:	e7b5      	b.n	800390e <HAL_ADC_Init+0x102>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039a2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80039a4:	3901      	subs	r1, #1
 80039a6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80039aa:	e79a      	b.n	80038e2 <HAL_ADC_Init+0xd6>
    return HAL_ERROR;
 80039ac:	2001      	movs	r0, #1
}
 80039ae:	b003      	add	sp, #12
 80039b0:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039b2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80039b4:	6a23      	ldr	r3, [r4, #32]
 80039b6:	f021 010f 	bic.w	r1, r1, #15
 80039ba:	3b01      	subs	r3, #1
 80039bc:	430b      	orrs	r3, r1
 80039be:	6313      	str	r3, [r2, #48]	; 0x30
 80039c0:	e7ac      	b.n	800391c <HAL_ADC_Init+0x110>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80039c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c6:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80039c8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80039cc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039d4:	430b      	orrs	r3, r1
 80039d6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80039da:	e7d9      	b.n	8003990 <HAL_ADC_Init+0x184>
        MODIFY_REG(hadc->Instance->CFGR2,
 80039dc:	6911      	ldr	r1, [r2, #16]
 80039de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80039e0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80039e2:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 80039e6:	f021 0104 	bic.w	r1, r1, #4
 80039ea:	432b      	orrs	r3, r5
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80039f0:	430b      	orrs	r3, r1
 80039f2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80039f4:	430b      	orrs	r3, r1
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6113      	str	r3, [r2, #16]
 80039fc:	e787      	b.n	800390e <HAL_ADC_Init+0x102>
 80039fe:	bf00      	nop
 8003a00:	20000700 	.word	0x20000700
 8003a04:	053e2d63 	.word	0x053e2d63
 8003a08:	50000100 	.word	0x50000100
 8003a0c:	50000300 	.word	0x50000300
 8003a10:	fff04007 	.word	0xfff04007

08003a14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a14:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a16:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003a1e:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003a20:	f04f 0000 	mov.w	r0, #0
 8003a24:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003a26:	f000 8145 	beq.w	8003cb4 <HAL_ADC_ConfigChannel+0x2a0>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a2a:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a32:	68a2      	ldr	r2, [r4, #8]
 8003a34:	0755      	lsls	r5, r2, #29
 8003a36:	d44c      	bmi.n	8003ad2 <HAL_ADC_ConfigChannel+0xbe>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a38:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(*preg,
 8003a3a:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003a3c:	ea4f 1e90 	mov.w	lr, r0, lsr #6
 8003a40:	f00e 0e0c 	and.w	lr, lr, #12
 8003a44:	f104 0c30 	add.w	ip, r4, #48	; 0x30
  MODIFY_REG(*preg,
 8003a48:	f000 001f 	and.w	r0, r0, #31
 8003a4c:	f85e 500c 	ldr.w	r5, [lr, ip]
 8003a50:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8003a54:	261f      	movs	r6, #31
 8003a56:	4082      	lsls	r2, r0
 8003a58:	fa06 f000 	lsl.w	r0, r6, r0
 8003a5c:	ea25 0000 	bic.w	r0, r5, r0
 8003a60:	4302      	orrs	r2, r0
 8003a62:	f84e 200c 	str.w	r2, [lr, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a66:	68a2      	ldr	r2, [r4, #8]
 8003a68:	0750      	lsls	r0, r2, #29
 8003a6a:	d543      	bpl.n	8003af4 <HAL_ADC_ConfigChannel+0xe0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a6c:	68a2      	ldr	r2, [r4, #8]
 8003a6e:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a70:	68a2      	ldr	r2, [r4, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a72:	f012 0f01 	tst.w	r2, #1
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003a76:	4602      	mov	r2, r0
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a78:	d10c      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x80>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003a7a:	4dc2      	ldr	r5, [pc, #776]	; (8003d84 <HAL_ADC_ConfigChannel+0x370>)
 8003a7c:	68ce      	ldr	r6, [r1, #12]
 8003a7e:	42ae      	cmp	r6, r5
 8003a80:	f000 80c1 	beq.w	8003c06 <HAL_ADC_ConfigChannel+0x1f2>
    CLEAR_BIT(ADCx->DIFSEL,
 8003a84:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8003a88:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8003a8c:	ea21 0100 	bic.w	r1, r1, r0
 8003a90:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a94:	49bc      	ldr	r1, [pc, #752]	; (8003d88 <HAL_ADC_ConfigChannel+0x374>)
 8003a96:	420a      	tst	r2, r1
 8003a98:	d02a      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0xdc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003a9a:	49bc      	ldr	r1, [pc, #752]	; (8003d8c <HAL_ADC_ConfigChannel+0x378>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003a9c:	4dbc      	ldr	r5, [pc, #752]	; (8003d90 <HAL_ADC_ConfigChannel+0x37c>)
 8003a9e:	6888      	ldr	r0, [r1, #8]
 8003aa0:	42aa      	cmp	r2, r5
 8003aa2:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8003aa6:	d01d      	beq.n	8003ae4 <HAL_ADC_ConfigChannel+0xd0>
 8003aa8:	4dba      	ldr	r5, [pc, #744]	; (8003d94 <HAL_ADC_ConfigChannel+0x380>)
 8003aaa:	42aa      	cmp	r2, r5
 8003aac:	d01a      	beq.n	8003ae4 <HAL_ADC_ConfigChannel+0xd0>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003aae:	4dba      	ldr	r5, [pc, #744]	; (8003d98 <HAL_ADC_ConfigChannel+0x384>)
 8003ab0:	42aa      	cmp	r2, r5
 8003ab2:	f040 8131 	bne.w	8003d18 <HAL_ADC_ConfigChannel+0x304>
 8003ab6:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003aba:	d119      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0xdc>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003abc:	4ab7      	ldr	r2, [pc, #732]	; (8003d9c <HAL_ADC_ConfigChannel+0x388>)
 8003abe:	4294      	cmp	r4, r2
 8003ac0:	d016      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0xdc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003ac2:	688a      	ldr	r2, [r1, #8]
 8003ac4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003ac8:	4316      	orrs	r6, r2
 8003aca:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 8003ace:	608e      	str	r6, [r1, #8]
}
 8003ad0:	e003      	b.n	8003ada <HAL_ADC_ConfigChannel+0xc6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ad2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ad4:	f042 0220 	orr.w	r2, r2, #32
 8003ad8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003ae0:	b003      	add	sp, #12
 8003ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ae4:	0202      	lsls	r2, r0, #8
 8003ae6:	d403      	bmi.n	8003af0 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ae8:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8003aec:	f000 80f5 	beq.w	8003cda <HAL_ADC_ConfigChannel+0x2c6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003af0:	2000      	movs	r0, #0
 8003af2:	e7f2      	b.n	8003ada <HAL_ADC_ConfigChannel+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003af4:	68a2      	ldr	r2, [r4, #8]
 8003af6:	f012 0208 	ands.w	r2, r2, #8
 8003afa:	f040 8082 	bne.w	8003c02 <HAL_ADC_ConfigChannel+0x1ee>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003afe:	6888      	ldr	r0, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003b00:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003b02:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8003b06:	f000 811b 	beq.w	8003d40 <HAL_ADC_ConfigChannel+0x32c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b0a:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 8003b0e:	f104 0714 	add.w	r7, r4, #20
 8003b12:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8003b16:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003b1a:	f85c 5007 	ldr.w	r5, [ip, r7]
 8003b1e:	f04f 0e07 	mov.w	lr, #7
 8003b22:	40b0      	lsls	r0, r6
 8003b24:	fa0e f606 	lsl.w	r6, lr, r6
 8003b28:	ea25 0506 	bic.w	r5, r5, r6
 8003b2c:	4328      	orrs	r0, r5
 8003b2e:	f84c 0007 	str.w	r0, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b32:	6960      	ldr	r0, [r4, #20]
 8003b34:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003b38:	6160      	str	r0, [r4, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b3a:	690f      	ldr	r7, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b3c:	68e5      	ldr	r5, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b3e:	2f04      	cmp	r7, #4
 8003b40:	d02f      	beq.n	8003ba2 <HAL_ADC_ConfigChannel+0x18e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b42:	f104 0060 	add.w	r0, r4, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b46:	f3c5 05c1 	ubfx	r5, r5, #3, #2
  MODIFY_REG(*preg,
 8003b4a:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
 8003b4e:	f8df c25c 	ldr.w	ip, [pc, #604]	; 8003dac <HAL_ADC_ConfigChannel+0x398>
 8003b52:	006e      	lsls	r6, r5, #1
 8003b54:	680d      	ldr	r5, [r1, #0]
 8003b56:	ea0e 0c0c 	and.w	ip, lr, ip
 8003b5a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003b5e:	ea45 0c0c 	orr.w	ip, r5, ip
 8003b62:	694d      	ldr	r5, [r1, #20]
 8003b64:	40b5      	lsls	r5, r6
 8003b66:	ea45 050c 	orr.w	r5, r5, ip
 8003b6a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8003b6e:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b72:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8003b74:	698e      	ldr	r6, [r1, #24]
 8003b76:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
 8003b7a:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8003b7e:	4335      	orrs	r5, r6
 8003b80:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b84:	7f0d      	ldrb	r5, [r1, #28]
 8003b86:	690e      	ldr	r6, [r1, #16]
 8003b88:	2d01      	cmp	r5, #1
  MODIFY_REG(*preg,
 8003b8a:	f850 5026 	ldr.w	r5, [r0, r6, lsl #2]
 8003b8e:	bf08      	it	eq
 8003b90:	f04f 7200 	moveq.w	r2, #33554432	; 0x2000000
 8003b94:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8003b98:	432a      	orrs	r2, r5
 8003b9a:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 8003b9e:	6808      	ldr	r0, [r1, #0]
}
 8003ba0:	e766      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x5c>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ba2:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ba4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003ba6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003ba8:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bac:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bb0:	2d00      	cmp	r5, #0
 8003bb2:	f040 80fd 	bne.w	8003db0 <HAL_ADC_ConfigChannel+0x39c>
 8003bb6:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bba:	42aa      	cmp	r2, r5
 8003bbc:	f000 8171 	beq.w	8003ea2 <HAL_ADC_ConfigChannel+0x48e>
 8003bc0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003bc2:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bc4:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bc8:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003bcc:	f104 0764 	add.w	r7, r4, #100	; 0x64
 8003bd0:	42ae      	cmp	r6, r5
 8003bd2:	f000 8154 	beq.w	8003e7e <HAL_ADC_ConfigChannel+0x46a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003bd6:	6896      	ldr	r6, [r2, #8]
 8003bd8:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bda:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bde:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003be2:	42ae      	cmp	r6, r5
 8003be4:	f000 8139 	beq.w	8003e5a <HAL_ADC_ConfigChannel+0x446>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003be8:	68d6      	ldr	r6, [r2, #12]
 8003bea:	68d6      	ldr	r6, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bec:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bf0:	f3c6 6284 	ubfx	r2, r6, #26, #5
 8003bf4:	4295      	cmp	r5, r2
 8003bf6:	f47f af3b 	bne.w	8003a70 <HAL_ADC_ConfigChannel+0x5c>
  MODIFY_REG(*preg,
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c00:	603a      	str	r2, [r7, #0]
 8003c02:	6808      	ldr	r0, [r1, #0]
}
 8003c04:	e734      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x5c>
    SET_BIT(ADCx->DIFSEL,
 8003c06:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003c0a:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8003c0e:	432a      	orrs	r2, r5
 8003c10:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c14:	2d00      	cmp	r5, #0
 8003c16:	d050      	beq.n	8003cba <HAL_ADC_ConfigChannel+0x2a6>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	fa90 f2a0 	rbit	r2, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c1c:	2a00      	cmp	r2, #0
 8003c1e:	f000 80f8 	beq.w	8003e12 <HAL_ADC_ConfigChannel+0x3fe>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003c22:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c26:	3201      	adds	r2, #1
 8003c28:	f002 021f 	and.w	r2, r2, #31
 8003c2c:	2a09      	cmp	r2, #9
 8003c2e:	f240 80f0 	bls.w	8003e12 <HAL_ADC_ConfigChannel+0x3fe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8003c36:	2a00      	cmp	r2, #0
 8003c38:	f000 814f 	beq.w	8003eda <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003c3c:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c40:	3201      	adds	r2, #1
 8003c42:	0692      	lsls	r2, r2, #26
 8003c44:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c48:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003c4c:	2d00      	cmp	r5, #0
 8003c4e:	f000 8149 	beq.w	8003ee4 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8003c52:	fab5 f585 	clz	r5, r5
 8003c56:	3501      	adds	r5, #1
 8003c58:	f005 051f 	and.w	r5, r5, #31
 8003c5c:	2601      	movs	r6, #1
 8003c5e:	fa06 f505 	lsl.w	r5, r6, r5
 8003c62:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c64:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	f000 8139 	beq.w	8003ee0 <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 8003c6e:	fab0 f080 	clz	r0, r0
 8003c72:	1c42      	adds	r2, r0, #1
 8003c74:	f002 001f 	and.w	r0, r2, #31
 8003c78:	f06f 061d 	mvn.w	r6, #29
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	fb12 6200 	smlabb	r2, r2, r0, r6
 8003c82:	0512      	lsls	r2, r2, #20
 8003c84:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c88:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c8a:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 8003c8c:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c8e:	f006 0604 	and.w	r6, r6, #4
 8003c92:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 8003c96:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003c9a:	fa00 f702 	lsl.w	r7, r0, r2
 8003c9e:	f04f 0c07 	mov.w	ip, #7
 8003ca2:	5970      	ldr	r0, [r6, r5]
 8003ca4:	fa0c f202 	lsl.w	r2, ip, r2
 8003ca8:	ea20 0202 	bic.w	r2, r0, r2
 8003cac:	433a      	orrs	r2, r7
 8003cae:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003cb0:	680a      	ldr	r2, [r1, #0]
}
 8003cb2:	e6ef      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x80>
  __HAL_LOCK(hadc);
 8003cb4:	2002      	movs	r0, #2
}
 8003cb6:	b003      	add	sp, #12
 8003cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cba:	0e80      	lsrs	r0, r0, #26
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	f000 061f 	and.w	r6, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cc2:	2e09      	cmp	r6, #9
 8003cc4:	d850      	bhi.n	8003d68 <HAL_ADC_ConfigChannel+0x354>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cc6:	0685      	lsls	r5, r0, #26
 8003cc8:	2201      	movs	r2, #1
 8003cca:	40b2      	lsls	r2, r6
 8003ccc:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003cd0:	4315      	orrs	r5, r2
 8003cd2:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8003cd6:	0512      	lsls	r2, r2, #20
 8003cd8:	e7d6      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x274>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003cda:	492c      	ldr	r1, [pc, #176]	; (8003d8c <HAL_ADC_ConfigChannel+0x378>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cdc:	4830      	ldr	r0, [pc, #192]	; (8003da0 <HAL_ADC_ConfigChannel+0x38c>)
 8003cde:	688a      	ldr	r2, [r1, #8]
 8003ce0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003ce4:	4316      	orrs	r6, r2
 8003ce6:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8003cea:	608e      	str	r6, [r1, #8]
 8003cec:	6802      	ldr	r2, [r0, #0]
 8003cee:	492d      	ldr	r1, [pc, #180]	; (8003da4 <HAL_ADC_ConfigChannel+0x390>)
 8003cf0:	0992      	lsrs	r2, r2, #6
 8003cf2:	fba1 1202 	umull	r1, r2, r1, r2
 8003cf6:	0992      	lsrs	r2, r2, #6
 8003cf8:	3201      	adds	r2, #1
 8003cfa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003cfe:	0092      	lsls	r2, r2, #2
 8003d00:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003d02:	9a01      	ldr	r2, [sp, #4]
 8003d04:	2a00      	cmp	r2, #0
 8003d06:	f43f aef3 	beq.w	8003af0 <HAL_ADC_ConfigChannel+0xdc>
            wait_loop_index--;
 8003d0a:	9a01      	ldr	r2, [sp, #4]
 8003d0c:	3a01      	subs	r2, #1
 8003d0e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003d10:	9a01      	ldr	r2, [sp, #4]
 8003d12:	2a00      	cmp	r2, #0
 8003d14:	d1f9      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x2f6>
 8003d16:	e6eb      	b.n	8003af0 <HAL_ADC_ConfigChannel+0xdc>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d18:	4d23      	ldr	r5, [pc, #140]	; (8003da8 <HAL_ADC_ConfigChannel+0x394>)
 8003d1a:	42aa      	cmp	r2, r5
 8003d1c:	f47f aee8 	bne.w	8003af0 <HAL_ADC_ConfigChannel+0xdc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d20:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8003d24:	f47f aee4 	bne.w	8003af0 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d28:	4a1c      	ldr	r2, [pc, #112]	; (8003d9c <HAL_ADC_ConfigChannel+0x388>)
 8003d2a:	4294      	cmp	r4, r2
 8003d2c:	f43f aee0 	beq.w	8003af0 <HAL_ADC_ConfigChannel+0xdc>
 8003d30:	688a      	ldr	r2, [r1, #8]
 8003d32:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003d36:	4332      	orrs	r2, r6
 8003d38:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003d3c:	608a      	str	r2, [r1, #8]
}
 8003d3e:	e6cc      	b.n	8003ada <HAL_ADC_ConfigChannel+0xc6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d40:	0df5      	lsrs	r5, r6, #23
 8003d42:	f104 0014 	add.w	r0, r4, #20
 8003d46:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8003d4a:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003d4e:	582f      	ldr	r7, [r5, r0]
 8003d50:	f04f 0c07 	mov.w	ip, #7
 8003d54:	fa0c f606 	lsl.w	r6, ip, r6
 8003d58:	ea27 0606 	bic.w	r6, r7, r6
 8003d5c:	502e      	str	r6, [r5, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003d5e:	6960      	ldr	r0, [r4, #20]
 8003d60:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8003d64:	6160      	str	r0, [r4, #20]
}
 8003d66:	e6e8      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x126>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d68:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8003d6c:	0685      	lsls	r5, r0, #26
 8003d6e:	3a1e      	subs	r2, #30
 8003d70:	2001      	movs	r0, #1
 8003d72:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003d76:	0512      	lsls	r2, r2, #20
 8003d78:	fa00 f606 	lsl.w	r6, r0, r6
 8003d7c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003d80:	4335      	orrs	r5, r6
 8003d82:	e781      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x274>
 8003d84:	407f0000 	.word	0x407f0000
 8003d88:	80080000 	.word	0x80080000
 8003d8c:	50000300 	.word	0x50000300
 8003d90:	c3210000 	.word	0xc3210000
 8003d94:	90c00010 	.word	0x90c00010
 8003d98:	c7520000 	.word	0xc7520000
 8003d9c:	50000100 	.word	0x50000100
 8003da0:	20000700 	.word	0x20000700
 8003da4:	053e2d63 	.word	0x053e2d63
 8003da8:	cb840000 	.word	0xcb840000
 8003dac:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003db4:	b11d      	cbz	r5, 8003dbe <HAL_ADC_ConfigChannel+0x3aa>
  return __builtin_clz(value);
 8003db6:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003dba:	42aa      	cmp	r2, r5
 8003dbc:	d071      	beq.n	8003ea2 <HAL_ADC_ConfigChannel+0x48e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003dbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003dc0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dc2:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003dc6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003dca:	f104 0764 	add.w	r7, r4, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dce:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003dd2:	b11d      	cbz	r5, 8003ddc <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 8003dd4:	fab5 f585 	clz	r5, r5
 8003dd8:	42ae      	cmp	r6, r5
 8003dda:	d050      	beq.n	8003e7e <HAL_ADC_ConfigChannel+0x46a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ddc:	6895      	ldr	r5, [r2, #8]
 8003dde:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003de0:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003de4:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003dec:	b11d      	cbz	r5, 8003df6 <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 8003dee:	fab5 f585 	clz	r5, r5
 8003df2:	42ae      	cmp	r6, r5
 8003df4:	d031      	beq.n	8003e5a <HAL_ADC_ConfigChannel+0x446>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003df6:	68d5      	ldr	r5, [r2, #12]
 8003df8:	68d5      	ldr	r5, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dfa:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003dfe:	f3c5 6284 	ubfx	r2, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003e06:	2d00      	cmp	r5, #0
 8003e08:	f43f ae32 	beq.w	8003a70 <HAL_ADC_ConfigChannel+0x5c>
  return __builtin_clz(value);
 8003e0c:	fab5 f585 	clz	r5, r5
 8003e10:	e6f0      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e12:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8003e16:	2a00      	cmp	r2, #0
 8003e18:	d059      	beq.n	8003ece <HAL_ADC_ConfigChannel+0x4ba>
  return __builtin_clz(value);
 8003e1a:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e1e:	3201      	adds	r2, #1
 8003e20:	0692      	lsls	r2, r2, #26
 8003e22:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e26:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003e2a:	2d00      	cmp	r5, #0
 8003e2c:	d04d      	beq.n	8003eca <HAL_ADC_ConfigChannel+0x4b6>
  return __builtin_clz(value);
 8003e2e:	fab5 f585 	clz	r5, r5
 8003e32:	3501      	adds	r5, #1
 8003e34:	f005 051f 	and.w	r5, r5, #31
 8003e38:	2601      	movs	r6, #1
 8003e3a:	fa06 f505 	lsl.w	r5, r6, r5
 8003e3e:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e40:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003e44:	2800      	cmp	r0, #0
 8003e46:	d045      	beq.n	8003ed4 <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 8003e48:	fab0 f080 	clz	r0, r0
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	f000 001f 	and.w	r0, r0, #31
 8003e52:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003e56:	0502      	lsls	r2, r0, #20
 8003e58:	e716      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x274>
  MODIFY_REG(*preg,
 8003e5a:	6838      	ldr	r0, [r7, #0]
 8003e5c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003e60:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e62:	68d0      	ldr	r0, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e64:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e66:	f102 070c 	add.w	r7, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e6a:	68d2      	ldr	r2, [r2, #12]
 8003e6c:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e70:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e74:	2d00      	cmp	r5, #0
 8003e76:	d1c4      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x3ee>
 8003e78:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003e7c:	e6ba      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x1e0>
  MODIFY_REG(*preg,
 8003e7e:	6838      	ldr	r0, [r7, #0]
 8003e80:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003e84:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e86:	6890      	ldr	r0, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e88:	6808      	ldr	r0, [r1, #0]
 8003e8a:	6896      	ldr	r6, [r2, #8]
 8003e8c:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e90:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e94:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e98:	2d00      	cmp	r5, #0
 8003e9a:	d1a5      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x3d4>
 8003e9c:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003ea0:	e69f      	b.n	8003be2 <HAL_ADC_ConfigChannel+0x1ce>
  MODIFY_REG(*preg,
 8003ea2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003ea4:	4622      	mov	r2, r4
 8003ea6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003eaa:	f842 0f60 	str.w	r0, [r2, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003eae:	6e60      	ldr	r0, [r4, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003eb0:	6808      	ldr	r0, [r1, #0]
 8003eb2:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8003eb4:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003eb8:	f104 0764 	add.w	r7, r4, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ebc:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ec0:	2d00      	cmp	r5, #0
 8003ec2:	d184      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x3ba>
 8003ec4:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003ec8:	e682      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x1bc>
 8003eca:	2502      	movs	r5, #2
 8003ecc:	e7b7      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x42a>
 8003ece:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003ed2:	e7a8      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x412>
 8003ed4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8003ed8:	e6d6      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x274>
 8003eda:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003ede:	e6b3      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x234>
 8003ee0:	4a01      	ldr	r2, [pc, #4]	; (8003ee8 <HAL_ADC_ConfigChannel+0x4d4>)
 8003ee2:	e6d1      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x274>
 8003ee4:	2502      	movs	r5, #2
 8003ee6:	e6bc      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x24e>
 8003ee8:	fe500000 	.word	0xfe500000

08003eec <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ef0:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8003ef4:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8003ef6:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003ef8:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8003efa:	9201      	str	r2, [sp, #4]
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003efc:	6942      	ldr	r2, [r0, #20]
  __HAL_LOCK(hadc);
 8003efe:	f000 8166 	beq.w	80041ce <HAL_ADCEx_InjectedConfigChannel+0x2e2>
 8003f02:	2301      	movs	r3, #1
 8003f04:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003f08:	b1e2      	cbz	r2, 8003f44 <HAL_ADCEx_InjectedConfigChannel+0x58>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003f0a:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d019      	beq.n	8003f44 <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003f10:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8003f12:	2c00      	cmp	r4, #0
 8003f14:	f040 8119 	bne.w	800414a <HAL_ADCEx_InjectedConfigChannel+0x25e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003f18:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003f1a:	2a00      	cmp	r2, #0
 8003f1c:	f000 8222 	beq.w	8004364 <HAL_ADCEx_InjectedConfigChannel+0x478>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003f20:	1e5d      	subs	r5, r3, #1
 8003f22:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003f24:	f002 037c 	and.w	r3, r2, #124	; 0x7c
 8003f28:	432b      	orrs	r3, r5
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003f2a:	4323      	orrs	r3, r4
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003f2c:	e9d1 2400 	ldrd	r2, r4, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003f30:	6685      	str	r5, [r0, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003f32:	f004 051f 	and.w	r5, r4, #31
 8003f36:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8003f3a:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003f3c:	431c      	orrs	r4, r3
 8003f3e:	6644      	str	r4, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003f40:	6803      	ldr	r3, [r0, #0]
 8003f42:	e005      	b.n	8003f50 <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003f44:	684b      	ldr	r3, [r1, #4]
 8003f46:	2b09      	cmp	r3, #9
 8003f48:	f000 80eb 	beq.w	8004122 <HAL_ADCEx_InjectedConfigChannel+0x236>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003f4c:	680a      	ldr	r2, [r1, #0]
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003f4e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f50:	689c      	ldr	r4, [r3, #8]
 8003f52:	0727      	lsls	r7, r4, #28
 8003f54:	d410      	bmi.n	8003f78 <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003f56:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8003f5a:	2c00      	cmp	r4, #0
 8003f5c:	f040 80d8 	bne.w	8004110 <HAL_ADCEx_InjectedConfigChannel+0x224>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003f60:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8003f64:	68dd      	ldr	r5, [r3, #12]
 8003f66:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8003f6a:	0524      	lsls	r4, r4, #20
 8003f6c:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8003f70:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8003f74:	432c      	orrs	r4, r5
 8003f76:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f78:	689c      	ldr	r4, [r3, #8]
 8003f7a:	f014 0404 	ands.w	r4, r4, #4
 8003f7e:	d058      	beq.n	8004032 <HAL_ADCEx_InjectedConfigChannel+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f80:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f82:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f84:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f86:	07ee      	lsls	r6, r5, #31
 8003f88:	d40c      	bmi.n	8003fa4 <HAL_ADCEx_InjectedConfigChannel+0xb8>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003f8a:	4dac      	ldr	r5, [pc, #688]	; (800423c <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8003f8c:	68ce      	ldr	r6, [r1, #12]
 8003f8e:	42ae      	cmp	r6, r5
 8003f90:	f000 8100 	beq.w	8004194 <HAL_ADCEx_InjectedConfigChannel+0x2a8>
    CLEAR_BIT(ADCx->DIFSEL,
 8003f94:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003f98:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003f9c:	ea21 0105 	bic.w	r1, r1, r5
 8003fa0:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8003fa4:	49a6      	ldr	r1, [pc, #664]	; (8004240 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8003fa6:	420a      	tst	r2, r1
 8003fa8:	d019      	beq.n	8003fde <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003faa:	4ea6      	ldr	r6, [pc, #664]	; (8004244 <HAL_ADCEx_InjectedConfigChannel+0x358>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003fac:	4da6      	ldr	r5, [pc, #664]	; (8004248 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8003fae:	68b1      	ldr	r1, [r6, #8]
 8003fb0:	42aa      	cmp	r2, r5
 8003fb2:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8003fb6:	d019      	beq.n	8003fec <HAL_ADCEx_InjectedConfigChannel+0x100>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003fb8:	4da4      	ldr	r5, [pc, #656]	; (800424c <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8003fba:	42aa      	cmp	r2, r5
 8003fbc:	d016      	beq.n	8003fec <HAL_ADCEx_InjectedConfigChannel+0x100>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003fbe:	4da4      	ldr	r5, [pc, #656]	; (8004250 <HAL_ADCEx_InjectedConfigChannel+0x364>)
 8003fc0:	42aa      	cmp	r2, r5
 8003fc2:	f040 810d 	bne.w	80041e0 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003fc6:	01cd      	lsls	r5, r1, #7
 8003fc8:	d409      	bmi.n	8003fde <HAL_ADCEx_InjectedConfigChannel+0xf2>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fca:	4aa2      	ldr	r2, [pc, #648]	; (8004254 <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d006      	beq.n	8003fde <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003fd0:	68b3      	ldr	r3, [r6, #8]
 8003fd2:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003fd6:	431f      	orrs	r7, r3
 8003fd8:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8003fdc:	60b7      	str	r7, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	b002      	add	sp, #8
 8003fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fec:	020a      	lsls	r2, r1, #8
 8003fee:	d4f6      	bmi.n	8003fde <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ff4:	d1f3      	bne.n	8003fde <HAL_ADCEx_InjectedConfigChannel+0xf2>
 8003ff6:	4a93      	ldr	r2, [pc, #588]	; (8004244 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8003ff8:	6893      	ldr	r3, [r2, #8]
 8003ffa:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003ffe:	431f      	orrs	r7, r3
 8004000:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004004:	4b94      	ldr	r3, [pc, #592]	; (8004258 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8004006:	6097      	str	r7, [r2, #8]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a94      	ldr	r2, [pc, #592]	; (800425c <HAL_ADCEx_InjectedConfigChannel+0x370>)
 800400c:	099b      	lsrs	r3, r3, #6
 800400e:	fba2 2303 	umull	r2, r3, r2, r3
 8004012:	099b      	lsrs	r3, r3, #6
 8004014:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	3318      	adds	r3, #24
 800401c:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 800401e:	9b01      	ldr	r3, [sp, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0dc      	beq.n	8003fde <HAL_ADCEx_InjectedConfigChannel+0xf2>
          wait_loop_index--;
 8004024:	9b01      	ldr	r3, [sp, #4]
 8004026:	3b01      	subs	r3, #1
 8004028:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 800402a:	9b01      	ldr	r3, [sp, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f9      	bne.n	8004024 <HAL_ADCEx_InjectedConfigChannel+0x138>
 8004030:	e7d5      	b.n	8003fde <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004032:	689d      	ldr	r5, [r3, #8]
 8004034:	f015 0508 	ands.w	r5, r5, #8
 8004038:	d1a4      	bne.n	8003f84 <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800403a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800403c:	2c00      	cmp	r4, #0
 800403e:	f040 809a 	bne.w	8004176 <HAL_ADCEx_InjectedConfigChannel+0x28a>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004042:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8004046:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004048:	68dc      	ldr	r4, [r3, #12]
 800404a:	bf0c      	ite	eq
 800404c:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004050:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 8004054:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004056:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004058:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 800405c:	2e01      	cmp	r6, #1
      MODIFY_REG(hadc->Instance->CFGR2,
 800405e:	691e      	ldr	r6, [r3, #16]
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004060:	f000 80e0 	beq.w	8004224 <HAL_ADCEx_InjectedConfigChannel+0x338>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004064:	f026 0602 	bic.w	r6, r6, #2
 8004068:	611e      	str	r6, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800406a:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800406c:	0dd7      	lsrs	r7, r2, #23
 800406e:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8004072:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8004076:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800407a:	f000 80c4 	beq.w	8004206 <HAL_ADCEx_InjectedConfigChannel+0x31a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800407e:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8004082:	f04f 0e07 	mov.w	lr, #7
 8004086:	4096      	lsls	r6, r2
 8004088:	fa0e fe02 	lsl.w	lr, lr, r2
 800408c:	f857 200c 	ldr.w	r2, [r7, ip]
 8004090:	ea22 020e 	bic.w	r2, r2, lr
 8004094:	4316      	orrs	r6, r2
 8004096:	f847 600c 	str.w	r6, [r7, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040a0:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80040a2:	690f      	ldr	r7, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80040a4:	68de      	ldr	r6, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80040a6:	2f04      	cmp	r7, #4
 80040a8:	f000 80e0 	beq.w	800426c <HAL_ADCEx_InjectedConfigChannel+0x380>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80040ac:	f3c6 06c1 	ubfx	r6, r6, #3, #2
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040b0:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80040b4:	ea4f 0e46 	mov.w	lr, r6, lsl #1
  MODIFY_REG(*preg,
 80040b8:	680e      	ldr	r6, [r1, #0]
 80040ba:	f852 8027 	ldr.w	r8, [r2, r7, lsl #2]
 80040be:	f006 4cf8 	and.w	ip, r6, #2080374784	; 0x7c000000
 80040c2:	4e67      	ldr	r6, [pc, #412]	; (8004260 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 80040c4:	ea08 0606 	and.w	r6, r8, r6
 80040c8:	ea4c 0c06 	orr.w	ip, ip, r6
 80040cc:	694e      	ldr	r6, [r1, #20]
 80040ce:	fa06 f60e 	lsl.w	r6, r6, lr
 80040d2:	ea46 060c 	orr.w	r6, r6, ip
 80040d6:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 80040da:	f842 6027 	str.w	r6, [r2, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040de:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 80040e2:	698f      	ldr	r7, [r1, #24]
 80040e4:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 80040e8:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 80040ec:	433e      	orrs	r6, r7
 80040ee:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80040f2:	7f0e      	ldrb	r6, [r1, #28]
 80040f4:	690f      	ldr	r7, [r1, #16]
 80040f6:	2e01      	cmp	r6, #1
  MODIFY_REG(*preg,
 80040f8:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 80040fc:	bf08      	it	eq
 80040fe:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8004102:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 8004106:	4335      	orrs	r5, r6
 8004108:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 800410c:	680a      	ldr	r2, [r1, #0]
}
 800410e:	e739      	b.n	8003f84 <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 8004110:	68dc      	ldr	r4, [r3, #12]
 8004112:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 8004116:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 800411a:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 800411e:	60dc      	str	r4, [r3, #12]
 8004120:	e72a      	b.n	8003f78 <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004122:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004124:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004126:	2b00      	cmp	r3, #0
 8004128:	d056      	beq.n	80041d8 <HAL_ADCEx_InjectedConfigChannel+0x2ec>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800412a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800412c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004130:	0c55      	lsrs	r5, r2, #17
 8004132:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004136:	4323      	orrs	r3, r4
 8004138:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 800413a:	6803      	ldr	r3, [r0, #0]
 800413c:	4e49      	ldr	r6, [pc, #292]	; (8004264 <HAL_ADCEx_InjectedConfigChannel+0x378>)
 800413e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004140:	4034      	ands	r4, r6
 8004142:	432c      	orrs	r4, r5
 8004144:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8004146:	6645      	str	r5, [r0, #100]	; 0x64
 8004148:	e702      	b.n	8003f50 <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 800414a:	680a      	ldr	r2, [r1, #0]
 800414c:	684b      	ldr	r3, [r1, #4]
 800414e:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	409d      	lsls	r5, r3
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004158:	6e43      	ldr	r3, [r0, #100]	; 0x64
    hadc->InjectionConfig.ChannelCount--;
 800415a:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800415c:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 800415e:	6684      	str	r4, [r0, #104]	; 0x68
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004160:	6803      	ldr	r3, [r0, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004162:	6645      	str	r5, [r0, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004164:	2c00      	cmp	r4, #0
 8004166:	f47f aef3 	bne.w	8003f50 <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 800416a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800416c:	4e3d      	ldr	r6, [pc, #244]	; (8004264 <HAL_ADCEx_InjectedConfigChannel+0x378>)
 800416e:	4034      	ands	r4, r6
 8004170:	4325      	orrs	r5, r4
 8004172:	64dd      	str	r5, [r3, #76]	; 0x4c
 8004174:	e6ec      	b.n	8003f50 <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004176:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004178:	2c00      	cmp	r4, #0
 800417a:	f43f af62 	beq.w	8004042 <HAL_ADCEx_InjectedConfigChannel+0x156>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800417e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8004182:	2c01      	cmp	r4, #1
 8004184:	f000 8158 	beq.w	8004438 <HAL_ADCEx_InjectedConfigChannel+0x54c>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004188:	68dc      	ldr	r4, [r3, #12]
 800418a:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 800418e:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004190:	462c      	mov	r4, r5
 8004192:	e761      	b.n	8004058 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    SET_BIT(ADCx->DIFSEL,
 8004194:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8004198:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800419c:	4335      	orrs	r5, r6
 800419e:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80041a2:	2e00      	cmp	r6, #0
 80041a4:	f040 80a7 	bne.w	80042f6 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 80041a8:	0e92      	lsrs	r2, r2, #26
 80041aa:	1c55      	adds	r5, r2, #1
 80041ac:	f005 0c1f 	and.w	ip, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041b0:	f1bc 0f09 	cmp.w	ip, #9
 80041b4:	f200 80d9 	bhi.w	800436a <HAL_ADCEx_InjectedConfigChannel+0x47e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80041b8:	06ad      	lsls	r5, r5, #26
 80041ba:	2201      	movs	r2, #1
 80041bc:	fa02 f20c 	lsl.w	r2, r2, ip
 80041c0:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80041c4:	4315      	orrs	r5, r2
 80041c6:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 80041ca:	0512      	lsls	r2, r2, #20
 80041cc:	e0db      	b.n	8004386 <HAL_ADCEx_InjectedConfigChannel+0x49a>
  __HAL_LOCK(hadc);
 80041ce:	2402      	movs	r4, #2
}
 80041d0:	4620      	mov	r0, r4
 80041d2:	b002      	add	sp, #8
 80041d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80041d8:	0c55      	lsrs	r5, r2, #17
 80041da:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 80041de:	e7ac      	b.n	800413a <HAL_ADCEx_InjectedConfigChannel+0x24e>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80041e0:	4d21      	ldr	r5, [pc, #132]	; (8004268 <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 80041e2:	42aa      	cmp	r2, r5
 80041e4:	f47f aefb 	bne.w	8003fde <HAL_ADCEx_InjectedConfigChannel+0xf2>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041e8:	0249      	lsls	r1, r1, #9
 80041ea:	f53f aef8 	bmi.w	8003fde <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_VREFINT_INSTANCE(hadc))
 80041ee:	4a19      	ldr	r2, [pc, #100]	; (8004254 <HAL_ADCEx_InjectedConfigChannel+0x368>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	f43f aef4 	beq.w	8003fde <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80041f6:	68b3      	ldr	r3, [r6, #8]
 80041f8:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80041fc:	431f      	orrs	r7, r3
 80041fe:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 8004202:	60b7      	str	r7, [r6, #8]
}
 8004204:	e6eb      	b.n	8003fde <HAL_ADCEx_InjectedConfigChannel+0xf2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004206:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 800420a:	f04f 0c07 	mov.w	ip, #7
 800420e:	fa0c fc02 	lsl.w	ip, ip, r2
 8004212:	59ba      	ldr	r2, [r7, r6]
 8004214:	ea22 020c 	bic.w	r2, r2, ip
 8004218:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004220:	615a      	str	r2, [r3, #20]
}
 8004222:	e73e      	b.n	80040a2 <HAL_ADCEx_InjectedConfigChannel+0x1b6>
      MODIFY_REG(hadc->Instance->CFGR2,
 8004224:	f426 7cff 	bic.w	ip, r6, #510	; 0x1fe
 8004228:	e9d1 670d 	ldrd	r6, r7, [r1, #52]	; 0x34
 800422c:	433e      	orrs	r6, r7
 800422e:	ea46 060c 	orr.w	r6, r6, ip
 8004232:	f046 0602 	orr.w	r6, r6, #2
 8004236:	611e      	str	r6, [r3, #16]
 8004238:	e717      	b.n	800406a <HAL_ADCEx_InjectedConfigChannel+0x17e>
 800423a:	bf00      	nop
 800423c:	407f0000 	.word	0x407f0000
 8004240:	80080000 	.word	0x80080000
 8004244:	50000300 	.word	0x50000300
 8004248:	c3210000 	.word	0xc3210000
 800424c:	90c00010 	.word	0x90c00010
 8004250:	c7520000 	.word	0xc7520000
 8004254:	50000100 	.word	0x50000100
 8004258:	20000700 	.word	0x20000700
 800425c:	053e2d63 	.word	0x053e2d63
 8004260:	03fff000 	.word	0x03fff000
 8004264:	04104000 	.word	0x04104000
 8004268:	cb840000 	.word	0xcb840000
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800426c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800426e:	680a      	ldr	r2, [r1, #0]
 8004270:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8004272:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004276:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800427a:	2e00      	cmp	r6, #0
 800427c:	f000 809a 	beq.w	80043b4 <HAL_ADCEx_InjectedConfigChannel+0x4c8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004280:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004284:	b126      	cbz	r6, 8004290 <HAL_ADCEx_InjectedConfigChannel+0x3a4>
  return __builtin_clz(value);
 8004286:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800428a:	42b5      	cmp	r5, r6
 800428c:	f000 80d9 	beq.w	8004442 <HAL_ADCEx_InjectedConfigChannel+0x556>
 8004290:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004292:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004294:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004298:	f3c7 6784 	ubfx	r7, r7, #26, #5
 800429c:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a0:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80042a4:	b126      	cbz	r6, 80042b0 <HAL_ADCEx_InjectedConfigChannel+0x3c4>
  return __builtin_clz(value);
 80042a6:	fab6 f686 	clz	r6, r6
 80042aa:	42b7      	cmp	r7, r6
 80042ac:	f000 80de 	beq.w	800446c <HAL_ADCEx_InjectedConfigChannel+0x580>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042b0:	68ae      	ldr	r6, [r5, #8]
 80042b2:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042b4:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042b8:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80042c0:	b126      	cbz	r6, 80042cc <HAL_ADCEx_InjectedConfigChannel+0x3e0>
  return __builtin_clz(value);
 80042c2:	fab6 f686 	clz	r6, r6
 80042c6:	42b7      	cmp	r7, r6
 80042c8:	f000 80e5 	beq.w	8004496 <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042cc:	68ee      	ldr	r6, [r5, #12]
 80042ce:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042d0:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042d2:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80042da:	2e00      	cmp	r6, #0
 80042dc:	f43f ae52 	beq.w	8003f84 <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 80042e0:	fab6 f686 	clz	r6, r6
 80042e4:	42be      	cmp	r6, r7
 80042e6:	f47f ae4d 	bne.w	8003f84 <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 80042ea:	682a      	ldr	r2, [r5, #0]
 80042ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042f0:	602a      	str	r2, [r5, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80042f2:	680a      	ldr	r2, [r1, #0]
}
 80042f4:	e646      	b.n	8003f84 <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f6:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80042fa:	2d00      	cmp	r5, #0
 80042fc:	d076      	beq.n	80043ec <HAL_ADCEx_InjectedConfigChannel+0x500>
  return __builtin_clz(value);
 80042fe:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004302:	3501      	adds	r5, #1
 8004304:	f005 051f 	and.w	r5, r5, #31
 8004308:	2d09      	cmp	r5, #9
 800430a:	d96f      	bls.n	80043ec <HAL_ADCEx_InjectedConfigChannel+0x500>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004310:	2d00      	cmp	r5, #0
 8004312:	f000 80e0 	beq.w	80044d6 <HAL_ADCEx_InjectedConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004316:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800431a:	3501      	adds	r5, #1
 800431c:	06ad      	lsls	r5, r5, #26
 800431e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004322:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004326:	2e00      	cmp	r6, #0
 8004328:	f000 80d3 	beq.w	80044d2 <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 800432c:	fab6 f686 	clz	r6, r6
 8004330:	3601      	adds	r6, #1
 8004332:	f006 061f 	and.w	r6, r6, #31
 8004336:	2701      	movs	r7, #1
 8004338:	fa07 f606 	lsl.w	r6, r7, r6
 800433c:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004342:	2a00      	cmp	r2, #0
 8004344:	f000 80c3 	beq.w	80044ce <HAL_ADCEx_InjectedConfigChannel+0x5e2>
  return __builtin_clz(value);
 8004348:	fab2 f282 	clz	r2, r2
 800434c:	3201      	adds	r2, #1
 800434e:	f002 061f 	and.w	r6, r2, #31
 8004352:	f06f 071d 	mvn.w	r7, #29
 8004356:	2203      	movs	r2, #3
 8004358:	fb12 7206 	smlabb	r2, r2, r6, r7
 800435c:	0512      	lsls	r2, r2, #20
 800435e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004362:	e010      	b.n	8004386 <HAL_ADCEx_InjectedConfigChannel+0x49a>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004364:	3b01      	subs	r3, #1
 8004366:	461d      	mov	r5, r3
 8004368:	e5e0      	b.n	8003f2c <HAL_ADCEx_InjectedConfigChannel+0x40>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800436a:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 800436e:	06ad      	lsls	r5, r5, #26
 8004370:	3a1e      	subs	r2, #30
 8004372:	2601      	movs	r6, #1
 8004374:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004378:	0512      	lsls	r2, r2, #20
 800437a:	fa06 fc0c 	lsl.w	ip, r6, ip
 800437e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004382:	ea45 050c 	orr.w	r5, r5, ip
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004386:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004388:	0dd7      	lsrs	r7, r2, #23
  MODIFY_REG(*preg,
 800438a:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800438c:	f007 0704 	and.w	r7, r7, #4
 8004390:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8004394:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004398:	fa05 fc02 	lsl.w	ip, r5, r2
 800439c:	f04f 0e07 	mov.w	lr, #7
 80043a0:	59bd      	ldr	r5, [r7, r6]
 80043a2:	fa0e f202 	lsl.w	r2, lr, r2
 80043a6:	ea25 0202 	bic.w	r2, r5, r2
 80043aa:	ea42 020c 	orr.w	r2, r2, ip
 80043ae:	51ba      	str	r2, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80043b0:	680a      	ldr	r2, [r1, #0]
}
 80043b2:	e5f7      	b.n	8003fa4 <HAL_ADCEx_InjectedConfigChannel+0xb8>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80043b4:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043b8:	42b5      	cmp	r5, r6
 80043ba:	d042      	beq.n	8004442 <HAL_ADCEx_InjectedConfigChannel+0x556>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043bc:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80043be:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043c0:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043c4:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80043c8:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 80043cc:	42b7      	cmp	r7, r6
 80043ce:	d04d      	beq.n	800446c <HAL_ADCEx_InjectedConfigChannel+0x580>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043d0:	68af      	ldr	r7, [r5, #8]
 80043d2:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043d4:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043d8:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80043dc:	42b7      	cmp	r7, r6
 80043de:	d05a      	beq.n	8004496 <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043e0:	68ef      	ldr	r7, [r5, #12]
 80043e2:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043e4:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043e6:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80043ea:	e77b      	b.n	80042e4 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ec:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80043f0:	2d00      	cmp	r5, #0
 80043f2:	d066      	beq.n	80044c2 <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 80043f4:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80043f8:	3501      	adds	r5, #1
 80043fa:	06ad      	lsls	r5, r5, #26
 80043fc:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004400:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004404:	2e00      	cmp	r6, #0
 8004406:	d05a      	beq.n	80044be <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return __builtin_clz(value);
 8004408:	fab6 f686 	clz	r6, r6
 800440c:	3601      	adds	r6, #1
 800440e:	f006 061f 	and.w	r6, r6, #31
 8004412:	2701      	movs	r7, #1
 8004414:	fa07 f606 	lsl.w	r6, r7, r6
 8004418:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800441e:	2a00      	cmp	r2, #0
 8004420:	d052      	beq.n	80044c8 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
  return __builtin_clz(value);
 8004422:	fab2 fc82 	clz	ip, r2
 8004426:	f10c 0c01 	add.w	ip, ip, #1
 800442a:	f00c 0c1f 	and.w	ip, ip, #31
 800442e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8004432:	ea4f 520c 	mov.w	r2, ip, lsl #20
 8004436:	e7a6      	b.n	8004386 <HAL_ADCEx_InjectedConfigChannel+0x49a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004438:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 800443a:	f046 0620 	orr.w	r6, r6, #32
 800443e:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 8004440:	e60a      	b.n	8004058 <HAL_ADCEx_InjectedConfigChannel+0x16c>
  MODIFY_REG(*preg,
 8004442:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004444:	461d      	mov	r5, r3
 8004446:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800444a:	f845 2f60 	str.w	r2, [r5, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800444e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004450:	680a      	ldr	r2, [r1, #0]
 8004452:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8004454:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004458:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800445c:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004460:	2e00      	cmp	r6, #0
 8004462:	f47f af1d 	bne.w	80042a0 <HAL_ADCEx_InjectedConfigChannel+0x3b4>
 8004466:	f3c2 6684 	ubfx	r6, r2, #26, #5
 800446a:	e7af      	b.n	80043cc <HAL_ADCEx_InjectedConfigChannel+0x4e0>
  MODIFY_REG(*preg,
 800446c:	f8dc 2000 	ldr.w	r2, [ip]
 8004470:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004474:	f8cc 2000 	str.w	r2, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004478:	68aa      	ldr	r2, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800447a:	680a      	ldr	r2, [r1, #0]
 800447c:	68af      	ldr	r7, [r5, #8]
 800447e:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004482:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004486:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800448a:	2e00      	cmp	r6, #0
 800448c:	f47f af16 	bne.w	80042bc <HAL_ADCEx_InjectedConfigChannel+0x3d0>
 8004490:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8004494:	e7a2      	b.n	80043dc <HAL_ADCEx_InjectedConfigChannel+0x4f0>
  MODIFY_REG(*preg,
 8004496:	f8dc 2000 	ldr.w	r2, [ip]
 800449a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800449e:	f8cc 2000 	str.w	r2, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044a2:	68ea      	ldr	r2, [r5, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80044a4:	680a      	ldr	r2, [r1, #0]
 80044a6:	68ef      	ldr	r7, [r5, #12]
 80044a8:	f3c2 0612 	ubfx	r6, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044ac:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044ae:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80044b2:	2e00      	cmp	r6, #0
 80044b4:	f47f af0f 	bne.w	80042d6 <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 80044b8:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80044bc:	e712      	b.n	80042e4 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
 80044be:	2602      	movs	r6, #2
 80044c0:	e7aa      	b.n	8004418 <HAL_ADCEx_InjectedConfigChannel+0x52c>
 80044c2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80044c6:	e79b      	b.n	8004400 <HAL_ADCEx_InjectedConfigChannel+0x514>
 80044c8:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80044cc:	e75b      	b.n	8004386 <HAL_ADCEx_InjectedConfigChannel+0x49a>
 80044ce:	4a03      	ldr	r2, [pc, #12]	; (80044dc <HAL_ADCEx_InjectedConfigChannel+0x5f0>)
 80044d0:	e759      	b.n	8004386 <HAL_ADCEx_InjectedConfigChannel+0x49a>
 80044d2:	2602      	movs	r6, #2
 80044d4:	e732      	b.n	800433c <HAL_ADCEx_InjectedConfigChannel+0x450>
 80044d6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80044da:	e722      	b.n	8004322 <HAL_ADCEx_InjectedConfigChannel+0x436>
 80044dc:	fe500000 	.word	0xfe500000

080044e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80044e0:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044e2:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044e6:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 80044e8:	2a01      	cmp	r2, #1
{
 80044ea:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 80044ec:	d04f      	beq.n	800458e <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044ee:	6804      	ldr	r4, [r0, #0]
 80044f0:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80044f2:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80044f4:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044f6:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80044fa:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 80044fc:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004500:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004502:	d008      	beq.n	8004516 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004504:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004506:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800450a:	f041 0120 	orr.w	r1, r1, #32
 800450e:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004510:	b01c      	add	sp, #112	; 0x70
 8004512:	bcf0      	pop	{r4, r5, r6, r7}
 8004514:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004516:	4a23      	ldr	r2, [pc, #140]	; (80045a4 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8004518:	6890      	ldr	r0, [r2, #8]
 800451a:	0740      	lsls	r0, r0, #29
 800451c:	d50b      	bpl.n	8004536 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800451e:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004520:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004522:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8004526:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004528:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8004530:	b01c      	add	sp, #112	; 0x70
 8004532:	bcf0      	pop	{r4, r5, r6, r7}
 8004534:	4770      	bx	lr
 8004536:	68a0      	ldr	r0, [r4, #8]
 8004538:	0746      	lsls	r6, r0, #29
 800453a:	d4f1      	bmi.n	8004520 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800453c:	b1d5      	cbz	r5, 8004574 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800453e:	4e1a      	ldr	r6, [pc, #104]	; (80045a8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8004540:	684f      	ldr	r7, [r1, #4]
 8004542:	68b0      	ldr	r0, [r6, #8]
 8004544:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8004548:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 800454c:	4338      	orrs	r0, r7
 800454e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8004552:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004554:	68a4      	ldr	r4, [r4, #8]
 8004556:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004558:	4320      	orrs	r0, r4
 800455a:	f010 0001 	ands.w	r0, r0, #1
 800455e:	d114      	bne.n	800458a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 8004560:	688a      	ldr	r2, [r1, #8]
 8004562:	4315      	orrs	r5, r2
 8004564:	68b2      	ldr	r2, [r6, #8]
 8004566:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800456a:	f022 020f 	bic.w	r2, r2, #15
 800456e:	4315      	orrs	r5, r2
 8004570:	60b5      	str	r5, [r6, #8]
 8004572:	e7da      	b.n	800452a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004574:	4d0c      	ldr	r5, [pc, #48]	; (80045a8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8004576:	68a9      	ldr	r1, [r5, #8]
 8004578:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800457c:	60a9      	str	r1, [r5, #8]
 800457e:	68a1      	ldr	r1, [r4, #8]
 8004580:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004582:	4308      	orrs	r0, r1
 8004584:	f010 0001 	ands.w	r0, r0, #1
 8004588:	d005      	beq.n	8004596 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800458a:	2000      	movs	r0, #0
 800458c:	e7cd      	b.n	800452a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 800458e:	2002      	movs	r0, #2
}
 8004590:	b01c      	add	sp, #112	; 0x70
 8004592:	bcf0      	pop	{r4, r5, r6, r7}
 8004594:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004596:	68aa      	ldr	r2, [r5, #8]
 8004598:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800459c:	f022 020f 	bic.w	r2, r2, #15
 80045a0:	60aa      	str	r2, [r5, #8]
 80045a2:	e7c2      	b.n	800452a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80045a4:	50000100 	.word	0x50000100
 80045a8:	50000300 	.word	0x50000300

080045ac <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80045ac:	b1b0      	cbz	r0, 80045dc <HAL_CORDIC_Init+0x30>
{
 80045ae:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80045b0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80045b4:	4604      	mov	r4, r0
 80045b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80045ba:	b153      	cbz	r3, 80045d2 <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80045bc:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80045be:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80045c0:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 80045c2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 80045c6:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 80045ca:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80045ce:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 80045d0:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 80045d2:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 80045d6:	f7fe f8d3 	bl	8002780 <HAL_CORDIC_MspInit>
 80045da:	e7ef      	b.n	80045bc <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 80045dc:	2001      	movs	r0, #1
}
 80045de:	4770      	bx	lr

080045e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045e0:	4907      	ldr	r1, [pc, #28]	; (8004600 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80045e2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045e4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045e6:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ee:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045f0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045f2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80045fa:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	e000ed00 	.word	0xe000ed00

08004604 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004604:	4b1c      	ldr	r3, [pc, #112]	; (8004678 <HAL_NVIC_SetPriority+0x74>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800460c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800460e:	f1c3 0e07 	rsb	lr, r3, #7
 8004612:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004616:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800461a:	bf28      	it	cs
 800461c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004620:	f1bc 0f06 	cmp.w	ip, #6
 8004624:	d91b      	bls.n	800465e <HAL_NVIC_SetPriority+0x5a>
 8004626:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004628:	f04f 3cff 	mov.w	ip, #4294967295
 800462c:	fa0c fc03 	lsl.w	ip, ip, r3
 8004630:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004634:	f04f 3cff 	mov.w	ip, #4294967295
 8004638:	fa0c fc0e 	lsl.w	ip, ip, lr
 800463c:	ea21 010c 	bic.w	r1, r1, ip
 8004640:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004642:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004644:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8004648:	db0c      	blt.n	8004664 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800464a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800464e:	0109      	lsls	r1, r1, #4
 8004650:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004654:	b2c9      	uxtb	r1, r1
 8004656:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800465a:	f85d fb04 	ldr.w	pc, [sp], #4
 800465e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004660:	4613      	mov	r3, r2
 8004662:	e7e7      	b.n	8004634 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <HAL_NVIC_SetPriority+0x78>)
 8004666:	f000 000f 	and.w	r0, r0, #15
 800466a:	0109      	lsls	r1, r1, #4
 800466c:	4403      	add	r3, r0
 800466e:	b2c9      	uxtb	r1, r1
 8004670:	7619      	strb	r1, [r3, #24]
 8004672:	f85d fb04 	ldr.w	pc, [sp], #4
 8004676:	bf00      	nop
 8004678:	e000ed00 	.word	0xe000ed00
 800467c:	e000ecfc 	.word	0xe000ecfc

08004680 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004680:	2800      	cmp	r0, #0
 8004682:	db08      	blt.n	8004696 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004684:	4a04      	ldr	r2, [pc, #16]	; (8004698 <HAL_NVIC_EnableIRQ+0x18>)
 8004686:	0941      	lsrs	r1, r0, #5
 8004688:	2301      	movs	r3, #1
 800468a:	f000 001f 	and.w	r0, r0, #31
 800468e:	fa03 f000 	lsl.w	r0, r3, r0
 8004692:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004696:	4770      	bx	lr
 8004698:	e000e100 	.word	0xe000e100

0800469c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800469c:	3801      	subs	r0, #1
 800469e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80046a2:	d210      	bcs.n	80046c6 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046a4:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046aa:	4c08      	ldr	r4, [pc, #32]	; (80046cc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046ac:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ae:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80046b2:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046b6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046b8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046ba:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046bc:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80046be:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046c2:	6119      	str	r1, [r3, #16]
 80046c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80046c6:	2001      	movs	r0, #1
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop

080046d4 <HAL_SYSTICK_IRQHandler>:
{
 80046d4:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80046d6:	f7ff fffb 	bl	80046d0 <HAL_SYSTICK_Callback>
}
 80046da:	bd08      	pop	{r3, pc}

080046dc <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80046dc:	b188      	cbz	r0, 8004702 <HAL_DAC_Init+0x26>
{
 80046de:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80046e0:	7903      	ldrb	r3, [r0, #4]
 80046e2:	4604      	mov	r4, r0
 80046e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80046e8:	b13b      	cbz	r3, 80046fa <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80046ea:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80046ec:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80046ee:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80046f0:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80046f2:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80046f4:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80046f6:	4618      	mov	r0, r3
}
 80046f8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80046fa:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80046fc:	f7fe f858 	bl	80027b0 <HAL_DAC_MspInit>
 8004700:	e7f3      	b.n	80046ea <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8004702:	2001      	movs	r0, #1
}
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop

08004708 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800470c:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800470e:	688f      	ldr	r7, [r1, #8]
  __HAL_LOCK(hdac);
 8004710:	2b01      	cmp	r3, #1
 8004712:	f000 80c6 	beq.w	80048a2 <HAL_DAC_ConfigChannel+0x19a>
 8004716:	2301      	movs	r3, #1
 8004718:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800471a:	2f04      	cmp	r7, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 800471c:	f04f 0302 	mov.w	r3, #2
 8004720:	4606      	mov	r6, r0
 8004722:	460d      	mov	r5, r1
 8004724:	4614      	mov	r4, r2
 8004726:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004728:	d077      	beq.n	800481a <HAL_DAC_ConfigChannel+0x112>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800472a:	6803      	ldr	r3, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800472c:	f002 0410 	and.w	r4, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004730:	69ea      	ldr	r2, [r5, #28]
 8004732:	2a01      	cmp	r2, #1
 8004734:	d108      	bne.n	8004748 <HAL_DAC_ConfigChannel+0x40>
    tmpreg1 = hdac->Instance->CCR;
 8004736:	6b99      	ldr	r1, [r3, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004738:	6a2a      	ldr	r2, [r5, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800473a:	201f      	movs	r0, #31
 800473c:	40a0      	lsls	r0, r4
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800473e:	40a2      	lsls	r2, r4
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004740:	ea21 0100 	bic.w	r1, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004744:	430a      	orrs	r2, r1
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004746:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004748:	69a9      	ldr	r1, [r5, #24]
  tmpreg1 = hdac->Instance->MCR;
 800474a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800474c:	2207      	movs	r2, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800474e:	2901      	cmp	r1, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004750:	fa02 fc04 	lsl.w	ip, r2, r4
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004754:	696a      	ldr	r2, [r5, #20]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004756:	d05e      	beq.n	8004816 <HAL_DAC_ConfigChannel+0x10e>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004758:	2902      	cmp	r1, #2
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800475a:	bf16      	itet	ne
 800475c:	fab2 f182 	clzne	r1, r2
    connectOnChip = DAC_MCR_MODE1_0;
 8004760:	2101      	moveq	r1, #1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004762:	0949      	lsrne	r1, r1, #5
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004764:	4311      	orrs	r1, r2
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004766:	792a      	ldrb	r2, [r5, #4]
 8004768:	2a01      	cmp	r2, #1
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800476a:	f44f 7200 	mov.w	r2, #512	; 0x200
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800476e:	f44f 7880 	mov.w	r8, #256	; 0x100
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004772:	fa02 f204 	lsl.w	r2, r2, r4
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004776:	fa08 f804 	lsl.w	r8, r8, r4
 800477a:	ea42 020c 	orr.w	r2, r2, ip
 800477e:	ea20 0202 	bic.w	r2, r0, r2
 8004782:	ea6f 0808 	mvn.w	r8, r8
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004786:	ea08 0802 	and.w	r8, r8, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800478a:	796a      	ldrb	r2, [r5, #5]
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800478c:	ea47 0701 	orr.w	r7, r7, r1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004790:	bf08      	it	eq
 8004792:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004796:	2a01      	cmp	r2, #1
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004798:	682a      	ldr	r2, [r5, #0]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800479a:	bf08      	it	eq
 800479c:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80047a0:	2a02      	cmp	r2, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80047a2:	f428 4840 	bic.w	r8, r8, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80047a6:	d073      	beq.n	8004890 <HAL_DAC_ConfigChannel+0x188>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80047a8:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047ac:	40a7      	lsls	r7, r4
 80047ae:	ea47 0708 	orr.w	r7, r7, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80047b2:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047ba:	40a1      	lsls	r1, r4
 80047bc:	ea22 0201 	bic.w	r2, r2, r1
 80047c0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80047c2:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
  tmpreg1 = hdac->Instance->CR;
 80047c6:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80047c8:	f640 75fe 	movw	r5, #4094	; 0xffe
 80047cc:	40a5      	lsls	r5, r4
 80047ce:	ea20 0505 	bic.w	r5, r0, r5
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80047d2:	0192      	lsls	r2, r2, #6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047d4:	fa01 f004 	lsl.w	r0, r1, r4
 80047d8:	4328      	orrs	r0, r5
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80047da:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80047de:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  hdac->Instance->CR = tmpreg1;
 80047e2:	6018      	str	r0, [r3, #0]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80047e4:	430a      	orrs	r2, r1
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80047e6:	f640 710f 	movw	r1, #3855	; 0xf0f
 80047ea:	fa01 f004 	lsl.w	r0, r1, r4
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80047ee:	25c0      	movs	r5, #192	; 0xc0
 80047f0:	6819      	ldr	r1, [r3, #0]
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80047f2:	40a2      	lsls	r2, r4
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80047f4:	fa05 f404 	lsl.w	r4, r5, r4
 80047f8:	ea21 0404 	bic.w	r4, r1, r4
 80047fc:	601c      	str	r4, [r3, #0]
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80047fe:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004800:	ea21 0100 	bic.w	r1, r1, r0
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004804:	2400      	movs	r4, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004806:	430a      	orrs	r2, r1
  hdac->State = HAL_DAC_STATE_READY;
 8004808:	2101      	movs	r1, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800480a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Return function status */
  return HAL_OK;
 800480c:	4620      	mov	r0, r4
  hdac->State = HAL_DAC_STATE_READY;
 800480e:	7131      	strb	r1, [r6, #4]
  __HAL_UNLOCK(hdac);
 8004810:	7174      	strb	r4, [r6, #5]
}
 8004812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 8004816:	2100      	movs	r1, #0
 8004818:	e7a4      	b.n	8004764 <HAL_DAC_ConfigChannel+0x5c>
    tickstart = HAL_GetTick();
 800481a:	f7fe ffdf 	bl	80037dc <HAL_GetTick>
 800481e:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8004820:	b12c      	cbz	r4, 800482e <HAL_DAC_ConfigChannel+0x126>
 8004822:	e014      	b.n	800484e <HAL_DAC_ConfigChannel+0x146>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004824:	f7fe ffda 	bl	80037dc <HAL_GetTick>
 8004828:	1bc3      	subs	r3, r0, r7
 800482a:	2b01      	cmp	r3, #1
 800482c:	d83c      	bhi.n	80048a8 <HAL_DAC_ConfigChannel+0x1a0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800482e:	6833      	ldr	r3, [r6, #0]
 8004830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	d4f6      	bmi.n	8004824 <HAL_DAC_ConfigChannel+0x11c>
      HAL_Delay(1);
 8004836:	2001      	movs	r0, #1
 8004838:	f7fe ffd6 	bl	80037e8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800483c:	6833      	ldr	r3, [r6, #0]
 800483e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004840:	641a      	str	r2, [r3, #64]	; 0x40
 8004842:	e00e      	b.n	8004862 <HAL_DAC_ConfigChannel+0x15a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004844:	f7fe ffca 	bl	80037dc <HAL_GetTick>
 8004848:	1bc3      	subs	r3, r0, r7
 800484a:	2b01      	cmp	r3, #1
 800484c:	d82c      	bhi.n	80048a8 <HAL_DAC_ConfigChannel+0x1a0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800484e:	6833      	ldr	r3, [r6, #0]
 8004850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004852:	2b00      	cmp	r3, #0
 8004854:	dbf6      	blt.n	8004844 <HAL_DAC_ConfigChannel+0x13c>
      HAL_Delay(1U);
 8004856:	2001      	movs	r0, #1
 8004858:	f7fe ffc6 	bl	80037e8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800485c:	6833      	ldr	r3, [r6, #0]
 800485e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004860:	645a      	str	r2, [r3, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004862:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004864:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004866:	68af      	ldr	r7, [r5, #8]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004868:	f004 0410 	and.w	r4, r4, #16
 800486c:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8004870:	40a0      	lsls	r0, r4
 8004872:	40a1      	lsls	r1, r4
 8004874:	ea22 0200 	bic.w	r2, r2, r0
 8004878:	430a      	orrs	r2, r1
 800487a:	649a      	str	r2, [r3, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800487c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800487e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004880:	20ff      	movs	r0, #255	; 0xff
 8004882:	40a0      	lsls	r0, r4
 8004884:	40a1      	lsls	r1, r4
 8004886:	ea22 0200 	bic.w	r2, r2, r0
 800488a:	430a      	orrs	r2, r1
 800488c:	64da      	str	r2, [r3, #76]	; 0x4c
 800488e:	e74f      	b.n	8004730 <HAL_DAC_ConfigChannel+0x28>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004890:	f000 fd30 	bl	80052f4 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <HAL_DAC_ConfigChannel+0x1c0>)
 8004896:	4298      	cmp	r0, r3
 8004898:	d90e      	bls.n	80048b8 <HAL_DAC_ConfigChannel+0x1b0>
  hdac->Instance->MCR = tmpreg1;
 800489a:	6833      	ldr	r3, [r6, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800489c:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 80048a0:	e784      	b.n	80047ac <HAL_DAC_ConfigChannel+0xa4>
  __HAL_LOCK(hdac);
 80048a2:	2002      	movs	r0, #2
}
 80048a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80048a8:	6933      	ldr	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80048aa:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80048ac:	f043 0308 	orr.w	r3, r3, #8
 80048b0:	6133      	str	r3, [r6, #16]
          return HAL_TIMEOUT;
 80048b2:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80048b4:	7132      	strb	r2, [r6, #4]
          return HAL_TIMEOUT;
 80048b6:	e7ac      	b.n	8004812 <HAL_DAC_ConfigChannel+0x10a>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80048b8:	4b04      	ldr	r3, [pc, #16]	; (80048cc <HAL_DAC_ConfigChannel+0x1c4>)
 80048ba:	4298      	cmp	r0, r3
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80048bc:	bf88      	it	hi
 80048be:	f448 4880 	orrhi.w	r8, r8, #16384	; 0x4000
  hdac->Instance->MCR = tmpreg1;
 80048c2:	6833      	ldr	r3, [r6, #0]
 80048c4:	e772      	b.n	80047ac <HAL_DAC_ConfigChannel+0xa4>
 80048c6:	bf00      	nop
 80048c8:	09896800 	.word	0x09896800
 80048cc:	04c4b400 	.word	0x04c4b400

080048d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048d4:	680c      	ldr	r4, [r1, #0]
{
 80048d6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048d8:	2c00      	cmp	r4, #0
 80048da:	f000 8083 	beq.w	80049e4 <HAL_GPIO_Init+0x114>
 80048de:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048e2:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8004abc <HAL_GPIO_Init+0x1ec>
  uint32_t position = 0x00U;
 80048e6:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048e8:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048ec:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048ee:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 80048f2:	ea15 0804 	ands.w	r8, r5, r4
 80048f6:	d06f      	beq.n	80049d8 <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048f8:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80048fc:	f007 0203 	and.w	r2, r7, #3
 8004900:	1e51      	subs	r1, r2, #1
 8004902:	2901      	cmp	r1, #1
 8004904:	d971      	bls.n	80049ea <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004906:	2a03      	cmp	r2, #3
 8004908:	f040 80b0 	bne.w	8004a6c <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800490c:	fa02 f20c 	lsl.w	r2, r2, ip
 8004910:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 8004912:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004914:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004916:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004918:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 800491c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800491e:	d05b      	beq.n	80049d8 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004920:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8004924:	f042 0201 	orr.w	r2, r2, #1
 8004928:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
 800492c:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8004930:	f002 0201 	and.w	r2, r2, #1
 8004934:	9203      	str	r2, [sp, #12]
 8004936:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004938:	f023 0203 	bic.w	r2, r3, #3
 800493c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004940:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004944:	f003 0503 	and.w	r5, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8004948:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800494a:	00ad      	lsls	r5, r5, #2
 800494c:	260f      	movs	r6, #15
 800494e:	fa06 fe05 	lsl.w	lr, r6, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004952:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004956:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800495a:	d019      	beq.n	8004990 <HAL_GPIO_Init+0xc0>
 800495c:	4e51      	ldr	r6, [pc, #324]	; (8004aa4 <HAL_GPIO_Init+0x1d4>)
 800495e:	42b0      	cmp	r0, r6
 8004960:	f000 808f 	beq.w	8004a82 <HAL_GPIO_Init+0x1b2>
 8004964:	4e50      	ldr	r6, [pc, #320]	; (8004aa8 <HAL_GPIO_Init+0x1d8>)
 8004966:	42b0      	cmp	r0, r6
 8004968:	f000 808f 	beq.w	8004a8a <HAL_GPIO_Init+0x1ba>
 800496c:	4e4f      	ldr	r6, [pc, #316]	; (8004aac <HAL_GPIO_Init+0x1dc>)
 800496e:	42b0      	cmp	r0, r6
 8004970:	f000 8081 	beq.w	8004a76 <HAL_GPIO_Init+0x1a6>
 8004974:	4e4e      	ldr	r6, [pc, #312]	; (8004ab0 <HAL_GPIO_Init+0x1e0>)
 8004976:	42b0      	cmp	r0, r6
 8004978:	f000 808d 	beq.w	8004a96 <HAL_GPIO_Init+0x1c6>
 800497c:	4e4d      	ldr	r6, [pc, #308]	; (8004ab4 <HAL_GPIO_Init+0x1e4>)
 800497e:	42b0      	cmp	r0, r6
 8004980:	bf0c      	ite	eq
 8004982:	f04f 0e05 	moveq.w	lr, #5
 8004986:	f04f 0e06 	movne.w	lr, #6
 800498a:	fa0e f505 	lsl.w	r5, lr, r5
 800498e:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004990:	6091      	str	r1, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004992:	4a49      	ldr	r2, [pc, #292]	; (8004ab8 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8004994:	4948      	ldr	r1, [pc, #288]	; (8004ab8 <HAL_GPIO_Init+0x1e8>)
        temp = EXTI->RTSR1;
 8004996:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 8004998:	ea6f 0508 	mvn.w	r5, r8
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800499c:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 800499e:	bf54      	ite	pl
 80049a0:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80049a2:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR1 = temp;
 80049a6:	608a      	str	r2, [r1, #8]

        temp = EXTI->FTSR1;
 80049a8:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049aa:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80049ac:	4942      	ldr	r1, [pc, #264]	; (8004ab8 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 80049ae:	bf54      	ite	pl
 80049b0:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80049b2:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 80049b6:	60ca      	str	r2, [r1, #12]

        temp = EXTI->EMR1;
 80049b8:	6849      	ldr	r1, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80049ba:	4a3f      	ldr	r2, [pc, #252]	; (8004ab8 <HAL_GPIO_Init+0x1e8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049bc:	03be      	lsls	r6, r7, #14
        temp &= ~(iocurrent);
 80049be:	bf54      	ite	pl
 80049c0:	4029      	andpl	r1, r5
          temp |= iocurrent;
 80049c2:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR1 = temp;
 80049c6:	6051      	str	r1, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80049c8:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049ca:	03f9      	lsls	r1, r7, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80049cc:	493a      	ldr	r1, [pc, #232]	; (8004ab8 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 80049ce:	bf54      	ite	pl
 80049d0:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80049d2:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR1 = temp;
 80049d6:	600a      	str	r2, [r1, #0]
      }
    }

    position++;
 80049d8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80049da:	fa34 f203 	lsrs.w	r2, r4, r3
 80049de:	f10c 0c02 	add.w	ip, ip, #2
 80049e2:	d184      	bne.n	80048ee <HAL_GPIO_Init+0x1e>
  }
}
 80049e4:	b005      	add	sp, #20
 80049e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80049ea:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049ec:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049f0:	f04f 0e03 	mov.w	lr, #3
 80049f4:	fa0e fe0c 	lsl.w	lr, lr, ip
 80049f8:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049fc:	fa06 f60c 	lsl.w	r6, r6, ip
 8004a00:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8004a02:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a04:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 8004a08:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a0c:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a10:	f3c7 1500 	ubfx	r5, r7, #4, #1
 8004a14:	409d      	lsls	r5, r3
 8004a16:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 8004a1a:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8004a1c:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a1e:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a22:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8004a26:	fa05 f50c 	lsl.w	r5, r5, ip
 8004a2a:	ea45 050e 	orr.w	r5, r5, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a2e:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8004a30:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a32:	fa02 f20c 	lsl.w	r2, r2, ip
 8004a36:	f47f af6c 	bne.w	8004912 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 8004a3a:	08dd      	lsrs	r5, r3, #3
 8004a3c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8004a40:	9501      	str	r5, [sp, #4]
 8004a42:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a44:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8004a48:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a4a:	f003 0e07 	and.w	lr, r3, #7
 8004a4e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004a52:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a54:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a58:	fa06 fe0e 	lsl.w	lr, r6, lr
 8004a5c:	9e00      	ldr	r6, [sp, #0]
 8004a5e:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004a62:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a64:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004a68:	6235      	str	r5, [r6, #32]
 8004a6a:	e752      	b.n	8004912 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a6c:	2103      	movs	r1, #3
 8004a6e:	fa01 f10c 	lsl.w	r1, r1, ip
 8004a72:	43c9      	mvns	r1, r1
 8004a74:	e7d2      	b.n	8004a1c <HAL_GPIO_Init+0x14c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a76:	f04f 0e03 	mov.w	lr, #3
 8004a7a:	fa0e f505 	lsl.w	r5, lr, r5
 8004a7e:	4329      	orrs	r1, r5
 8004a80:	e786      	b.n	8004990 <HAL_GPIO_Init+0xc0>
 8004a82:	fa0b f505 	lsl.w	r5, fp, r5
 8004a86:	4329      	orrs	r1, r5
 8004a88:	e782      	b.n	8004990 <HAL_GPIO_Init+0xc0>
 8004a8a:	f04f 0e02 	mov.w	lr, #2
 8004a8e:	fa0e f505 	lsl.w	r5, lr, r5
 8004a92:	4329      	orrs	r1, r5
 8004a94:	e77c      	b.n	8004990 <HAL_GPIO_Init+0xc0>
 8004a96:	f04f 0e04 	mov.w	lr, #4
 8004a9a:	fa0e f505 	lsl.w	r5, lr, r5
 8004a9e:	4329      	orrs	r1, r5
 8004aa0:	e776      	b.n	8004990 <HAL_GPIO_Init+0xc0>
 8004aa2:	bf00      	nop
 8004aa4:	48000400 	.word	0x48000400
 8004aa8:	48000800 	.word	0x48000800
 8004aac:	48000c00 	.word	0x48000c00
 8004ab0:	48001000 	.word	0x48001000
 8004ab4:	48001400 	.word	0x48001400
 8004ab8:	40010400 	.word	0x40010400
 8004abc:	40021000 	.word	0x40021000

08004ac0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ac0:	b10a      	cbz	r2, 8004ac6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ac2:	6181      	str	r1, [r0, #24]
 8004ac4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ac6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop

08004acc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004acc:	b410      	push	{r4}
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ace:	4a3b      	ldr	r2, [pc, #236]	; (8004bbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ad0:	b970      	cbnz	r0, 8004af0 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ad2:	6813      	ldr	r3, [r2, #0]
 8004ad4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004adc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ae0:	d023      	beq.n	8004b2a <HAL_PWREx_ControlVoltageScaling+0x5e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8004ae6:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004aea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8004aee:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004af0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004af4:	d009      	beq.n	8004b0a <HAL_PWREx_ControlVoltageScaling+0x3e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004af6:	6813      	ldr	r3, [r2, #0]
}
 8004af8:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004afc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 8004b04:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b06:	6013      	str	r3, [r2, #0]
}
 8004b08:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b0a:	6813      	ldr	r3, [r2, #0]
 8004b0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b14:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b18:	d02f      	beq.n	8004b7a <HAL_PWREx_ControlVoltageScaling+0xae>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8004b1e:	2000      	movs	r0, #0
}
 8004b20:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8004b28:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b2e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b32:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b34:	4c22      	ldr	r4, [pc, #136]	; (8004bc0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004b36:	4823      	ldr	r0, [pc, #140]	; (8004bc4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b38:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8004b3c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004b40:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	2132      	movs	r1, #50	; 0x32
 8004b46:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b4a:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b4c:	fba0 0303 	umull	r0, r3, r0, r3
 8004b50:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b52:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b54:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b58:	d506      	bpl.n	8004b68 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8004b5a:	e000      	b.n	8004b5e <HAL_PWREx_ControlVoltageScaling+0x92>
 8004b5c:	b123      	cbz	r3, 8004b68 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8004b5e:	6951      	ldr	r1, [r2, #20]
 8004b60:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004b62:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b66:	d4f9      	bmi.n	8004b5c <HAL_PWREx_ControlVoltageScaling+0x90>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b68:	4b14      	ldr	r3, [pc, #80]	; (8004bbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	055c      	lsls	r4, r3, #21
  return HAL_OK;
 8004b6e:	bf54      	ite	pl
 8004b70:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8004b72:	2003      	movmi	r0, #3
}
 8004b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b78:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b82:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b84:	4c0e      	ldr	r4, [pc, #56]	; (8004bc0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004b86:	480f      	ldr	r0, [pc, #60]	; (8004bc4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b88:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8004b8c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004b90:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	2132      	movs	r1, #50	; 0x32
 8004b96:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b9a:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b9c:	fba0 0303 	umull	r0, r3, r0, r3
 8004ba0:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ba2:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ba4:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ba8:	d5de      	bpl.n	8004b68 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8004baa:	e001      	b.n	8004bb0 <HAL_PWREx_ControlVoltageScaling+0xe4>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0db      	beq.n	8004b68 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8004bb0:	6951      	ldr	r1, [r2, #20]
 8004bb2:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004bb4:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bb8:	d5d6      	bpl.n	8004b68 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8004bba:	e7f7      	b.n	8004bac <HAL_PWREx_ControlVoltageScaling+0xe0>
 8004bbc:	40007000 	.word	0x40007000
 8004bc0:	20000700 	.word	0x20000700
 8004bc4:	431bde83 	.word	0x431bde83

08004bc8 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	f000 81c3 	beq.w	8004f54 <HAL_RCC_OscConfig+0x38c>
{
 8004bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bd2:	6803      	ldr	r3, [r0, #0]
 8004bd4:	07d9      	lsls	r1, r3, #31
{
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bda:	d52d      	bpl.n	8004c38 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bdc:	49a6      	ldr	r1, [pc, #664]	; (8004e78 <HAL_RCC_OscConfig+0x2b0>)
 8004bde:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004be0:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004be2:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004be6:	2a0c      	cmp	r2, #12
 8004be8:	f000 810a 	beq.w	8004e00 <HAL_RCC_OscConfig+0x238>
 8004bec:	2a08      	cmp	r2, #8
 8004bee:	f000 810c 	beq.w	8004e0a <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bf2:	6863      	ldr	r3, [r4, #4]
 8004bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf8:	f000 8133 	beq.w	8004e62 <HAL_RCC_OscConfig+0x29a>
 8004bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c00:	f000 819b 	beq.w	8004f3a <HAL_RCC_OscConfig+0x372>
 8004c04:	4d9c      	ldr	r5, [pc, #624]	; (8004e78 <HAL_RCC_OscConfig+0x2b0>)
 8004c06:	682a      	ldr	r2, [r5, #0]
 8004c08:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c0c:	602a      	str	r2, [r5, #0]
 8004c0e:	682a      	ldr	r2, [r5, #0]
 8004c10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c14:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f040 8128 	bne.w	8004e6c <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1c:	f7fe fdde 	bl	80037dc <HAL_GetTick>
 8004c20:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c22:	e005      	b.n	8004c30 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c24:	f7fe fdda 	bl	80037dc <HAL_GetTick>
 8004c28:	1b80      	subs	r0, r0, r6
 8004c2a:	2864      	cmp	r0, #100	; 0x64
 8004c2c:	f200 8142 	bhi.w	8004eb4 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c30:	682b      	ldr	r3, [r5, #0]
 8004c32:	039f      	lsls	r7, r3, #14
 8004c34:	d4f6      	bmi.n	8004c24 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	079e      	lsls	r6, r3, #30
 8004c3a:	d528      	bpl.n	8004c8e <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c3c:	4a8e      	ldr	r2, [pc, #568]	; (8004e78 <HAL_RCC_OscConfig+0x2b0>)
 8004c3e:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c40:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c42:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c46:	2b0c      	cmp	r3, #12
 8004c48:	f000 80ec 	beq.w	8004e24 <HAL_RCC_OscConfig+0x25c>
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	f000 80ee 	beq.w	8004e2e <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c52:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c54:	4d88      	ldr	r5, [pc, #544]	; (8004e78 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 811d 	beq.w	8004e96 <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c62:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c64:	f7fe fdba 	bl	80037dc <HAL_GetTick>
 8004c68:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c6a:	e005      	b.n	8004c78 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c6c:	f7fe fdb6 	bl	80037dc <HAL_GetTick>
 8004c70:	1b80      	subs	r0, r0, r6
 8004c72:	2802      	cmp	r0, #2
 8004c74:	f200 811e 	bhi.w	8004eb4 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	0558      	lsls	r0, r3, #21
 8004c7c:	d5f6      	bpl.n	8004c6c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7e:	686b      	ldr	r3, [r5, #4]
 8004c80:	6922      	ldr	r2, [r4, #16]
 8004c82:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004c86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c8a:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	071a      	lsls	r2, r3, #28
 8004c90:	d519      	bpl.n	8004cc6 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c92:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c94:	4d78      	ldr	r5, [pc, #480]	; (8004e78 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 809e 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8004c9c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca8:	f7fe fd98 	bl	80037dc <HAL_GetTick>
 8004cac:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cae:	e005      	b.n	8004cbc <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb0:	f7fe fd94 	bl	80037dc <HAL_GetTick>
 8004cb4:	1b80      	subs	r0, r0, r6
 8004cb6:	2802      	cmp	r0, #2
 8004cb8:	f200 80fc 	bhi.w	8004eb4 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cbc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004cc0:	079f      	lsls	r7, r3, #30
 8004cc2:	d5f5      	bpl.n	8004cb0 <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	0759      	lsls	r1, r3, #29
 8004cc8:	d541      	bpl.n	8004d4e <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cca:	4b6b      	ldr	r3, [pc, #428]	; (8004e78 <HAL_RCC_OscConfig+0x2b0>)
 8004ccc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004cce:	00d2      	lsls	r2, r2, #3
 8004cd0:	f100 80f4 	bmi.w	8004ebc <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004cd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004cda:	659a      	str	r2, [r3, #88]	; 0x58
 8004cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	9301      	str	r3, [sp, #4]
 8004ce4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004ce6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ce8:	4e64      	ldr	r6, [pc, #400]	; (8004e7c <HAL_RCC_OscConfig+0x2b4>)
 8004cea:	6833      	ldr	r3, [r6, #0]
 8004cec:	05df      	lsls	r7, r3, #23
 8004cee:	f140 8113 	bpl.w	8004f18 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cf2:	68a3      	ldr	r3, [r4, #8]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	f000 80e3 	beq.w	8004ec0 <HAL_RCC_OscConfig+0x2f8>
 8004cfa:	2b05      	cmp	r3, #5
 8004cfc:	f000 8169 	beq.w	8004fd2 <HAL_RCC_OscConfig+0x40a>
 8004d00:	4e5d      	ldr	r6, [pc, #372]	; (8004e78 <HAL_RCC_OscConfig+0x2b0>)
 8004d02:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8004d0e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8004d12:	f022 0204 	bic.w	r2, r2, #4
 8004d16:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f040 80d7 	bne.w	8004ece <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d20:	f7fe fd5c 	bl	80037dc <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d24:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004d28:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d2a:	e005      	b.n	8004d38 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d2c:	f7fe fd56 	bl	80037dc <HAL_GetTick>
 8004d30:	1bc0      	subs	r0, r0, r7
 8004d32:	4540      	cmp	r0, r8
 8004d34:	f200 80be 	bhi.w	8004eb4 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d38:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8004d3c:	079a      	lsls	r2, r3, #30
 8004d3e:	d4f5      	bmi.n	8004d2c <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d40:	b125      	cbz	r5, 8004d4c <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d42:	4a4d      	ldr	r2, [pc, #308]	; (8004e78 <HAL_RCC_OscConfig+0x2b0>)
 8004d44:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	069b      	lsls	r3, r3, #26
 8004d50:	d518      	bpl.n	8004d84 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d52:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d54:	4d48      	ldr	r5, [pc, #288]	; (8004e78 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 80ca 	beq.w	8004ef0 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8004d5c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004d60:	f043 0301 	orr.w	r3, r3, #1
 8004d64:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d68:	f7fe fd38 	bl	80037dc <HAL_GetTick>
 8004d6c:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d6e:	e005      	b.n	8004d7c <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d70:	f7fe fd34 	bl	80037dc <HAL_GetTick>
 8004d74:	1b80      	subs	r0, r0, r6
 8004d76:	2802      	cmp	r0, #2
 8004d78:	f200 809c 	bhi.w	8004eb4 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d7c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004d80:	079f      	lsls	r7, r3, #30
 8004d82:	d5f5      	bpl.n	8004d70 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d84:	69e0      	ldr	r0, [r4, #28]
 8004d86:	b318      	cbz	r0, 8004dd0 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d88:	4d3b      	ldr	r5, [pc, #236]	; (8004e78 <HAL_RCC_OscConfig+0x2b0>)
 8004d8a:	68ab      	ldr	r3, [r5, #8]
 8004d8c:	f003 030c 	and.w	r3, r3, #12
 8004d90:	2b0c      	cmp	r3, #12
 8004d92:	f000 812c 	beq.w	8004fee <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d96:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d98:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004d9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d9e:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004da0:	f000 80da 	beq.w	8004f58 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004da4:	68eb      	ldr	r3, [r5, #12]
 8004da6:	f023 0303 	bic.w	r3, r3, #3
 8004daa:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004dac:	68eb      	ldr	r3, [r5, #12]
 8004dae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db6:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fe fd10 	bl	80037dc <HAL_GetTick>
 8004dbc:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dbe:	e004      	b.n	8004dca <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc0:	f7fe fd0c 	bl	80037dc <HAL_GetTick>
 8004dc4:	1b00      	subs	r0, r0, r4
 8004dc6:	2802      	cmp	r0, #2
 8004dc8:	d874      	bhi.n	8004eb4 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dca:	682b      	ldr	r3, [r5, #0]
 8004dcc:	019b      	lsls	r3, r3, #6
 8004dce:	d4f7      	bmi.n	8004dc0 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8004dd0:	2000      	movs	r0, #0
}
 8004dd2:	b002      	add	sp, #8
 8004dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004dd8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004ddc:	f023 0301 	bic.w	r3, r3, #1
 8004de0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004de4:	f7fe fcfa 	bl	80037dc <HAL_GetTick>
 8004de8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dea:	e004      	b.n	8004df6 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dec:	f7fe fcf6 	bl	80037dc <HAL_GetTick>
 8004df0:	1b80      	subs	r0, r0, r6
 8004df2:	2802      	cmp	r0, #2
 8004df4:	d85e      	bhi.n	8004eb4 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004df6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004dfa:	0798      	lsls	r0, r3, #30
 8004dfc:	d4f6      	bmi.n	8004dec <HAL_RCC_OscConfig+0x224>
 8004dfe:	e761      	b.n	8004cc4 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e00:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e04:	2903      	cmp	r1, #3
 8004e06:	f47f aef4 	bne.w	8004bf2 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e0a:	4a1b      	ldr	r2, [pc, #108]	; (8004e78 <HAL_RCC_OscConfig+0x2b0>)
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	0392      	lsls	r2, r2, #14
 8004e10:	f57f af12 	bpl.w	8004c38 <HAL_RCC_OscConfig+0x70>
 8004e14:	6862      	ldr	r2, [r4, #4]
 8004e16:	2a00      	cmp	r2, #0
 8004e18:	f47f af0e 	bne.w	8004c38 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8004e1c:	2001      	movs	r0, #1
}
 8004e1e:	b002      	add	sp, #8
 8004e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e24:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e28:	2a02      	cmp	r2, #2
 8004e2a:	f47f af12 	bne.w	8004c52 <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e2e:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <HAL_RCC_OscConfig+0x2b0>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	055d      	lsls	r5, r3, #21
 8004e34:	d502      	bpl.n	8004e3c <HAL_RCC_OscConfig+0x274>
 8004e36:	68e3      	ldr	r3, [r4, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0ef      	beq.n	8004e1c <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e3c:	4a0e      	ldr	r2, [pc, #56]	; (8004e78 <HAL_RCC_OscConfig+0x2b0>)
 8004e3e:	6920      	ldr	r0, [r4, #16]
 8004e40:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e42:	490f      	ldr	r1, [pc, #60]	; (8004e80 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e44:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e48:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004e4c:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e4e:	6808      	ldr	r0, [r1, #0]
 8004e50:	f7fe fc82 	bl	8003758 <HAL_InitTick>
 8004e54:	2800      	cmp	r0, #0
 8004e56:	d1e1      	bne.n	8004e1c <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	071a      	lsls	r2, r3, #28
 8004e5c:	f57f af33 	bpl.w	8004cc6 <HAL_RCC_OscConfig+0xfe>
 8004e60:	e717      	b.n	8004c92 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e62:	4a05      	ldr	r2, [pc, #20]	; (8004e78 <HAL_RCC_OscConfig+0x2b0>)
 8004e64:	6813      	ldr	r3, [r2, #0]
 8004e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004e6c:	f7fe fcb6 	bl	80037dc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e70:	4e01      	ldr	r6, [pc, #4]	; (8004e78 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8004e72:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e74:	e00b      	b.n	8004e8e <HAL_RCC_OscConfig+0x2c6>
 8004e76:	bf00      	nop
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	40007000 	.word	0x40007000
 8004e80:	20000708 	.word	0x20000708
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e84:	f7fe fcaa 	bl	80037dc <HAL_GetTick>
 8004e88:	1b40      	subs	r0, r0, r5
 8004e8a:	2864      	cmp	r0, #100	; 0x64
 8004e8c:	d812      	bhi.n	8004eb4 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e8e:	6833      	ldr	r3, [r6, #0]
 8004e90:	039b      	lsls	r3, r3, #14
 8004e92:	d5f7      	bpl.n	8004e84 <HAL_RCC_OscConfig+0x2bc>
 8004e94:	e6cf      	b.n	8004c36 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8004e96:	682b      	ldr	r3, [r5, #0]
 8004e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e9c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004e9e:	f7fe fc9d 	bl	80037dc <HAL_GetTick>
 8004ea2:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	0559      	lsls	r1, r3, #21
 8004ea8:	d5d6      	bpl.n	8004e58 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eaa:	f7fe fc97 	bl	80037dc <HAL_GetTick>
 8004eae:	1b80      	subs	r0, r0, r6
 8004eb0:	2802      	cmp	r0, #2
 8004eb2:	d9f7      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8004eb4:	2003      	movs	r0, #3
}
 8004eb6:	b002      	add	sp, #8
 8004eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8004ebc:	2500      	movs	r5, #0
 8004ebe:	e713      	b.n	8004ce8 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ec0:	4a65      	ldr	r2, [pc, #404]	; (8005058 <HAL_RCC_OscConfig+0x490>)
 8004ec2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004ece:	f7fe fc85 	bl	80037dc <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ed2:	4f61      	ldr	r7, [pc, #388]	; (8005058 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8004ed4:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed6:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eda:	e004      	b.n	8004ee6 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004edc:	f7fe fc7e 	bl	80037dc <HAL_GetTick>
 8004ee0:	1b80      	subs	r0, r0, r6
 8004ee2:	4540      	cmp	r0, r8
 8004ee4:	d8e6      	bhi.n	8004eb4 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ee6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004eea:	0799      	lsls	r1, r3, #30
 8004eec:	d5f6      	bpl.n	8004edc <HAL_RCC_OscConfig+0x314>
 8004eee:	e727      	b.n	8004d40 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8004ef0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004ef4:	f023 0301 	bic.w	r3, r3, #1
 8004ef8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004efc:	f7fe fc6e 	bl	80037dc <HAL_GetTick>
 8004f00:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f02:	e004      	b.n	8004f0e <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f04:	f7fe fc6a 	bl	80037dc <HAL_GetTick>
 8004f08:	1b80      	subs	r0, r0, r6
 8004f0a:	2802      	cmp	r0, #2
 8004f0c:	d8d2      	bhi.n	8004eb4 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f0e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004f12:	0798      	lsls	r0, r3, #30
 8004f14:	d4f6      	bmi.n	8004f04 <HAL_RCC_OscConfig+0x33c>
 8004f16:	e735      	b.n	8004d84 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f18:	6833      	ldr	r3, [r6, #0]
 8004f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f1e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004f20:	f7fe fc5c 	bl	80037dc <HAL_GetTick>
 8004f24:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f26:	6833      	ldr	r3, [r6, #0]
 8004f28:	05d8      	lsls	r0, r3, #23
 8004f2a:	f53f aee2 	bmi.w	8004cf2 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f2e:	f7fe fc55 	bl	80037dc <HAL_GetTick>
 8004f32:	1bc0      	subs	r0, r0, r7
 8004f34:	2802      	cmp	r0, #2
 8004f36:	d9f6      	bls.n	8004f26 <HAL_RCC_OscConfig+0x35e>
 8004f38:	e7bc      	b.n	8004eb4 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f3e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004f50:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f52:	e78b      	b.n	8004e6c <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8004f54:	2001      	movs	r0, #1
}
 8004f56:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8004f58:	f7fe fc40 	bl	80037dc <HAL_GetTick>
 8004f5c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f5e:	e004      	b.n	8004f6a <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f60:	f7fe fc3c 	bl	80037dc <HAL_GetTick>
 8004f64:	1b80      	subs	r0, r0, r6
 8004f66:	2802      	cmp	r0, #2
 8004f68:	d8a4      	bhi.n	8004eb4 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f6a:	682b      	ldr	r3, [r5, #0]
 8004f6c:	0199      	lsls	r1, r3, #6
 8004f6e:	d4f7      	bmi.n	8004f60 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f70:	68e9      	ldr	r1, [r5, #12]
 8004f72:	4b3a      	ldr	r3, [pc, #232]	; (800505c <HAL_RCC_OscConfig+0x494>)
 8004f74:	6a22      	ldr	r2, [r4, #32]
 8004f76:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f78:	4e37      	ldr	r6, [pc, #220]	; (8005058 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f7a:	400b      	ands	r3, r1
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8004f82:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004f86:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8004f8a:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8004f8e:	3801      	subs	r0, #1
 8004f90:	0849      	lsrs	r1, r1, #1
 8004f92:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004f96:	3901      	subs	r1, #1
 8004f98:	0852      	lsrs	r2, r2, #1
 8004f9a:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8004f9e:	3a01      	subs	r2, #1
 8004fa0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004fa4:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8004fa6:	682b      	ldr	r3, [r5, #0]
 8004fa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fac:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fae:	68eb      	ldr	r3, [r5, #12]
 8004fb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fb4:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004fb6:	f7fe fc11 	bl	80037dc <HAL_GetTick>
 8004fba:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fbc:	e005      	b.n	8004fca <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fbe:	f7fe fc0d 	bl	80037dc <HAL_GetTick>
 8004fc2:	1b00      	subs	r0, r0, r4
 8004fc4:	2802      	cmp	r0, #2
 8004fc6:	f63f af75 	bhi.w	8004eb4 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fca:	6833      	ldr	r3, [r6, #0]
 8004fcc:	019a      	lsls	r2, r3, #6
 8004fce:	d5f6      	bpl.n	8004fbe <HAL_RCC_OscConfig+0x3f6>
 8004fd0:	e6fe      	b.n	8004dd0 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fd2:	4b21      	ldr	r3, [pc, #132]	; (8005058 <HAL_RCC_OscConfig+0x490>)
 8004fd4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004fd8:	f042 0204 	orr.w	r2, r2, #4
 8004fdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004fe0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004fe4:	f042 0201 	orr.w	r2, r2, #1
 8004fe8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fec:	e76f      	b.n	8004ece <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fee:	2801      	cmp	r0, #1
 8004ff0:	f43f aeef 	beq.w	8004dd2 <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8004ff4:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff6:	6a22      	ldr	r2, [r4, #32]
 8004ff8:	f003 0103 	and.w	r1, r3, #3
 8004ffc:	4291      	cmp	r1, r2
 8004ffe:	f47f af0d 	bne.w	8004e1c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005002:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005004:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005008:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800500a:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800500e:	f47f af05 	bne.w	8004e1c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005012:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005014:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005018:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800501c:	f47f aefe 	bne.w	8004e1c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005020:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005022:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005026:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800502a:	f47f aef7 	bne.w	8004e1c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800502e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005030:	0852      	lsrs	r2, r2, #1
 8005032:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8005036:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005038:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800503c:	f47f aeee 	bne.w	8004e1c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005040:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005042:	0852      	lsrs	r2, r2, #1
 8005044:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005048:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800504a:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 800504e:	bf14      	ite	ne
 8005050:	2001      	movne	r0, #1
 8005052:	2000      	moveq	r0, #0
 8005054:	e6bd      	b.n	8004dd2 <HAL_RCC_OscConfig+0x20a>
 8005056:	bf00      	nop
 8005058:	40021000 	.word	0x40021000
 800505c:	019f800c 	.word	0x019f800c

08005060 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005060:	4b18      	ldr	r3, [pc, #96]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x64>)
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	f002 020c 	and.w	r2, r2, #12
 8005068:	2a04      	cmp	r2, #4
 800506a:	d027      	beq.n	80050bc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	f002 020c 	and.w	r2, r2, #12
 8005072:	2a08      	cmp	r2, #8
 8005074:	d024      	beq.n	80050c0 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	f002 020c 	and.w	r2, r2, #12
 800507c:	2a0c      	cmp	r2, #12
 800507e:	d001      	beq.n	8005084 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8005080:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8005082:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005084:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005086:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005088:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 800508c:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800508e:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005092:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005096:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005098:	bf0c      	ite	eq
 800509a:	4b0b      	ldreq	r3, [pc, #44]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800509c:	4b0b      	ldrne	r3, [pc, #44]	; (80050cc <HAL_RCC_GetSysClockFreq+0x6c>)
 800509e:	fbb3 f2f2 	udiv	r2, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050a2:	4b08      	ldr	r3, [pc, #32]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x64>)
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050aa:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050ae:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050b0:	fb02 f000 	mul.w	r0, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050b4:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80050b6:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80050ba:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80050bc:	4803      	ldr	r0, [pc, #12]	; (80050cc <HAL_RCC_GetSysClockFreq+0x6c>)
 80050be:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80050c0:	4801      	ldr	r0, [pc, #4]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x68>)
 80050c2:	4770      	bx	lr
 80050c4:	40021000 	.word	0x40021000
 80050c8:	016e3600 	.word	0x016e3600
 80050cc:	00f42400 	.word	0x00f42400

080050d0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80050d0:	2800      	cmp	r0, #0
 80050d2:	f000 80ee 	beq.w	80052b2 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050d6:	4a7f      	ldr	r2, [pc, #508]	; (80052d4 <HAL_RCC_ClockConfig+0x204>)
{
 80050d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050dc:	6813      	ldr	r3, [r2, #0]
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	428b      	cmp	r3, r1
 80050e4:	460d      	mov	r5, r1
 80050e6:	4604      	mov	r4, r0
 80050e8:	d20c      	bcs.n	8005104 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ea:	6813      	ldr	r3, [r2, #0]
 80050ec:	f023 030f 	bic.w	r3, r3, #15
 80050f0:	430b      	orrs	r3, r1
 80050f2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f4:	6813      	ldr	r3, [r2, #0]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	428b      	cmp	r3, r1
 80050fc:	d002      	beq.n	8005104 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80050fe:	2001      	movs	r0, #1
}
 8005100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	07df      	lsls	r7, r3, #31
 8005108:	d563      	bpl.n	80051d2 <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800510a:	6862      	ldr	r2, [r4, #4]
 800510c:	2a03      	cmp	r2, #3
 800510e:	f000 809a 	beq.w	8005246 <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005112:	4b71      	ldr	r3, [pc, #452]	; (80052d8 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005114:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005116:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005118:	f000 8091 	beq.w	800523e <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800511c:	055b      	lsls	r3, r3, #21
 800511e:	d5ee      	bpl.n	80050fe <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005120:	f7ff ff9e 	bl	8005060 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8005124:	4b6d      	ldr	r3, [pc, #436]	; (80052dc <HAL_RCC_ClockConfig+0x20c>)
 8005126:	4298      	cmp	r0, r3
 8005128:	f200 80c5 	bhi.w	80052b6 <HAL_RCC_ClockConfig+0x1e6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800512c:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800512e:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005132:	4e69      	ldr	r6, [pc, #420]	; (80052d8 <HAL_RCC_ClockConfig+0x208>)
 8005134:	68b3      	ldr	r3, [r6, #8]
 8005136:	f023 0303 	bic.w	r3, r3, #3
 800513a:	431a      	orrs	r2, r3
 800513c:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 800513e:	f7fe fb4d 	bl	80037dc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005142:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005146:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005148:	e004      	b.n	8005154 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800514a:	f7fe fb47 	bl	80037dc <HAL_GetTick>
 800514e:	1bc0      	subs	r0, r0, r7
 8005150:	4540      	cmp	r0, r8
 8005152:	d871      	bhi.n	8005238 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005154:	68b3      	ldr	r3, [r6, #8]
 8005156:	6862      	ldr	r2, [r4, #4]
 8005158:	f003 030c 	and.w	r3, r3, #12
 800515c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005160:	d1f3      	bne.n	800514a <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	079f      	lsls	r7, r3, #30
 8005166:	d436      	bmi.n	80051d6 <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8005168:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 800516c:	d103      	bne.n	8005176 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800516e:	68b3      	ldr	r3, [r6, #8]
 8005170:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005174:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005176:	4e57      	ldr	r6, [pc, #348]	; (80052d4 <HAL_RCC_ClockConfig+0x204>)
 8005178:	6833      	ldr	r3, [r6, #0]
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	42ab      	cmp	r3, r5
 8005180:	d846      	bhi.n	8005210 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	075a      	lsls	r2, r3, #29
 8005186:	d506      	bpl.n	8005196 <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005188:	4953      	ldr	r1, [pc, #332]	; (80052d8 <HAL_RCC_ClockConfig+0x208>)
 800518a:	68e0      	ldr	r0, [r4, #12]
 800518c:	688a      	ldr	r2, [r1, #8]
 800518e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005192:	4302      	orrs	r2, r0
 8005194:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005196:	071b      	lsls	r3, r3, #28
 8005198:	d507      	bpl.n	80051aa <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800519a:	4a4f      	ldr	r2, [pc, #316]	; (80052d8 <HAL_RCC_ClockConfig+0x208>)
 800519c:	6921      	ldr	r1, [r4, #16]
 800519e:	6893      	ldr	r3, [r2, #8]
 80051a0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80051a4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80051a8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051aa:	f7ff ff59 	bl	8005060 <HAL_RCC_GetSysClockFreq>
 80051ae:	4a4a      	ldr	r2, [pc, #296]	; (80052d8 <HAL_RCC_ClockConfig+0x208>)
 80051b0:	4c4b      	ldr	r4, [pc, #300]	; (80052e0 <HAL_RCC_ClockConfig+0x210>)
 80051b2:	6892      	ldr	r2, [r2, #8]
 80051b4:	494b      	ldr	r1, [pc, #300]	; (80052e4 <HAL_RCC_ClockConfig+0x214>)
 80051b6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80051ba:	4603      	mov	r3, r0
 80051bc:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 80051be:	484a      	ldr	r0, [pc, #296]	; (80052e8 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051c0:	f002 021f 	and.w	r2, r2, #31
 80051c4:	40d3      	lsrs	r3, r2
 80051c6:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80051c8:	6800      	ldr	r0, [r0, #0]
}
 80051ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 80051ce:	f7fe bac3 	b.w	8003758 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d2:	079e      	lsls	r6, r3, #30
 80051d4:	d5cf      	bpl.n	8005176 <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d6:	0758      	lsls	r0, r3, #29
 80051d8:	d504      	bpl.n	80051e4 <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051da:	493f      	ldr	r1, [pc, #252]	; (80052d8 <HAL_RCC_ClockConfig+0x208>)
 80051dc:	688a      	ldr	r2, [r1, #8]
 80051de:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80051e2:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e4:	0719      	lsls	r1, r3, #28
 80051e6:	d506      	bpl.n	80051f6 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80051e8:	4a3b      	ldr	r2, [pc, #236]	; (80052d8 <HAL_RCC_ClockConfig+0x208>)
 80051ea:	6893      	ldr	r3, [r2, #8]
 80051ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80051f0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80051f4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f6:	4a38      	ldr	r2, [pc, #224]	; (80052d8 <HAL_RCC_ClockConfig+0x208>)
 80051f8:	68a1      	ldr	r1, [r4, #8]
 80051fa:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051fc:	4e35      	ldr	r6, [pc, #212]	; (80052d4 <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005202:	430b      	orrs	r3, r1
 8005204:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005206:	6833      	ldr	r3, [r6, #0]
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	42ab      	cmp	r3, r5
 800520e:	d9b8      	bls.n	8005182 <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005210:	6833      	ldr	r3, [r6, #0]
 8005212:	f023 030f 	bic.w	r3, r3, #15
 8005216:	432b      	orrs	r3, r5
 8005218:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800521a:	f7fe fadf 	bl	80037dc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800521e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005222:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005224:	6833      	ldr	r3, [r6, #0]
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	42ab      	cmp	r3, r5
 800522c:	d0a9      	beq.n	8005182 <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800522e:	f7fe fad5 	bl	80037dc <HAL_GetTick>
 8005232:	1bc0      	subs	r0, r0, r7
 8005234:	4540      	cmp	r0, r8
 8005236:	d9f5      	bls.n	8005224 <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8005238:	2003      	movs	r0, #3
}
 800523a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800523e:	039a      	lsls	r2, r3, #14
 8005240:	f53f af6e 	bmi.w	8005120 <HAL_RCC_ClockConfig+0x50>
 8005244:	e75b      	b.n	80050fe <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005246:	4924      	ldr	r1, [pc, #144]	; (80052d8 <HAL_RCC_ClockConfig+0x208>)
 8005248:	6808      	ldr	r0, [r1, #0]
 800524a:	0180      	lsls	r0, r0, #6
 800524c:	f57f af57 	bpl.w	80050fe <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005250:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005252:	68c8      	ldr	r0, [r1, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005254:	68c9      	ldr	r1, [r1, #12]
      if(pllfreq > 80000000U)
 8005256:	4f21      	ldr	r7, [pc, #132]	; (80052dc <HAL_RCC_ClockConfig+0x20c>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005258:	f006 0603 	and.w	r6, r6, #3
  switch (pllsource)
 800525c:	2e03      	cmp	r6, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800525e:	f3c0 1003 	ubfx	r0, r0, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005262:	bf0c      	ite	eq
 8005264:	4e21      	ldreq	r6, [pc, #132]	; (80052ec <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005266:	4e22      	ldrne	r6, [pc, #136]	; (80052f0 <HAL_RCC_ClockConfig+0x220>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005268:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800526a:	fbb6 f0f0 	udiv	r0, r6, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800526e:	4e1a      	ldr	r6, [pc, #104]	; (80052d8 <HAL_RCC_ClockConfig+0x208>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005270:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8005274:	fb00 f101 	mul.w	r1, r0, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005278:	68f0      	ldr	r0, [r6, #12]
 800527a:	f3c0 6041 	ubfx	r0, r0, #25, #2
 800527e:	3001      	adds	r0, #1
 8005280:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8005282:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8005286:	42b9      	cmp	r1, r7
 8005288:	d920      	bls.n	80052cc <HAL_RCC_ClockConfig+0x1fc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800528a:	68b1      	ldr	r1, [r6, #8]
 800528c:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8005290:	d005      	beq.n	800529e <HAL_RCC_ClockConfig+0x1ce>
 8005292:	f013 0902 	ands.w	r9, r3, #2
 8005296:	f43f af4c 	beq.w	8005132 <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800529a:	68a3      	ldr	r3, [r4, #8]
 800529c:	b9b3      	cbnz	r3, 80052cc <HAL_RCC_ClockConfig+0x1fc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800529e:	490e      	ldr	r1, [pc, #56]	; (80052d8 <HAL_RCC_ClockConfig+0x208>)
 80052a0:	688b      	ldr	r3, [r1, #8]
 80052a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052aa:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 80052ac:	f04f 0980 	mov.w	r9, #128	; 0x80
 80052b0:	e73f      	b.n	8005132 <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 80052b2:	2001      	movs	r0, #1
}
 80052b4:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052b6:	4a08      	ldr	r2, [pc, #32]	; (80052d8 <HAL_RCC_ClockConfig+0x208>)
 80052b8:	6893      	ldr	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80052ba:	f04f 0980 	mov.w	r9, #128	; 0x80
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052c2:	ea43 0309 	orr.w	r3, r3, r9
 80052c6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052c8:	6862      	ldr	r2, [r4, #4]
 80052ca:	e732      	b.n	8005132 <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80052cc:	f04f 0900 	mov.w	r9, #0
 80052d0:	e72f      	b.n	8005132 <HAL_RCC_ClockConfig+0x62>
 80052d2:	bf00      	nop
 80052d4:	40022000 	.word	0x40022000
 80052d8:	40021000 	.word	0x40021000
 80052dc:	04c4b400 	.word	0x04c4b400
 80052e0:	08008d90 	.word	0x08008d90
 80052e4:	20000700 	.word	0x20000700
 80052e8:	20000708 	.word	0x20000708
 80052ec:	016e3600 	.word	0x016e3600
 80052f0:	00f42400 	.word	0x00f42400

080052f4 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 80052f4:	4b01      	ldr	r3, [pc, #4]	; (80052fc <HAL_RCC_GetHCLKFreq+0x8>)
}
 80052f6:	6818      	ldr	r0, [r3, #0]
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	20000700 	.word	0x20000700

08005300 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005302:	4a06      	ldr	r2, [pc, #24]	; (800531c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005304:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005306:	4906      	ldr	r1, [pc, #24]	; (8005320 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005308:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800530c:	6808      	ldr	r0, [r1, #0]
 800530e:	5cd3      	ldrb	r3, [r2, r3]
 8005310:	f003 031f 	and.w	r3, r3, #31
}
 8005314:	40d8      	lsrs	r0, r3
 8005316:	4770      	bx	lr
 8005318:	40021000 	.word	0x40021000
 800531c:	08008da0 	.word	0x08008da0
 8005320:	20000700 	.word	0x20000700

08005324 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005324:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_RCC_GetPCLK2Freq+0x18>)
 8005326:	4a06      	ldr	r2, [pc, #24]	; (8005340 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005328:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800532a:	4906      	ldr	r1, [pc, #24]	; (8005344 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800532c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005330:	6808      	ldr	r0, [r1, #0]
 8005332:	5cd3      	ldrb	r3, [r2, r3]
 8005334:	f003 031f 	and.w	r3, r3, #31
}
 8005338:	40d8      	lsrs	r0, r3
 800533a:	4770      	bx	lr
 800533c:	40021000 	.word	0x40021000
 8005340:	08008da0 	.word	0x08008da0
 8005344:	20000700 	.word	0x20000700

08005348 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005348:	4a02      	ldr	r2, [pc, #8]	; (8005354 <HAL_RCC_EnableCSS+0xc>)
 800534a:	6813      	ldr	r3, [r2, #0]
 800534c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005350:	6013      	str	r3, [r2, #0]
}
 8005352:	4770      	bx	lr
 8005354:	40021000 	.word	0x40021000

08005358 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800535c:	6803      	ldr	r3, [r0, #0]
{
 800535e:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005360:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8005364:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005366:	d056      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005368:	4b9f      	ldr	r3, [pc, #636]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800536a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800536c:	00d5      	lsls	r5, r2, #3
 800536e:	f140 810c 	bpl.w	800558a <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 8005372:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005374:	4d9d      	ldr	r5, [pc, #628]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005376:	682b      	ldr	r3, [r5, #0]
 8005378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800537e:	f7fe fa2d 	bl	80037dc <HAL_GetTick>
 8005382:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005384:	e005      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005386:	f7fe fa29 	bl	80037dc <HAL_GetTick>
 800538a:	1b83      	subs	r3, r0, r6
 800538c:	2b02      	cmp	r3, #2
 800538e:	f200 8107 	bhi.w	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005392:	682b      	ldr	r3, [r5, #0]
 8005394:	05d8      	lsls	r0, r3, #23
 8005396:	d5f6      	bpl.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005398:	4d93      	ldr	r5, [pc, #588]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800539a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800539e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80053a2:	d027      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80053a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d025      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053aa:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053ae:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80053b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b6:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053ba:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80053be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c2:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053c6:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053ca:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 80053cc:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053d0:	f140 8108 	bpl.w	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d4:	f7fe fa02 	bl	80037dc <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d8:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80053dc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053de:	e005      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e0:	f7fe f9fc 	bl	80037dc <HAL_GetTick>
 80053e4:	1b80      	subs	r0, r0, r6
 80053e6:	4540      	cmp	r0, r8
 80053e8:	f200 80da 	bhi.w	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ec:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80053f0:	079b      	lsls	r3, r3, #30
 80053f2:	d5f5      	bpl.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053f6:	497c      	ldr	r1, [pc, #496]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80053f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80053fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005406:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005408:	b127      	cbz	r7, 8005414 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800540a:	4a77      	ldr	r2, [pc, #476]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800540c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800540e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005412:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	07de      	lsls	r6, r3, #31
 8005418:	d508      	bpl.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800541a:	4973      	ldr	r1, [pc, #460]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800541c:	6865      	ldr	r5, [r4, #4]
 800541e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005422:	f022 0203 	bic.w	r2, r2, #3
 8005426:	432a      	orrs	r2, r5
 8005428:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800542c:	079d      	lsls	r5, r3, #30
 800542e:	d508      	bpl.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005430:	496d      	ldr	r1, [pc, #436]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005432:	68a5      	ldr	r5, [r4, #8]
 8005434:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005438:	f022 020c 	bic.w	r2, r2, #12
 800543c:	432a      	orrs	r2, r5
 800543e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005442:	0759      	lsls	r1, r3, #29
 8005444:	d508      	bpl.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005446:	4968      	ldr	r1, [pc, #416]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005448:	68e5      	ldr	r5, [r4, #12]
 800544a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800544e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005452:	432a      	orrs	r2, r5
 8005454:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005458:	071a      	lsls	r2, r3, #28
 800545a:	d508      	bpl.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800545c:	4962      	ldr	r1, [pc, #392]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800545e:	6925      	ldr	r5, [r4, #16]
 8005460:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005464:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005468:	432a      	orrs	r2, r5
 800546a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800546e:	069f      	lsls	r7, r3, #26
 8005470:	d508      	bpl.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005472:	495d      	ldr	r1, [pc, #372]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005474:	6965      	ldr	r5, [r4, #20]
 8005476:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800547a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800547e:	432a      	orrs	r2, r5
 8005480:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005484:	065e      	lsls	r6, r3, #25
 8005486:	d508      	bpl.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005488:	4957      	ldr	r1, [pc, #348]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800548a:	69a5      	ldr	r5, [r4, #24]
 800548c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005490:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005494:	432a      	orrs	r2, r5
 8005496:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800549a:	061d      	lsls	r5, r3, #24
 800549c:	d508      	bpl.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800549e:	4952      	ldr	r1, [pc, #328]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80054a0:	69e5      	ldr	r5, [r4, #28]
 80054a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054a6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80054aa:	432a      	orrs	r2, r5
 80054ac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054b0:	05d9      	lsls	r1, r3, #23
 80054b2:	d508      	bpl.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054b4:	494c      	ldr	r1, [pc, #304]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80054b6:	6a25      	ldr	r5, [r4, #32]
 80054b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054bc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80054c0:	432a      	orrs	r2, r5
 80054c2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054c6:	059a      	lsls	r2, r3, #22
 80054c8:	d508      	bpl.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054ca:	4947      	ldr	r1, [pc, #284]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80054cc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80054ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054d2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80054d6:	432a      	orrs	r2, r5
 80054d8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054dc:	055f      	lsls	r7, r3, #21
 80054de:	d50b      	bpl.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054e0:	4941      	ldr	r1, [pc, #260]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80054e2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80054e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054e8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80054ec:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80054ee:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054f2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80054f6:	d055      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80054f8:	051e      	lsls	r6, r3, #20
 80054fa:	d50b      	bpl.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80054fc:	493a      	ldr	r1, [pc, #232]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80054fe:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005500:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005504:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005508:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800550a:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800550e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005512:	d04c      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005514:	04dd      	lsls	r5, r3, #19
 8005516:	d50b      	bpl.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005518:	4933      	ldr	r1, [pc, #204]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800551a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800551c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005520:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005524:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005526:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800552a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800552e:	d043      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005530:	0499      	lsls	r1, r3, #18
 8005532:	d50b      	bpl.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005534:	492c      	ldr	r1, [pc, #176]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005536:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005538:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800553c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005540:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005542:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005546:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800554a:	d03a      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800554c:	045a      	lsls	r2, r3, #17
 800554e:	d50b      	bpl.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005550:	4925      	ldr	r1, [pc, #148]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005552:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005554:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005558:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800555c:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800555e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005562:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005566:	d031      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005568:	041b      	lsls	r3, r3, #16
 800556a:	d50b      	bpl.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800556c:	4a1e      	ldr	r2, [pc, #120]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800556e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005570:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005574:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005578:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800557a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800557e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005582:	d028      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 8005584:	b002      	add	sp, #8
 8005586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800558a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800558c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005590:	659a      	str	r2, [r3, #88]	; 0x58
 8005592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005598:	9301      	str	r3, [sp, #4]
 800559a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800559c:	2701      	movs	r7, #1
 800559e:	e6e9      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 80055a0:	2003      	movs	r0, #3
 80055a2:	e731      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a4:	68ca      	ldr	r2, [r1, #12]
 80055a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80055aa:	60ca      	str	r2, [r1, #12]
 80055ac:	e7a4      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055ae:	68ca      	ldr	r2, [r1, #12]
 80055b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80055b4:	60ca      	str	r2, [r1, #12]
 80055b6:	e7ad      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b8:	68ca      	ldr	r2, [r1, #12]
 80055ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80055be:	60ca      	str	r2, [r1, #12]
 80055c0:	e7b6      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c2:	68ca      	ldr	r2, [r1, #12]
 80055c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80055c8:	60ca      	str	r2, [r1, #12]
 80055ca:	e7bf      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055cc:	68ca      	ldr	r2, [r1, #12]
 80055ce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80055d2:	60ca      	str	r2, [r1, #12]
 80055d4:	e7c8      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055d6:	68d3      	ldr	r3, [r2, #12]
 80055d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055dc:	60d3      	str	r3, [r2, #12]
}
 80055de:	b002      	add	sp, #8
 80055e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055e4:	4613      	mov	r3, r2
 80055e6:	e706      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80055e8:	40021000 	.word	0x40021000
 80055ec:	40007000 	.word	0x40007000

080055f0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f0:	6a03      	ldr	r3, [r0, #32]
 80055f2:	f023 0301 	bic.w	r3, r3, #1
 80055f6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f8:	6a03      	ldr	r3, [r0, #32]
{
 80055fa:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055fc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055fe:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005600:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005602:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005606:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800560a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800560c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800560e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005612:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005614:	4d13      	ldr	r5, [pc, #76]	; (8005664 <TIM_OC1_SetConfig+0x74>)
 8005616:	42a8      	cmp	r0, r5
 8005618:	d00f      	beq.n	800563a <TIM_OC1_SetConfig+0x4a>
 800561a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800561e:	42a8      	cmp	r0, r5
 8005620:	d00b      	beq.n	800563a <TIM_OC1_SetConfig+0x4a>
 8005622:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005626:	42a8      	cmp	r0, r5
 8005628:	d007      	beq.n	800563a <TIM_OC1_SetConfig+0x4a>
 800562a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800562e:	42a8      	cmp	r0, r5
 8005630:	d003      	beq.n	800563a <TIM_OC1_SetConfig+0x4a>
 8005632:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005636:	42a8      	cmp	r0, r5
 8005638:	d10d      	bne.n	8005656 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800563a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800563c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005640:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005642:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005646:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800564a:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800564e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005652:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005656:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005658:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800565a:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800565c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 800565e:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8005660:	6203      	str	r3, [r0, #32]
}
 8005662:	4770      	bx	lr
 8005664:	40012c00 	.word	0x40012c00

08005668 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005668:	6a03      	ldr	r3, [r0, #32]
 800566a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800566e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005670:	6a03      	ldr	r3, [r0, #32]
{
 8005672:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005674:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005676:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005678:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800567a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800567e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005682:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005684:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005686:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800568a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800568e:	4d15      	ldr	r5, [pc, #84]	; (80056e4 <TIM_OC3_SetConfig+0x7c>)
 8005690:	42a8      	cmp	r0, r5
 8005692:	d010      	beq.n	80056b6 <TIM_OC3_SetConfig+0x4e>
 8005694:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005698:	42a8      	cmp	r0, r5
 800569a:	d00c      	beq.n	80056b6 <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80056a0:	42a8      	cmp	r0, r5
 80056a2:	d00f      	beq.n	80056c4 <TIM_OC3_SetConfig+0x5c>
 80056a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056a8:	42a8      	cmp	r0, r5
 80056aa:	d00b      	beq.n	80056c4 <TIM_OC3_SetConfig+0x5c>
 80056ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056b0:	42a8      	cmp	r0, r5
 80056b2:	d10f      	bne.n	80056d4 <TIM_OC3_SetConfig+0x6c>
 80056b4:	e006      	b.n	80056c4 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056b6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80056b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056bc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80056c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056c4:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056c8:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056cc:	ea46 0c05 	orr.w	ip, r6, r5
 80056d0:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056d4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80056d6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80056d8:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80056da:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 80056dc:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80056de:	6203      	str	r3, [r0, #32]
}
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40012c00 	.word	0x40012c00

080056e8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056e8:	6a03      	ldr	r3, [r0, #32]
 80056ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056ee:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f0:	6a03      	ldr	r3, [r0, #32]
{
 80056f2:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056f6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056fa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80056fe:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005702:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005706:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005708:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800570c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005710:	4d14      	ldr	r5, [pc, #80]	; (8005764 <TIM_OC4_SetConfig+0x7c>)
 8005712:	42a8      	cmp	r0, r5
 8005714:	d010      	beq.n	8005738 <TIM_OC4_SetConfig+0x50>
 8005716:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800571a:	42a8      	cmp	r0, r5
 800571c:	d00c      	beq.n	8005738 <TIM_OC4_SetConfig+0x50>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005722:	42a8      	cmp	r0, r5
 8005724:	d00f      	beq.n	8005746 <TIM_OC4_SetConfig+0x5e>
 8005726:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800572a:	42a8      	cmp	r0, r5
 800572c:	d00b      	beq.n	8005746 <TIM_OC4_SetConfig+0x5e>
 800572e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005732:	42a8      	cmp	r0, r5
 8005734:	d10f      	bne.n	8005756 <TIM_OC4_SetConfig+0x6e>
 8005736:	e006      	b.n	8005746 <TIM_OC4_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005738:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 800573a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800573e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8005742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005746:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800574a:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800574e:	ea46 0c05 	orr.w	ip, r6, r5
 8005752:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005756:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005758:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800575a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800575c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 800575e:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8005760:	6203      	str	r3, [r0, #32]
}
 8005762:	4770      	bx	lr
 8005764:	40012c00 	.word	0x40012c00

08005768 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005768:	2800      	cmp	r0, #0
 800576a:	f000 8081 	beq.w	8005870 <HAL_TIM_Base_Init+0x108>
{
 800576e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005770:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005774:	4604      	mov	r4, r0
 8005776:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800577a:	2b00      	cmp	r3, #0
 800577c:	d06d      	beq.n	800585a <HAL_TIM_Base_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800577e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005780:	493c      	ldr	r1, [pc, #240]	; (8005874 <HAL_TIM_Base_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005782:	2302      	movs	r3, #2
 8005784:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005788:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800578a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800578c:	d051      	beq.n	8005832 <HAL_TIM_Base_Init+0xca>
 800578e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005792:	d021      	beq.n	80057d8 <HAL_TIM_Base_Init+0x70>
 8005794:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005798:	428a      	cmp	r2, r1
 800579a:	d01d      	beq.n	80057d8 <HAL_TIM_Base_Init+0x70>
 800579c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80057a0:	428a      	cmp	r2, r1
 80057a2:	d019      	beq.n	80057d8 <HAL_TIM_Base_Init+0x70>
 80057a4:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 80057a8:	428a      	cmp	r2, r1
 80057aa:	d042      	beq.n	8005832 <HAL_TIM_Base_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ac:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 80057b0:	428a      	cmp	r2, r1
 80057b2:	d057      	beq.n	8005864 <HAL_TIM_Base_Init+0xfc>
 80057b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80057b8:	428a      	cmp	r2, r1
 80057ba:	d053      	beq.n	8005864 <HAL_TIM_Base_Init+0xfc>
 80057bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80057c0:	428a      	cmp	r2, r1
 80057c2:	d04f      	beq.n	8005864 <HAL_TIM_Base_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057c4:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057c6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057cc:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80057ce:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80057d0:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057d2:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80057d4:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057d6:	e010      	b.n	80057fa <HAL_TIM_Base_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 80057d8:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057da:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80057e0:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80057e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057e8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057ee:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f0:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80057f2:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80057f4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f6:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80057f8:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80057fa:	2301      	movs	r3, #1
 80057fc:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057fe:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005802:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005806:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800580a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800580e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005812:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800581a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800581e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005822:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005826:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800582a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800582e:	2000      	movs	r0, #0
}
 8005830:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8005832:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005834:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800583a:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800583c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005840:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005842:	69a1      	ldr	r1, [r4, #24]
 8005844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005848:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800584a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800584c:	68e3      	ldr	r3, [r4, #12]
 800584e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005850:	6863      	ldr	r3, [r4, #4]
 8005852:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005854:	6963      	ldr	r3, [r4, #20]
 8005856:	6313      	str	r3, [r2, #48]	; 0x30
 8005858:	e7cf      	b.n	80057fa <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 800585a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800585e:	f7fc ffe3 	bl	8002828 <HAL_TIM_Base_MspInit>
 8005862:	e78c      	b.n	800577e <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005864:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005866:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800586c:	4303      	orrs	r3, r0
 800586e:	e7e9      	b.n	8005844 <HAL_TIM_Base_Init+0xdc>
    return HAL_ERROR;
 8005870:	2001      	movs	r0, #1
}
 8005872:	4770      	bx	lr
 8005874:	40012c00 	.word	0x40012c00

08005878 <HAL_TIM_PWM_MspInit>:
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop

0800587c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800587c:	2800      	cmp	r0, #0
 800587e:	f000 8081 	beq.w	8005984 <HAL_TIM_PWM_Init+0x108>
{
 8005882:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005884:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005888:	4604      	mov	r4, r0
 800588a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800588e:	2b00      	cmp	r3, #0
 8005890:	d06d      	beq.n	800596e <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005892:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005894:	493c      	ldr	r1, [pc, #240]	; (8005988 <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005896:	2302      	movs	r3, #2
 8005898:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800589c:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800589e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058a0:	d051      	beq.n	8005946 <HAL_TIM_PWM_Init+0xca>
 80058a2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80058a6:	d021      	beq.n	80058ec <HAL_TIM_PWM_Init+0x70>
 80058a8:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80058ac:	428a      	cmp	r2, r1
 80058ae:	d01d      	beq.n	80058ec <HAL_TIM_PWM_Init+0x70>
 80058b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058b4:	428a      	cmp	r2, r1
 80058b6:	d019      	beq.n	80058ec <HAL_TIM_PWM_Init+0x70>
 80058b8:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 80058bc:	428a      	cmp	r2, r1
 80058be:	d042      	beq.n	8005946 <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058c0:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 80058c4:	428a      	cmp	r2, r1
 80058c6:	d057      	beq.n	8005978 <HAL_TIM_PWM_Init+0xfc>
 80058c8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058cc:	428a      	cmp	r2, r1
 80058ce:	d053      	beq.n	8005978 <HAL_TIM_PWM_Init+0xfc>
 80058d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058d4:	428a      	cmp	r2, r1
 80058d6:	d04f      	beq.n	8005978 <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058d8:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058da:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058e0:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80058e2:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80058e4:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058e6:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80058e8:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058ea:	e010      	b.n	800590e <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 80058ec:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ee:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80058f4:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80058f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058fa:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058fc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005902:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005904:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005906:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005908:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800590a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800590c:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800590e:	2301      	movs	r3, #1
 8005910:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005912:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005916:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800591a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800591e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005922:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005926:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800592a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005932:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005936:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800593a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800593e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005942:	2000      	movs	r0, #0
}
 8005944:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8005946:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005948:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800594e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005954:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005956:	69a1      	ldr	r1, [r4, #24]
 8005958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800595c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800595e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005960:	68e3      	ldr	r3, [r4, #12]
 8005962:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005964:	6863      	ldr	r3, [r4, #4]
 8005966:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005968:	6963      	ldr	r3, [r4, #20]
 800596a:	6313      	str	r3, [r2, #48]	; 0x30
 800596c:	e7cf      	b.n	800590e <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 800596e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005972:	f7ff ff81 	bl	8005878 <HAL_TIM_PWM_MspInit>
 8005976:	e78c      	b.n	8005892 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005978:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800597a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800597c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005980:	4303      	orrs	r3, r0
 8005982:	e7e9      	b.n	8005958 <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 8005984:	2001      	movs	r0, #1
}
 8005986:	4770      	bx	lr
 8005988:	40012c00 	.word	0x40012c00

0800598c <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 800598c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005990:	2b01      	cmp	r3, #1
 8005992:	d069      	beq.n	8005a68 <HAL_TIM_SlaveConfigSynchro+0xdc>
 8005994:	4684      	mov	ip, r0
 8005996:	2201      	movs	r2, #1
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005998:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800599a:	2302      	movs	r3, #2
{
 800599c:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800599e:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80059a2:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80059a6:	6882      	ldr	r2, [r0, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80059a8:	684b      	ldr	r3, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80059aa:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 80059ac:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80059b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80059b4:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 80059b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80059ba:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80059be:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80059c0:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 80059c2:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 80059c4:	d05e      	beq.n	8005a84 <HAL_TIM_SlaveConfigSynchro+0xf8>
 80059c6:	d816      	bhi.n	80059f6 <HAL_TIM_SlaveConfigSynchro+0x6a>
 80059c8:	2b40      	cmp	r3, #64	; 0x40
 80059ca:	d06e      	beq.n	8005aaa <HAL_TIM_SlaveConfigSynchro+0x11e>
 80059cc:	d933      	bls.n	8005a36 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80059ce:	2b50      	cmp	r3, #80	; 0x50
 80059d0:	d141      	bne.n	8005a56 <HAL_TIM_SlaveConfigSynchro+0xca>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059d2:	688a      	ldr	r2, [r1, #8]
 80059d4:	690c      	ldr	r4, [r1, #16]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059d6:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059d8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80059dc:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059de:	6a01      	ldr	r1, [r0, #32]
 80059e0:	f021 0101 	bic.w	r1, r1, #1
 80059e4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059e6:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059ec:	ea43 1304 	orr.w	r3, r3, r4, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059f0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80059f2:	6202      	str	r2, [r0, #32]
 80059f4:	e00d      	b.n	8005a12 <HAL_TIM_SlaveConfigSynchro+0x86>
  switch (sSlaveConfig->InputTrigger)
 80059f6:	2b70      	cmp	r3, #112	; 0x70
 80059f8:	d038      	beq.n	8005a6c <HAL_TIM_SlaveConfigSynchro+0xe0>
 80059fa:	2b6f      	cmp	r3, #111	; 0x6f
 80059fc:	d92b      	bls.n	8005a56 <HAL_TIM_SlaveConfigSynchro+0xca>
 80059fe:	4a34      	ldr	r2, [pc, #208]	; (8005ad0 <HAL_TIM_SlaveConfigSynchro+0x144>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d006      	beq.n	8005a12 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005a04:	d91d      	bls.n	8005a42 <HAL_TIM_SlaveConfigSynchro+0xb6>
 8005a06:	4a33      	ldr	r2, [pc, #204]	; (8005ad4 <HAL_TIM_SlaveConfigSynchro+0x148>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d002      	beq.n	8005a12 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005a0c:	3230      	adds	r2, #48	; 0x30
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d121      	bne.n	8005a56 <HAL_TIM_SlaveConfigSynchro+0xca>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005a12:	68c3      	ldr	r3, [r0, #12]
 8005a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a18:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005a1a:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 8005a1c:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8005a1e:	2101      	movs	r1, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a24:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8005a26:	f88c 103d 	strb.w	r1, [ip, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005a2a:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  return HAL_OK;
 8005a2e:	4610      	mov	r0, r2
}
 8005a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a34:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	d0eb      	beq.n	8005a12 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005a3a:	d909      	bls.n	8005a50 <HAL_TIM_SlaveConfigSynchro+0xc4>
 8005a3c:	2b30      	cmp	r3, #48	; 0x30
 8005a3e:	d10a      	bne.n	8005a56 <HAL_TIM_SlaveConfigSynchro+0xca>
 8005a40:	e7e7      	b.n	8005a12 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005a42:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005a46:	d0e4      	beq.n	8005a12 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005a48:	3a10      	subs	r2, #16
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d0e1      	beq.n	8005a12 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005a4e:	e002      	b.n	8005a56 <HAL_TIM_SlaveConfigSynchro+0xca>
 8005a50:	f033 0310 	bics.w	r3, r3, #16
 8005a54:	d0dd      	beq.n	8005a12 <HAL_TIM_SlaveConfigSynchro+0x86>
    htim->State = HAL_TIM_STATE_READY;
 8005a56:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005a58:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8005a5a:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005a5e:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 8005a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a66:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005a68:	2002      	movs	r0, #2
}
 8005a6a:	4770      	bx	lr

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a6c:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8005a70:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a72:	6909      	ldr	r1, [r1, #16]
 8005a74:	4323      	orrs	r3, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a76:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a7a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005a7e:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a80:	6083      	str	r3, [r0, #8]
 8005a82:	e7c6      	b.n	8005a12 <HAL_TIM_SlaveConfigSynchro+0x86>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a84:	690b      	ldr	r3, [r1, #16]
 8005a86:	688c      	ldr	r4, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a88:	6a01      	ldr	r1, [r0, #32]
 8005a8a:	f021 0110 	bic.w	r1, r1, #16
 8005a8e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a90:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a92:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a96:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccer = TIMx->CCER;
 8005a9a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8005a9c:	6182      	str	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aa2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCER = tmpccer;
 8005aa6:	6203      	str	r3, [r0, #32]
 8005aa8:	e7b3      	b.n	8005a12 <HAL_TIM_SlaveConfigSynchro+0x86>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005aaa:	2c05      	cmp	r4, #5
 8005aac:	d0d3      	beq.n	8005a56 <HAL_TIM_SlaveConfigSynchro+0xca>
 8005aae:	f1b4 1f01 	cmp.w	r4, #65537	; 0x10001
 8005ab2:	d0d0      	beq.n	8005a56 <HAL_TIM_SlaveConfigSynchro+0xca>
      tmpccer = htim->Instance->CCER;
 8005ab4:	6a04      	ldr	r4, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005ab6:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005ab8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005aba:	f022 0201 	bic.w	r2, r2, #1
 8005abe:	6202      	str	r2, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005ac0:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005ac6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8005aca:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8005acc:	6204      	str	r4, [r0, #32]
      break;
 8005ace:	e7a0      	b.n	8005a12 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005ad0:	00100030 	.word	0x00100030
 8005ad4:	00100040 	.word	0x00100040

08005ad8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ad8:	6a03      	ldr	r3, [r0, #32]
 8005ada:	f023 0310 	bic.w	r3, r3, #16
 8005ade:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005ae0:	6a03      	ldr	r3, [r0, #32]
{
 8005ae2:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8005ae4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005ae6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005aea:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005aee:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005af6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005af8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005afc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b00:	4d14      	ldr	r5, [pc, #80]	; (8005b54 <TIM_OC2_SetConfig+0x7c>)
 8005b02:	42a8      	cmp	r0, r5
 8005b04:	d010      	beq.n	8005b28 <TIM_OC2_SetConfig+0x50>
 8005b06:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005b0a:	42a8      	cmp	r0, r5
 8005b0c:	d00c      	beq.n	8005b28 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005b12:	42a8      	cmp	r0, r5
 8005b14:	d00f      	beq.n	8005b36 <TIM_OC2_SetConfig+0x5e>
 8005b16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b1a:	42a8      	cmp	r0, r5
 8005b1c:	d00b      	beq.n	8005b36 <TIM_OC2_SetConfig+0x5e>
 8005b1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b22:	42a8      	cmp	r0, r5
 8005b24:	d10f      	bne.n	8005b46 <TIM_OC2_SetConfig+0x6e>
 8005b26:	e006      	b.n	8005b36 <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b28:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b2e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b36:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b3a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b3e:	ea46 0c05 	orr.w	ip, r6, r5
 8005b42:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8005b46:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005b48:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005b4a:	6182      	str	r2, [r0, #24]
}
 8005b4c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8005b4e:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005b50:	6203      	str	r3, [r0, #32]
}
 8005b52:	4770      	bx	lr
 8005b54:	40012c00 	.word	0x40012c00

08005b58 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8005b58:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	f000 80f4 	beq.w	8005d4a <HAL_TIM_PWM_ConfigChannel+0x1f2>
 8005b62:	2301      	movs	r3, #1
{
 8005b64:	b570      	push	{r4, r5, r6, lr}
 8005b66:	4604      	mov	r4, r0
 8005b68:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8005b6a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005b6e:	2a14      	cmp	r2, #20
 8005b70:	d80c      	bhi.n	8005b8c <HAL_TIM_PWM_ConfigChannel+0x34>
 8005b72:	e8df f002 	tbb	[pc, r2]
 8005b76:	0b53      	.short	0x0b53
 8005b78:	0b680b0b 	.word	0x0b680b0b
 8005b7c:	0b7e0b0b 	.word	0x0b7e0b0b
 8005b80:	0b930b0b 	.word	0x0b930b0b
 8005b84:	0ba90b0b 	.word	0x0ba90b0b
 8005b88:	0b0b      	.short	0x0b0b
 8005b8a:	10          	.byte	0x10
 8005b8b:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8005b92:	2001      	movs	r0, #1
}
 8005b94:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b96:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b98:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b9a:	6a1a      	ldr	r2, [r3, #32]
 8005b9c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005ba0:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005ba2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005ba4:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005ba6:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ba8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005bac:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bb4:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bb6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bba:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bbe:	4e64      	ldr	r6, [pc, #400]	; (8005d50 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005bc0:	42b3      	cmp	r3, r6
 8005bc2:	d00f      	beq.n	8005be4 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005bc4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005bc8:	42b3      	cmp	r3, r6
 8005bca:	d00b      	beq.n	8005be4 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005bcc:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005bd0:	42b3      	cmp	r3, r6
 8005bd2:	d007      	beq.n	8005be4 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005bd4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005bd8:	42b3      	cmp	r3, r6
 8005bda:	d003      	beq.n	8005be4 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005bdc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005be0:	42b3      	cmp	r3, r6
 8005be2:	d104      	bne.n	8005bee <HAL_TIM_PWM_ConfigChannel+0x96>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005be4:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005be6:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005bea:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 8005bee:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005bf0:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8005bf2:	6869      	ldr	r1, [r5, #4]
 8005bf4:	64d9      	str	r1, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8005bf6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bf8:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bfa:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bfc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005c00:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c02:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005c04:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005c08:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c0c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005c10:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8005c12:	2300      	movs	r3, #0
 8005c14:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005c18:	2000      	movs	r0, #0
}
 8005c1a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c1c:	6800      	ldr	r0, [r0, #0]
 8005c1e:	f7ff fce7 	bl	80055f0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c22:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c24:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c26:	6999      	ldr	r1, [r3, #24]
 8005c28:	f041 0108 	orr.w	r1, r1, #8
 8005c2c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c2e:	6999      	ldr	r1, [r3, #24]
 8005c30:	f021 0104 	bic.w	r1, r1, #4
 8005c34:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c36:	699a      	ldr	r2, [r3, #24]
 8005c38:	4302      	orrs	r2, r0
 8005c3a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005c42:	2000      	movs	r0, #0
}
 8005c44:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c46:	6800      	ldr	r0, [r0, #0]
 8005c48:	f7ff ff46 	bl	8005ad8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c4c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c4e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c50:	6999      	ldr	r1, [r3, #24]
 8005c52:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005c56:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c58:	6999      	ldr	r1, [r3, #24]
 8005c5a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005c5e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005c66:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005c6e:	2000      	movs	r0, #0
}
 8005c70:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c72:	6800      	ldr	r0, [r0, #0]
 8005c74:	f7ff fcf8 	bl	8005668 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c78:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c7a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c7c:	69d9      	ldr	r1, [r3, #28]
 8005c7e:	f041 0108 	orr.w	r1, r1, #8
 8005c82:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c84:	69d9      	ldr	r1, [r3, #28]
 8005c86:	f021 0104 	bic.w	r1, r1, #4
 8005c8a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c8c:	69da      	ldr	r2, [r3, #28]
 8005c8e:	4302      	orrs	r2, r0
 8005c90:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005c92:	2300      	movs	r3, #0
 8005c94:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005c98:	2000      	movs	r0, #0
}
 8005c9a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c9c:	6800      	ldr	r0, [r0, #0]
 8005c9e:	f7ff fd23 	bl	80056e8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ca2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ca4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ca6:	69d9      	ldr	r1, [r3, #28]
 8005ca8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005cac:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cae:	69d9      	ldr	r1, [r3, #28]
 8005cb0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005cb4:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005cbc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005cc4:	2000      	movs	r0, #0
}
 8005cc6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005cc8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005cca:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ccc:	6a1a      	ldr	r2, [r3, #32]
 8005cce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005cd2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005cd4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005cd6:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005cd8:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cda:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005cde:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005ce2:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ce4:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8005ce6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cea:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cee:	4e18      	ldr	r6, [pc, #96]	; (8005d50 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005cf0:	42b3      	cmp	r3, r6
 8005cf2:	d00f      	beq.n	8005d14 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8005cf4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005cf8:	42b3      	cmp	r3, r6
 8005cfa:	d00b      	beq.n	8005d14 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8005cfc:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005d00:	42b3      	cmp	r3, r6
 8005d02:	d007      	beq.n	8005d14 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8005d04:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005d08:	42b3      	cmp	r3, r6
 8005d0a:	d003      	beq.n	8005d14 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8005d0c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005d10:	42b3      	cmp	r3, r6
 8005d12:	d104      	bne.n	8005d1e <HAL_TIM_PWM_ConfigChannel+0x1c6>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d14:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d16:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d1a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8005d1e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005d20:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8005d22:	6869      	ldr	r1, [r5, #4]
 8005d24:	6499      	str	r1, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8005d26:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d28:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d2a:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d2c:	f041 0108 	orr.w	r1, r1, #8
 8005d30:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d32:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005d34:	f021 0104 	bic.w	r1, r1, #4
 8005d38:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d3c:	432a      	orrs	r2, r5
 8005d3e:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8005d40:	2300      	movs	r3, #0
 8005d42:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005d46:	2000      	movs	r0, #0
}
 8005d48:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8005d4a:	2002      	movs	r0, #2
}
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40012c00 	.word	0x40012c00

08005d54 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d03e      	beq.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8005d5c:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d5e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d60:	4d1f      	ldr	r5, [pc, #124]	; (8005de0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005d62:	2302      	movs	r3, #2
 8005d64:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d68:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8005d6a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005d6c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d6e:	d028      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005d70:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005d74:	42aa      	cmp	r2, r5
 8005d76:	d024      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d78:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d7a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d82:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d84:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8005d88:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d8a:	d00c      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8005d8c:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d009      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8005d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d005      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8005d9a:	42aa      	cmp	r2, r5
 8005d9c:	d003      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8005d9e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d104      	bne.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005da6:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005da8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dac:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dae:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005db0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005db2:	2201      	movs	r2, #1
 8005db4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005db8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005dbc:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8005dbe:	4618      	mov	r0, r3
}
 8005dc0:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dc2:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dc4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dc8:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dce:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dd4:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8005dd6:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd8:	e7e5      	b.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 8005dda:	2002      	movs	r0, #2
}
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40000400 	.word	0x40000400

08005de8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005de8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d045      	beq.n	8005e7c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8005df0:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005df2:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8005df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005dfe:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e00:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e06:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e0c:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e0e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e14:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e16:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e1c:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e1e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e24:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e26:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e28:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005e2c:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005e32:	4c13      	ldr	r4, [pc, #76]	; (8005e80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8005e34:	42a0      	cmp	r0, r4
 8005e36:	d00b      	beq.n	8005e50 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8005e38:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005e3c:	42a0      	cmp	r0, r4
 8005e3e:	d007      	beq.n	8005e50 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8005e40:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8005e42:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8005e44:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8005e48:	4608      	mov	r0, r1
}
 8005e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e4e:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005e50:	69cc      	ldr	r4, [r1, #28]
 8005e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e56:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e58:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8005e5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e5e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e62:	6a0c      	ldr	r4, [r1, #32]
 8005e64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e68:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e6a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e6c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e6e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005e72:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e78:	430b      	orrs	r3, r1
 8005e7a:	e7e1      	b.n	8005e40 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8005e7c:	2002      	movs	r0, #2
}
 8005e7e:	4770      	bx	lr
 8005e80:	40012c00 	.word	0x40012c00

08005e84 <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d04b      	beq.n	8005f24 <HAL_TIMEx_ConfigBreakInput+0xa0>

  switch (sBreakInputConfig->Source)
 8005e8c:	6813      	ldr	r3, [r2, #0]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	2b0f      	cmp	r3, #15
{
 8005e92:	b4f0      	push	{r4, r5, r6, r7}
 8005e94:	d824      	bhi.n	8005ee0 <HAL_TIMEx_ConfigBreakInput+0x5c>
 8005e96:	4c25      	ldr	r4, [pc, #148]	; (8005f2c <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8005e98:	4e25      	ldr	r6, [pc, #148]	; (8005f30 <HAL_TIMEx_ConfigBreakInput+0xac>)
 8005e9a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8005e9e:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
 8005ea2:	4c24      	ldr	r4, [pc, #144]	; (8005f34 <HAL_TIMEx_ConfigBreakInput+0xb0>)
 8005ea4:	4e24      	ldr	r6, [pc, #144]	; (8005f38 <HAL_TIMEx_ConfigBreakInput+0xb4>)
 8005ea6:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8005eaa:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8005eae:	2901      	cmp	r1, #1
 8005eb0:	d01c      	beq.n	8005eec <HAL_TIMEx_ConfigBreakInput+0x68>
 8005eb2:	2902      	cmp	r1, #2
 8005eb4:	d12f      	bne.n	8005f16 <HAL_TIMEx_ConfigBreakInput+0x92>
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005eb6:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF2;
 8005eb8:	6806      	ldr	r6, [r0, #0]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005eba:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005ebc:	fa01 f30c 	lsl.w	r3, r1, ip
      tmporx = htim->Instance->AF2;
 8005ec0:	6e71      	ldr	r1, [r6, #100]	; 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005ec2:	404b      	eors	r3, r1
 8005ec4:	402b      	ands	r3, r5
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005ec6:	40ba      	lsls	r2, r7
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005ec8:	404b      	eors	r3, r1
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005eca:	405a      	eors	r2, r3
 8005ecc:	4014      	ands	r4, r2
 8005ece:	4063      	eors	r3, r4
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8005ed0:	2200      	movs	r2, #0
      htim->Instance->AF2 = tmporx;
 8005ed2:	6673      	str	r3, [r6, #100]	; 0x64
  __HAL_UNLOCK(htim);
 8005ed4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005ed8:	2300      	movs	r3, #0

  return status;
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	bcf0      	pop	{r4, r5, r6, r7}
 8005ede:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8005ee0:	2700      	movs	r7, #0
  switch (BreakInput)
 8005ee2:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8005ee4:	46bc      	mov	ip, r7
 8005ee6:	463c      	mov	r4, r7
 8005ee8:	463d      	mov	r5, r7
  switch (BreakInput)
 8005eea:	d1e2      	bne.n	8005eb2 <HAL_TIMEx_ConfigBreakInput+0x2e>
      tmporx = htim->Instance->AF1;
 8005eec:	6806      	ldr	r6, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005eee:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF1;
 8005ef0:	6e31      	ldr	r1, [r6, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005ef2:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005ef4:	fa03 f30c 	lsl.w	r3, r3, ip
 8005ef8:	404b      	eors	r3, r1
 8005efa:	402b      	ands	r3, r5
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005efc:	40ba      	lsls	r2, r7
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005efe:	404b      	eors	r3, r1
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005f00:	405a      	eors	r2, r3
 8005f02:	4014      	ands	r4, r2
 8005f04:	4063      	eors	r3, r4
  __HAL_UNLOCK(htim);
 8005f06:	2200      	movs	r2, #0
      htim->Instance->AF1 = tmporx;
 8005f08:	6633      	str	r3, [r6, #96]	; 0x60
  __HAL_UNLOCK(htim);
 8005f0a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	bcf0      	pop	{r4, r5, r6, r7}
 8005f14:	4770      	bx	lr
  __HAL_UNLOCK(htim);
 8005f16:	2200      	movs	r2, #0
 8005f18:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (BreakInput)
 8005f1c:	2301      	movs	r3, #1
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	bcf0      	pop	{r4, r5, r6, r7}
 8005f22:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005f24:	2302      	movs	r3, #2
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	08008da8 	.word	0x08008da8
 8005f30:	08008e28 	.word	0x08008e28
 8005f34:	08008de8 	.word	0x08008de8
 8005f38:	08008e68 	.word	0x08008e68

08005f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f40:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f42:	6882      	ldr	r2, [r0, #8]
 8005f44:	6900      	ldr	r0, [r0, #16]
 8005f46:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f48:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f4a:	4302      	orrs	r2, r0
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f50:	49a6      	ldr	r1, [pc, #664]	; (80061ec <UART_SetConfig+0x2b0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f52:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f54:	4029      	ands	r1, r5
 8005f56:	430a      	orrs	r2, r1
 8005f58:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	68e1      	ldr	r1, [r4, #12]
 8005f5e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005f62:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f64:	49a2      	ldr	r1, [pc, #648]	; (80061f0 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f66:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f68:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f6a:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f6c:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f6e:	d06b      	beq.n	8006048 <UART_SetConfig+0x10c>
    tmpreg |= huart->Init.OneBitSampling;
 8005f70:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f72:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8005f76:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8005f7a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f82:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f84:	f022 020f 	bic.w	r2, r2, #15
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f8c:	4a99      	ldr	r2, [pc, #612]	; (80061f4 <UART_SetConfig+0x2b8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d012      	beq.n	8005fb8 <UART_SetConfig+0x7c>
 8005f92:	4a99      	ldr	r2, [pc, #612]	; (80061f8 <UART_SetConfig+0x2bc>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d036      	beq.n	8006006 <UART_SetConfig+0xca>
 8005f98:	4a98      	ldr	r2, [pc, #608]	; (80061fc <UART_SetConfig+0x2c0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	f000 80fa 	beq.w	8006194 <UART_SetConfig+0x258>
 8005fa0:	4a97      	ldr	r2, [pc, #604]	; (8006200 <UART_SetConfig+0x2c4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	f000 80a5 	beq.w	80060f2 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8005fa8:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005faa:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8005fac:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8005fb0:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8005fb4:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 8005fb6:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fb8:	4b92      	ldr	r3, [pc, #584]	; (8006204 <UART_SetConfig+0x2c8>)
 8005fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	f240 808e 	bls.w	80060e6 <UART_SetConfig+0x1aa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005fce:	f000 80fe 	beq.w	80061ce <UART_SetConfig+0x292>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd2:	f7ff f9a7 	bl	8005324 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	f000 80da 	beq.w	8006190 <UART_SetConfig+0x254>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005fde:	6862      	ldr	r2, [r4, #4]
 8005fe0:	4b89      	ldr	r3, [pc, #548]	; (8006208 <UART_SetConfig+0x2cc>)
 8005fe2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005fe6:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fea:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fee:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005ff2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ff6:	f1a3 0210 	sub.w	r2, r3, #16
 8005ffa:	428a      	cmp	r2, r1
 8005ffc:	d8d4      	bhi.n	8005fa8 <UART_SetConfig+0x6c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ffe:	6822      	ldr	r2, [r4, #0]
 8006000:	2000      	movs	r0, #0
 8006002:	60d3      	str	r3, [r2, #12]
 8006004:	e7d1      	b.n	8005faa <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006006:	4b7f      	ldr	r3, [pc, #508]	; (8006204 <UART_SetConfig+0x2c8>)
 8006008:	4a80      	ldr	r2, [pc, #512]	; (800620c <UART_SetConfig+0x2d0>)
 800600a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600e:	f003 030c 	and.w	r3, r3, #12
 8006012:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006014:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006018:	d07d      	beq.n	8006116 <UART_SetConfig+0x1da>
    switch (clocksource)
 800601a:	2b08      	cmp	r3, #8
 800601c:	d8c4      	bhi.n	8005fa8 <UART_SetConfig+0x6c>
 800601e:	a201      	add	r2, pc, #4	; (adr r2, 8006024 <UART_SetConfig+0xe8>)
 8006020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006024:	0800614f 	.word	0x0800614f
 8006028:	08005fd3 	.word	0x08005fd3
 800602c:	080061cb 	.word	0x080061cb
 8006030:	08005fa9 	.word	0x08005fa9
 8006034:	08006111 	.word	0x08006111
 8006038:	08005fa9 	.word	0x08005fa9
 800603c:	08005fa9 	.word	0x08005fa9
 8006040:	08005fa9 	.word	0x08005fa9
 8006044:	080061bb 	.word	0x080061bb
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006048:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800604c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006050:	430a      	orrs	r2, r1
 8006052:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006056:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006058:	486a      	ldr	r0, [pc, #424]	; (8006204 <UART_SetConfig+0x2c8>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800605a:	f022 020f 	bic.w	r2, r2, #15
 800605e:	430a      	orrs	r2, r1
 8006060:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006062:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006066:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800606a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800606e:	f000 80aa 	beq.w	80061c6 <UART_SetConfig+0x28a>
 8006072:	d80b      	bhi.n	800608c <UART_SetConfig+0x150>
 8006074:	2b00      	cmp	r3, #0
 8006076:	d039      	beq.n	80060ec <UART_SetConfig+0x1b0>
 8006078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800607c:	d194      	bne.n	8005fa8 <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 800607e:	f7fe ffef 	bl	8005060 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006082:	2800      	cmp	r0, #0
 8006084:	f000 8084 	beq.w	8006190 <UART_SetConfig+0x254>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006088:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800608a:	e004      	b.n	8006096 <UART_SetConfig+0x15a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800608c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006090:	d18a      	bne.n	8005fa8 <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 8006092:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006096:	4b5c      	ldr	r3, [pc, #368]	; (8006208 <UART_SetConfig+0x2cc>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006098:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800609a:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800609e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060a2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80060a6:	4299      	cmp	r1, r3
 80060a8:	f63f af7e 	bhi.w	8005fa8 <UART_SetConfig+0x6c>
 80060ac:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80060b0:	f63f af7a 	bhi.w	8005fa8 <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060b4:	2300      	movs	r3, #0
 80060b6:	4619      	mov	r1, r3
 80060b8:	f7fa f8ae 	bl	8000218 <__aeabi_uldivmod>
 80060bc:	0209      	lsls	r1, r1, #8
 80060be:	0203      	lsls	r3, r0, #8
 80060c0:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80060c4:	0868      	lsrs	r0, r5, #1
 80060c6:	1818      	adds	r0, r3, r0
 80060c8:	462a      	mov	r2, r5
 80060ca:	f04f 0300 	mov.w	r3, #0
 80060ce:	f141 0100 	adc.w	r1, r1, #0
 80060d2:	f7fa f8a1 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060d6:	4a4e      	ldr	r2, [pc, #312]	; (8006210 <UART_SetConfig+0x2d4>)
 80060d8:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80060dc:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060de:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060e0:	f63f af62 	bhi.w	8005fa8 <UART_SetConfig+0x6c>
 80060e4:	e78b      	b.n	8005ffe <UART_SetConfig+0xc2>
 80060e6:	4a4b      	ldr	r2, [pc, #300]	; (8006214 <UART_SetConfig+0x2d8>)
 80060e8:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80060ea:	e793      	b.n	8006014 <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80060ec:	f7ff f908 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
        break;
 80060f0:	e7c7      	b.n	8006082 <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060f2:	4b44      	ldr	r3, [pc, #272]	; (8006204 <UART_SetConfig+0x2c8>)
 80060f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060fc:	2b80      	cmp	r3, #128	; 0x80
 80060fe:	d06e      	beq.n	80061de <UART_SetConfig+0x2a2>
 8006100:	d85e      	bhi.n	80061c0 <UART_SetConfig+0x284>
 8006102:	b30b      	cbz	r3, 8006148 <UART_SetConfig+0x20c>
 8006104:	2b40      	cmp	r3, #64	; 0x40
 8006106:	f47f af4f 	bne.w	8005fa8 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800610a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800610e:	d021      	beq.n	8006154 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 8006110:	f7fe ffa6 	bl	8005060 <HAL_RCC_GetSysClockFreq>
        break;
 8006114:	e75f      	b.n	8005fd6 <UART_SetConfig+0x9a>
    switch (clocksource)
 8006116:	2b08      	cmp	r3, #8
 8006118:	f63f af46 	bhi.w	8005fa8 <UART_SetConfig+0x6c>
 800611c:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <UART_SetConfig+0x1e8>)
 800611e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006122:	bf00      	nop
 8006124:	080061d5 	.word	0x080061d5
 8006128:	080061cf 	.word	0x080061cf
 800612c:	080061db 	.word	0x080061db
 8006130:	08005fa9 	.word	0x08005fa9
 8006134:	08006155 	.word	0x08006155
 8006138:	08005fa9 	.word	0x08005fa9
 800613c:	08005fa9 	.word	0x08005fa9
 8006140:	08005fa9 	.word	0x08005fa9
 8006144:	0800615d 	.word	0x0800615d
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006148:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800614c:	d042      	beq.n	80061d4 <UART_SetConfig+0x298>
        pclk = HAL_RCC_GetPCLK1Freq();
 800614e:	f7ff f8d7 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
        break;
 8006152:	e740      	b.n	8005fd6 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetSysClockFreq();
 8006154:	f7fe ff84 	bl	8005060 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006158:	b1d0      	cbz	r0, 8006190 <UART_SetConfig+0x254>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800615a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800615c:	6862      	ldr	r2, [r4, #4]
 800615e:	4b2a      	ldr	r3, [pc, #168]	; (8006208 <UART_SetConfig+0x2cc>)
 8006160:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8006164:	fbb0 f0f1 	udiv	r0, r0, r1
 8006168:	0853      	lsrs	r3, r2, #1
 800616a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800616e:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006172:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006176:	f1a0 0210 	sub.w	r2, r0, #16
 800617a:	429a      	cmp	r2, r3
 800617c:	f63f af14 	bhi.w	8005fa8 <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006180:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8006184:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006186:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006188:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800618c:	4318      	orrs	r0, r3
 800618e:	60d0      	str	r0, [r2, #12]
 8006190:	2000      	movs	r0, #0
 8006192:	e70a      	b.n	8005faa <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006194:	4b1b      	ldr	r3, [pc, #108]	; (8006204 <UART_SetConfig+0x2c8>)
 8006196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d01d      	beq.n	80061de <UART_SetConfig+0x2a2>
 80061a2:	d804      	bhi.n	80061ae <UART_SetConfig+0x272>
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0cf      	beq.n	8006148 <UART_SetConfig+0x20c>
 80061a8:	2b10      	cmp	r3, #16
 80061aa:	d0ae      	beq.n	800610a <UART_SetConfig+0x1ce>
 80061ac:	e6fc      	b.n	8005fa8 <UART_SetConfig+0x6c>
 80061ae:	2b30      	cmp	r3, #48	; 0x30
 80061b0:	f47f aefa 	bne.w	8005fa8 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061b4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80061b8:	d0d0      	beq.n	800615c <UART_SetConfig+0x220>
    switch (clocksource)
 80061ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80061be:	e70e      	b.n	8005fde <UART_SetConfig+0xa2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061c0:	2bc0      	cmp	r3, #192	; 0xc0
 80061c2:	d0f7      	beq.n	80061b4 <UART_SetConfig+0x278>
 80061c4:	e6f0      	b.n	8005fa8 <UART_SetConfig+0x6c>
 80061c6:	4814      	ldr	r0, [pc, #80]	; (8006218 <UART_SetConfig+0x2dc>)
 80061c8:	e765      	b.n	8006096 <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 80061ca:	4813      	ldr	r0, [pc, #76]	; (8006218 <UART_SetConfig+0x2dc>)
 80061cc:	e707      	b.n	8005fde <UART_SetConfig+0xa2>
        pclk = HAL_RCC_GetPCLK2Freq();
 80061ce:	f7ff f8a9 	bl	8005324 <HAL_RCC_GetPCLK2Freq>
        break;
 80061d2:	e7c1      	b.n	8006158 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80061d4:	f7ff f894 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
        break;
 80061d8:	e7be      	b.n	8006158 <UART_SetConfig+0x21c>
        pclk = (uint32_t) HSI_VALUE;
 80061da:	480f      	ldr	r0, [pc, #60]	; (8006218 <UART_SetConfig+0x2dc>)
 80061dc:	e7be      	b.n	800615c <UART_SetConfig+0x220>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061de:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80061e2:	480d      	ldr	r0, [pc, #52]	; (8006218 <UART_SetConfig+0x2dc>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061e4:	f47f aefb 	bne.w	8005fde <UART_SetConfig+0xa2>
 80061e8:	e7b8      	b.n	800615c <UART_SetConfig+0x220>
 80061ea:	bf00      	nop
 80061ec:	cfff69f3 	.word	0xcfff69f3
 80061f0:	40008000 	.word	0x40008000
 80061f4:	40013800 	.word	0x40013800
 80061f8:	40004400 	.word	0x40004400
 80061fc:	40004800 	.word	0x40004800
 8006200:	40004c00 	.word	0x40004c00
 8006204:	40021000 	.word	0x40021000
 8006208:	08008ebc 	.word	0x08008ebc
 800620c:	08008eac 	.word	0x08008eac
 8006210:	000ffcff 	.word	0x000ffcff
 8006214:	08008ea8 	.word	0x08008ea8
 8006218:	00f42400 	.word	0x00f42400

0800621c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800621c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800621e:	07da      	lsls	r2, r3, #31
{
 8006220:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006222:	d506      	bpl.n	8006232 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006224:	6801      	ldr	r1, [r0, #0]
 8006226:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006228:	684a      	ldr	r2, [r1, #4]
 800622a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800622e:	4322      	orrs	r2, r4
 8006230:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006232:	079c      	lsls	r4, r3, #30
 8006234:	d506      	bpl.n	8006244 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006236:	6801      	ldr	r1, [r0, #0]
 8006238:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800623a:	684a      	ldr	r2, [r1, #4]
 800623c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006240:	4322      	orrs	r2, r4
 8006242:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006244:	0759      	lsls	r1, r3, #29
 8006246:	d506      	bpl.n	8006256 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006248:	6801      	ldr	r1, [r0, #0]
 800624a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800624c:	684a      	ldr	r2, [r1, #4]
 800624e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006252:	4322      	orrs	r2, r4
 8006254:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006256:	071a      	lsls	r2, r3, #28
 8006258:	d506      	bpl.n	8006268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800625a:	6801      	ldr	r1, [r0, #0]
 800625c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800625e:	684a      	ldr	r2, [r1, #4]
 8006260:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006264:	4322      	orrs	r2, r4
 8006266:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006268:	06dc      	lsls	r4, r3, #27
 800626a:	d506      	bpl.n	800627a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800626c:	6801      	ldr	r1, [r0, #0]
 800626e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006270:	688a      	ldr	r2, [r1, #8]
 8006272:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006276:	4322      	orrs	r2, r4
 8006278:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800627a:	0699      	lsls	r1, r3, #26
 800627c:	d506      	bpl.n	800628c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800627e:	6801      	ldr	r1, [r0, #0]
 8006280:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006282:	688a      	ldr	r2, [r1, #8]
 8006284:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006288:	4322      	orrs	r2, r4
 800628a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800628c:	065a      	lsls	r2, r3, #25
 800628e:	d509      	bpl.n	80062a4 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006290:	6801      	ldr	r1, [r0, #0]
 8006292:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006294:	684a      	ldr	r2, [r1, #4]
 8006296:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800629a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800629c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062a0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062a2:	d00b      	beq.n	80062bc <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062a4:	061b      	lsls	r3, r3, #24
 80062a6:	d506      	bpl.n	80062b6 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062a8:	6802      	ldr	r2, [r0, #0]
 80062aa:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80062ac:	6853      	ldr	r3, [r2, #4]
 80062ae:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80062b2:	430b      	orrs	r3, r1
 80062b4:	6053      	str	r3, [r2, #4]
  }
}
 80062b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ba:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062bc:	684a      	ldr	r2, [r1, #4]
 80062be:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80062c0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80062c4:	4322      	orrs	r2, r4
 80062c6:	604a      	str	r2, [r1, #4]
 80062c8:	e7ec      	b.n	80062a4 <UART_AdvFeatureConfig+0x88>
 80062ca:	bf00      	nop

080062cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062d4:	6804      	ldr	r4, [r0, #0]
{
 80062d6:	4607      	mov	r7, r0
 80062d8:	460e      	mov	r6, r1
 80062da:	4615      	mov	r5, r2
 80062dc:	4699      	mov	r9, r3
 80062de:	f1b8 3fff 	cmp.w	r8, #4294967295
 80062e2:	d10a      	bne.n	80062fa <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e4:	69e3      	ldr	r3, [r4, #28]
 80062e6:	ea36 0303 	bics.w	r3, r6, r3
 80062ea:	bf0c      	ite	eq
 80062ec:	2301      	moveq	r3, #1
 80062ee:	2300      	movne	r3, #0
 80062f0:	429d      	cmp	r5, r3
 80062f2:	d0f7      	beq.n	80062e4 <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80062f4:	2000      	movs	r0, #0
}
 80062f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062fa:	69e3      	ldr	r3, [r4, #28]
 80062fc:	ea36 0303 	bics.w	r3, r6, r3
 8006300:	bf0c      	ite	eq
 8006302:	2301      	moveq	r3, #1
 8006304:	2300      	movne	r3, #0
 8006306:	42ab      	cmp	r3, r5
 8006308:	d1f4      	bne.n	80062f4 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630a:	f7fd fa67 	bl	80037dc <HAL_GetTick>
 800630e:	eba0 0009 	sub.w	r0, r0, r9
 8006312:	4540      	cmp	r0, r8
 8006314:	d833      	bhi.n	800637e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006316:	f1b8 0f00 	cmp.w	r8, #0
 800631a:	d030      	beq.n	800637e <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800631c:	683c      	ldr	r4, [r7, #0]
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	0759      	lsls	r1, r3, #29
 8006322:	4622      	mov	r2, r4
 8006324:	d5db      	bpl.n	80062de <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006326:	69e3      	ldr	r3, [r4, #28]
 8006328:	051b      	lsls	r3, r3, #20
 800632a:	d5d8      	bpl.n	80062de <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800632c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006330:	6223      	str	r3, [r4, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006336:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	e844 3100 	strex	r1, r3, [r4]
 800633e:	b139      	cbz	r1, 8006350 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	e852 3f00 	ldrex	r3, [r2]
 8006344:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	e842 3100 	strex	r1, r3, [r2]
 800634c:	2900      	cmp	r1, #0
 800634e:	d1f7      	bne.n	8006340 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	f102 0308 	add.w	r3, r2, #8
 8006354:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006358:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	f102 0008 	add.w	r0, r2, #8
 8006360:	e840 3100 	strex	r1, r3, [r0]
 8006364:	2900      	cmp	r1, #0
 8006366:	d1f3      	bne.n	8006350 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8006368:	2320      	movs	r3, #32
 800636a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800636e:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006372:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 8006376:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006378:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 800637c:	e7bb      	b.n	80062f6 <UART_WaitOnFlagUntilTimeout+0x2a>
 800637e:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006384:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006388:	e842 3100 	strex	r1, r3, [r2]
 800638c:	2900      	cmp	r1, #0
 800638e:	d1f7      	bne.n	8006380 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	f102 0308 	add.w	r3, r2, #8
 8006394:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006398:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	f102 0008 	add.w	r0, r2, #8
 80063a0:	e840 3100 	strex	r1, r3, [r0]
 80063a4:	2900      	cmp	r1, #0
 80063a6:	d1f3      	bne.n	8006390 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 80063a8:	2320      	movs	r3, #32
 80063aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80063ae:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80063b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 80063b6:	2003      	movs	r0, #3
 80063b8:	e79d      	b.n	80062f6 <UART_WaitOnFlagUntilTimeout+0x2a>
 80063ba:	bf00      	nop

080063bc <HAL_UART_Init>:
  if (huart == NULL)
 80063bc:	2800      	cmp	r0, #0
 80063be:	d066      	beq.n	800648e <HAL_UART_Init+0xd2>
{
 80063c0:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80063c2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 80063c6:	b082      	sub	sp, #8
 80063c8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d04c      	beq.n	8006468 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 80063ce:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80063d0:	2324      	movs	r3, #36	; 0x24
 80063d2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80063d6:	6813      	ldr	r3, [r2, #0]
 80063d8:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063dc:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80063de:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063e0:	f7ff fdac 	bl	8005f3c <UART_SetConfig>
 80063e4:	2801      	cmp	r0, #1
 80063e6:	d03c      	beq.n	8006462 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d135      	bne.n	800645a <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	6859      	ldr	r1, [r3, #4]
 80063f2:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 80063f6:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f8:	6899      	ldr	r1, [r3, #8]
 80063fa:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 80063fe:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006400:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006402:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8006404:	f041 0101 	orr.w	r1, r1, #1
 8006408:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800640a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800640e:	f7fd f9e5 	bl	80037dc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8006418:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800641a:	d40e      	bmi.n	800643a <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	075b      	lsls	r3, r3, #29
 8006420:	d427      	bmi.n	8006472 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006422:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006424:	2220      	movs	r2, #32
 8006426:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800642a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800642e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 8006432:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006434:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8006436:	b002      	add	sp, #8
 8006438:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800643a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	462a      	mov	r2, r5
 8006442:	4603      	mov	r3, r0
 8006444:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006448:	4620      	mov	r0, r4
 800644a:	f7ff ff3f 	bl	80062cc <UART_WaitOnFlagUntilTimeout>
 800644e:	b9e0      	cbnz	r0, 800648a <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	075b      	lsls	r3, r3, #29
 8006456:	d40c      	bmi.n	8006472 <HAL_UART_Init+0xb6>
 8006458:	e7e3      	b.n	8006422 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800645a:	4620      	mov	r0, r4
 800645c:	f7ff fede 	bl	800621c <UART_AdvFeatureConfig>
 8006460:	e7c5      	b.n	80063ee <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8006462:	2001      	movs	r0, #1
}
 8006464:	b002      	add	sp, #8
 8006466:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8006468:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800646c:	f7fc fa54 	bl	8002918 <HAL_UART_MspInit>
 8006470:	e7ad      	b.n	80063ce <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006472:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	2200      	movs	r2, #0
 800647a:	4633      	mov	r3, r6
 800647c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006480:	4620      	mov	r0, r4
 8006482:	f7ff ff23 	bl	80062cc <UART_WaitOnFlagUntilTimeout>
 8006486:	2800      	cmp	r0, #0
 8006488:	d0cb      	beq.n	8006422 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800648a:	2003      	movs	r0, #3
 800648c:	e7d3      	b.n	8006436 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 800648e:	2001      	movs	r0, #1
}
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop

08006494 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006494:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006498:	2b01      	cmp	r3, #1
 800649a:	d017      	beq.n	80064cc <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800649c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800649e:	2324      	movs	r3, #36	; 0x24
{
 80064a0:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 80064a2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064a6:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064a8:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064aa:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 80064ac:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064b0:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80064b4:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064b6:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064b8:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ba:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80064be:	2220      	movs	r2, #32
 80064c0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 80064c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80064c8:	4618      	mov	r0, r3
}
 80064ca:	4770      	bx	lr
  __HAL_LOCK(huart);
 80064cc:	2002      	movs	r0, #2
}
 80064ce:	4770      	bx	lr

080064d0 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064d0:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80064d4:	2a01      	cmp	r2, #1
 80064d6:	d037      	beq.n	8006548 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 80064d8:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064da:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80064dc:	2024      	movs	r0, #36	; 0x24
{
 80064de:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80064e0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064e4:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064e6:	6810      	ldr	r0, [r2, #0]
 80064e8:	f020 0001 	bic.w	r0, r0, #1
 80064ec:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064ee:	6890      	ldr	r0, [r2, #8]
 80064f0:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 80064f4:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064f6:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064f8:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064fa:	b310      	cbz	r0, 8006542 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064fc:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064fe:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8006500:	4d12      	ldr	r5, [pc, #72]	; (800654c <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006502:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006506:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800650a:	4911      	ldr	r1, [pc, #68]	; (8006550 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 800650c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006510:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006514:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006518:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800651c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800651e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006520:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006524:	fbb1 f1f5 	udiv	r1, r1, r5
 8006528:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800652c:	2100      	movs	r1, #0
 800652e:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8006532:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006534:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8006536:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800653a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800653c:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8006540:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8006542:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006544:	4608      	mov	r0, r1
 8006546:	e7ef      	b.n	8006528 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8006548:	2002      	movs	r0, #2
}
 800654a:	4770      	bx	lr
 800654c:	08008ed4 	.word	0x08008ed4
 8006550:	08008edc 	.word	0x08008edc

08006554 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8006554:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8006558:	2a01      	cmp	r2, #1
 800655a:	d037      	beq.n	80065cc <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800655c:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800655e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006560:	2024      	movs	r0, #36	; 0x24
{
 8006562:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8006564:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006568:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800656a:	6810      	ldr	r0, [r2, #0]
 800656c:	f020 0001 	bic.w	r0, r0, #1
 8006570:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006572:	6890      	ldr	r0, [r2, #8]
 8006574:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8006578:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800657a:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800657c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800657e:	b310      	cbz	r0, 80065c6 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006580:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006582:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006584:	4d12      	ldr	r5, [pc, #72]	; (80065d0 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006586:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800658a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800658e:	4911      	ldr	r1, [pc, #68]	; (80065d4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006590:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006594:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006598:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800659c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065a0:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065a2:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065a4:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065a8:	fbb1 f1f5 	udiv	r1, r1, r5
 80065ac:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80065b0:	2100      	movs	r1, #0
 80065b2:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80065b6:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065b8:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80065ba:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80065be:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80065c0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80065c4:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80065c6:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80065c8:	4608      	mov	r0, r1
 80065ca:	e7ef      	b.n	80065ac <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80065cc:	2002      	movs	r0, #2
}
 80065ce:	4770      	bx	lr
 80065d0:	08008ed4 	.word	0x08008ed4
 80065d4:	08008edc 	.word	0x08008edc

080065d8 <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 80065d8:	88c0      	ldrh	r0, [r0, #6]
 80065da:	4770      	bx	lr

080065dc <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80065dc:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80065de:	8840      	ldrh	r0, [r0, #2]
 80065e0:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 80065e4:	0c00      	lsrs	r0, r0, #16
 80065e6:	4770      	bx	lr

080065e8 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 80065e8:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80065ea:	8802      	ldrh	r2, [r0, #0]
 80065ec:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 80065ee:	fb03 fc03 	mul.w	ip, r3, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80065f2:	fb01 cc01 	mla	ip, r1, r1, ip
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80065f6:	fb02 f202 	mul.w	r2, r2, r2
 80065fa:	4562      	cmp	r2, ip
{
 80065fc:	b084      	sub	sp, #16
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80065fe:	d21a      	bcs.n	8006636 <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8006600:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 8006604:	ebc2 6c1c 	rsb	ip, r2, ip, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8006608:	fa5f fc8c 	uxtb.w	ip, ip
 800660c:	eb00 004c 	add.w	r0, r0, ip, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8006610:	8882      	ldrh	r2, [r0, #4]
 8006612:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8006616:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8006618:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800661c:	bfbc      	itt	lt
 800661e:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8006622:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8006624:	2b00      	cmp	r3, #0
 8006626:	bfbc      	itt	lt
 8006628:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 800662c:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800662e:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8006632:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8006636:	b289      	uxth	r1, r1
 8006638:	2000      	movs	r0, #0
 800663a:	f361 000f 	bfi	r0, r1, #0, #16
 800663e:	b29b      	uxth	r3, r3
 8006640:	f363 401f 	bfi	r0, r3, #16, #16
}
 8006644:	b004      	add	sp, #16
 8006646:	4770      	bx	lr

08006648 <DAC_SetChannelConfig>:
  */
__weak void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                              MC_Protocol_REG_t bVariable)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->bChannel_variable[bChannel] = bVariable;
 8006648:	4401      	add	r1, r0
 800664a:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
}
 800664e:	4770      	bx	lr

08006650 <DAC_GetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->bChannel_variable[bChannel]);
 8006650:	4401      	add	r1, r0
}
 8006652:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8006656:	4770      	bx	lr

08006658 <DAC_SetUserChannelValue>:
  */
__weak void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
                              int16_t hValue)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->hUserValue[bUserChNumber] = hValue;
 8006658:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800665c:	864a      	strh	r2, [r1, #50]	; 0x32
}
 800665e:	4770      	bx	lr

08006660 <DAC_GetUserChannelValue>:
  * @retval none.
  */
__weak int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->hUserValue[bUserChNumber]);
 8006660:	eb00 0141 	add.w	r1, r0, r1, lsl #1
}
 8006664:	f9b1 0032 	ldrsh.w	r0, [r1, #50]	; 0x32
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop

0800666c <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8006670:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8006672:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8006676:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 800667a:	f8a0 311b 	strh.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
  pHandle->RxFrameLevel = 0;
 800667e:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
}
 8006682:	4770      	bx	lr

08006684 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8006684:	b120      	cbz	r0, 8006690 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8006686:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 800668a:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 800668c:	9b00      	ldr	r3, [sp, #0]
 800668e:	60c3      	str	r3, [r0, #12]
  }
}
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop

08006694 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8006694:	b190      	cbz	r0, 80066bc <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8006696:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8006698:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 800669a:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 800669c:	b151      	cbz	r1, 80066b4 <FCP_CalcCRC+0x20>
 800669e:	1c82      	adds	r2, r0, #2
 80066a0:	3901      	subs	r1, #1
 80066a2:	3001      	adds	r0, #1
 80066a4:	fa52 f181 	uxtab	r1, r2, r1
    {
      nSum += pFrame->Buffer[idx];
 80066a8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80066ac:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80066ae:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 80066b0:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80066b2:	d1f9      	bne.n	80066a8 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 80066b4:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 80066b8:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop

080066c0 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 80066c0:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 80066c2:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 80066c6:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 80066c8:	2100      	movs	r1, #0
 80066ca:	f002 fadb 	bl	8008c84 <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 80066ce:	2300      	movs	r3, #0
 80066d0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 80066d4:	bd10      	pop	{r4, pc}
 80066d6:	bf00      	nop

080066d8 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80066d8:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 80066dc:	1c53      	adds	r3, r2, #1
 80066de:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 80066e0:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 80066e2:	bf88      	it	hi
 80066e4:	2300      	movhi	r3, #0
{
 80066e6:	b500      	push	{lr}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80066e8:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 80066ec:	f100 0efe 	add.w	lr, r0, #254	; 0xfe
 80066f0:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 80066f4:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 80066f8:	2200      	movs	r2, #0
 80066fa:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80066fc:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006700:	4573      	cmp	r3, lr
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8006702:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006704:	d1fa      	bne.n	80066fc <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8006706:	2a00      	cmp	r2, #0
 8006708:	bfb8      	it	lt
 800670a:	327f      	addlt	r2, #127	; 0x7f
 800670c:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 800670e:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8006712:	4608      	mov	r0, r1
 8006714:	f85d fb04 	ldr.w	pc, [sp], #4

08006718 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8006718:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop

08006720 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8006720:	8a03      	ldrh	r3, [r0, #16]
 8006722:	8b42      	ldrh	r2, [r0, #26]
 8006724:	429a      	cmp	r2, r3
 8006726:	d306      	bcc.n	8006736 <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8006728:	8b82      	ldrh	r2, [r0, #28]
 800672a:	429a      	cmp	r2, r3
 800672c:	d901      	bls.n	8006732 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 800672e:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8006730:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8006732:	8ac0      	ldrh	r0, [r0, #22]
 8006734:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8006736:	2008      	movs	r0, #8
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop

0800673c <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 800673c:	2300      	movs	r3, #0
 800673e:	8203      	strh	r3, [r0, #16]
}
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop

08006744 <NTC_Init>:
{
 8006744:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006746:	7803      	ldrb	r3, [r0, #0]
{
 8006748:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 800674a:	b123      	cbz	r3, 8006756 <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800674c:	8a43      	ldrh	r3, [r0, #18]
 800674e:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8006750:	2200      	movs	r2, #0
 8006752:	82c2      	strh	r2, [r0, #22]
}
 8006754:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8006756:	3004      	adds	r0, #4
 8006758:	f7fb fce6 	bl	8002128 <RCM_RegisterRegConv>
 800675c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8006760:	4620      	mov	r0, r4
 8006762:	f7ff ffeb 	bl	800673c <NTC_Clear>
}
 8006766:	bd10      	pop	{r4, pc}

08006768 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8006768:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 800676a:	7803      	ldrb	r3, [r0, #0]
{
 800676c:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 800676e:	b113      	cbz	r3, 8006776 <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8006770:	2000      	movs	r0, #0
 8006772:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8006774:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8006776:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 800677a:	f7fb fdbd 	bl	80022f8 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 800677e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006782:	4298      	cmp	r0, r3
 8006784:	d007      	beq.n	8006796 <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8006786:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8006788:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 800678a:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 800678c:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8006790:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8006794:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8006796:	4620      	mov	r0, r4
 8006798:	f7ff ffc2 	bl	8006720 <NTC_SetFaultState>
 800679c:	82e0      	strh	r0, [r4, #22]
}
 800679e:	bd10      	pop	{r4, pc}

080067a0 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80067a0:	7803      	ldrb	r3, [r0, #0]
 80067a2:	b983      	cbnz	r3, 80067c6 <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 80067a4:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 80067a6:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 80067a8:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80067ac:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 80067ae:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 80067b0:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bfbc      	itt	lt
 80067b8:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 80067bc:	33ff      	addlt	r3, #255	; 0xff
 80067be:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 80067c2:	b200      	sxth	r0, r0
 80067c4:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 80067c6:	8a80      	ldrh	r0, [r0, #20]
}
 80067c8:	b200      	sxth	r0, r0
 80067ca:	4770      	bx	lr

080067cc <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 80067cc:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 80067ce:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 80067d0:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 80067d2:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 80067d4:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 80067d6:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 80067d8:	6283      	str	r3, [r0, #40]	; 0x28
}
 80067da:	4770      	bx	lr

080067dc <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 80067dc:	8081      	strh	r1, [r0, #4]
}
 80067de:	4770      	bx	lr

080067e0 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 80067e0:	80c1      	strh	r1, [r0, #6]
}
 80067e2:	4770      	bx	lr

080067e4 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 80067e4:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop

080067ec <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 80067ec:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop

080067f4 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 80067f4:	6081      	str	r1, [r0, #8]

  return;
}
 80067f6:	4770      	bx	lr

080067f8 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 80067f8:	8b00      	ldrh	r0, [r0, #24]
 80067fa:	4770      	bx	lr

080067fc <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 80067fc:	8b40      	ldrh	r0, [r0, #26]
 80067fe:	4770      	bx	lr

08006800 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8006800:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8006802:	4770      	bx	lr

08006804 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8006804:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop

0800680c <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800680c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8006810:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8006814:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
{
 8006818:	b510      	push	{r4, lr}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800681a:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800681e:	f9b0 e016 	ldrsh.w	lr, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8006822:	b162      	cbz	r2, 800683e <PI_Controller+0x32>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8006824:	fb01 f202 	mul.w	r2, r1, r2
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8006828:	6881      	ldr	r1, [r0, #8]

    if ( wIntegral_sum_temp < 0 )
 800682a:	188c      	adds	r4, r1, r2
 800682c:	d420      	bmi.n	8006870 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 800682e:	2900      	cmp	r1, #0
 8006830:	db2a      	blt.n	8006888 <PI_Controller+0x7c>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006832:	68c2      	ldr	r2, [r0, #12]
 8006834:	42a2      	cmp	r2, r4
 8006836:	db02      	blt.n	800683e <PI_Controller+0x32>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8006838:	6902      	ldr	r2, [r0, #16]
 800683a:	42a2      	cmp	r2, r4
 800683c:	dd22      	ble.n	8006884 <PI_Controller+0x78>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 800683e:	8b81      	ldrh	r1, [r0, #28]
 8006840:	410b      	asrs	r3, r1
 8006842:	8bc1      	ldrh	r1, [r0, #30]
 8006844:	fa42 f101 	asr.w	r1, r2, r1
 8006848:	440b      	add	r3, r1
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 800684a:	459c      	cmp	ip, r3
 800684c:	da05      	bge.n	800685a <PI_Controller+0x4e>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 800684e:	ebac 0303 	sub.w	r3, ip, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8006852:	441a      	add	r2, r3
 8006854:	6082      	str	r2, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8006856:	4660      	mov	r0, ip
 8006858:	bd10      	pop	{r4, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 800685a:	459e      	cmp	lr, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 800685c:	bfc9      	itett	gt
 800685e:	ebae 0303 	subgt.w	r3, lr, r3
  return ( ( int16_t )( wOutput_32 ) );
 8006862:	fa0f fc83 	sxthle.w	ip, r3
  pHandle->wIntegralTerm += wDischarge;
 8006866:	18d2      	addgt	r2, r2, r3
 8006868:	46f4      	movgt	ip, lr
 800686a:	6082      	str	r2, [r0, #8]
}
 800686c:	4660      	mov	r0, ip
 800686e:	bd10      	pop	{r4, pc}
      if ( pHandle->wIntegralTerm > 0 )
 8006870:	2900      	cmp	r1, #0
 8006872:	ddde      	ble.n	8006832 <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8006874:	2a00      	cmp	r2, #0
 8006876:	dddc      	ble.n	8006832 <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006878:	68c2      	ldr	r2, [r0, #12]
 800687a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800687e:	428a      	cmp	r2, r1
 8006880:	d1dd      	bne.n	800683e <PI_Controller+0x32>
          wIntegral_sum_temp = INT32_MAX;
 8006882:	4614      	mov	r4, r2
 8006884:	4622      	mov	r2, r4
 8006886:	e7da      	b.n	800683e <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8006888:	4902      	ldr	r1, [pc, #8]	; (8006894 <PI_Controller+0x88>)
 800688a:	ea34 0422 	bics.w	r4, r4, r2, asr #32
 800688e:	bf28      	it	cs
 8006890:	460c      	movcs	r4, r1
 8006892:	e7ce      	b.n	8006832 <PI_Controller+0x26>
 8006894:	80000001 	.word	0x80000001

08006898 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8006898:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
{
 800689c:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800689e:	8b11      	ldrh	r1, [r2, #24]
 80068a0:	89d4      	ldrh	r4, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 80068a2:	8993      	ldrh	r3, [r2, #12]
 80068a4:	8ad2      	ldrh	r2, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80068a6:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
{
 80068aa:	4605      	mov	r5, r0
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 80068ac:	fb14 f401 	smulbb	r4, r4, r1
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80068b0:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 80068b4:	fb13 4402 	smlabb	r4, r3, r2, r4
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80068b8:	f7ff fe90 	bl	80065dc <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 80068bc:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80068be:	490f      	ldr	r1, [pc, #60]	; (80068fc <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80068c0:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 80068c4:	bfb8      	it	lt
 80068c6:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80068ca:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 80068ce:	bfb8      	it	lt
 80068d0:	33ff      	addlt	r3, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80068d2:	fb81 1000 	smull	r1, r0, r1, r0
 80068d6:	ebc2 10a0 	rsb	r0, r2, r0, asr #6
  wAux /= 65536;
 80068da:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 80068dc:	fb00 f303 	mul.w	r3, r0, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 80068e0:	4907      	ldr	r1, [pc, #28]	; (8006900 <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 80068e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80068e6:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 80068e8:	fb81 2103 	smull	r2, r1, r1, r3
 80068ec:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 80068ee:	4628      	mov	r0, r5
 80068f0:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 80068f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 80068f8:	f7ff beee 	b.w	80066d8 <MPM_CalcElMotorPower>
 80068fc:	1b4e81b5 	.word	0x1b4e81b5
 8006900:	66666667 	.word	0x66666667

08006904 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 8006904:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8006906:	4b18      	ldr	r3, [pc, #96]	; (8006968 <startTimers+0x64>)
 8006908:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800690a:	07d2      	lsls	r2, r2, #31
 800690c:	b082      	sub	sp, #8
 800690e:	d415      	bmi.n	800693c <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006910:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006918:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800691a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800691e:	f002 0201 	and.w	r2, r2, #1
 8006922:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8006924:	9a01      	ldr	r2, [sp, #4]
 8006926:	694a      	ldr	r2, [r1, #20]
 8006928:	f042 0201 	orr.w	r2, r2, #1
 800692c:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800692e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006930:	f022 0201 	bic.w	r2, r2, #1
 8006934:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8006936:	b002      	add	sp, #8
 8006938:	bc30      	pop	{r4, r5}
 800693a:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 800693c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006940:	4c0a      	ldr	r4, [pc, #40]	; (800696c <startTimers+0x68>)
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	6859      	ldr	r1, [r3, #4]
 8006946:	4d0a      	ldr	r5, [pc, #40]	; (8006970 <startTimers+0x6c>)
 8006948:	4021      	ands	r1, r4
 800694a:	f041 0120 	orr.w	r1, r1, #32
 800694e:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006950:	6958      	ldr	r0, [r3, #20]
 8006952:	f040 0001 	orr.w	r0, r0, #1
 8006956:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006958:	6859      	ldr	r1, [r3, #4]
 800695a:	402a      	ands	r2, r5
 800695c:	4021      	ands	r1, r4
 800695e:	430a      	orrs	r2, r1
 8006960:	605a      	str	r2, [r3, #4]
}
 8006962:	b002      	add	sp, #8
 8006964:	bc30      	pop	{r4, r5}
 8006966:	4770      	bx	lr
 8006968:	40021000 	.word	0x40021000
 800696c:	fdffff8f 	.word	0xfdffff8f
 8006970:	02000070 	.word	0x02000070

08006974 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8006974:	b570      	push	{r4, r5, r6, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8006976:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 8006978:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 800697c:	d11c      	bne.n	80069b8 <waitForPolarizationEnd+0x44>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800697e:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8006980:	3201      	adds	r2, #1
 8006982:	0855      	lsrs	r5, r2, #1
 8006984:	016d      	lsls	r5, r5, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006986:	f06f 0602 	mvn.w	r6, #2
 800698a:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 800698c:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 800698e:	f893 c000 	ldrb.w	ip, [r3]
 8006992:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8006996:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 800699a:	d80c      	bhi.n	80069b6 <waitForPolarizationEnd+0x42>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800699c:	6904      	ldr	r4, [r0, #16]
 800699e:	07a4      	lsls	r4, r4, #30
 80069a0:	d5f5      	bpl.n	800698e <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 80069a2:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80069a6:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80069a8:	6106      	str	r6, [r0, #16]
 80069aa:	d8f0      	bhi.n	800698e <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 80069ac:	781c      	ldrb	r4, [r3, #0]
 80069ae:	2c0f      	cmp	r4, #15
 80069b0:	d8ed      	bhi.n	800698e <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 80069b2:	2301      	movs	r3, #1
 80069b4:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 80069b6:	bd70      	pop	{r4, r5, r6, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 80069b8:	2c60      	cmp	r4, #96	; 0x60
 80069ba:	d1e1      	bne.n	8006980 <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 80069bc:	3201      	adds	r2, #1
 80069be:	0155      	lsls	r5, r2, #5
 80069c0:	e7e1      	b.n	8006986 <waitForPolarizationEnd+0x12>
 80069c2:	bf00      	nop

080069c4 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 80069c4:	6843      	ldr	r3, [r0, #4]
 80069c6:	4718      	bx	r3

080069c8 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 80069c8:	b510      	push	{r4, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80069ca:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80069ce:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 80069d0:	b082      	sub	sp, #8
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80069d2:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 80069d6:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80069d8:	fb04 fc0c 	mul.w	ip, r4, ip
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80069dc:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80069de:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80069e2:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 80069e6:	eb01 034c 	add.w	r3, r1, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 80069ea:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 80069ee:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 80069f2:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80069fa:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 80069fe:	ea4f 0e6e 	mov.w	lr, lr, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006a02:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8006a06:	db7d      	blt.n	8006b04 <PWMC_SetPhaseVoltage+0x13c>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8006a08:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006a0c:	db51      	blt.n	8006ab2 <PWMC_SetPhaseVoltage+0xea>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006a0e:	ebbe 0e02 	subs.w	lr, lr, r2
 8006a12:	bf44      	itt	mi
 8006a14:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8006a18:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	bfbc      	itt	lt
 8006a20:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8006a24:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	bfb8      	it	lt
 8006a2c:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006a30:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8006a34:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006a38:	bfb8      	it	lt
 8006a3a:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8006a3e:	f04f 0c01 	mov.w	ip, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8006a42:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006a46:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8006a4a:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
 8006a4e:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8006a50:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 8006a52:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8006a56:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8006a5a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8006a5e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8006a62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006a66:	b292      	uxth	r2, r2
 8006a68:	b289      	uxth	r1, r1
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8006a6e:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8006a70:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8006a72:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8006a74:	d118      	bne.n	8006aa8 <PWMC_SetPhaseVoltage+0xe0>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8006a76:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
 8006a7a:	2c00      	cmp	r4, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8006a7c:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8006a80:	bfcc      	ite	gt
 8006a82:	1912      	addgt	r2, r2, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8006a84:	1b12      	suble	r2, r2, r4
 8006a86:	b292      	uxth	r2, r2
 8006a88:	8642      	strh	r2, [r0, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 8006a8a:	f9b0 204a 	ldrsh.w	r2, [r0, #74]	; 0x4a
 8006a8e:	2a00      	cmp	r2, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8006a90:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 8006a94:	bfcc      	ite	gt
 8006a96:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006a98:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8006a9a:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006a9c:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8006a9e:	bfcc      	ite	gt
 8006aa0:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8006aa2:	1b1b      	suble	r3, r3, r4
 8006aa4:	8681      	strh	r1, [r0, #52]	; 0x34
 8006aa6:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006aa8:	6983      	ldr	r3, [r0, #24]
}
 8006aaa:	b002      	add	sp, #8
 8006aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006ab0:	4718      	bx	r3
      if ( wX <= 0 )
 8006ab2:	f1bc 0f00 	cmp.w	ip, #0
 8006ab6:	dd4b      	ble.n	8006b50 <PWMC_SetPhaseVoltage+0x188>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006ab8:	ebbc 0e02 	subs.w	lr, ip, r2
 8006abc:	bf44      	itt	mi
 8006abe:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8006ac2:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8006ac6:	2900      	cmp	r1, #0
 8006ac8:	bfb8      	it	lt
 8006aca:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8006ace:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8006ad2:	bfb8      	it	lt
 8006ad4:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8006ad8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006adc:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 8006ade:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006ae2:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006ae6:	bfb8      	it	lt
 8006ae8:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006aec:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006af0:	bfb8      	it	lt
 8006af2:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8006af6:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 8006afa:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8006afc:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8006afe:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8006b02:	e7a8      	b.n	8006a56 <PWMC_SetPhaseVoltage+0x8e>
    if ( wZ < 0 )
 8006b04:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006b08:	db6f      	blt.n	8006bea <PWMC_SetPhaseVoltage+0x222>
      if ( wX <= 0 )
 8006b0a:	f1bc 0f00 	cmp.w	ip, #0
 8006b0e:	dd46      	ble.n	8006b9e <PWMC_SetPhaseVoltage+0x1d6>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006b10:	ebbe 0e0c 	subs.w	lr, lr, ip
 8006b14:	bf48      	it	mi
 8006b16:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8006b1a:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006b1e:	bf48      	it	mi
 8006b20:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	bfb8      	it	lt
 8006b28:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8006b2c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006b30:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8006b34:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8006b38:	bfb8      	it	lt
 8006b3a:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8006b3e:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006b42:	eb03 416c 	add.w	r1, r3, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 8006b46:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8006b48:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8006b4a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8006b4e:	e782      	b.n	8006a56 <PWMC_SetPhaseVoltage+0x8e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006b50:	ebbe 0e0c 	subs.w	lr, lr, ip
 8006b54:	bf44      	itt	mi
 8006b56:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8006b5a:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	bfb8      	it	lt
 8006b62:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8006b66:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8006b6a:	bfb8      	it	lt
 8006b6c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8006b70:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8006b74:	f1bc 0100 	subs.w	r1, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006b78:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8006b7c:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006b80:	bfb8      	it	lt
 8006b82:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8006b86:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006b8a:	bfb8      	it	lt
 8006b8c:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8006b90:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->lowDuty = wTimePhA;
 8006b94:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8006b96:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 8006b98:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8006b9c:	e75b      	b.n	8006a56 <PWMC_SetPhaseVoltage+0x8e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006b9e:	ebbc 0e02 	subs.w	lr, ip, r2
 8006ba2:	bf44      	itt	mi
 8006ba4:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8006ba8:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8006bac:	2900      	cmp	r1, #0
 8006bae:	bfb8      	it	lt
 8006bb0:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8006bb4:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8006bb8:	bfb8      	it	lt
 8006bba:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8006bbe:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006bc2:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 8006bc4:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006bc8:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006bcc:	bfb8      	it	lt
 8006bce:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006bd2:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006bd6:	bfb8      	it	lt
 8006bd8:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8006bdc:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 8006be0:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8006be2:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8006be4:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8006be8:	e735      	b.n	8006a56 <PWMC_SetPhaseVoltage+0x8e>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006bea:	ebbe 0e02 	subs.w	lr, lr, r2
 8006bee:	bf44      	itt	mi
 8006bf0:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8006bf4:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006bf8:	2900      	cmp	r1, #0
 8006bfa:	bfbc      	itt	lt
 8006bfc:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8006c00:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	bfb8      	it	lt
 8006c08:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006c0c:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8006c10:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006c14:	bfb8      	it	lt
 8006c16:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8006c1a:	f04f 0c04 	mov.w	ip, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8006c1e:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006c22:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8006c26:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8006c2a:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8006c2c:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8006c2e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8006c32:	e710      	b.n	8006a56 <PWMC_SetPhaseVoltage+0x8e>

08006c34 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8006c34:	6883      	ldr	r3, [r0, #8]
 8006c36:	4718      	bx	r3

08006c38 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8006c38:	b510      	push	{r4, lr}
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8006c3e:	b199      	cbz	r1, 8006c68 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8006c40:	2901      	cmp	r1, #1
 8006c42:	d002      	beq.n	8006c4a <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8006c44:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8006c46:	b002      	add	sp, #8
 8006c48:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8006c4a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006c4e:	b1cb      	cbz	r3, 8006c84 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8006c50:	3b01      	subs	r3, #1
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	9101      	str	r1, [sp, #4]
 8006c56:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1f2      	bne.n	8006c44 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8006c5e:	6903      	ldr	r3, [r0, #16]
 8006c60:	4798      	blx	r3
        retVal = true;
 8006c62:	9901      	ldr	r1, [sp, #4]
 8006c64:	4608      	mov	r0, r1
 8006c66:	e7ee      	b.n	8006c46 <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8006c68:	f7ff ffe4 	bl	8006c34 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8006c6c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006c70:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e5      	bne.n	8006c44 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8006c78:	4620      	mov	r0, r4
 8006c7a:	6923      	ldr	r3, [r4, #16]
 8006c7c:	4798      	blx	r3
      retVal = true;
 8006c7e:	2001      	movs	r0, #1
}
 8006c80:	b002      	add	sp, #8
 8006c82:	bd10      	pop	{r4, pc}
      retVal = true;
 8006c84:	4608      	mov	r0, r1
}
 8006c86:	b002      	add	sp, #8
 8006c88:	bd10      	pop	{r4, pc}
 8006c8a:	bf00      	nop

08006c8c <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8006c8c:	69c3      	ldr	r3, [r0, #28]
 8006c8e:	4718      	bx	r3

08006c90 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006c90:	6883      	ldr	r3, [r0, #8]
 8006c92:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006c96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c9a:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006c9c:	6883      	ldr	r3, [r0, #8]
 8006c9e:	00d9      	lsls	r1, r3, #3
    R3_2_TIMxInit( TIMx, &pHandle->_Super );
  }
}

static void R3_2_ADCxInit( ADC_TypeDef * ADCx )
{
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	d418      	bmi.n	8006cd6 <R3_2_ADCxInit+0x46>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 8006ca4:	4b24      	ldr	r3, [pc, #144]	; (8006d38 <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 8006ca6:	6882      	ldr	r2, [r0, #8]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4924      	ldr	r1, [pc, #144]	; (8006d3c <R3_2_ADCxInit+0xac>)
 8006cac:	099b      	lsrs	r3, r3, #6
 8006cae:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8006cb2:	fba1 1303 	umull	r1, r3, r1, r3
 8006cb6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006cba:	099b      	lsrs	r3, r3, #6
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006cc2:	6082      	str	r2, [r0, #8]
 8006cc4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8006cc6:	9b01      	ldr	r3, [sp, #4]
 8006cc8:	b12b      	cbz	r3, 8006cd6 <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8006cca:	9b01      	ldr	r3, [sp, #4]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8006cd0:	9b01      	ldr	r3, [sp, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1f9      	bne.n	8006cca <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 8006cd6:	6883      	ldr	r3, [r0, #8]
 8006cd8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006cdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ce0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ce4:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006ce6:	6883      	ldr	r3, [r0, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	dbfc      	blt.n	8006ce6 <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006cec:	6803      	ldr	r3, [r0, #0]
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 8006cee:	07da      	lsls	r2, r3, #31
 8006cf0:	d408      	bmi.n	8006d04 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 8006cf2:	4a13      	ldr	r2, [pc, #76]	; (8006d40 <R3_2_ADCxInit+0xb0>)
 8006cf4:	6883      	ldr	r3, [r0, #8]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	f043 0301 	orr.w	r3, r3, #1
 8006cfc:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006cfe:	6803      	ldr	r3, [r0, #0]
 8006d00:	07db      	lsls	r3, r3, #31
 8006d02:	d5f7      	bpl.n	8006cf4 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8006d04:	6882      	ldr	r2, [r0, #8]
 8006d06:	490e      	ldr	r1, [pc, #56]	; (8006d40 <R3_2_ADCxInit+0xb0>)
 8006d08:	400a      	ands	r2, r1
 8006d0a:	f042 0208 	orr.w	r2, r2, #8
 8006d0e:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8006d10:	6882      	ldr	r2, [r0, #8]
 8006d12:	400a      	ands	r2, r1
 8006d14:	f042 0220 	orr.w	r2, r2, #32
 8006d18:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8006d1a:	68c3      	ldr	r3, [r0, #12]
 8006d1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d28:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 8006d2a:	6883      	ldr	r3, [r0, #8]
 8006d2c:	400b      	ands	r3, r1
 8006d2e:	f043 0304 	orr.w	r3, r3, #4
 8006d32:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
 }
 8006d34:	b002      	add	sp, #8
 8006d36:	4770      	bx	lr
 8006d38:	20000700 	.word	0x20000700
 8006d3c:	053e2d63 	.word	0x053e2d63
 8006d40:	7fffffc0 	.word	0x7fffffc0

08006d44 <R3_2_GetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006d44:	6f43      	ldr	r3, [r0, #116]	; 0x74
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 8006d46:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8006d4a:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006d4c:	689c      	ldr	r4, [r3, #8]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8006d4e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006d52:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8006d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8006d56:	682d      	ldr	r5, [r5, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8006d58:	681e      	ldr	r6, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006d5a:	6863      	ldr	r3, [r4, #4]
 8006d5c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d64:	6063      	str	r3, [r4, #4]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  switch ( Sector )
 8006d66:	2a05      	cmp	r2, #5
 8006d68:	f200 809f 	bhi.w	8006eaa <R3_2_GetPhaseCurrents+0x166>
 8006d6c:	e8df f002 	tbb	[pc, r2]
 8006d70:	031f1f38 	.word	0x031f1f38
 8006d74:	3803      	.short	0x3803
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8006d76:	6dc4      	ldr	r4, [r0, #92]	; 0x5c

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 8006d78:	4b4f      	ldr	r3, [pc, #316]	; (8006eb8 <R3_2_GetPhaseCurrents+0x174>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8006d7a:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8006d7c:	429c      	cmp	r4, r3
 8006d7e:	da54      	bge.n	8006e2a <R3_2_GetPhaseCurrents+0xe6>
      {
        Iab->a = -INT16_MAX;
      }
      else  if ( Aux > INT16_MAX )
      {
        Iab->a = INT16_MAX;
 8006d80:	800b      	strh	r3, [r1, #0]
      {
        Iab->a = ( int16_t )Aux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8006d82:	6e02      	ldr	r2, [r0, #96]	; 0x60

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 8006d84:	4d4c      	ldr	r5, [pc, #304]	; (8006eb8 <R3_2_GetPhaseCurrents+0x174>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8006d86:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 8006d88:	42aa      	cmp	r2, r5
 8006d8a:	da54      	bge.n	8006e36 <R3_2_GetPhaseCurrents+0xf2>

    default:
      break;
  }

  pHandle->_Super.Ia = Iab->a;
 8006d8c:	f9b1 c000 	ldrsh.w	ip, [r1]
        Iab->b = -INT16_MAX;
 8006d90:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006d92:	fa1f f38c 	uxth.w	r3, ip
 8006d96:	f248 0201 	movw	r2, #32769	; 0x8001
 8006d9a:	4413      	add	r3, r2
 8006d9c:	425b      	negs	r3, r3
  pHandle->_Super.Ib = Iab->b;
 8006d9e:	f8a0 504a 	strh.w	r5, [r0, #74]	; 0x4a
  pHandle->_Super.Ia = Iab->a;
 8006da2:	f8a0 c048 	strh.w	ip, [r0, #72]	; 0x48
}
 8006da6:	bc70      	pop	{r4, r5, r6}
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006da8:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8006dac:	4770      	bx	lr
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8006dae:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 8006db0:	4b41      	ldr	r3, [pc, #260]	; (8006eb8 <R3_2_GetPhaseCurrents+0x174>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8006db2:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8006db4:	429c      	cmp	r4, r3
 8006db6:	db32      	blt.n	8006e1e <R3_2_GetPhaseCurrents+0xda>
      else  if ( Aux > INT16_MAX )
 8006db8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8006dbc:	db69      	blt.n	8006e92 <R3_2_GetPhaseCurrents+0x14e>
        Iab->a = INT16_MAX;
 8006dbe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	800a      	strh	r2, [r1, #0]
 8006dc6:	4614      	mov	r4, r2
 8006dc8:	4694      	mov	ip, r2
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8006dca:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006dcc:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 8006dce:	1b12      	subs	r2, r2, r4
      if ( Aux > INT16_MAX )
 8006dd0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006dd4:	db44      	blt.n	8006e60 <R3_2_GetPhaseCurrents+0x11c>
        Iab->b = INT16_MAX;
 8006dd6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006dda:	804a      	strh	r2, [r1, #2]
 8006ddc:	4615      	mov	r5, r2
 8006dde:	e7dc      	b.n	8006d9a <R3_2_GetPhaseCurrents+0x56>
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8006de0:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 8006de2:	4b35      	ldr	r3, [pc, #212]	; (8006eb8 <R3_2_GetPhaseCurrents+0x174>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8006de4:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8006de6:	429c      	cmp	r4, r3
 8006de8:	db13      	blt.n	8006e12 <R3_2_GetPhaseCurrents+0xce>
      else  if ( Aux > INT16_MAX )
 8006dea:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8006dee:	db44      	blt.n	8006e7a <R3_2_GetPhaseCurrents+0x136>
        Iab->b = INT16_MAX;
 8006df0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006df4:	461a      	mov	r2, r3
 8006df6:	804b      	strh	r3, [r1, #2]
 8006df8:	461c      	mov	r4, r3
 8006dfa:	461d      	mov	r5, r3
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8006dfc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006dfe:	1af3      	subs	r3, r6, r3
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 8006e00:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 8006e02:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8006e06:	db23      	blt.n	8006e50 <R3_2_GetPhaseCurrents+0x10c>
        Iab->a = INT16_MAX;
 8006e08:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006e0c:	800b      	strh	r3, [r1, #0]
 8006e0e:	469c      	mov	ip, r3
 8006e10:	e7c3      	b.n	8006d9a <R3_2_GetPhaseCurrents+0x56>
        Iab->b = -INT16_MAX;
 8006e12:	804b      	strh	r3, [r1, #2]
 8006e14:	461c      	mov	r4, r3
 8006e16:	f248 0201 	movw	r2, #32769	; 0x8001
 8006e1a:	461d      	mov	r5, r3
 8006e1c:	e7ee      	b.n	8006dfc <R3_2_GetPhaseCurrents+0xb8>
        Iab->a = -INT16_MAX;
 8006e1e:	461c      	mov	r4, r3
 8006e20:	800b      	strh	r3, [r1, #0]
 8006e22:	46a4      	mov	ip, r4
 8006e24:	f248 0301 	movw	r3, #32769	; 0x8001
 8006e28:	e7cf      	b.n	8006dca <R3_2_GetPhaseCurrents+0x86>
      else  if ( Aux > INT16_MAX )
 8006e2a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8006e2e:	db1e      	blt.n	8006e6e <R3_2_GetPhaseCurrents+0x12a>
        Iab->a = INT16_MAX;
 8006e30:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006e34:	e7a4      	b.n	8006d80 <R3_2_GetPhaseCurrents+0x3c>
      else  if ( Aux > INT16_MAX )
 8006e36:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006e3a:	db22      	blt.n	8006e82 <R3_2_GetPhaseCurrents+0x13e>
        Iab->b = INT16_MAX;
 8006e3c:	f647 73ff 	movw	r3, #32767	; 0x7fff
  pHandle->_Super.Ia = Iab->a;
 8006e40:	f9b1 c000 	ldrsh.w	ip, [r1]
        Iab->b = INT16_MAX;
 8006e44:	804b      	strh	r3, [r1, #2]
 8006e46:	461a      	mov	r2, r3
 8006e48:	4615      	mov	r5, r2
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006e4a:	fa1f f38c 	uxth.w	r3, ip
 8006e4e:	e7a4      	b.n	8006d9a <R3_2_GetPhaseCurrents+0x56>
      else  if ( Aux < -INT16_MAX )
 8006e50:	4e19      	ldr	r6, [pc, #100]	; (8006eb8 <R3_2_GetPhaseCurrents+0x174>)
 8006e52:	42b4      	cmp	r4, r6
 8006e54:	da23      	bge.n	8006e9e <R3_2_GetPhaseCurrents+0x15a>
        Iab->a = -INT16_MAX;
 8006e56:	800e      	strh	r6, [r1, #0]
 8006e58:	f248 0301 	movw	r3, #32769	; 0x8001
 8006e5c:	46b4      	mov	ip, r6
 8006e5e:	e79c      	b.n	8006d9a <R3_2_GetPhaseCurrents+0x56>
      else  if ( Aux < -INT16_MAX )
 8006e60:	4d15      	ldr	r5, [pc, #84]	; (8006eb8 <R3_2_GetPhaseCurrents+0x174>)
 8006e62:	42aa      	cmp	r2, r5
 8006e64:	da05      	bge.n	8006e72 <R3_2_GetPhaseCurrents+0x12e>
        Iab->b = -INT16_MAX;
 8006e66:	804d      	strh	r5, [r1, #2]
 8006e68:	f248 0201 	movw	r2, #32769	; 0x8001
 8006e6c:	e795      	b.n	8006d9a <R3_2_GetPhaseCurrents+0x56>
        Iab->a = ( int16_t )Aux;
 8006e6e:	800c      	strh	r4, [r1, #0]
 8006e70:	e787      	b.n	8006d82 <R3_2_GetPhaseCurrents+0x3e>
        Iab->b = ( int16_t )Aux;
 8006e72:	b215      	sxth	r5, r2
 8006e74:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006e76:	b292      	uxth	r2, r2
 8006e78:	e78f      	b.n	8006d9a <R3_2_GetPhaseCurrents+0x56>
        Iab->b = ( int16_t )Aux;
 8006e7a:	b225      	sxth	r5, r4
 8006e7c:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006e7e:	b2a2      	uxth	r2, r4
 8006e80:	e7bc      	b.n	8006dfc <R3_2_GetPhaseCurrents+0xb8>
  pHandle->_Super.Ia = Iab->a;
 8006e82:	f9b1 c000 	ldrsh.w	ip, [r1]
        Iab->b = ( int16_t )Aux;
 8006e86:	b215      	sxth	r5, r2
 8006e88:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006e8a:	fa1f f38c 	uxth.w	r3, ip
 8006e8e:	b292      	uxth	r2, r2
 8006e90:	e783      	b.n	8006d9a <R3_2_GetPhaseCurrents+0x56>
        Iab->a = ( int16_t )Aux;
 8006e92:	fa0f fc84 	sxth.w	ip, r4
 8006e96:	f8a1 c000 	strh.w	ip, [r1]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006e9a:	b2a3      	uxth	r3, r4
 8006e9c:	e795      	b.n	8006dca <R3_2_GetPhaseCurrents+0x86>
        Iab->a = ( int16_t )Aux;
 8006e9e:	fa0f fc84 	sxth.w	ip, r4
 8006ea2:	f8a1 c000 	strh.w	ip, [r1]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006ea6:	b2a3      	uxth	r3, r4
 8006ea8:	e777      	b.n	8006d9a <R3_2_GetPhaseCurrents+0x56>
  pHandle->_Super.Ia = Iab->a;
 8006eaa:	f9b1 c000 	ldrsh.w	ip, [r1]
  pHandle->_Super.Ib = Iab->b;
 8006eae:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006eb2:	880b      	ldrh	r3, [r1, #0]
 8006eb4:	884a      	ldrh	r2, [r1, #2]
 8006eb6:	e770      	b.n	8006d9a <R3_2_GetPhaseCurrents+0x56>
 8006eb8:	ffff8001 	.word	0xffff8001

08006ebc <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 8006ebc:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006ebe:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8006ec0:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 8006ec4:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8006ec8:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006ecc:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8006ece:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006ed0:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8006ed2:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8006ed4:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8006ed6:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006ed8:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8006eda:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006edc:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006ede:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8006ee0:	4904      	ldr	r1, [pc, #16]	; (8006ef4 <R3_2_SetADCSampPointPolarization+0x38>)
 8006ee2:	685b      	ldr	r3, [r3, #4]
}
 8006ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8006ee8:	420b      	tst	r3, r1
}
 8006eea:	bf14      	ite	ne
 8006eec:	2001      	movne	r0, #1
 8006eee:	2000      	moveq	r0, #0
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	02000070 	.word	0x02000070

08006ef8 <R3_2_SetADCSampPointSectX>:
{
 8006ef8:	b530      	push	{r4, r5, lr}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 8006efa:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8006efc:	f8b0 e068 	ldrh.w	lr, [r0, #104]	; 0x68
 8006f00:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8006f02:	ebae 0203 	sub.w	r2, lr, r3
 8006f06:	f8b1 40b2 	ldrh.w	r4, [r1, #178]	; 0xb2
 8006f0a:	b292      	uxth	r2, r2
 8006f0c:	42a2      	cmp	r2, r4
 8006f0e:	d914      	bls.n	8006f3a <R3_2_SetADCSampPointSectX+0x42>
    pHandle->_Super.Sector = SECTOR_5;
 8006f10:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8006f12:	f10e 33ff 	add.w	r3, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 8006f16:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8006f1a:	b29b      	uxth	r3, r3
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006f1c:	688a      	ldr	r2, [r1, #8]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8006f1e:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8006f20:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8006f22:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006f24:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006f26:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006f28:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006f2a:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8006f2c:	6852      	ldr	r2, [r2, #4]
 8006f2e:	4b10      	ldr	r3, [pc, #64]	; (8006f70 <R3_2_SetADCSampPointSectX+0x78>)
 8006f30:	421a      	tst	r2, r3
}
 8006f32:	bf14      	ite	ne
 8006f34:	2001      	movne	r0, #1
 8006f36:	2000      	moveq	r0, #0
 8006f38:	bd30      	pop	{r4, r5, pc}
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 8006f3a:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8006f3e:	eba3 0c0c 	sub.w	ip, r3, ip
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 8006f42:	fa1f fc8c 	uxth.w	ip, ip
 8006f46:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8006f4a:	d904      	bls.n	8006f56 <R3_2_SetADCSampPointSectX+0x5e>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8006f4c:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	; 0xb4
 8006f50:	1a9b      	subs	r3, r3, r2
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	e7e2      	b.n	8006f1c <R3_2_SetADCSampPointSectX+0x24>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8006f56:	4423      	add	r3, r4
 8006f58:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 8006f5a:	459e      	cmp	lr, r3
 8006f5c:	d8de      	bhi.n	8006f1c <R3_2_SetADCSampPointSectX+0x24>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8006f5e:	43db      	mvns	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8006f60:	f44f 7280 	mov.w	r2, #256	; 0x100
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8006f64:	eb03 034e 	add.w	r3, r3, lr, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8006f68:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	e7d5      	b.n	8006f1c <R3_2_SetADCSampPointSectX+0x24>
 8006f70:	02000070 	.word	0x02000070

08006f74 <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 8006f74:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006f76:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006f78:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 8006f7c:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8006f7e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006f82:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8006f84:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8006f86:	6824      	ldr	r4, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8006f88:	682d      	ldr	r5, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006f8a:	6853      	ldr	r3, [r2, #4]
 8006f8c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f94:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006f96:	f890 c06c 	ldrb.w	ip, [r0, #108]	; 0x6c
 8006f9a:	f1bc 0f0f 	cmp.w	ip, #15
 8006f9e:	d80b      	bhi.n	8006fb8 <R3_2_HFCurrentsPolarizationAB+0x44>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
 8006fa0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    pHandle-> PhaseBOffset += ADCDataReg2;
 8006fa2:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle-> PhaseAOffset += ADCDataReg1;
 8006fa4:	441c      	add	r4, r3
    pHandle->PolarizationCounter++;
 8006fa6:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseBOffset += ADCDataReg2;
 8006faa:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 8006fac:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 8006fae:	e9c0 4217 	strd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8006fb8:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8006fba:	bc30      	pop	{r4, r5}
  Iab->a = 0;
 8006fbc:	600b      	str	r3, [r1, #0]
}
 8006fbe:	4770      	bx	lr

08006fc0 <R3_2_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006fc0:	6f43      	ldr	r3, [r0, #116]	; 0x74
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8006fc2:	f890 c06d 	ldrb.w	ip, [r0, #109]	; 0x6d
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006fc6:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8006fc8:	eb03 038c 	add.w	r3, r3, ip, lsl #2
{
 8006fcc:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8006fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fd0:	681c      	ldr	r4, [r3, #0]
 8006fd2:	6853      	ldr	r3, [r2, #4]
 8006fd4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fdc:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006fde:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8006fe2:	2b0f      	cmp	r3, #15
 8006fe4:	d808      	bhi.n	8006ff8 <R3_2_HFCurrentsPolarizationC+0x38>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 8006fe6:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8006fea:	6e42      	ldr	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 8006fec:	3301      	adds	r3, #1
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8006fee:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8006ff0:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8006ff2:	6642      	str	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 8006ff4:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8006ff8:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8006ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 8006ffe:	600b      	str	r3, [r1, #0]
}
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop

08007004 <R3_2_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007004:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = true;
 8007006:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800700a:	688a      	ldr	r2, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800700c:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007010:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007012:	f06f 0001 	mvn.w	r0, #1
 8007016:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007018:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800701a:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800701c:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800701e:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8007020:	07db      	lsls	r3, r3, #31
 8007022:	d5fc      	bpl.n	800701e <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007024:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8007026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800702a:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800702c:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 8007030:	2b02      	cmp	r3, #2
 8007032:	d000      	beq.n	8007036 <R3_2_TurnOnLowSides+0x32>
 8007034:	4770      	bx	lr
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007036:	e9d1 2008 	ldrd	r2, r0, [r1, #32]
{
 800703a:	b410      	push	{r4}
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800703c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800703e:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007042:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007044:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007048:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 800704c:	6184      	str	r4, [r0, #24]
  }
  return;
}
 800704e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007052:	619a      	str	r2, [r3, #24]
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop

08007058 <R3_2_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007058:	6f41      	ldr	r1, [r0, #116]	; 0x74
  pHandle->ADCRegularLocked=true; 

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800705a:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800705e:	688b      	ldr	r3, [r1, #8]
  pHandle->ADCRegularLocked=true; 
 8007060:	f04f 0c01 	mov.w	ip, #1
{
 8007064:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked=true; 
 8007066:	f880 c078 	strb.w	ip, [r0, #120]	; 0x78
  pHandle->_Super.TurnOnLowSidesAction = false;
 800706a:	f04f 0c00 	mov.w	ip, #0
 800706e:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8007072:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007074:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 8007076:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007078:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800707a:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800707c:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007080:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007082:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007084:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8007086:	07d2      	lsls	r2, r2, #31
 8007088:	d5fc      	bpl.n	8007084 <R3_2_SwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800708a:	f06f 0201 	mvn.w	r2, #1
 800708e:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007092:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007096:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800709a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800709e:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80070a0:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 80070a4:	2a02      	cmp	r2, #2
 80070a6:	d008      	beq.n	80070ba <R3_2_SwitchOnPWM+0x62>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80070a8:	f06f 0201 	mvn.w	r2, #1
 80070ac:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 80070b4:	bc30      	pop	{r4, r5}
 80070b6:	60da      	str	r2, [r3, #12]
 80070b8:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80070ba:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80070bc:	6a0c      	ldr	r4, [r1, #32]
 80070be:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80070c2:	f240 5255 	movw	r2, #1365	; 0x555
 80070c6:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80070c8:	e9d1 0209 	ldrd	r0, r2, [r1, #36]	; 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80070cc:	d007      	beq.n	80070de <R3_2_SwitchOnPWM+0x86>
 80070ce:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80070d0:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80070d4:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 80070d8:	6184      	str	r4, [r0, #24]
 80070da:	6191      	str	r1, [r2, #24]
}
 80070dc:	e7e4      	b.n	80070a8 <R3_2_SwitchOnPWM+0x50>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80070de:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80070e0:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80070e4:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 80070e8:	6284      	str	r4, [r0, #40]	; 0x28
 80070ea:	6291      	str	r1, [r2, #40]	; 0x28
}
 80070ec:	e7dc      	b.n	80070a8 <R3_2_SwitchOnPWM+0x50>
 80070ee:	bf00      	nop

080070f0 <R3_2_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80070f0:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80070f2:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80070f4:	68d3      	ldr	r3, [r2, #12]
 80070f6:	f023 0301 	bic.w	r3, r3, #1
 80070fa:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80070fc:	6c53      	ldr	r3, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 80070fe:	f04f 0c00 	mov.w	ip, #0
 8007102:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007106:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
 800710a:	6453      	str	r3, [r2, #68]	; 0x44
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 800710c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8007110:	b91b      	cbnz	r3, 800711a <R3_2_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007112:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 8007116:	2b02      	cmp	r3, #2
 8007118:	d00c      	beq.n	8007134 <R3_2_SwitchOffPWM+0x44>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800711a:	f06f 0301 	mvn.w	r3, #1
 800711e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007120:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8007122:	07db      	lsls	r3, r3, #31
 8007124:	d5fc      	bpl.n	8007120 <R3_2_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007126:	f06f 0101 	mvn.w	r1, #1
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 800712a:	2300      	movs	r3, #0
 800712c:	6111      	str	r1, [r2, #16]
 800712e:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
 8007132:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007134:	6a0b      	ldr	r3, [r1, #32]
{
 8007136:	b410      	push	{r4}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007138:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 800713c:	629c      	str	r4, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800713e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8007140:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
 8007144:	629c      	str	r4, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007146:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007148:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 800714c:	6299      	str	r1, [r3, #40]	; 0x28
 800714e:	f06f 0301 	mvn.w	r3, #1
 8007152:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007154:	6913      	ldr	r3, [r2, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8007156:	07d9      	lsls	r1, r3, #31
 8007158:	d5fc      	bpl.n	8007154 <R3_2_SwitchOffPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800715a:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked=false; 
 800715e:	2300      	movs	r3, #0
 8007160:	6111      	str	r1, [r2, #16]
}
 8007162:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->ADCRegularLocked=false; 
 8007166:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
}
 800716a:	4770      	bx	lr

0800716c <R3_2_RLGetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800716c:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 800716e:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007170:	6894      	ldr	r4, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007172:	6863      	ldr	r3, [r4, #4]
 8007174:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717c:	6063      	str	r3, [r4, #4]
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 800717e:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8007182:	6e03      	ldr	r3, [r0, #96]	; 0x60
  
  /* Check saturation */
  if ( wAux > -INT16_MAX )
 8007184:	480d      	ldr	r0, [pc, #52]	; (80071bc <R3_2_RLGetPhaseCurrents+0x50>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8007186:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800718a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800718c:	6812      	ldr	r2, [r2, #0]
 800718e:	1a9b      	subs	r3, r3, r2
  if ( wAux > -INT16_MAX )
 8007190:	4283      	cmp	r3, r0
 8007192:	db05      	blt.n	80071a0 <R3_2_RLGetPhaseCurrents+0x34>
  {
    if ( wAux < INT16_MAX )
 8007194:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007198:	4293      	cmp	r3, r2
 800719a:	dc0b      	bgt.n	80071b4 <R3_2_RLGetPhaseCurrents+0x48>
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 800719c:	b21b      	sxth	r3, r3
 800719e:	e000      	b.n	80071a2 <R3_2_RLGetPhaseCurrents+0x36>
 80071a0:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <R3_2_RLGetPhaseCurrents+0x54>)
  pStator_Currents->b = (int16_t)wAux;
}
 80071a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = (int16_t)wAux;
 80071a6:	2200      	movs	r2, #0
 80071a8:	f363 020f 	bfi	r2, r3, #0, #16
 80071ac:	f363 421f 	bfi	r2, r3, #16, #16
 80071b0:	600a      	str	r2, [r1, #0]
}
 80071b2:	4770      	bx	lr
 80071b4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80071b8:	e7f3      	b.n	80071a2 <R3_2_RLGetPhaseCurrents+0x36>
 80071ba:	bf00      	nop
 80071bc:	ffff8002 	.word	0xffff8002
 80071c0:	ffff8001 	.word	0xffff8001

080071c4 <R3_2_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80071c4:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->ADCRegularLocked=true;
 80071c6:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80071c8:	688a      	ldr	r2, [r1, #8]
{
 80071ca:	b410      	push	{r4}
  pHandle->ADCRegularLocked=true;
 80071cc:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
  WRITE_REG(TIMx->CCR1, CompareValue);
 80071d0:	2400      	movs	r4, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80071d2:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80071d6:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80071d8:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80071da:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80071dc:	07db      	lsls	r3, r3, #31
 80071de:	d5fc      	bpl.n	80071da <R3_2_RLTurnOnLowSides+0x16>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80071e0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80071e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e6:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80071e8:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d10b      	bne.n	8007208 <R3_2_RLTurnOnLowSides+0x44>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80071f0:	e9d1 2008 	ldrd	r2, r0, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80071f4:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80071f8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80071fa:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80071fc:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007200:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 8007204:	6284      	str	r4, [r0, #40]	; 0x28
 8007206:	629a      	str	r2, [r3, #40]	; 0x28
  }
  return;
}
 8007208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop

08007210 <R3_2_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007210:	6f41      	ldr	r1, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;

  pHandle->ADCRegularLocked=true;
 8007212:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007214:	688b      	ldr	r3, [r1, #8]
{
 8007216:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007218:	e9d1 5400 	ldrd	r5, r4, [r1]
  pHandle->ADCRegularLocked=true;
 800721c:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007220:	f06f 0201 	mvn.w	r2, #1
 8007224:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007226:	691a      	ldr	r2, [r3, #16]
  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8007228:	07d6      	lsls	r6, r2, #31
 800722a:	d5fc      	bpl.n	8007226 <R3_2_RLSwitchOnPWM+0x16>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 800722c:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007230:	f06f 0601 	mvn.w	r6, #1
 8007234:	611e      	str	r6, [r3, #16]
 8007236:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007238:	2601      	movs	r6, #1
 800723a:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 800723c:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800723e:	691a      	ldr	r2, [r3, #16]

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8007240:	07d2      	lsls	r2, r2, #31
 8007242:	d5fc      	bpl.n	800723e <R3_2_RLSwitchOnPWM+0x2e>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007244:	68da      	ldr	r2, [r3, #12]
 8007246:	f042 0201 	orr.w	r2, r2, #1
 800724a:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800724c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800724e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007252:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800725a:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800725c:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 8007260:	2a02      	cmp	r2, #2
 8007262:	d00f      	beq.n	8007284 <R3_2_RLSwitchOnPWM+0x74>
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 8007264:	2303      	movs	r3, #3
 8007266:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  MODIFY_REG(ADCx->CR,
 800726a:	68aa      	ldr	r2, [r5, #8]
 800726c:	4912      	ldr	r1, [pc, #72]	; (80072b8 <R3_2_RLSwitchOnPWM+0xa8>)
 800726e:	400a      	ands	r2, r1
 8007270:	f042 0208 	orr.w	r2, r2, #8
 8007274:	60aa      	str	r2, [r5, #8]
 8007276:	68a3      	ldr	r3, [r4, #8]
 8007278:	400b      	ands	r3, r1
 800727a:	f043 0308 	orr.w	r3, r3, #8
 800727e:	60a3      	str	r3, [r4, #8]

  LL_ADC_INJ_StartConversion( ADCx_1 );
  LL_ADC_INJ_StartConversion( ADCx_2 );

  return;
}
 8007280:	bcf0      	pop	{r4, r5, r6, r7}
 8007282:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007284:	6a1a      	ldr	r2, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007286:	6a0e      	ldr	r6, [r1, #32]
 8007288:	f8b1 70ac 	ldrh.w	r7, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800728c:	f240 5355 	movw	r3, #1365	; 0x555
 8007290:	421a      	tst	r2, r3
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007292:	e9d1 2309 	ldrd	r2, r3, [r1, #36]	; 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007296:	d007      	beq.n	80072a8 <R3_2_RLSwitchOnPWM+0x98>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007298:	61b7      	str	r7, [r6, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800729a:	f8b1 60ae 	ldrh.w	r6, [r1, #174]	; 0xae
 800729e:	6196      	str	r6, [r2, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80072a0:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 80072a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80072a6:	e7dd      	b.n	8007264 <R3_2_RLSwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 80072a8:	62b7      	str	r7, [r6, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80072aa:	f8b1 60ae 	ldrh.w	r6, [r1, #174]	; 0xae
 80072ae:	6296      	str	r6, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80072b0:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 80072b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80072b6:	e7d5      	b.n	8007264 <R3_2_RLSwitchOnPWM+0x54>
 80072b8:	7fffffc0 	.word	0x7fffffc0

080072bc <R3_2_SetAOReferenceVoltage>:
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 80072bc:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 80072c0:	b510      	push	{r4, lr}
 80072c2:	f00c 0c3c 	and.w	ip, ip, #60	; 0x3c
 80072c6:	f101 0e08 	add.w	lr, r1, #8
 80072ca:	b082      	sub	sp, #8
  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 80072cc:	f85c 300e 	ldr.w	r3, [ip, lr]
 80072d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072d8:	431a      	orrs	r2, r3
 80072da:	f84c 200e 	str.w	r2, [ip, lr]
  SET_BIT(DACx->SWTRIGR,
 80072de:	684a      	ldr	r2, [r1, #4]
 80072e0:	f000 0303 	and.w	r3, r0, #3
 80072e4:	4313      	orrs	r3, r2
 80072e6:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 80072e8:	680a      	ldr	r2, [r1, #0]
 80072ea:	2301      	movs	r3, #1
 80072ec:	f000 0010 	and.w	r0, r0, #16
 80072f0:	fa03 f000 	lsl.w	r0, r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 80072f4:	ea30 0302 	bics.w	r3, r0, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80072f8:	4b14      	ldr	r3, [pc, #80]	; (800734c <R3_2_SetAOReferenceVoltage+0x90>)
 80072fa:	d013      	beq.n	8007324 <R3_2_SetAOReferenceVoltage+0x68>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4c14      	ldr	r4, [pc, #80]	; (8007350 <R3_2_SetAOReferenceVoltage+0x94>)
  SET_BIT(DACx->CR,
 8007300:	680a      	ldr	r2, [r1, #0]
 8007302:	fba4 4303 	umull	r4, r3, r4, r3
 8007306:	0cdb      	lsrs	r3, r3, #19
 8007308:	00db      	lsls	r3, r3, #3
 800730a:	4310      	orrs	r0, r2
 800730c:	6008      	str	r0, [r1, #0]
 800730e:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 8007310:	9b00      	ldr	r3, [sp, #0]
 8007312:	b12b      	cbz	r3, 8007320 <R3_2_SetAOReferenceVoltage+0x64>
      wait_loop_index--;
 8007314:	9b00      	ldr	r3, [sp, #0]
 8007316:	3b01      	subs	r3, #1
 8007318:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 800731a:	9b00      	ldr	r3, [sp, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1f9      	bne.n	8007314 <R3_2_SetAOReferenceVoltage+0x58>
}
 8007320:	b002      	add	sp, #8
 8007322:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007324:	4a0a      	ldr	r2, [pc, #40]	; (8007350 <R3_2_SetAOReferenceVoltage+0x94>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	fba2 2303 	umull	r2, r3, r2, r3
 800732c:	0cdb      	lsrs	r3, r3, #19
 800732e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007332:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8007334:	9b01      	ldr	r3, [sp, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0f2      	beq.n	8007320 <R3_2_SetAOReferenceVoltage+0x64>
      wait_loop_index--;
 800733a:	9b01      	ldr	r3, [sp, #4]
 800733c:	3b01      	subs	r3, #1
 800733e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8007340:	9b01      	ldr	r3, [sp, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f9      	bne.n	800733a <R3_2_SetAOReferenceVoltage+0x7e>
}
 8007346:	b002      	add	sp, #8
 8007348:	bd10      	pop	{r4, pc}
 800734a:	bf00      	nop
 800734c:	20000700 	.word	0x20000700
 8007350:	431bde83 	.word	0x431bde83

08007354 <R3_2_Init>:
{
 8007354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8007358:	6f43      	ldr	r3, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 800735a:	681e      	ldr	r6, [r3, #0]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800735c:	685d      	ldr	r5, [r3, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800735e:	6872      	ldr	r2, [r6, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007360:	689c      	ldr	r4, [r3, #8]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8007362:	f8d3 a014 	ldr.w	sl, [r3, #20]
{
 8007366:	4607      	mov	r7, r0
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8007368:	e9d3 e00b 	ldrd	lr, r0, [r3, #44]	; 0x2c
{
 800736c:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800736e:	2104      	movs	r1, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8007370:	f022 0204 	bic.w	r2, r2, #4
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8007374:	9001      	str	r0, [sp, #4]
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8007376:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007378:	9002      	str	r0, [sp, #8]
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 800737a:	e9d3 cb03 	ldrd	ip, fp, [r3, #12]
  DAC_TypeDef * DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 800737e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007380:	9003      	str	r0, [sp, #12]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8007382:	e9d3 9806 	ldrd	r9, r8, [r3, #24]
 8007386:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8007388:	6031      	str	r1, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800738a:	6872      	ldr	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800738c:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800738e:	f022 0220 	bic.w	r2, r2, #32
 8007392:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8007394:	6030      	str	r0, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8007396:	686a      	ldr	r2, [r5, #4]
 8007398:	f022 0204 	bic.w	r2, r2, #4
 800739c:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800739e:	6029      	str	r1, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80073a0:	686a      	ldr	r2, [r5, #4]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80073a2:	498f      	ldr	r1, [pc, #572]	; (80075e0 <R3_2_Init+0x28c>)
 80073a4:	f022 0220 	bic.w	r2, r2, #32
 80073a8:	606a      	str	r2, [r5, #4]
    if ( TIMx == TIM1 )
 80073aa:	4a8e      	ldr	r2, [pc, #568]	; (80075e4 <R3_2_Init+0x290>)
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80073ac:	6028      	str	r0, [r5, #0]
 80073ae:	4294      	cmp	r4, r2
 80073b0:	690a      	ldr	r2, [r1, #16]
 80073b2:	bf0c      	ite	eq
 80073b4:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 80073b8:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 80073bc:	610a      	str	r2, [r1, #16]
    if ( OPAMPParams != NULL )
 80073be:	f1bc 0f00 	cmp.w	ip, #0
 80073c2:	d014      	beq.n	80073ee <R3_2_Init+0x9a>
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 80073c4:	f8dc 2000 	ldr.w	r2, [ip]
 80073c8:	b11a      	cbz	r2, 80073d2 <R3_2_Init+0x7e>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 80073ca:	6811      	ldr	r1, [r2, #0]
 80073cc:	f041 0101 	orr.w	r1, r1, #1
 80073d0:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 80073d2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80073d6:	b11a      	cbz	r2, 80073e0 <R3_2_Init+0x8c>
 80073d8:	6811      	ldr	r1, [r2, #0]
 80073da:	f041 0101 	orr.w	r1, r1, #1
 80073de:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 80073e0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80073e4:	b11a      	cbz	r2, 80073ee <R3_2_Init+0x9a>
 80073e6:	6811      	ldr	r1, [r2, #0]
 80073e8:	f041 0101 	orr.w	r1, r1, #1
 80073ec:	6011      	str	r1, [r2, #0]
    if ( COMP_OCPAx != NULL )
 80073ee:	f1bb 0f00 	cmp.w	fp, #0
 80073f2:	d018      	beq.n	8007426 <R3_2_Init+0xd2>
      if (( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE ) && (DAC_OCPAx != MC_NULL))
 80073f4:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
 80073f8:	2a01      	cmp	r2, #1
 80073fa:	d008      	beq.n	800740e <R3_2_Init+0xba>
 80073fc:	f1be 0f00 	cmp.w	lr, #0
 8007400:	d005      	beq.n	800740e <R3_2_Init+0xba>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8007402:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 8007406:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007408:	4671      	mov	r1, lr
 800740a:	f7ff ff57 	bl	80072bc <R3_2_SetAOReferenceVoltage>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800740e:	f8db 3000 	ldr.w	r3, [fp]
 8007412:	f043 0301 	orr.w	r3, r3, #1
 8007416:	f8cb 3000 	str.w	r3, [fp]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800741a:	f8db 3000 	ldr.w	r3, [fp]
 800741e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007422:	f8cb 3000 	str.w	r3, [fp]
    if ( COMP_OCPBx != NULL )
 8007426:	f1ba 0f00 	cmp.w	sl, #0
 800742a:	d018      	beq.n	800745e <R3_2_Init+0x10a>
      if (( pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE ) && (DAC_OCPBx != MC_NULL))
 800742c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800742e:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 8007432:	2a01      	cmp	r2, #1
 8007434:	d007      	beq.n	8007446 <R3_2_Init+0xf2>
 8007436:	9a01      	ldr	r2, [sp, #4]
 8007438:	b12a      	cbz	r2, 8007446 <R3_2_Init+0xf2>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800743a:	4611      	mov	r1, r2
 800743c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800743e:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 8007442:	f7ff ff3b 	bl	80072bc <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007446:	f8da 3000 	ldr.w	r3, [sl]
 800744a:	f043 0301 	orr.w	r3, r3, #1
 800744e:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007452:	f8da 3000 	ldr.w	r3, [sl]
 8007456:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800745a:	f8ca 3000 	str.w	r3, [sl]
    if ( COMP_OCPCx != NULL )
 800745e:	f1b9 0f00 	cmp.w	r9, #0
 8007462:	d018      	beq.n	8007496 <R3_2_Init+0x142>
      if (( pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE )  && (DAC_OCPCx != MC_NULL))
 8007464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007466:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 800746a:	2a01      	cmp	r2, #1
 800746c:	d007      	beq.n	800747e <R3_2_Init+0x12a>
 800746e:	9a02      	ldr	r2, [sp, #8]
 8007470:	b12a      	cbz	r2, 800747e <R3_2_Init+0x12a>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8007472:	4611      	mov	r1, r2
 8007474:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8007476:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 800747a:	f7ff ff1f 	bl	80072bc <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800747e:	f8d9 3000 	ldr.w	r3, [r9]
 8007482:	f043 0301 	orr.w	r3, r3, #1
 8007486:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800748a:	f8d9 3000 	ldr.w	r3, [r9]
 800748e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007492:	f8c9 3000 	str.w	r3, [r9]
    if ( COMP_OVPx != NULL )
 8007496:	f1b8 0f00 	cmp.w	r8, #0
 800749a:	d018      	beq.n	80074ce <R3_2_Init+0x17a>
      if (( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE ) && (DAC_OVPx != MC_NULL))
 800749c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800749e:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 80074a2:	2a01      	cmp	r2, #1
 80074a4:	d007      	beq.n	80074b6 <R3_2_Init+0x162>
 80074a6:	9a03      	ldr	r2, [sp, #12]
 80074a8:	b12a      	cbz	r2, 80074b6 <R3_2_Init+0x162>
          R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 80074aa:	4611      	mov	r1, r2
 80074ac:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80074ae:	f8b3 20b8 	ldrh.w	r2, [r3, #184]	; 0xb8
 80074b2:	f7ff ff03 	bl	80072bc <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80074b6:	f8d8 3000 	ldr.w	r3, [r8]
 80074ba:	f043 0301 	orr.w	r3, r3, #1
 80074be:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80074c2:	f8d8 3000 	ldr.w	r3, [r8]
 80074c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074ca:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80074ce:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_1) == 0)
 80074d0:	07d8      	lsls	r0, r3, #31
 80074d2:	d562      	bpl.n	800759a <R3_2_Init+0x246>
 80074d4:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 80074d6:	07d9      	lsls	r1, r3, #31
 80074d8:	d56b      	bpl.n	80075b2 <R3_2_Init+0x25e>
  volatile uint32_t Brk2Timeout = 1000;
 80074da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074de:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80074e0:	6823      	ldr	r3, [r4, #0]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 80074e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80074e4:	f023 0301 	bic.w	r3, r3, #1
 80074e8:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80074ea:	6863      	ldr	r3, [r4, #4]
 80074ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80074f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f4:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80074f6:	69a3      	ldr	r3, [r4, #24]
 80074f8:	f043 0308 	orr.w	r3, r3, #8
 80074fc:	61a3      	str	r3, [r4, #24]
 80074fe:	69a3      	ldr	r3, [r4, #24]
 8007500:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007504:	61a3      	str	r3, [r4, #24]
 8007506:	69e3      	ldr	r3, [r4, #28]
 8007508:	f043 0308 	orr.w	r3, r3, #8
 800750c:	61e3      	str	r3, [r4, #28]
 800750e:	69e3      	ldr	r3, [r4, #28]
 8007510:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007514:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007516:	6963      	ldr	r3, [r4, #20]
 8007518:	f043 0301 	orr.w	r3, r3, #1
 800751c:	6163      	str	r3, [r4, #20]
 800751e:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 8007522:	2b02      	cmp	r3, #2
 8007524:	d029      	beq.n	800757a <R3_2_Init+0x226>
    if ( pHandle->_Super.Motor == M1 )
 8007526:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800752a:	b92b      	cbnz	r3, 8007538 <R3_2_Init+0x1e4>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 800752c:	f892 30bb 	ldrb.w	r3, [r2, #187]	; 0xbb
 8007530:	2b01      	cmp	r3, #1
 8007532:	d026      	beq.n	8007582 <R3_2_Init+0x22e>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8007534:	2b03      	cmp	r3, #3
 8007536:	d04b      	beq.n	80075d0 <R3_2_Init+0x27c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8007538:	f06f 0380 	mvn.w	r3, #128	; 0x80
 800753c:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 800753e:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 8007542:	b16b      	cbz	r3, 8007560 <R3_2_Init+0x20c>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8007544:	6923      	ldr	r3, [r4, #16]
 8007546:	05da      	lsls	r2, r3, #23
 8007548:	d50a      	bpl.n	8007560 <R3_2_Init+0x20c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800754a:	f46f 7280 	mvn.w	r2, #256	; 0x100
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 800754e:	9b05      	ldr	r3, [sp, #20]
 8007550:	b133      	cbz	r3, 8007560 <R3_2_Init+0x20c>
 8007552:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 8007554:	9b05      	ldr	r3, [sp, #20]
 8007556:	3b01      	subs	r3, #1
 8007558:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800755a:	6923      	ldr	r3, [r4, #16]
 800755c:	05db      	lsls	r3, r3, #23
 800755e:	d4f6      	bmi.n	800754e <R3_2_Init+0x1fa>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8007560:	68e3      	ldr	r3, [r4, #12]
 8007562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007566:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 8007568:	6a23      	ldr	r3, [r4, #32]
 800756a:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800756e:	f043 0305 	orr.w	r3, r3, #5
 8007572:	6223      	str	r3, [r4, #32]
}
 8007574:	b007      	add	sp, #28
 8007576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 800757a:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 800757e:	2b01      	cmp	r3, #1
 8007580:	d01b      	beq.n	80075ba <R3_2_Init+0x266>
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8007582:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007586:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8007588:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800758a:	f06f 0380 	mvn.w	r3, #128	; 0x80
 800758e:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8007590:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1d5      	bne.n	8007544 <R3_2_Init+0x1f0>
 8007598:	e7e2      	b.n	8007560 <R3_2_Init+0x20c>
      R3_2_ADCxInit (ADCx_1);
 800759a:	4630      	mov	r0, r6
 800759c:	f7ff fb78 	bl	8006c90 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80075a0:	2340      	movs	r3, #64	; 0x40
 80075a2:	6033      	str	r3, [r6, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 80075a4:	6873      	ldr	r3, [r6, #4]
 80075a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075aa:	6073      	str	r3, [r6, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80075ac:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 80075ae:	07d9      	lsls	r1, r3, #31
 80075b0:	d493      	bmi.n	80074da <R3_2_Init+0x186>
      R3_2_ADCxInit (ADCx_2);
 80075b2:	4628      	mov	r0, r5
 80075b4:	f7ff fb6c 	bl	8006c90 <R3_2_ADCxInit>
 80075b8:	e78f      	b.n	80074da <R3_2_Init+0x186>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 80075ba:	f892 10bb 	ldrb.w	r1, [r2, #187]	; 0xbb
 80075be:	2903      	cmp	r1, #3
 80075c0:	d1df      	bne.n	8007582 <R3_2_Init+0x22e>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80075c2:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80075c4:	6963      	ldr	r3, [r4, #20]
 80075c6:	f043 0301 	orr.w	r3, r3, #1
 80075ca:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80075cc:	6321      	str	r1, [r4, #48]	; 0x30
}
 80075ce:	e7d8      	b.n	8007582 <R3_2_Init+0x22e>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80075d0:	2101      	movs	r1, #1
 80075d2:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80075d4:	6961      	ldr	r1, [r4, #20]
 80075d6:	f041 0101 	orr.w	r1, r1, #1
 80075da:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80075dc:	6323      	str	r3, [r4, #48]	; 0x30
}
 80075de:	e7ab      	b.n	8007538 <R3_2_Init+0x1e4>
 80075e0:	e0042000 	.word	0xe0042000
 80075e4:	40012c00 	.word	0x40012c00

080075e8 <R3_2_CurrentReadingPolarization>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80075e8:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80075ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80075ec:	689d      	ldr	r5, [r3, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80075ee:	e9d3 7600 	ldrd	r7, r6, [r3]
  pHandle->PhaseAOffset = 0u;
 80075f2:	2300      	movs	r3, #0
  pHandle->PolarizationCounter = 0u;
 80075f4:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  pHandle->PhaseBOffset = 0u;
 80075f8:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  pHandle->PhaseCOffset = 0u;
 80075fc:	6643      	str	r3, [r0, #100]	; 0x64
  CLEAR_BIT(TIMx->CCER, Channels);
 80075fe:	6a2b      	ldr	r3, [r5, #32]
 8007600:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8007604:	f023 0305 	bic.w	r3, r3, #5
 8007608:	622b      	str	r3, [r5, #32]
  pHandle->PolarizationSector=SECTOR_5;
 800760a:	2304      	movs	r3, #4
 800760c:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_5;   
 8007610:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8007614:	4b3b      	ldr	r3, [pc, #236]	; (8007704 <R3_2_CurrentReadingPolarization+0x11c>)
 8007616:	6043      	str	r3, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8007618:	4b3b      	ldr	r3, [pc, #236]	; (8007708 <R3_2_CurrentReadingPolarization+0x120>)
 800761a:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 800761c:	2380      	movs	r3, #128	; 0x80
{
 800761e:	b083      	sub	sp, #12
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8007620:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
{
 8007624:	4604      	mov	r4, r0
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8007626:	f7ff fd17 	bl	8007058 <R3_2_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 800762a:	4a38      	ldr	r2, [pc, #224]	; (800770c <R3_2_CurrentReadingPolarization+0x124>)
 800762c:	686b      	ldr	r3, [r5, #4]
 800762e:	4013      	ands	r3, r2
 8007630:	2b70      	cmp	r3, #112	; 0x70
 8007632:	d1fb      	bne.n	800762c <R3_2_CurrentReadingPolarization+0x44>
  MODIFY_REG(ADCx->CR,
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	4936      	ldr	r1, [pc, #216]	; (8007710 <R3_2_CurrentReadingPolarization+0x128>)
 8007638:	400a      	ands	r2, r1
 800763a:	f042 0208 	orr.w	r2, r2, #8
 800763e:	60ba      	str	r2, [r7, #8]
 8007640:	68b3      	ldr	r3, [r6, #8]
  waitForPolarizationEnd( TIMx,
 8007642:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007644:	400b      	ands	r3, r1
 8007646:	f043 0308 	orr.w	r3, r3, #8
 800764a:	60b3      	str	r3, [r6, #8]
 800764c:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8007650:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8007654:	f892 20bb 	ldrb.w	r2, [r2, #187]	; 0xbb
 8007658:	4628      	mov	r0, r5
 800765a:	e9cd 1300 	strd	r1, r3, [sp]
 800765e:	f7ff f989 	bl	8006974 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8007662:	4620      	mov	r0, r4
 8007664:	f7ff fd44 	bl	80070f0 <R3_2_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 8007668:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 800766a:	4a2a      	ldr	r2, [pc, #168]	; (8007714 <R3_2_CurrentReadingPolarization+0x12c>)
 800766c:	6062      	str	r2, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800766e:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 8007670:	f884 606c 	strb.w	r6, [r4, #108]	; 0x6c
  pHandle->PolarizationSector=SECTOR_1;
 8007674:	f884 606d 	strb.w	r6, [r4, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_1;   
 8007678:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800767c:	f7ff fcec 	bl	8007058 <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8007680:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007682:	e9dd 1300 	ldrd	r1, r3, [sp]
 8007686:	f892 20bb 	ldrb.w	r2, [r2, #187]	; 0xbb
 800768a:	4628      	mov	r0, r5
 800768c:	f7ff f972 	bl	8006974 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8007690:	4620      	mov	r0, r4
 8007692:	f7ff fd2d 	bl	80070f0 <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8007696:	e9d4 2317 	ldrd	r2, r3, [r4, #92]	; 0x5c
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800769a:	0912      	lsrs	r2, r2, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800769c:	091b      	lsrs	r3, r3, #4
 800769e:	e9c4 2317 	strd	r2, r3, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80076a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 80076a4:	4a1c      	ldr	r2, [pc, #112]	; (8007718 <R3_2_CurrentReadingPolarization+0x130>)
 80076a6:	6062      	str	r2, [r4, #4]
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80076a8:	091b      	lsrs	r3, r3, #4
 80076aa:	6663      	str	r3, [r4, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80076ac:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 80076ae:	4a1b      	ldr	r2, [pc, #108]	; (800771c <R3_2_CurrentReadingPolarization+0x134>)
 80076b0:	61a2      	str	r2, [r4, #24]
 80076b2:	f023 0308 	bic.w	r3, r3, #8
 80076b6:	61ab      	str	r3, [r5, #24]
 80076b8:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 80076ba:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80076be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076c2:	61aa      	str	r2, [r5, #24]
 80076c4:	69ea      	ldr	r2, [r5, #28]
 80076c6:	f022 0208 	bic.w	r2, r2, #8
 80076ca:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80076cc:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80076ce:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80076d0:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80076d2:	69ab      	ldr	r3, [r5, #24]
 80076d4:	f043 0308 	orr.w	r3, r3, #8
 80076d8:	61ab      	str	r3, [r5, #24]
 80076da:	69ab      	ldr	r3, [r5, #24]
 80076dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80076e0:	61ab      	str	r3, [r5, #24]
 80076e2:	69eb      	ldr	r3, [r5, #28]
 80076e4:	f043 0308 	orr.w	r3, r3, #8
 80076e8:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 80076ea:	6a2b      	ldr	r3, [r5, #32]
 80076ec:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
  pHandle->_Super.Sector=SECTOR_5;
 80076f0:	2204      	movs	r2, #4
 80076f2:	f043 0305 	orr.w	r3, r3, #5
 80076f6:	622b      	str	r3, [r5, #32]
 80076f8:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
  pHandle->BrakeActionLock = false;
 80076fc:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
}
 8007700:	b003      	add	sp, #12
 8007702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007704:	08006f75 	.word	0x08006f75
 8007708:	08006ebd 	.word	0x08006ebd
 800770c:	02000070 	.word	0x02000070
 8007710:	7fffffc0 	.word	0x7fffffc0
 8007714:	08006fc1 	.word	0x08006fc1
 8007718:	08006d45 	.word	0x08006d45
 800771c:	08006ef9 	.word	0x08006ef9

08007720 <R3_2_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007720:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 8007722:	4684      	mov	ip, r0
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8007724:	68d0      	ldr	r0, [r2, #12]
{
 8007726:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007728:	e9d2 1500 	ldrd	r1, r5, [r2]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800772c:	6894      	ldr	r4, [r2, #8]
  if ( OPAMPParams != NULL )
 800772e:	b378      	cbz	r0, 8007790 <R3_2_TIMx_UP_IRQHandler+0x70>
    while (ADCx_1->JSQR != 0x0u)
 8007730:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1fc      	bne.n	8007730 <R3_2_TIMx_UP_IRQHandler+0x10>
    Opamp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8007736:	f89c e03a 	ldrb.w	lr, [ip, #58]	; 0x3a
 800773a:	eb00 038e 	add.w	r3, r0, lr, lsl #2
 800773e:	68de      	ldr	r6, [r3, #12]
    if (Opamp != NULL )
 8007740:	b12e      	cbz	r6, 800774e <R3_2_TIMx_UP_IRQHandler+0x2e>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8007742:	6830      	ldr	r0, [r6, #0]
 8007744:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8007746:	f420 7086 	bic.w	r0, r0, #268	; 0x10c
 800774a:	4338      	orrs	r0, r7
 800774c:	6030      	str	r0, [r6, #0]
     Opamp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 800774e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    if (Opamp != NULL )
 8007750:	b128      	cbz	r0, 800775e <R3_2_TIMx_UP_IRQHandler+0x3e>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8007752:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 8007754:	6803      	ldr	r3, [r0, #0]
 8007756:	f423 7386 	bic.w	r3, r3, #268	; 0x10c
 800775a:	4333      	orrs	r3, r6
 800775c:	6003      	str	r3, [r0, #0]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800775e:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 8007762:	f8bc 306a 	ldrh.w	r3, [ip, #106]	; 0x6a
 8007766:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007768:	f8d2 6094 	ldr.w	r6, [r2, #148]	; 0x94
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800776c:	4318      	orrs	r0, r3
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800776e:	4333      	orrs	r3, r6
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007770:	64c8      	str	r0, [r1, #76]	; 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007772:	64eb      	str	r3, [r5, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007774:	6863      	ldr	r3, [r4, #4]
 8007776:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800777a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800777e:	2280      	movs	r2, #128	; 0x80
 8007780:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8007784:	6063      	str	r3, [r4, #4]
}
 8007786:	f10c 0046 	add.w	r0, ip, #70	; 0x46
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800778a:	f8ac 206a 	strh.w	r2, [ip, #106]	; 0x6a
}
 800778e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007790:	f89c e03a 	ldrb.w	lr, [ip, #58]	; 0x3a
 8007794:	e7e3      	b.n	800775e <R3_2_TIMx_UP_IRQHandler+0x3e>
 8007796:	bf00      	nop

08007798 <R3_2_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8007798:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800779c:	b923      	cbnz	r3, 80077a8 <R3_2_BRK2_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800779e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80077a0:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
 80077a4:	2a02      	cmp	r2, #2
 80077a6:	d004      	beq.n	80077b2 <R3_2_BRK2_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 80077a8:	2301      	movs	r3, #1
 80077aa:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 80077ae:	3046      	adds	r0, #70	; 0x46
 80077b0:	4770      	bx	lr
{
 80077b2:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80077b4:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80077b8:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80077bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 80077be:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80077c0:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80077c4:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80077c8:	628c      	str	r4, [r1, #40]	; 0x28
 80077ca:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 80077cc:	2301      	movs	r3, #1
 80077ce:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 80077d2:	bc30      	pop	{r4, r5}
 80077d4:	3046      	adds	r0, #70	; 0x46
 80077d6:	4770      	bx	lr

080077d8 <R3_2_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80077d8:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80077da:	6891      	ldr	r1, [r2, #8]
 80077dc:	6c4a      	ldr	r2, [r1, #68]	; 0x44
{
 80077de:	4603      	mov	r3, r0
  pHandle->OverVoltageFlag = true;
 80077e0:	f240 1c01 	movw	ip, #257	; 0x101
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80077e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077e8:	644a      	str	r2, [r1, #68]	; 0x44
}
 80077ea:	3046      	adds	r0, #70	; 0x46
  pHandle->OverVoltageFlag = true;
 80077ec:	f8a3 c06f 	strh.w	ip, [r3, #111]	; 0x6f
}
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop

080077f4 <R3_2_IsOverCurrentOccurred>:
  if ( pHandle->OverVoltageFlag == true )
 80077f4:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 80077f8:	b16b      	cbz	r3, 8007816 <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 80077fa:	2300      	movs	r3, #0
 80077fc:	f880 306f 	strb.w	r3, [r0, #111]	; 0x6f
 8007800:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8007802:	2302      	movs	r3, #2
  if ( pHandle->OverCurrentFlag == true )
 8007804:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
 8007808:	b11a      	cbz	r2, 8007812 <R3_2_IsOverCurrentOccurred+0x1e>
    pHandle->OverCurrentFlag = false;
 800780a:	2300      	movs	r3, #0
 800780c:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
    retVal |= MC_BREAK_IN;
 8007810:	460b      	mov	r3, r1
}
 8007812:	4618      	mov	r0, r3
 8007814:	4770      	bx	lr
 8007816:	2140      	movs	r1, #64	; 0x40
 8007818:	e7f4      	b.n	8007804 <R3_2_IsOverCurrentOccurred+0x10>
 800781a:	bf00      	nop

0800781c <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 800781c:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 8007820:	b430      	push	{r4, r5}
  if ( pHandle->_Super.RLDetectionMode == false )
 8007822:	2900      	cmp	r1, #0
 8007824:	d13c      	bne.n	80078a0 <R3_2_RLDetectionModeEnable+0x84>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007826:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8007828:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800782a:	699a      	ldr	r2, [r3, #24]
 800782c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007830:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007834:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007838:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800783a:	6a1a      	ldr	r2, [r3, #32]
 800783c:	f042 0201 	orr.w	r2, r2, #1
 8007840:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007842:	6a1a      	ldr	r2, [r3, #32]
 8007844:	f022 0204 	bic.w	r2, r2, #4
 8007848:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800784a:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800784c:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
 8007850:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007852:	f103 0418 	add.w	r4, r3, #24
 8007856:	d030      	beq.n	80078ba <R3_2_RLDetectionModeEnable+0x9e>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007858:	2a02      	cmp	r2, #2
 800785a:	d10f      	bne.n	800787c <R3_2_RLDetectionModeEnable+0x60>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800785c:	699a      	ldr	r2, [r3, #24]
 800785e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007862:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007866:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800786a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800786c:	6a1a      	ldr	r2, [r3, #32]
 800786e:	f042 0210 	orr.w	r2, r2, #16
 8007872:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007874:	6a1a      	ldr	r2, [r3, #32]
 8007876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800787a:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800787c:	6862      	ldr	r2, [r4, #4]
 800787e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007882:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007886:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800788a:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 800788c:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 800788e:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8007890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007894:	621a      	str	r2, [r3, #32]
 8007896:	6a1a      	ldr	r2, [r3, #32]
 8007898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800789c:	621a      	str	r2, [r3, #32]
 800789e:	65c1      	str	r1, [r0, #92]	; 0x5c
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 80078a0:	4b0e      	ldr	r3, [pc, #56]	; (80078dc <R3_2_RLDetectionModeEnable+0xc0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 80078a2:	490f      	ldr	r1, [pc, #60]	; (80078e0 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80078a4:	4a0f      	ldr	r2, [pc, #60]	; (80078e4 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 80078a6:	4c10      	ldr	r4, [pc, #64]	; (80078e8 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 80078a8:	6143      	str	r3, [r0, #20]
  pHandle->_Super.RLDetectionMode = true;
 80078aa:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 80078ac:	6044      	str	r4, [r0, #4]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80078ae:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 80078b2:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 80078b4:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 80078b8:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80078ba:	699a      	ldr	r2, [r3, #24]
 80078bc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80078c0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80078c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078c8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 80078ca:	6a1a      	ldr	r2, [r3, #32]
 80078cc:	f022 0210 	bic.w	r2, r2, #16
 80078d0:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 80078d2:	6a1a      	ldr	r2, [r3, #32]
 80078d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078d8:	621a      	str	r2, [r3, #32]
}
 80078da:	e7cf      	b.n	800787c <R3_2_RLDetectionModeEnable+0x60>
 80078dc:	080071c5 	.word	0x080071c5
 80078e0:	08007211 	.word	0x08007211
 80078e4:	080070f1 	.word	0x080070f1
 80078e8:	0800716d 	.word	0x0800716d

080078ec <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 80078ec:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d03b      	beq.n	800796c <R3_2_RLDetectionModeDisable+0x80>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80078f4:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80078f6:	688b      	ldr	r3, [r1, #8]
{
 80078f8:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80078fa:	699a      	ldr	r2, [r3, #24]
 80078fc:	4c43      	ldr	r4, [pc, #268]	; (8007a0c <R3_2_RLDetectionModeDisable+0x120>)
 80078fe:	4022      	ands	r2, r4
 8007900:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007904:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007906:	6a1a      	ldr	r2, [r3, #32]
 8007908:	f042 0201 	orr.w	r2, r2, #1
 800790c:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800790e:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 8007912:	2a01      	cmp	r2, #1
 8007914:	d02b      	beq.n	800796e <R3_2_RLDetectionModeDisable+0x82>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007916:	2a02      	cmp	r2, #2
 8007918:	d050      	beq.n	80079bc <R3_2_RLDetectionModeDisable+0xd0>
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800791a:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 800791e:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007920:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007922:	6999      	ldr	r1, [r3, #24]
 8007924:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007928:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 800792c:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8007930:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007932:	6a19      	ldr	r1, [r3, #32]
 8007934:	f041 0110 	orr.w	r1, r1, #16
 8007938:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800793a:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800793c:	69d9      	ldr	r1, [r3, #28]
 800793e:	400c      	ands	r4, r1
 8007940:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8007944:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007946:	6a19      	ldr	r1, [r3, #32]
 8007948:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800794c:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800794e:	4930      	ldr	r1, [pc, #192]	; (8007a10 <R3_2_RLDetectionModeDisable+0x124>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007950:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007952:	4a30      	ldr	r2, [pc, #192]	; (8007a14 <R3_2_RLDetectionModeDisable+0x128>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8007954:	6041      	str	r1, [r0, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8007956:	4930      	ldr	r1, [pc, #192]	; (8007a18 <R3_2_RLDetectionModeDisable+0x12c>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8007958:	4c30      	ldr	r4, [pc, #192]	; (8007a1c <R3_2_RLDetectionModeDisable+0x130>)
 800795a:	6144      	str	r4, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 800795c:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800795e:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8007962:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8007966:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 800796a:	4770      	bx	lr
 800796c:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800796e:	6a19      	ldr	r1, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8007970:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8007974:	f041 0104 	orr.w	r1, r1, #4
 8007978:	0852      	lsrs	r2, r2, #1
 800797a:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800797c:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800797e:	6999      	ldr	r1, [r3, #24]
 8007980:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007984:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8007988:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 800798c:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800798e:	6a19      	ldr	r1, [r3, #32]
 8007990:	f041 0110 	orr.w	r1, r1, #16
 8007994:	6219      	str	r1, [r3, #32]
 8007996:	6a19      	ldr	r1, [r3, #32]
 8007998:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800799c:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800799e:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80079a0:	69d9      	ldr	r1, [r3, #28]
 80079a2:	400c      	ands	r4, r1
 80079a4:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 80079a8:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80079aa:	6a19      	ldr	r1, [r3, #32]
 80079ac:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80079b0:	6219      	str	r1, [r3, #32]
 80079b2:	6a19      	ldr	r1, [r3, #32]
 80079b4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80079b8:	6219      	str	r1, [r3, #32]
}
 80079ba:	e7c8      	b.n	800794e <R3_2_RLDetectionModeDisable+0x62>
  CLEAR_BIT(TIMx->CCER, Channels);
 80079bc:	6a19      	ldr	r1, [r3, #32]
 80079be:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 80079c2:	f021 0104 	bic.w	r1, r1, #4
 80079c6:	0852      	lsrs	r2, r2, #1
 80079c8:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80079ca:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80079cc:	6999      	ldr	r1, [r3, #24]
 80079ce:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80079d2:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 80079d6:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 80079da:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80079dc:	6a19      	ldr	r1, [r3, #32]
 80079de:	f041 0110 	orr.w	r1, r1, #16
 80079e2:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80079e4:	6a19      	ldr	r1, [r3, #32]
 80079e6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80079ea:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80079ec:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80079ee:	69d9      	ldr	r1, [r3, #28]
 80079f0:	400c      	ands	r4, r1
 80079f2:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 80079f6:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80079f8:	6a19      	ldr	r1, [r3, #32]
 80079fa:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80079fe:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007a00:	6a19      	ldr	r1, [r3, #32]
 8007a02:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007a06:	6219      	str	r1, [r3, #32]
}
 8007a08:	e7a1      	b.n	800794e <R3_2_RLDetectionModeDisable+0x62>
 8007a0a:	bf00      	nop
 8007a0c:	fffeff8c 	.word	0xfffeff8c
 8007a10:	08006d45 	.word	0x08006d45
 8007a14:	080070f1 	.word	0x080070f1
 8007a18:	08007059 	.word	0x08007059
 8007a1c:	08007005 	.word	0x08007005

08007a20 <R3_2_RLDetectionModeSetDuty>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007a20:	6f43      	ldr	r3, [r0, #116]	; 0x74
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007a22:	f8b0 c068 	ldrh.w	ip, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007a26:	689b      	ldr	r3, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007a28:	69da      	ldr	r2, [r3, #28]
 8007a2a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007a2e:	fb01 f10c 	mul.w	r1, r1, ip
 8007a32:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
{
 8007a36:	b410      	push	{r4}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007a38:	0c09      	lsrs	r1, r1, #16
  pHandle->ADCRegularLocked=true;
 8007a3a:	2401      	movs	r4, #1
 8007a3c:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8007a40:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8007a44:	8641      	strh	r1, [r0, #50]	; 0x32
 8007a46:	61da      	str	r2, [r3, #28]
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8007a48:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 8007a4c:	f8b0 4058 	ldrh.w	r4, [r0, #88]	; 0x58
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8007a50:	ebac 0202 	sub.w	r2, ip, r2
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007a54:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007a56:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007a58:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007a5a:	685a      	ldr	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007a5c:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8007a5e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8007a62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  pHdl->Sector = SECTOR_4;
 8007a66:	f04f 0c03 	mov.w	ip, #3
 8007a6a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8007a6e:	605a      	str	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007a70:	2901      	cmp	r1, #1
  pHdl->Sector = SECTOR_4;
 8007a72:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007a76:	685b      	ldr	r3, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007a78:	d008      	beq.n	8007a8c <R3_2_RLDetectionModeSetDuty+0x6c>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007a7a:	4a07      	ldr	r2, [pc, #28]	; (8007a98 <R3_2_RLDetectionModeSetDuty+0x78>)
}
 8007a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007a80:	4213      	tst	r3, r2
    hAux = MC_FOC_DURATION;
 8007a82:	bf14      	ite	ne
 8007a84:	2101      	movne	r1, #1
 8007a86:	2100      	moveq	r1, #0
}
 8007a88:	4608      	mov	r0, r1
 8007a8a:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	8703      	strh	r3, [r0, #56]	; 0x38
}
 8007a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a94:	4608      	mov	r0, r1
 8007a96:	4770      	bx	lr
 8007a98:	02000070 	.word	0x02000070

08007a9c <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007a9c:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8007aa0:	8b82      	ldrh	r2, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007aa2:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007aa4:	4494      	add	ip, r2
{
 8007aa6:	b410      	push	{r4}
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007aa8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007aac:	b14b      	cbz	r3, 8007ac2 <RVBS_Clear+0x26>
  {
    pHandle->aBuffer[index] = aux;
 8007aae:	6a04      	ldr	r4, [r0, #32]
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	b29a      	uxth	r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007ab4:	3301      	adds	r3, #1
    pHandle->aBuffer[index] = aux;
 8007ab6:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007aba:	8b01      	ldrh	r1, [r0, #24]
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	4291      	cmp	r1, r2
 8007ac0:	d8f7      	bhi.n	8007ab2 <RVBS_Clear+0x16>
  }
  pHandle->_Super.LatestConv = aux;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f36c 030f 	bfi	r3, ip, #0, #16
 8007ac8:	f36c 431f 	bfi	r3, ip, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8007acc:	2200      	movs	r2, #0
}
 8007ace:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.LatestConv = aux;
 8007ad2:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 8007ad4:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop

08007adc <RVBS_Init>:
{
 8007adc:	b510      	push	{r4, lr}
 8007ade:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8007ae0:	300c      	adds	r0, #12
 8007ae2:	f7fa fb21 	bl	8002128 <RCM_RegisterRegConv>
 8007ae6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8007aea:	4620      	mov	r0, r4
 8007aec:	f7ff ffd6 	bl	8007a9c <RVBS_Clear>
}
 8007af0:	bd10      	pop	{r4, pc}
 8007af2:	bf00      	nop

08007af4 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8007af4:	88c3      	ldrh	r3, [r0, #6]
 8007af6:	8b42      	ldrh	r2, [r0, #26]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d305      	bcc.n	8007b08 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8007afc:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8007afe:	4298      	cmp	r0, r3
 8007b00:	bf8c      	ite	hi
 8007b02:	2004      	movhi	r0, #4
 8007b04:	2000      	movls	r0, #0
 8007b06:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8007b08:	2002      	movs	r0, #2
  }
  return fault;
}
 8007b0a:	4770      	bx	lr

08007b0c <RVBS_CalcAvVbus>:
{
 8007b0c:	b570      	push	{r4, r5, r6, lr}
 8007b0e:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8007b10:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8007b14:	f7fa fbf0 	bl	80022f8 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8007b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b1c:	4298      	cmp	r0, r3
 8007b1e:	d01b      	beq.n	8007b58 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 8007b20:	6a26      	ldr	r6, [r4, #32]
 8007b22:	f894 e025 	ldrb.w	lr, [r4, #37]	; 0x25
 8007b26:	f826 001e 	strh.w	r0, [r6, lr, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007b2a:	8b25      	ldrh	r5, [r4, #24]
 8007b2c:	b1cd      	cbz	r5, 8007b62 <RVBS_CalcAvVbus+0x56>
 8007b2e:	2300      	movs	r3, #0
    wtemp = 0;
 8007b30:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8007b32:	f836 c013 	ldrh.w	ip, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007b36:	3301      	adds	r3, #1
 8007b38:	b2d9      	uxtb	r1, r3
 8007b3a:	42a9      	cmp	r1, r5
      wtemp += pHandle->aBuffer[i];
 8007b3c:	4462      	add	r2, ip
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007b3e:	460b      	mov	r3, r1
 8007b40:	d3f7      	bcc.n	8007b32 <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8007b42:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007b46:	1e6b      	subs	r3, r5, #1
 8007b48:	459e      	cmp	lr, r3
    pHandle->_Super.LatestConv = hAux;
 8007b4a:	80a0      	strh	r0, [r4, #4]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8007b4c:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007b4e:	da0a      	bge.n	8007b66 <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 8007b50:	f10e 0e01 	add.w	lr, lr, #1
 8007b54:	f884 e025 	strb.w	lr, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f7ff ffcb 	bl	8007af4 <RVBS_CheckFaultState>
 8007b5e:	8120      	strh	r0, [r4, #8]
}
 8007b60:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8007b62:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8007b64:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 8007b66:	2300      	movs	r3, #0
 8007b68:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f7ff ffc1 	bl	8007af4 <RVBS_CheckFaultState>
 8007b72:	8120      	strh	r0, [r4, #8]
}
 8007b74:	bd70      	pop	{r4, r5, r6, pc}
 8007b76:	bf00      	nop

08007b78 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8007b78:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8007b7a:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8007b7c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8007b80:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8007b84:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8007b86:	4770      	bx	lr

08007b88 <REMNG_Calc>:
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 8007b88:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8007b8c:	2901      	cmp	r1, #1
 8007b8e:	d90c      	bls.n	8007baa <REMNG_Calc+0x22>
{
 8007b90:	b410      	push	{r4}
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;
 8007b92:	e9d0 4204 	ldrd	r4, r2, [r0, #16]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 8007b96:	3901      	subs	r1, #1
    current_ref += pHandle->IncDecAmount;
 8007b98:	4423      	add	r3, r4
    pHandle->RampRemainingStep --;
 8007b9a:	60c1      	str	r1, [r0, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 8007b9c:	6083      	str	r3, [r0, #8]

#ifdef FASTDIV
  ret_val = FD_FastDiv( & ( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8007b9e:	fb93 f2f2 	sdiv	r2, r3, r2
#endif

  return ret_val;
}
 8007ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	4770      	bx	lr
  else if ( pHandle->RampRemainingStep == 1u )
 8007baa:	d005      	beq.n	8007bb8 <REMNG_Calc+0x30>
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8007bac:	6942      	ldr	r2, [r0, #20]
  pHandle->Ext = current_ref;
 8007bae:	6083      	str	r3, [r0, #8]
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8007bb0:	fb93 f2f2 	sdiv	r2, r3, r2
}
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	4770      	bx	lr
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007bb8:	6842      	ldr	r2, [r0, #4]
 8007bba:	6943      	ldr	r3, [r0, #20]
    pHandle->RampRemainingStep = 0u;
 8007bbc:	2100      	movs	r1, #0
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007bbe:	fb02 f303 	mul.w	r3, r2, r3
    pHandle->RampRemainingStep = 0u;
 8007bc2:	60c1      	str	r1, [r0, #12]
  pHandle->Ext = current_ref;
 8007bc4:	6083      	str	r3, [r0, #8]
}
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop

08007bcc <REMNG_RampCompleted>:
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->RampRemainingStep == 0u )
 8007bcc:	68c0      	ldr	r0, [r0, #12]
  {
    retVal = true;
  }
  return retVal;
}
 8007bce:	fab0 f080 	clz	r0, r0
 8007bd2:	0940      	lsrs	r0, r0, #5
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop

08007bd8 <getScalingFactor>:
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
  {
    aux = -Target;
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	bfb8      	it	lt
 8007bdc:	4240      	neglt	r0, r0
{
 8007bde:	2301      	movs	r3, #1
  {
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8007be0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007be4:	e002      	b.n	8007bec <getScalingFactor+0x14>
  for ( i = 1u; i < 32u; i++ )
 8007be6:	3301      	adds	r3, #1
 8007be8:	2b20      	cmp	r3, #32
 8007bea:	d007      	beq.n	8007bfc <getScalingFactor+0x24>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8007bec:	fa21 f203 	lsr.w	r2, r1, r3
    if ( TargetAbs >= limit )
 8007bf0:	4290      	cmp	r0, r2
 8007bf2:	d3f8      	bcc.n	8007be6 <getScalingFactor+0xe>
    {
      break;
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	4098      	lsls	r0, r3
}
 8007bfa:	4770      	bx	lr
 8007bfc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop

08007c04 <REMNG_ExecRamp>:
{
 8007c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c08:	4605      	mov	r5, r0
 8007c0a:	460e      	mov	r6, r1
  if ( Durationms == 0u )
 8007c0c:	4614      	mov	r4, r2
 8007c0e:	b95a      	cbnz	r2, 8007c28 <REMNG_ExecRamp+0x24>
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8007c10:	4608      	mov	r0, r1
 8007c12:	f7ff ffe1 	bl	8007bd8 <getScalingFactor>
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007c16:	fb00 f606 	mul.w	r6, r0, r6
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8007c1a:	6168      	str	r0, [r5, #20]
    pHandle->RampRemainingStep = 0u;
 8007c1c:	e9c5 6402 	strd	r6, r4, [r5, #8]
    pHandle->IncDecAmount = 0;
 8007c20:	612c      	str	r4, [r5, #16]
}
 8007c22:	2001      	movs	r0, #1
 8007c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8007c28:	6943      	ldr	r3, [r0, #20]
 8007c2a:	6887      	ldr	r7, [r0, #8]
 8007c2c:	fb97 f7f3 	sdiv	r7, r7, r3
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 8007c30:	eba1 0807 	sub.w	r8, r1, r7
 8007c34:	4640      	mov	r0, r8
 8007c36:	f7ff ffcf 	bl	8007bd8 <getScalingFactor>
 8007c3a:	4682      	mov	sl, r0
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	f7ff ffcb 	bl	8007bd8 <getScalingFactor>
 8007c42:	4681      	mov	r9, r0
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8007c44:	4630      	mov	r0, r6
 8007c46:	f7ff ffc7 	bl	8007bd8 <getScalingFactor>
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8007c4a:	682a      	ldr	r2, [r5, #0]
    pHandle->TargetFinal = TargetFinal;
 8007c4c:	606e      	str	r6, [r5, #4]
    if ( wScalingFactor <  wScalingFactor2 )
 8007c4e:	45ca      	cmp	sl, r9
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8007c50:	fb02 f404 	mul.w	r4, r2, r4
    aux /= 1000u;
 8007c54:	4a0c      	ldr	r2, [pc, #48]	; (8007c88 <REMNG_ExecRamp+0x84>)
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8007c56:	4603      	mov	r3, r0
      if ( wScalingFactor < wScalingFactor3 )
 8007c58:	bf2c      	ite	cs
 8007c5a:	4648      	movcs	r0, r9
 8007c5c:	4650      	movcc	r0, sl
      if ( wScalingFactor2 < wScalingFactor3 )
 8007c5e:	4298      	cmp	r0, r3
    aux /= 1000u;
 8007c60:	fba2 2404 	umull	r2, r4, r2, r4
 8007c64:	bf28      	it	cs
 8007c66:	4618      	movcs	r0, r3
 8007c68:	09a4      	lsrs	r4, r4, #6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8007c6a:	fb00 f707 	mul.w	r7, r0, r7
    pHandle->RampRemainingStep++;
 8007c6e:	3401      	adds	r4, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 8007c70:	fb00 f308 	mul.w	r3, r0, r8
    pHandle->ScalingFactor = wScalingFactorMin;
 8007c74:	6168      	str	r0, [r5, #20]
    pHandle->RampRemainingStep++;
 8007c76:	60ec      	str	r4, [r5, #12]
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8007c78:	60af      	str	r7, [r5, #8]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 8007c7a:	fb93 f4f4 	sdiv	r4, r3, r4
}
 8007c7e:	2001      	movs	r0, #1
    pHandle->IncDecAmount = aux1;
 8007c80:	612c      	str	r4, [r5, #16]
}
 8007c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c86:	bf00      	nop
 8007c88:	10624dd3 	.word	0x10624dd3

08007c8c <RUC_Init>:
__weak void RUC_Init( RevUpCtrl_Handle_t * pHandle,
               SpeednTorqCtrl_Handle_t * pSTC,
               VirtualSpeedSensor_Handle_t * pVSS,
               STO_Handle_t * pSNSL,
               PWMC_Handle_t * pPWM )
{
 8007c8c:	b410      	push	{r4}
  RevUpCtrl_PhaseParams_t * pRUCPhaseParams = &pHandle->ParamsData[0];
  uint8_t bPhase = 0u;

  pHandle->pSTC = pSTC;
 8007c8e:	6681      	str	r1, [r0, #104]	; 0x68
  pHandle->OTFSCLowside = false;
  pHandle->EnteredZone1 = false;

  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
  {
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8007c90:	6941      	ldr	r1, [r0, #20]
{
 8007c92:	9c01      	ldr	r4, [sp, #4]
  pHandle->pPWM = pPWM;
 8007c94:	6744      	str	r4, [r0, #116]	; 0x74
  pHandle->OTFSCLowside = false;
 8007c96:	f04f 0c00 	mov.w	ip, #0
  pHandle->pSNSL = pSNSL;
 8007c9a:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
  pHandle->OTFSCLowside = false;
 8007c9e:	f8a0 c054 	strh.w	ip, [r0, #84]	; 0x54
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007ca2:	b301      	cbz	r1, 8007ce6 <RUC_Init+0x5a>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8007ca4:	688b      	ldr	r3, [r1, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007ca6:	b30b      	cbz	r3, 8007cec <RUC_Init+0x60>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8007ca8:	689b      	ldr	r3, [r3, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007caa:	b30b      	cbz	r3, 8007cf0 <RUC_Init+0x64>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8007cac:	689b      	ldr	r3, [r3, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007cae:	b30b      	cbz	r3, 8007cf4 <RUC_Init+0x68>
 8007cb0:	689b      	ldr	r3, [r3, #8]
    bPhase++;
 8007cb2:	2105      	movs	r1, #5
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007cb4:	b1c3      	cbz	r3, 8007ce8 <RUC_Init+0x5c>
 8007cb6:	2204      	movs	r2, #4
 8007cb8:	2105      	movs	r1, #5
  }
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

  pHandle->bPhaseNbr = bPhase;

  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8007cba:	8803      	ldrh	r3, [r0, #0]
 8007cbc:	4c0e      	ldr	r4, [pc, #56]	; (8007cf8 <RUC_Init+0x6c>)
 8007cbe:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8007cc2:	fb0c f303 	mul.w	r3, ip, r3
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007cc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8007cca:	fba4 4303 	umull	r4, r3, r4, r3
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007cce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007cd2:	2400      	movs	r4, #0
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8007cd4:	099b      	lsrs	r3, r3, #6
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007cd6:	6154      	str	r4, [r2, #20]

}
 8007cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->bPhaseNbr = bPhase;
 8007cdc:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8007ce0:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
}
 8007ce4:	4770      	bx	lr
    bPhase++;
 8007ce6:	2101      	movs	r1, #1
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007ce8:	1e4a      	subs	r2, r1, #1
 8007cea:	e7e6      	b.n	8007cba <RUC_Init+0x2e>
    bPhase++;
 8007cec:	2102      	movs	r1, #2
 8007cee:	e7fb      	b.n	8007ce8 <RUC_Init+0x5c>
 8007cf0:	2103      	movs	r1, #3
 8007cf2:	e7f9      	b.n	8007ce8 <RUC_Init+0x5c>
 8007cf4:	2104      	movs	r1, #4
 8007cf6:	e7f7      	b.n	8007ce8 <RUC_Init+0x5c>
 8007cf8:	10624dd3 	.word	0x10624dd3

08007cfc <RUC_Clear>:
  * @param  hMotorDirection: rotor rotation direction.
  *         This parameter must be -1 or +1.
  *  @retval none
  */
__weak void RUC_Clear( RevUpCtrl_Handle_t * pHandle, int16_t hMotorDirection )
{
 8007cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  VirtualSpeedSensor_Handle_t * pVSS = pHandle->pVSS;
 8007d00:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
  SpeednTorqCtrl_Handle_t * pSTC = pHandle->pSTC;
 8007d02:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
  RevUpCtrl_PhaseParams_t * pPhaseParams = pHandle->ParamsData;

  pHandle->hDirection = hMotorDirection;
 8007d06:	80c1      	strh	r1, [r0, #6]
  pHandle->EnteredZone1 = false;

  /*Initializes the rev up stages counter.*/
  pHandle->bStageCnt = 0u;
 8007d08:	2600      	movs	r6, #0
{
 8007d0a:	4604      	mov	r4, r0
  pHandle->bStageCnt = 0u;
 8007d0c:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
  pHandle->bOTFRelCounter = 0u;
 8007d10:	f880 6053 	strb.w	r6, [r0, #83]	; 0x53
  pHandle->OTFSCLowside = false;
 8007d14:	f8a0 6054 	strh.w	r6, [r0, #84]	; 0x54

  /* Calls the clear method of VSS.*/
  VSS_Clear( pVSS );
 8007d18:	4638      	mov	r0, r7

  /* Sets the STC in torque mode.*/
  STC_SetControlMode( pSTC, STC_TORQUE_MODE );

  /* Sets the mechanical starting angle of VSS.*/
  VSS_SetMecAngle( pVSS, pHandle->hStartingMecAngle * hMotorDirection );
 8007d1a:	b28d      	uxth	r5, r1
  VSS_Clear( pVSS );
 8007d1c:	f000 fe76 	bl	8008a0c <VSS_Clear>
  STC_SetControlMode( pSTC, STC_TORQUE_MODE );
 8007d20:	4631      	mov	r1, r6
 8007d22:	4640      	mov	r0, r8
 8007d24:	f000 f918 	bl	8007f58 <STC_SetControlMode>
  VSS_SetMecAngle( pVSS, pHandle->hStartingMecAngle * hMotorDirection );
 8007d28:	8861      	ldrh	r1, [r4, #2]
 8007d2a:	fb11 f105 	smulbb	r1, r1, r5
 8007d2e:	b209      	sxth	r1, r1
 8007d30:	4638      	mov	r0, r7
 8007d32:	f000 ff29 	bl	8008b88 <VSS_SetMecAngle>

  /* Sets to zero the starting torque of STC */
  STC_ExecRamp( pSTC, 0, 0u );
 8007d36:	4632      	mov	r2, r6
 8007d38:	4631      	mov	r1, r6
 8007d3a:	4640      	mov	r0, r8
 8007d3c:	f000 f910 	bl	8007f60 <STC_ExecRamp>

  /* Gives the first command to STC and VSS.*/
  STC_ExecRamp( pSTC, pPhaseParams->hFinalTorque * hMotorDirection,
 8007d40:	8a21      	ldrh	r1, [r4, #16]
 8007d42:	89a2      	ldrh	r2, [r4, #12]
 8007d44:	fb11 f105 	smulbb	r1, r1, r5
 8007d48:	b209      	sxth	r1, r1
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	f000 f908 	bl	8007f60 <STC_ExecRamp>
                ( uint32_t )( pPhaseParams->hDurationms ) );

  VSS_SetMecAcceleration( pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection,
 8007d50:	89e1      	ldrh	r1, [r4, #14]
 8007d52:	89a2      	ldrh	r2, [r4, #12]
 8007d54:	fb11 f105 	smulbb	r1, r1, r5
 8007d58:	b209      	sxth	r1, r1
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	f000 ff1c 	bl	8008b98 <VSS_SetMecAcceleration>
                          pPhaseParams->hDurationms );

  /* Compute hPhaseRemainingTicks.*/
  pHandle->hPhaseRemainingTicks =
    ( uint16_t )( ( ( uint32_t )pPhaseParams->hDurationms *
 8007d60:	89a3      	ldrh	r3, [r4, #12]
                    ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007d62:	8821      	ldrh	r1, [r4, #0]
 8007d64:	4a06      	ldr	r2, [pc, #24]	; (8007d80 <RUC_Clear+0x84>)

  /*Set the next phases parameter pointer.*/
  pHandle->pCurrentPhaseParams = pPhaseParams->pNext;

  /*Timeout counter for PLL reset during OTF.*/
  pHandle->bResetPLLCnt = 0u;
 8007d66:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
    ( uint16_t )( ( ( uint32_t )pPhaseParams->hDurationms *
 8007d6a:	fb01 f303 	mul.w	r3, r1, r3
                    ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d72:	099b      	lsrs	r3, r3, #6
  pHandle->pCurrentPhaseParams = pPhaseParams->pNext;
 8007d74:	6962      	ldr	r2, [r4, #20]
 8007d76:	60a2      	str	r2, [r4, #8]
  pHandle->hPhaseRemainingTicks++;
 8007d78:	3301      	adds	r3, #1
 8007d7a:	80a3      	strh	r3, [r4, #4]
}
 8007d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d80:	10624dd3 	.word	0x10624dd3

08007d84 <RUC_Exec>:
  */
__weak bool RUC_Exec( RevUpCtrl_Handle_t * pHandle )
{
  bool retVal = true;

  if ( pHandle->hPhaseRemainingTicks > 0u )
 8007d84:	8883      	ldrh	r3, [r0, #4]
{
 8007d86:	b510      	push	{r4, lr}
 8007d88:	4604      	mov	r4, r0
  if ( pHandle->hPhaseRemainingTicks > 0u )
 8007d8a:	bb43      	cbnz	r3, 8007dde <RUC_Exec+0x5a>

  } /* hPhaseRemainingTicks > 0 */

  if ( pHandle->hPhaseRemainingTicks == 0u )
  {
    if ( pHandle->pCurrentPhaseParams != MC_NULL )
 8007d8c:	68a0      	ldr	r0, [r4, #8]
 8007d8e:	b328      	cbz	r0, 8007ddc <RUC_Exec+0x58>
    {

      /* If it becomes zero the current phase has been completed.*/
      /* Gives the next command to STC and VSS.*/
      STC_ExecRamp( pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8007d90:	8881      	ldrh	r1, [r0, #4]
 8007d92:	88e3      	ldrh	r3, [r4, #6]
 8007d94:	8802      	ldrh	r2, [r0, #0]
 8007d96:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007d98:	fb11 f103 	smulbb	r1, r1, r3
 8007d9c:	b209      	sxth	r1, r1
 8007d9e:	f000 f8df 	bl	8007f60 <STC_ExecRamp>
                    ( uint32_t )( pHandle->pCurrentPhaseParams->hDurationms ) );

      VSS_SetMecAcceleration( pHandle->pVSS,
                              pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8007da2:	68a3      	ldr	r3, [r4, #8]
 8007da4:	88e0      	ldrh	r0, [r4, #6]
 8007da6:	8859      	ldrh	r1, [r3, #2]
      VSS_SetMecAcceleration( pHandle->pVSS,
 8007da8:	881a      	ldrh	r2, [r3, #0]
                              pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8007daa:	fb11 f100 	smulbb	r1, r1, r0
      VSS_SetMecAcceleration( pHandle->pVSS,
 8007dae:	b209      	sxth	r1, r1
 8007db0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007db2:	f000 fef1 	bl	8008b98 <VSS_SetMecAcceleration>
                              pHandle->pCurrentPhaseParams->hDurationms );

      /* Compute hPhaseRemainingTicks.*/
      pHandle->hPhaseRemainingTicks =
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 8007db6:	68a1      	ldr	r1, [r4, #8]
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007db8:	8820      	ldrh	r0, [r4, #0]
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 8007dba:	880b      	ldrh	r3, [r1, #0]
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007dbc:	4a0b      	ldr	r2, [pc, #44]	; (8007dec <RUC_Exec+0x68>)
      pHandle->hPhaseRemainingTicks++;

      /*Set the next phases parameter pointer.*/
      pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext;
 8007dbe:	6889      	ldr	r1, [r1, #8]
 8007dc0:	60a1      	str	r1, [r4, #8]
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 8007dc2:	fb00 f303 	mul.w	r3, r0, r3
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007dc6:	fba2 2303 	umull	r2, r3, r2, r3

      /*Increases the rev up stages counter.*/
      pHandle->bStageCnt++;
 8007dca:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007dce:	099b      	lsrs	r3, r3, #6
      pHandle->hPhaseRemainingTicks++;
 8007dd0:	3301      	adds	r3, #1
      pHandle->bStageCnt++;
 8007dd2:	3201      	adds	r2, #1
      pHandle->hPhaseRemainingTicks++;
 8007dd4:	80a3      	strh	r3, [r4, #4]
      pHandle->bStageCnt++;
 8007dd6:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
  bool retVal = true;
 8007dda:	2001      	movs	r0, #1
    {
      retVal = false;
    }
  }
  return retVal;
}
 8007ddc:	bd10      	pop	{r4, pc}
    pHandle->hPhaseRemainingTicks--;
 8007dde:	3b01      	subs	r3, #1
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	8083      	strh	r3, [r0, #4]
  if ( pHandle->hPhaseRemainingTicks == 0u )
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d0d1      	beq.n	8007d8c <RUC_Exec+0x8>
  bool retVal = true;
 8007de8:	2001      	movs	r0, #1
}
 8007dea:	bd10      	pop	{r4, pc}
 8007dec:	10624dd3 	.word	0x10624dd3

08007df0 <RUC_FirstAccelerationStageReached>:
  */
__weak bool RUC_FirstAccelerationStageReached( RevUpCtrl_Handle_t * pHandle )
{
  bool retVal = false;

  if ( pHandle->bStageCnt >= pHandle->bFirstAccelerationStage )
 8007df0:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8007df4:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
  {
    retVal = true;
  }
  return retVal;
}
 8007df8:	4282      	cmp	r2, r0
 8007dfa:	bf34      	ite	cc
 8007dfc:	2000      	movcc	r0, #0
 8007dfe:	2001      	movcs	r0, #1
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop

08007e04 <RUC_SetPhaseDurationms>:
  *         This parameter must be set in millisecond.
  *  @retval none
  */
__weak void RUC_SetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, uint16_t hDurationms )
{
  pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 8007e04:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007e08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e0c:	818a      	strh	r2, [r1, #12]
}
 8007e0e:	4770      	bx	lr

08007e10 <RUC_SetPhaseFinalMecSpeedUnit>:
  *  @retval none
  */
__weak void RUC_SetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase,
                                    int16_t hFinalMecSpeedUnit )
{
  pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007e10:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007e14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e18:	81ca      	strh	r2, [r1, #14]
}
 8007e1a:	4770      	bx	lr

08007e1c <RUC_SetPhaseFinalTorque>:
  * @param  hFinalTorque: new targetted motor torque.
  *  @retval none
  */
__weak void RUC_SetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, int16_t hFinalTorque )
{
  pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 8007e1c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007e20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e24:	820a      	strh	r2, [r1, #16]
}
 8007e26:	4770      	bx	lr

08007e28 <RUC_GetPhaseDurationms>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns duration used in selected phase.
  */
__weak uint16_t RUC_GetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( uint16_t )pHandle->ParamsData[bPhase].hDurationms );
 8007e28:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007e2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8007e30:	8988      	ldrh	r0, [r1, #12]
 8007e32:	4770      	bx	lr

08007e34 <RUC_GetPhaseFinalMecSpeedUnit>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted rotor speed set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalMecSpeedUnit );
 8007e34:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007e38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8007e3c:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop

08007e44 <RUC_GetPhaseFinalTorque>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted motor torque set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalTorque );
 8007e44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007e48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8007e4c:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop

08007e54 <RUC_GetNumberOfPhases>:
  *  @retval Returns number of phases relative to the programmed revup.
  */
__weak uint8_t RUC_GetNumberOfPhases( RevUpCtrl_Handle_t * pHandle )
{
  return ( ( uint8_t )pHandle->bPhaseNbr );
}
 8007e54:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop

08007e5c <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8007e5c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop

08007e64 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8007e64:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop

08007e6c <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8007e6c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop

08007e74 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8007e74:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8007e78:	8a81      	ldrh	r1, [r0, #20]
{
 8007e7a:	b500      	push	{lr}
  if ( *pMecSpeedUnit < 0 )
 8007e7c:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 8007e7e:	bfb8      	it	lt
 8007e80:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8007e82:	f8b0 e016 	ldrh.w	lr, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8007e86:	f890 c003 	ldrb.w	ip, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8007e8a:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8007e8c:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8007e8e:	459e      	cmp	lr, r3
 8007e90:	d819      	bhi.n	8007ec6 <SPD_IsMecSpeedReliable+0x52>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8007e92:	4299      	cmp	r1, r3
 8007e94:	bf2c      	ite	cs
 8007e96:	2300      	movcs	r3, #0
 8007e98:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8007e9a:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8007e9e:	f8b0 e018 	ldrh.w	lr, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8007ea2:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8007ea4:	bfb8      	it	lt
 8007ea6:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 8007ea8:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8007eaa:	458e      	cmp	lr, r1
 8007eac:	d300      	bcc.n	8007eb0 <SPD_IsMecSpeedReliable+0x3c>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8007eae:	b163      	cbz	r3, 8007eca <SPD_IsMecSpeedReliable+0x56>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8007eb0:	4594      	cmp	ip, r2
 8007eb2:	d901      	bls.n	8007eb8 <SPD_IsMecSpeedReliable+0x44>
    {
      bSpeedErrorNumber++;
 8007eb4:	3201      	adds	r2, #1
 8007eb6:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8007eb8:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 8007eba:	ebb2 000c 	subs.w	r0, r2, ip
 8007ebe:	bf18      	it	ne
 8007ec0:	2001      	movne	r0, #1
 8007ec2:	f85d fb04 	ldr.w	pc, [sp], #4
    SpeedError = true;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e7e7      	b.n	8007e9a <SPD_IsMecSpeedReliable+0x26>
      bSpeedErrorNumber = 0u;
 8007eca:	4594      	cmp	ip, r2
 8007ecc:	bf88      	it	hi
 8007ece:	2200      	movhi	r2, #0
  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8007ed0:	7002      	strb	r2, [r0, #0]
}
 8007ed2:	ebb2 000c 	subs.w	r0, r2, ip
 8007ed6:	bf18      	it	ne
 8007ed8:	2001      	movne	r0, #1
 8007eda:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ede:	bf00      	nop

08007ee0 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8007ee0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8007ee4:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8007ee8:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8007eec:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8007ef0:	b200      	sxth	r0, r0
 8007ef2:	4770      	bx	lr

08007ef4 <STC_Init>:
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8007ef4:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
  pHandle->PISpeed = pPI;
 8007ef8:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8007efa:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
  pHandle->SPD = SPD_Handle;
 8007efe:	6142      	str	r2, [r0, #20]
{
 8007f00:	b410      	push	{r4}
  pHandle->Mode = pHandle->ModeDefault;
 8007f02:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 8007f06:	7004      	strb	r4, [r0, #0]
  pHandle->TargetFinal = 0;
 8007f08:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8007f0a:	ea4f 440c 	mov.w	r4, ip, lsl #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8007f0e:	0409      	lsls	r1, r1, #16
 8007f10:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->TargetFinal = 0;
 8007f14:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8007f16:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->RampRemainingStep = 0u;
 8007f1a:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8007f1c:	6183      	str	r3, [r0, #24]
}
 8007f1e:	4770      	bx	lr

08007f20 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8007f20:	6141      	str	r1, [r0, #20]
}
 8007f22:	4770      	bx	lr

08007f24 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8007f24:	6940      	ldr	r0, [r0, #20]
 8007f26:	4770      	bx	lr

08007f28 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8007f28:	7803      	ldrb	r3, [r0, #0]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d000      	beq.n	8007f30 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8007f2e:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8007f30:	6900      	ldr	r0, [r0, #16]
 8007f32:	2100      	movs	r1, #0
 8007f34:	f7fe bc5e 	b.w	80067f4 <PID_SetIntegralTerm>

08007f38 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8007f38:	6840      	ldr	r0, [r0, #4]
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	bfbc      	itt	lt
 8007f3e:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8007f42:	30ff      	addlt	r0, #255	; 0xff
}
 8007f44:	1400      	asrs	r0, r0, #16
 8007f46:	4770      	bx	lr

08007f48 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8007f48:	6880      	ldr	r0, [r0, #8]
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	bfbc      	itt	lt
 8007f4e:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8007f52:	30ff      	addlt	r0, #255	; 0xff
}
 8007f54:	1400      	asrs	r0, r0, #16
 8007f56:	4770      	bx	lr

08007f58 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8007f58:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8007f5a:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8007f5c:	60c3      	str	r3, [r0, #12]
}
 8007f5e:	4770      	bx	lr

08007f60 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8007f60:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8007f62:	7803      	ldrb	r3, [r0, #0]
{
 8007f64:	4604      	mov	r4, r0
 8007f66:	460d      	mov	r5, r1
 8007f68:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8007f6a:	b323      	cbz	r3, 8007fb6 <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8007f6c:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8007f6e:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8007f70:	2800      	cmp	r0, #0
 8007f72:	bfbc      	itt	lt
 8007f74:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8007f78:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8007f7a:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8007f7c:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8007f80:	dd01      	ble.n	8007f86 <STC_ExecRamp+0x26>
      AllowedRange = false;
 8007f82:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8007f84:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8007f86:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8007f8a:	428b      	cmp	r3, r1
 8007f8c:	dcf9      	bgt.n	8007f82 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8007f8e:	8c23      	ldrh	r3, [r4, #32]
 8007f90:	4299      	cmp	r1, r3
 8007f92:	da03      	bge.n	8007f9c <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8007f94:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8007f98:	428b      	cmp	r3, r1
 8007f9a:	dbf2      	blt.n	8007f82 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8007f9c:	b9ae      	cbnz	r6, 8007fca <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8007f9e:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8007fa0:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8007fa2:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8007fa4:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8007fa8:	bf0c      	ite	eq
 8007faa:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8007fac:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8007fae:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8007fb0:	61a3      	str	r3, [r4, #24]
 8007fb2:	2001      	movs	r0, #1
}
 8007fb4:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8007fb6:	f7ff ffc7 	bl	8007f48 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8007fba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007fbc:	429d      	cmp	r5, r3
 8007fbe:	dce0      	bgt.n	8007f82 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8007fc0:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8007fc4:	42ab      	cmp	r3, r5
 8007fc6:	dcdc      	bgt.n	8007f82 <STC_ExecRamp+0x22>
 8007fc8:	e7e8      	b.n	8007f9c <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8007fca:	8ba3      	ldrh	r3, [r4, #28]
      pHandle->TargetFinal = hTargetFinal;
 8007fcc:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8007fce:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8007fd2:	4e06      	ldr	r6, [pc, #24]	; (8007fec <STC_ExecRamp+0x8c>)
 8007fd4:	fba6 2303 	umull	r2, r3, r6, r3
 8007fd8:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8007fda:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8007fdc:	1a28      	subs	r0, r5, r0
 8007fde:	0400      	lsls	r0, r0, #16
      pHandle->RampRemainingStep++;
 8007fe0:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8007fe2:	fb90 f0f3 	sdiv	r0, r0, r3
      pHandle->IncDecAmount = wAux1;
 8007fe6:	61a0      	str	r0, [r4, #24]
 8007fe8:	2001      	movs	r0, #1
}
 8007fea:	bd70      	pop	{r4, r5, r6, pc}
 8007fec:	10624dd3 	.word	0x10624dd3

08007ff0 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8007ff4:	6183      	str	r3, [r0, #24]
}
 8007ff6:	4770      	bx	lr

08007ff8 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8007ff8:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 8007ffa:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8007ffe:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8008000:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8008002:	2a00      	cmp	r2, #0
 8008004:	bf08      	it	eq
 8008006:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 8008008:	2b01      	cmp	r3, #1
{
 800800a:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 800800c:	d90c      	bls.n	8008028 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 800800e:	6981      	ldr	r1, [r0, #24]
 8008010:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8008012:	3b01      	subs	r3, #1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8008014:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8008016:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8008018:	4630      	mov	r0, r6
 800801a:	db09      	blt.n	8008030 <STC_CalcTorqueReference+0x38>
 800801c:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 800801e:	2a01      	cmp	r2, #1
 8008020:	d00a      	beq.n	8008038 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8008022:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8008024:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 8008026:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8008028:	d012      	beq.n	8008050 <STC_CalcTorqueReference+0x58>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 800802a:	2e00      	cmp	r6, #0
 800802c:	4630      	mov	r0, r6
 800802e:	daf5      	bge.n	800801c <STC_CalcTorqueReference+0x24>
 8008030:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8008034:	30ff      	adds	r0, #255	; 0xff
 8008036:	e7f1      	b.n	800801c <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8008038:	6960      	ldr	r0, [r4, #20]
 800803a:	f7ff ff13 	bl	8007e64 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 800803e:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8008040:	b209      	sxth	r1, r1
 8008042:	6920      	ldr	r0, [r4, #16]
 8008044:	f7fe fbe2 	bl	800680c <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8008048:	0403      	lsls	r3, r0, #16
 800804a:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 800804e:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8008050:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8008054:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8008056:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8008058:	60c3      	str	r3, [r0, #12]
 800805a:	e7e0      	b.n	800801e <STC_CalcTorqueReference+0x26>

0800805c <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 800805c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop

08008064 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8008064:	8bc0      	ldrh	r0, [r0, #30]
 8008066:	4770      	bx	lr

08008068 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8008068:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop

08008070 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8008070:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8008074:	2200      	movs	r2, #0
 8008076:	b299      	uxth	r1, r3
 8008078:	f361 020f 	bfi	r2, r1, #0, #16
 800807c:	0c1b      	lsrs	r3, r3, #16
 800807e:	f363 421f 	bfi	r2, r3, #16, #16
{
 8008082:	b082      	sub	sp, #8
}
 8008084:	4610      	mov	r0, r2
 8008086:	b002      	add	sp, #8
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop

0800808c <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 800808c:	b510      	push	{r4, lr}
 800808e:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8008090:	6940      	ldr	r0, [r0, #20]
 8008092:	f7ff fee7 	bl	8007e64 <SPD_GetAvrgMecSpeedUnit>
 8008096:	0400      	lsls	r0, r0, #16
 8008098:	6060      	str	r0, [r4, #4]
}
 800809a:	bd10      	pop	{r4, pc}

0800809c <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 800809c:	2300      	movs	r3, #0
 800809e:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 80080a0:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop

080080a8 <STM_FaultProcessing>:
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80080a8:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80080aa:	f8b0 c004 	ldrh.w	ip, [r0, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80080ae:	430b      	orrs	r3, r1
 80080b0:	ea23 0202 	bic.w	r2, r3, r2
  State_t LocalState =  pHandle->bState;
 80080b4:	7803      	ldrb	r3, [r0, #0]
  pHandle->hFaultOccurred |= hSetErrors;
 80080b6:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80080ba:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 80080bc:	2b0a      	cmp	r3, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80080be:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80080c0:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 80080c2:	d006      	beq.n	80080d2 <STM_FaultProcessing+0x2a>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 80080c4:	b90a      	cbnz	r2, 80080ca <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 80080ca:	230a      	movs	r3, #10
 80080cc:	7003      	strb	r3, [r0, #0]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 80080d2:	2a00      	cmp	r2, #0
 80080d4:	d1f7      	bne.n	80080c6 <STM_FaultProcessing+0x1e>
      pHandle->bState = FAULT_OVER;
 80080d6:	230b      	movs	r3, #11
 80080d8:	7003      	strb	r3, [r0, #0]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop

080080e0 <STM_NextState>:
{
 80080e0:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 80080e2:	7803      	ldrb	r3, [r0, #0]
 80080e4:	2b14      	cmp	r3, #20
 80080e6:	d810      	bhi.n	800810a <STM_NextState+0x2a>
 80080e8:	e8df f003 	tbb	[pc, r3]
 80080ec:	200d3457 	.word	0x200d3457
 80080f0:	500d532a 	.word	0x500d532a
 80080f4:	0f0f484d 	.word	0x0f0f484d
 80080f8:	455e0b1b 	.word	0x455e0b1b
 80080fc:	3b3f6342 	.word	0x3b3f6342
 8008100:	31          	.byte	0x31
 8008101:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8008102:	290e      	cmp	r1, #14
 8008104:	d00f      	beq.n	8008126 <STM_NextState+0x46>
      if ( bState == ANY_STOP )
 8008106:	2907      	cmp	r1, #7
 8008108:	d00d      	beq.n	8008126 <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800810a:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800810e:	2b01      	cmp	r3, #1
 8008110:	d014      	beq.n	800813c <STM_NextState+0x5c>
 8008112:	2907      	cmp	r1, #7
 8008114:	d012      	beq.n	800813c <STM_NextState+0x5c>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8008116:	2200      	movs	r2, #0
 8008118:	2180      	movs	r1, #128	; 0x80
 800811a:	f7ff ffc5 	bl	80080a8 <STM_FaultProcessing>
 800811e:	2000      	movs	r0, #0
}
 8008120:	bd08      	pop	{r3, pc}
      if ( bState == IDLE )
 8008122:	2900      	cmp	r1, #0
 8008124:	d1f1      	bne.n	800810a <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 8008126:	7001      	strb	r1, [r0, #0]
 8008128:	2001      	movs	r0, #1
}
 800812a:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 800812c:	2911      	cmp	r1, #17
 800812e:	d8f2      	bhi.n	8008116 <STM_NextState+0x36>
 8008130:	4b23      	ldr	r3, [pc, #140]	; (80081c0 <STM_NextState+0xe0>)
 8008132:	40cb      	lsrs	r3, r1
 8008134:	07da      	lsls	r2, r3, #31
 8008136:	d4f6      	bmi.n	8008126 <STM_NextState+0x46>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008138:	2903      	cmp	r1, #3
 800813a:	d1ec      	bne.n	8008116 <STM_NextState+0x36>
 800813c:	2000      	movs	r0, #0
}
 800813e:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8008140:	2913      	cmp	r1, #19
 8008142:	d0f0      	beq.n	8008126 <STM_NextState+0x46>
 8008144:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8008148:	2b05      	cmp	r3, #5
 800814a:	d1e0      	bne.n	800810e <STM_NextState+0x2e>
 800814c:	e7eb      	b.n	8008126 <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800814e:	2912      	cmp	r1, #18
 8008150:	d1d9      	bne.n	8008106 <STM_NextState+0x26>
 8008152:	e7e8      	b.n	8008126 <STM_NextState+0x46>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8008154:	2907      	cmp	r1, #7
 8008156:	d0e6      	beq.n	8008126 <STM_NextState+0x46>
 8008158:	f1a1 030d 	sub.w	r3, r1, #13
 800815c:	2b01      	cmp	r3, #1
 800815e:	d8d4      	bhi.n	800810a <STM_NextState+0x2a>
 8008160:	e7e1      	b.n	8008126 <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8008162:	1f0b      	subs	r3, r1, #4
 8008164:	2b01      	cmp	r3, #1
 8008166:	d8ce      	bhi.n	8008106 <STM_NextState+0x26>
 8008168:	e7dd      	b.n	8008126 <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800816a:	2904      	cmp	r1, #4
 800816c:	d1cb      	bne.n	8008106 <STM_NextState+0x26>
 800816e:	e7da      	b.n	8008126 <STM_NextState+0x46>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8008170:	2911      	cmp	r1, #17
 8008172:	d1c8      	bne.n	8008106 <STM_NextState+0x26>
 8008174:	e7d7      	b.n	8008126 <STM_NextState+0x46>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8008176:	2902      	cmp	r1, #2
 8008178:	d1c5      	bne.n	8008106 <STM_NextState+0x26>
 800817a:	e7d4      	b.n	8008126 <STM_NextState+0x46>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800817c:	2900      	cmp	r1, #0
 800817e:	d0d2      	beq.n	8008126 <STM_NextState+0x46>
 8008180:	290c      	cmp	r1, #12
 8008182:	d1c2      	bne.n	800810a <STM_NextState+0x2a>
 8008184:	e7cf      	b.n	8008126 <STM_NextState+0x46>
      if ( bState == STOP_IDLE )
 8008186:	2909      	cmp	r1, #9
 8008188:	d1bf      	bne.n	800810a <STM_NextState+0x2a>
 800818a:	e7cc      	b.n	8008126 <STM_NextState+0x46>
      if ( bState == STOP )
 800818c:	2908      	cmp	r1, #8
 800818e:	d1bc      	bne.n	800810a <STM_NextState+0x2a>
 8008190:	e7c9      	b.n	8008126 <STM_NextState+0x46>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8008192:	1f8b      	subs	r3, r1, #6
 8008194:	2b01      	cmp	r3, #1
 8008196:	d8b8      	bhi.n	800810a <STM_NextState+0x2a>
 8008198:	e7c5      	b.n	8008126 <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800819a:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d0c1      	beq.n	8008126 <STM_NextState+0x46>
           || ( bState == ICLWAIT ) )
 80081a2:	290c      	cmp	r1, #12
 80081a4:	d1b5      	bne.n	8008112 <STM_NextState+0x32>
 80081a6:	e7be      	b.n	8008126 <STM_NextState+0x46>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 80081a8:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 80081ac:	2b07      	cmp	r3, #7
 80081ae:	d1ac      	bne.n	800810a <STM_NextState+0x2a>
 80081b0:	e7b9      	b.n	8008126 <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 80081b2:	2914      	cmp	r1, #20
 80081b4:	d8a9      	bhi.n	800810a <STM_NextState+0x2a>
 80081b6:	4b03      	ldr	r3, [pc, #12]	; (80081c4 <STM_NextState+0xe4>)
 80081b8:	40cb      	lsrs	r3, r1
 80081ba:	07db      	lsls	r3, r3, #31
 80081bc:	d4b3      	bmi.n	8008126 <STM_NextState+0x46>
 80081be:	e7a4      	b.n	800810a <STM_NextState+0x2a>
 80081c0:	00030092 	.word	0x00030092
 80081c4:	00140080 	.word	0x00140080

080081c8 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 80081c8:	7800      	ldrb	r0, [r0, #0]
 80081ca:	4770      	bx	lr

080081cc <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 80081cc:	7803      	ldrb	r3, [r0, #0]
 80081ce:	2b0b      	cmp	r3, #11
 80081d0:	d001      	beq.n	80081d6 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 80081d2:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 80081d4:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 80081d6:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80081d8:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 80081da:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80081dc:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 80081de:	2001      	movs	r0, #1
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop

080081e4 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 80081e4:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 80081e6:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 80081e8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop

080081f0 <STO_PLL_CalcElAngle>:
  * @param  pHandle: handler of the current instance of the STO component
  * @param  pInputVars_str pointer to the observer inputs structure
  * @retval int16_t rotor electrical angle (s16Degrees)
  */
__weak int16_t STO_PLL_CalcElAngle( STO_PLL_Handle_t * pHandle, Observer_Inputs_t * pInputs )
{
 80081f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t wBemf_alfa_est_Next, wBemf_beta_est_Next;
  int16_t hAux, hAux_Alfa, hAux_Beta, hIalfa_err, hIbeta_err, hRotor_Speed,
          hValfa, hVbeta;


  if ( pHandle->wBemf_alfa_est > ( int32_t )( pHandle->hF2 )*INT16_MAX )
 80081f4:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 80081f8:	6e87      	ldr	r7, [r0, #104]	; 0x68
 80081fa:	ebc3 32c3 	rsb	r2, r3, r3, lsl #15
 80081fe:	4297      	cmp	r7, r2
{
 8008200:	4604      	mov	r4, r0
 8008202:	b087      	sub	sp, #28
  if ( pHandle->wBemf_alfa_est > ( int32_t )( pHandle->hF2 )*INT16_MAX )
 8008204:	ea4f 30c3 	mov.w	r0, r3, lsl #15
 8008208:	f340 80c2 	ble.w	8008390 <STO_PLL_CalcElAngle+0x1a0>
  {
    pHandle->wBemf_alfa_est = INT16_MAX * ( int32_t )( pHandle->hF2 );
 800820c:	66a2      	str	r2, [r4, #104]	; 0x68
 800820e:	4617      	mov	r7, r2
  {
  }
#ifdef FULL_MISRA_C_COMPLIANCY
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est / pHandle->hF2 );
#else
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est >> pHandle->F2LOG );
 8008210:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
#endif

  if ( pHandle->wBemf_beta_est > INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 8008214:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8008216:	9601      	str	r6, [sp, #4]
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est >> pHandle->F2LOG );
 8008218:	fa47 f605 	asr.w	r6, r7, r5
 800821c:	9602      	str	r6, [sp, #8]
 800821e:	fa0f fc86 	sxth.w	ip, r6
  if ( pHandle->wBemf_beta_est > INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 8008222:	9e01      	ldr	r6, [sp, #4]
 8008224:	42b2      	cmp	r2, r6
 8008226:	f280 80cb 	bge.w	80083c0 <STO_PLL_CalcElAngle+0x1d0>
  {
    pHandle->wBemf_beta_est = INT16_MAX * ( int32_t )( pHandle->hF2 );
 800822a:	66e2      	str	r2, [r4, #108]	; 0x6c
 800822c:	9201      	str	r2, [sp, #4]
  {
  }
#ifdef FULL_MISRA_C_COMPLIANCY
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est / pHandle->hF2 );
#else
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
 800822e:	9b01      	ldr	r3, [sp, #4]
#endif

  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8008230:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
 8008234:	fa43 f505 	asr.w	r5, r3, r5
  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8008238:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 800823c:	ebc3 32c3 	rsb	r2, r3, r3, lsl #15
 8008240:	4591      	cmp	r9, r2
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
 8008242:	b228      	sxth	r0, r5
  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8008244:	ea4f 3ec3 	mov.w	lr, r3, lsl #15
 8008248:	f340 80b2 	ble.w	80083b0 <STO_PLL_CalcElAngle+0x1c0>
  {
    pHandle->Ialfa_est = INT16_MAX * ( int32_t )( pHandle->hF1 );
 800824c:	6622      	str	r2, [r4, #96]	; 0x60
 800824e:	4691      	mov	r9, r2
  }
  else
  {
  }

  if ( pHandle->Ibeta_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8008250:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
 8008254:	4542      	cmp	r2, r8
 8008256:	f280 80a4 	bge.w	80083a2 <STO_PLL_CalcElAngle+0x1b2>
  {
    pHandle->Ibeta_est = INT16_MAX * ( int32_t )( pHandle->hF1 );
 800825a:	6662      	str	r2, [r4, #100]	; 0x64
 800825c:	4690      	mov	r8, r2
  hIalfa_err = ( int16_t )( pHandle->Ialfa_est / pHandle->hF1 );
#else
  hIalfa_err = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
#endif

  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800825e:	888b      	ldrh	r3, [r1, #4]
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
#endif

  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;

  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 8008260:	f8b1 e008 	ldrh.w	lr, [r1, #8]
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8008264:	f8ad 300c 	strh.w	r3, [sp, #12]
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 8008268:	f9b1 3000 	ldrsh.w	r3, [r1]
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800826c:	f8b1 a006 	ldrh.w	sl, [r1, #6]
  hIalfa_err = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 8008270:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
  hValfa = ( int16_t ) ( wAux / 65536 );
#else
  hValfa = ( int16_t ) ( wAux >> 16 );
#endif

  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.beta;
 8008274:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
  hAux = ( int16_t ) ( pHandle->Ialfa_est / pHandle->hF1 );
#else
  hAux = ( int16_t ) ( pHandle->Ialfa_est >> pHandle->F1LOG );
#endif

  wAux = ( int32_t ) ( pHandle->hC1 ) * hAux;
 8008278:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
  wAux = pHandle->_Super.hElSpeedDpp * wAux;
  wBemf_beta_est_Next -= wAux;

  /*Calls the PLL blockset*/
  pHandle->hBemf_alfa_est = hAux_Alfa;
  pHandle->hBemf_beta_est = hAux_Beta;
 800827c:	f8a4 0072 	strh.w	r0, [r4, #114]	; 0x72
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 8008280:	fb0e f303 	mul.w	r3, lr, r3
  hValfa = ( int16_t ) ( wAux >> 16 );
 8008284:	141e      	asrs	r6, r3, #16
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.beta;
 8008286:	fb0e fe01 	mul.w	lr, lr, r1
  hIalfa_err = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 800828a:	fa49 f302 	asr.w	r3, r9, r2
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800828e:	9903      	ldr	r1, [sp, #12]
  pHandle->hBemf_alfa_est = hAux_Alfa;
 8008290:	f8a4 c070 	strh.w	ip, [r4, #112]	; 0x70
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
 8008294:	fa48 f202 	asr.w	r2, r8, r2
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8008298:	eba2 0a0a 	sub.w	sl, r2, sl
  wAux = ( int32_t )  ( pHandle->hC1 ) * hAux;
 800829c:	fb12 f20b 	smulbb	r2, r2, fp
  wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 80082a0:	eba8 0202 	sub.w	r2, r8, r2
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80082a4:	1a59      	subs	r1, r3, r1
  wAux = ( int32_t ) ( pHandle->hC2 ) * hIalfa_err;
 80082a6:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
  wAux = ( int32_t ) ( pHandle->hC1 ) * hAux;
 80082aa:	fb13 f30b 	smulbb	r3, r3, fp
  wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 80082ae:	eba9 0303 	sub.w	r3, r9, r3
  wAux = ( int32_t ) ( pHandle->hC5 ) * hValfa;
 80082b2:	f9b4 b028 	ldrsh.w	fp, [r4, #40]	; 0x28
  wAux = wAux * pHandle->hC6;
 80082b6:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	; 0x2a
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80082ba:	b209      	sxth	r1, r1
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80082bc:	fa0f fa8a 	sxth.w	sl, sl
  wIalfa_est_Next += wAux;
 80082c0:	fb08 3301 	mla	r3, r8, r1, r3
  hVbeta = ( int16_t ) ( wAux >> 16 );
 80082c4:	ea4f 4e2e 	mov.w	lr, lr, asr #16
  wIbeta_est_Next += wAux;
 80082c8:	fb08 280a 	mla	r8, r8, sl, r2
  wIalfa_est_Next += wAux;
 80082cc:	fb0b 3306 	mla	r3, fp, r6, r3
  wIbeta_est_Next += wAux;
 80082d0:	fb0b 880e 	mla	r8, fp, lr, r8
  wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 80082d4:	9e01      	ldr	r6, [sp, #4]
  wAux = ( int32_t )( pHandle->hC4 ) * hIalfa_err;
 80082d6:	f9b4 e026 	ldrsh.w	lr, [r4, #38]	; 0x26
  wAux = ( int32_t ) hAux_Beta >> pHandle->F3POW2;
 80082da:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 80082dc:	fb0e 6a0a 	mla	sl, lr, sl, r6
  wAux = ( int32_t )  ( pHandle->hC3 ) * hAux_Alfa;
 80082e0:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
  wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 80082e4:	fb01 710e 	mla	r1, r1, lr, r7
  wIalfa_est_Next -= wAux;
 80082e8:	fb06 371c 	mls	r7, r6, ip, r3
  wAux = pHandle->_Super.hElSpeedDpp * wAux;
 80082ec:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  wIbeta_est_Next -= wAux;
 80082f0:	fb06 8610 	mls	r6, r6, r0, r8
  wAux = ( int32_t ) hAux_Beta >> pHandle->F3POW2;
 80082f4:	4110      	asrs	r0, r2
  wAux = wAux * pHandle->hC6;
 80082f6:	fb00 f009 	mul.w	r0, r0, r9
  wAux = ( int32_t ) hAux_Alfa >> pHandle->F3POW2;
 80082fa:	fa4c f202 	asr.w	r2, ip, r2
  wBemf_alfa_est_Next += wAux;
 80082fe:	fb00 1803 	mla	r8, r0, r3, r1

  if (pHandle->hForcedDirection ==0)
 8008302:	f994 0124 	ldrsb.w	r0, [r4, #292]	; 0x124
  wAux = wAux * pHandle->hC6;
 8008306:	fb02 f209 	mul.w	r2, r2, r9
  wBemf_beta_est_Next -= wAux;
 800830a:	fb02 aa13 	mls	sl, r2, r3, sl
  if (pHandle->hForcedDirection ==0)
 800830e:	2800      	cmp	r0, #0
 8008310:	d144      	bne.n	800839c <STO_PLL_CalcElAngle+0x1ac>
  {
    /* we are in auxiliary mode, then rely on the speed detected */
    if(pHandle->_Super.hElSpeedDpp >= 0)
 8008312:	2b00      	cmp	r3, #0
 8008314:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8008318:	bfa8      	it	ge
 800831a:	f04f 0901 	movge.w	r9, #1
  int32_t wAlfa_Sin_tmp, wBeta_Cos_tmp;
  int16_t hOutput;
  Trig_Components Local_Components;
  int16_t hAux1, hAux2;

  Local_Components = MCM_Trig_Functions( pHandle->_Super.hElAngle );
 800831e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8008322:	f7f8 fdab 	bl	8000e7c <MCM_Trig_Functions>
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 8008326:	9b02      	ldr	r3, [sp, #8]
  hAux_Beta = ( int16_t )( hAux_Beta * wDirection  );
 8008328:	fb15 f509 	smulbb	r5, r5, r9
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 800832c:	fb13 f109 	smulbb	r1, r3, r9
  hRotor_Speed = STO_ExecutePLL( pHandle, hAux_Alfa, -hAux_Beta );
 8008330:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin*/
  wAlfa_Sin_tmp = ( int32_t )( hBemf_alfa_est ) * ( int32_t )Local_Components.hSin;
  wBeta_Cos_tmp = ( int32_t )( hBemf_beta_est ) * ( int32_t )Local_Components.hCos;
 8008332:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ( int32_t )( hBemf_alfa_est ) * ( int32_t )Local_Components.hSin;
 8008336:	fb10 f021 	smultb	r0, r0, r1
#else
  hAux2 = ( int16_t )( wAlfa_Sin_tmp >> 15 );
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller( & pHandle->PIRegulator, ( int32_t )( hAux1 ) - hAux2 );
 800833a:	f345 35cf 	sbfx	r5, r5, #15, #16
 800833e:	f340 31cf 	sbfx	r1, r0, #15, #16
 8008342:	1a69      	subs	r1, r5, r1
 8008344:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008348:	f7fe fa60 	bl	800680c <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 800834c:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
  if ( bBuffer_index == pHandle->SpeedBufferSizeUnit )
 8008350:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
  pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 8008354:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 8008356:	3301      	adds	r3, #1
 8008358:	b2db      	uxtb	r3, r3
  if ( bBuffer_index == pHandle->SpeedBufferSizeUnit )
 800835a:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800835c:	bf12      	itee	ne
 800835e:	461a      	movne	r2, r3
 8008360:	2200      	moveq	r2, #0
    bBuffer_index = 0u;
 8008362:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8008364:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8008368:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 800836c:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 8008370:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 8008374:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
  pHandle->_Super.hElAngle += hRotor_Speed;
 8008378:	88a3      	ldrh	r3, [r4, #4]
  pHandle->Ialfa_est = wIalfa_est_Next;
 800837a:	6627      	str	r7, [r4, #96]	; 0x60
  pHandle->_Super.hElAngle += hRotor_Speed;
 800837c:	4418      	add	r0, r3
 800837e:	b200      	sxth	r0, r0
  pHandle->Ibeta_est = wIbeta_est_Next;
 8008380:	e9c4 6819 	strd	r6, r8, [r4, #100]	; 0x64
  pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 8008384:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
  pHandle->_Super.hElAngle += hRotor_Speed;
 8008388:	80a0      	strh	r0, [r4, #4]
}
 800838a:	b007      	add	sp, #28
 800838c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ( pHandle->wBemf_alfa_est <= -INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 8008390:	1a1d      	subs	r5, r3, r0
 8008392:	42af      	cmp	r7, r5
    pHandle->wBemf_alfa_est = -INT16_MAX * ( int32_t )( pHandle->hF2 );
 8008394:	bfdc      	itt	le
 8008396:	66a5      	strle	r5, [r4, #104]	; 0x68
 8008398:	462f      	movle	r7, r5
 800839a:	e739      	b.n	8008210 <STO_PLL_CalcElAngle+0x20>
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 800839c:	fa1f f980 	uxth.w	r9, r0
 80083a0:	e7bd      	b.n	800831e <STO_PLL_CalcElAngle+0x12e>
  else if ( pHandle->Ibeta_est <= -INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 80083a2:	eba3 030e 	sub.w	r3, r3, lr
 80083a6:	4598      	cmp	r8, r3
    pHandle->Ibeta_est = -INT16_MAX * ( int32_t )( pHandle->hF1 );
 80083a8:	bfdc      	itt	le
 80083aa:	6663      	strle	r3, [r4, #100]	; 0x64
 80083ac:	4698      	movle	r8, r3
 80083ae:	e756      	b.n	800825e <STO_PLL_CalcElAngle+0x6e>
  else if ( pHandle->Ialfa_est <= -INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 80083b0:	eba3 080e 	sub.w	r8, r3, lr
 80083b4:	45c1      	cmp	r9, r8
    pHandle->Ialfa_est = -INT16_MAX * ( int32_t )( pHandle->hF1 );
 80083b6:	bfdc      	itt	le
 80083b8:	f8c4 8060 	strle.w	r8, [r4, #96]	; 0x60
 80083bc:	46c1      	movle	r9, r8
 80083be:	e747      	b.n	8008250 <STO_PLL_CalcElAngle+0x60>
  else if ( pHandle->wBemf_beta_est <= -INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 80083c0:	1a1b      	subs	r3, r3, r0
 80083c2:	429e      	cmp	r6, r3
    pHandle->wBemf_beta_est = -INT16_MAX * ( int32_t )( pHandle->hF2 );
 80083c4:	bfdc      	itt	le
 80083c6:	66e3      	strle	r3, [r4, #108]	; 0x6c
 80083c8:	9301      	strle	r3, [sp, #4]
 80083ca:	e730      	b.n	800822e <STO_PLL_CalcElAngle+0x3e>

080083cc <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 80083cc:	b570      	push	{r4, r5, r6, lr}
  uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 80083ce:	f890 510e 	ldrb.w	r5, [r0, #270]	; 0x10e
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80083d2:	2d00      	cmp	r5, #0
 80083d4:	f000 809a 	beq.w	800850c <STO_PLL_CalcAvrgMecSpeedUnit+0x140>
 80083d8:	f105 3cff 	add.w	ip, r5, #4294967295
 80083dc:	fa5f f38c 	uxtb.w	r3, ip
 80083e0:	f100 0472 	add.w	r4, r0, #114	; 0x72
 80083e4:	f100 0c74 	add.w	ip, r0, #116	; 0x74
 80083e8:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
  int32_t wAvrSpeed_dpp = ( int32_t )0;
 80083ec:	2200      	movs	r2, #0
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80083ee:	4623      	mov	r3, r4
    wAvrSpeed_dpp += ( int32_t )( pHandle->Speed_Buffer[i] );
 80083f0:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80083f4:	459c      	cmp	ip, r3
    wAvrSpeed_dpp += ( int32_t )( pHandle->Speed_Buffer[i] );
 80083f6:	4472      	add	r2, lr
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80083f8:	d1fa      	bne.n	80083f0 <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
  wAvrSpeed_dpp = wAvrSpeed_dpp / ( int16_t )bSpeedBufferSizeUnit;
 80083fa:	fb92 fef5 	sdiv	lr, r2, r5
 80083fe:	2200      	movs	r2, #0
    wError = ( int32_t )( pHandle->Speed_Buffer[i] ) - wAvrSpeed_dpp;
 8008400:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 8008404:	eba3 030e 	sub.w	r3, r3, lr
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 8008408:	4564      	cmp	r4, ip
    wAvrQuadraticError += wError;
 800840a:	fb03 2203 	mla	r2, r3, r3, r2
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 800840e:	d1f7      	bne.n	8008400 <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
  wAvrQuadraticError = wAvrQuadraticError / ( int16_t )bSpeedBufferSizeUnit;
 8008410:	fbb2 f2f5 	udiv	r2, r2, r5
  wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 8008414:	fb0e f30e 	mul.w	r3, lr, lr
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 8008418:	f8b0 5110 	ldrh.w	r5, [r0, #272]	; 0x110
  if ( pHandle->EnableDualCheck == true ) /*do algorithm if it's enabled*/
 800841c:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
  wAux = wAux / ( int32_t )( pHandle->_Super.DPPConvFactor);
 8008420:	69c4      	ldr	r4, [r0, #28]
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 8008422:	fb03 f505 	mul.w	r5, r3, r5
  wAux = wAvrSpeed_dpp * ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 8008426:	8b43      	ldrh	r3, [r0, #26]
 8008428:	fb0e fe03 	mul.w	lr, lr, r3
  wAux = wAux * ( int32_t ) ( pHandle->_Super.SpeedUnit );
 800842c:	7883      	ldrb	r3, [r0, #2]
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 800842e:	ebb2 1fe5 	cmp.w	r2, r5, asr #7
  wAux = wAux * ( int32_t ) ( pHandle->_Super.SpeedUnit );
 8008432:	fb0e f303 	mul.w	r3, lr, r3
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 8008436:	bfb8      	it	lt
 8008438:	f04f 0c01 	movlt.w	ip, #1
  wAux = wAux / ( int32_t )( pHandle->_Super.DPPConvFactor);
 800843c:	fb93 f3f4 	sdiv	r3, r3, r4
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 8008440:	bfa8      	it	ge
 8008442:	f04f 0c00 	movge.w	ip, #0
  wAux = wAux / ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008446:	7844      	ldrb	r4, [r0, #1]
 8008448:	fb93 f3f4 	sdiv	r3, r3, r4
  *pMecSpeedUnit = ( int16_t )wAux;
 800844c:	b21c      	sxth	r4, r3
 800844e:	800c      	strh	r4, [r1, #0]
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 8008450:	11ed      	asrs	r5, r5, #7
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wAux;
 8008452:	8184      	strh	r4, [r0, #12]
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 8008454:	f880 c0f5 	strb.w	ip, [r0, #245]	; 0xf5
  if ( pHandle->EnableDualCheck == true ) /*do algorithm if it's enabled*/
 8008458:	b9ae      	cbnz	r6, 8008486 <STO_PLL_CalcAvrgMecSpeedUnit+0xba>
  if ( pHandle->IsAlgorithmConverged == false )
 800845a:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
 800845e:	b353      	cbz	r3, 80084b6 <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
    if ( ( pHandle->IsSpeedReliable == false ) || ( bIs_Bemf_Consistent == false ) )
 8008460:	4295      	cmp	r5, r2
 8008462:	dc25      	bgt.n	80084b0 <STO_PLL_CalcAvrgMecSpeedUnit+0xe4>
      pHandle->ReliabilityCounter++;
 8008464:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 8008468:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
      pHandle->ReliabilityCounter++;
 800846c:	3301      	adds	r3, #1
 800846e:	b2db      	uxtb	r3, r3
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 8008470:	429a      	cmp	r2, r3
      pHandle->ReliabilityCounter++;
 8008472:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 8008476:	d81e      	bhi.n	80084b6 <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
        pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8008478:	78c2      	ldrb	r2, [r0, #3]
 800847a:	7002      	strb	r2, [r0, #0]
        pHandle->ReliabilityCounter = 0u;
 800847c:	2300      	movs	r3, #0
 800847e:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 8008482:	4618      	mov	r0, r3
 8008484:	bd70      	pop	{r4, r5, r6, pc}
    wAux = ( wAux < 0 ? ( -wAux ) : ( wAux ) ); /* wAux abs value   */
 8008486:	2b00      	cmp	r3, #0
    if ( wAux < ( int32_t )( pHandle->MaxAppPositiveMecSpeedUnit ) )
 8008488:	f8b0 411a 	ldrh.w	r4, [r0, #282]	; 0x11a
    wAux = ( wAux < 0 ? ( -wAux ) : ( wAux ) ); /* wAux abs value   */
 800848c:	bfb8      	it	lt
 800848e:	425b      	neglt	r3, r3
    if ( wAux < ( int32_t )( pHandle->MaxAppPositiveMecSpeedUnit ) )
 8008490:	429c      	cmp	r4, r3
 8008492:	dc14      	bgt.n	80084be <STO_PLL_CalcAvrgMecSpeedUnit+0xf2>
  bool bIs_Bemf_Consistent = false;
 8008494:	2400      	movs	r4, #0
  int32_t wObsBemfSq = 0, wEstBemfSq = 0;
 8008496:	4623      	mov	r3, r4
 8008498:	4626      	mov	r6, r4
    pHandle->Est_Bemf_Level = wEstBemfSq;
 800849a:	e9c0 633f 	strd	r6, r3, [r0, #252]	; 0xfc
  if ( pHandle->IsAlgorithmConverged == false )
 800849e:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 80084a2:	f880 40f9 	strb.w	r4, [r0, #249]	; 0xf9
  if ( pHandle->IsAlgorithmConverged == false )
 80084a6:	b133      	cbz	r3, 80084b6 <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
    if ( ( pHandle->IsSpeedReliable == false ) || ( bIs_Bemf_Consistent == false ) )
 80084a8:	4295      	cmp	r5, r2
 80084aa:	dddb      	ble.n	8008464 <STO_PLL_CalcAvrgMecSpeedUnit+0x98>
 80084ac:	2c00      	cmp	r4, #0
 80084ae:	d0d9      	beq.n	8008464 <STO_PLL_CalcAvrgMecSpeedUnit+0x98>
      pHandle->ReliabilityCounter = 0u;
 80084b0:	2300      	movs	r3, #0
 80084b2:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 80084b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      bAux = SPD_IsMecSpeedReliable ( &pHandle->_Super, pMecSpeedUnit );
 80084ba:	f7ff bcdb 	b.w	8007e74 <SPD_IsMecSpeedReliable>
      wObsBemf = ( int32_t )( pHandle->hBemf_alfa_est );
 80084be:	f9b0 6070 	ldrsh.w	r6, [r0, #112]	; 0x70
      wObsBemf = ( int32_t )( pHandle->hBemf_beta_est );
 80084c2:	f9b0 c072 	ldrsh.w	ip, [r0, #114]	; 0x72
      wEstBemfSq = ( wEstBemf * ( int32_t )( pHandle->BemfConsistencyGain ) ) / 64;
 80084c6:	f890 4119 	ldrb.w	r4, [r0, #281]	; 0x119
      wObsBemfSq = wObsBemf * wObsBemf;
 80084ca:	fb06 f606 	mul.w	r6, r6, r6
      wObsBemfSq += wObsBemf * wObsBemf;
 80084ce:	fb0c 660c 	mla	r6, ip, ip, r6
      wEstBemf = ( wAux * 32767 ) / ( int16_t )( pHandle->_Super.hMaxReliableMecSpeedUnit );
 80084d2:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 80084d6:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 80084da:	fb93 f3fc 	sdiv	r3, r3, ip
      wEstBemfSq = ( wEstBemf * ( int32_t )( pHandle->BemfConsistencyGain ) ) / 64;
 80084de:	fb03 f404 	mul.w	r4, r3, r4
 80084e2:	2c00      	cmp	r4, #0
 80084e4:	bfb8      	it	lt
 80084e6:	343f      	addlt	r4, #63	; 0x3f
 80084e8:	11a4      	asrs	r4, r4, #6
      wEstBemfSq *= wEstBemf;
 80084ea:	fb04 f303 	mul.w	r3, r4, r3
                     ( wEstBemfSq / 64 ) * ( int32_t )( pHandle->BemfConsistencyCheck );
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	461c      	mov	r4, r3
 80084f2:	f890 c118 	ldrb.w	ip, [r0, #280]	; 0x118
 80084f6:	bfb8      	it	lt
 80084f8:	f103 043f 	addlt.w	r4, r3, #63	; 0x3f
 80084fc:	11a4      	asrs	r4, r4, #6
      wEstBemfSqLo = wEstBemfSq -
 80084fe:	fb0c 3414 	mls	r4, ip, r4, r3
      if ( wObsBemfSq > wEstBemfSqLo )
 8008502:	42a6      	cmp	r6, r4
 8008504:	bfd4      	ite	le
 8008506:	2400      	movle	r4, #0
 8008508:	2401      	movgt	r4, #1
 800850a:	e7c6      	b.n	800849a <STO_PLL_CalcAvrgMecSpeedUnit+0xce>
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 800850c:	462b      	mov	r3, r5
 800850e:	462a      	mov	r2, r5
  wAvrSpeed_dpp = wAvrSpeed_dpp / ( int16_t )bSpeedBufferSizeUnit;
 8008510:	46ae      	mov	lr, r5
 8008512:	e781      	b.n	8008418 <STO_PLL_CalcAvrgMecSpeedUnit+0x4c>

08008514 <STO_PLL_CalcAvrgElSpeedDpp>:
  int16_t hSpeedBufferSizeUnit = ( int16_t )( pHandle->SpeedBufferSizeUnit );
 8008514:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
  hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8008518:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
  int16_t hIndexNew = ( int16_t )pHandle->Speed_Buffer_Index;
 800851c:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
  hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8008520:	1acb      	subs	r3, r1, r3
 8008522:	b29b      	uxth	r3, r3
{
 8008524:	b510      	push	{r4, lr}
  int32_t wSum = pHandle->DppBufferSum;
 8008526:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
  if ( hBufferSizeDiff == 0 )
 800852a:	b973      	cbnz	r3, 800854a <STO_PLL_CalcAvrgElSpeedDpp+0x36>
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 800852c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
           pHandle->SpeedBufferOldestEl;
 8008530:	f9b0 110c 	ldrsh.w	r1, [r0, #268]	; 0x10c
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8008534:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 8008538:	4423      	add	r3, r4
 800853a:	1a5b      	subs	r3, r3, r1
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800853c:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
  pHandle->DppBufferSum = wSum;
 8008540:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8008544:	4113      	asrs	r3, r2
  pHandle->_Super.hElSpeedDpp = ( int16_t )wAvrSpeed_dpp;
 8008546:	81c3      	strh	r3, [r0, #14]
}
 8008548:	bd10      	pop	{r4, pc}
    hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800854a:	4413      	add	r3, r2
 800854c:	fa0f fc83 	sxth.w	ip, r3
    if ( hIndexOldTemp >= hSpeedBufferSizeUnit )
 8008550:	4561      	cmp	r1, ip
    hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8008552:	b29b      	uxth	r3, r3
    if ( hIndexOldTemp >= hSpeedBufferSizeUnit )
 8008554:	dc05      	bgt.n	8008562 <STO_PLL_CalcAvrgElSpeedDpp+0x4e>
 8008556:	fa1f fe81 	uxth.w	lr, r1
      hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 800855a:	eba3 030e 	sub.w	r3, r3, lr
 800855e:	fa0f fc83 	sxth.w	ip, r3
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8008562:	eb00 0242 	add.w	r2, r0, r2, lsl #1
           pHandle->Speed_Buffer[hIndexOld];
 8008566:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 800856a:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
           pHandle->Speed_Buffer[hIndexOld];
 800856e:	f9bc 2074 	ldrsh.w	r2, [ip, #116]	; 0x74
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8008572:	4423      	add	r3, r4
 8008574:	1a9b      	subs	r3, r3, r2
 8008576:	e7e1      	b.n	800853c <STO_PLL_CalcAvrgElSpeedDpp+0x28>

08008578 <STO_PLL_Clear>:
{
 8008578:	b510      	push	{r4, lr}
  * @retval none
  */
static void STO_InitSpeedBuffer( STO_PLL_Handle_t * pHandle )
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 800857a:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
  pHandle->Ialfa_est = ( int32_t )0;
 800857e:	2100      	movs	r1, #0
  pHandle->Ibeta_est = ( int32_t )0;
 8008580:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
  pHandle->wBemf_beta_est = ( int32_t )0;
 8008584:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
  pHandle->Est_Bemf_Level = ( int32_t )0;
 8008588:	e9c0 113f 	strd	r1, r1, [r0, #252]	; 0xfc
{
 800858c:	4604      	mov	r4, r0
  pHandle->_Super.hElAngle = ( int16_t )0;
 800858e:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hElSpeedDpp = ( int16_t )0;
 8008590:	81c1      	strh	r1, [r0, #14]
  pHandle->ConsistencyCounter = 0u;
 8008592:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
  pHandle->IsAlgorithmConverged = false;
 8008596:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
  pHandle->DppBufferSum = ( int32_t )0;
 800859a:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
  pHandle->ForceConvergency = false;
 800859e:	f8a0 1122 	strh.w	r1, [r0, #290]	; 0x122

  /*init speed buffer*/
  for ( b_i = 0u; b_i < bSpeedBufferSize; b_i++ )
 80085a2:	b11a      	cbz	r2, 80085ac <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = ( int16_t )0;
 80085a4:	0052      	lsls	r2, r2, #1
 80085a6:	3074      	adds	r0, #116	; 0x74
 80085a8:	f000 fb6c 	bl	8008c84 <memset>
  }
  pHandle->Speed_Buffer_Index = 0u;
 80085ac:	2100      	movs	r1, #0
 80085ae:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
  pHandle->SpeedBufferOldestEl = ( int16_t )0;
 80085b2:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
  PID_SetIntegralTerm( & pHandle->PIRegulator, ( int32_t )0 );
 80085b6:	f104 0034 	add.w	r0, r4, #52	; 0x34
}
 80085ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  PID_SetIntegralTerm( & pHandle->PIRegulator, ( int32_t )0 );
 80085be:	f7fe b919 	b.w	80067f4 <PID_SetIntegralTerm>
 80085c2:	bf00      	nop

080085c4 <STO_PLL_Init>:
{
 80085c4:	b510      	push	{r4, lr}
  pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 80085c6:	f890 1116 	ldrb.w	r1, [r0, #278]	; 0x116
  htempk = ( int16_t )( C6_COMP_CONST1 / ( pHandle->hF2 ) );
 80085ca:	4b19      	ldr	r3, [pc, #100]	; (8008630 <STO_PLL_Init+0x6c>)
 80085cc:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	; 0x2e
  pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 80085d0:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
  pHandle->EnableDualCheck = true;
 80085d4:	2201      	movs	r2, #1
  pHandle->F3POW2 = 0u;
 80085d6:	2100      	movs	r1, #0
  htempk = ( int16_t )( C6_COMP_CONST1 / ( pHandle->hF2 ) );
 80085d8:	fb93 f3fe 	sdiv	r3, r3, lr
 80085dc:	b21b      	sxth	r3, r3
{
 80085de:	4604      	mov	r4, r0
  pHandle->EnableDualCheck = true;
 80085e0:	f880 2104 	strb.w	r2, [r0, #260]	; 0x104
  pHandle->F3POW2 = 0u;
 80085e4:	8641      	strh	r1, [r0, #50]	; 0x32
  while ( htempk != 0 )
 80085e6:	b30b      	cbz	r3, 800862c <STO_PLL_Init+0x68>
  wAux = ( int32_t )1;
 80085e8:	4611      	mov	r1, r2
    htempk /= ( int16_t )2;
 80085ea:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  while ( htempk != 0 )
 80085ee:	f102 0c01 	add.w	ip, r2, #1
 80085f2:	105b      	asrs	r3, r3, #1
 80085f4:	4610      	mov	r0, r2
    wAux *= ( int32_t )2;
 80085f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
  while ( htempk != 0 )
 80085fa:	fa1f f28c 	uxth.w	r2, ip
 80085fe:	d1f4      	bne.n	80085ea <STO_PLL_Init+0x26>
  pHandle->hF3 = ( int16_t )wAux;
 8008600:	b20a      	sxth	r2, r1
 8008602:	8660      	strh	r0, [r4, #50]	; 0x32
  wAux = ( int32_t )( pHandle->hF2 ) * pHandle->hF3;
 8008604:	fb0e f102 	mul.w	r1, lr, r2
  pHandle->hC6 = ( int16_t )( wAux / C6_COMP_CONST2 );
 8008608:	480a      	ldr	r0, [pc, #40]	; (8008634 <STO_PLL_Init+0x70>)
  pHandle->hF3 = ( int16_t )wAux;
 800860a:	8622      	strh	r2, [r4, #48]	; 0x30
  pHandle->hC6 = ( int16_t )( wAux / C6_COMP_CONST2 );
 800860c:	17cb      	asrs	r3, r1, #31
 800860e:	fb80 0101 	smull	r0, r1, r0, r1
 8008612:	ebc3 2121 	rsb	r1, r3, r1, asr #8
  STO_PLL_Clear( pHandle );
 8008616:	4620      	mov	r0, r4
  pHandle->hC6 = ( int16_t )( wAux / C6_COMP_CONST2 );
 8008618:	8561      	strh	r1, [r4, #42]	; 0x2a
  STO_PLL_Clear( pHandle );
 800861a:	f7ff ffad 	bl	8008578 <STO_PLL_Clear>
  PID_HandleInit( & pHandle->PIRegulator );
 800861e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008622:	f7fe f8d3 	bl	80067cc <PID_HandleInit>
  pHandle->_Super.hMecAccelUnitP = 0;
 8008626:	2300      	movs	r3, #0
 8008628:	8263      	strh	r3, [r4, #18]
}
 800862a:	bd10      	pop	{r4, pc}
 800862c:	4671      	mov	r1, lr
 800862e:	e7eb      	b.n	8008608 <STO_PLL_Init+0x44>
 8008630:	000fea5e 	.word	0x000fea5e
 8008634:	06488dc5 	.word	0x06488dc5

08008638 <STO_PLL_IsObserverConverged>:
  int16_t hEstimatedSpeedUnit, hUpperThreshold, hLowerThreshold;
  int32_t wAux;
  bool bAux = false;
  int32_t wtemp;
  
  if ( pHandle->ForceConvergency2 == true )
 8008638:	f890 3123 	ldrb.w	r3, [r0, #291]	; 0x123
 800863c:	b10b      	cbz	r3, 8008642 <STO_PLL_IsObserverConverged+0xa>
  {
    hForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800863e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  }

  if ( pHandle->ForceConvergency == true )
 8008642:	f890 3122 	ldrb.w	r3, [r0, #290]	; 0x122
 8008646:	b133      	cbz	r3, 8008656 <STO_PLL_IsObserverConverged+0x1e>
  {
    bAux = true;
    pHandle->IsAlgorithmConverged = true;
 8008648:	2301      	movs	r3, #1
    pHandle->_Super.bSpeedErrorNumber = 0u;
 800864a:	2200      	movs	r2, #0
    pHandle->IsAlgorithmConverged = true;
 800864c:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
    pHandle->_Super.bSpeedErrorNumber = 0u;
 8008650:	7002      	strb	r2, [r0, #0]
      }
    }
  }

  return ( bAux );
}
 8008652:	4618      	mov	r0, r3
 8008654:	4770      	bx	lr
    hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008656:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    wtemp = ( int32_t )hEstimatedSpeedUnit * ( int32_t )hForcedMecSpeedUnit;
 800865a:	fb02 fc01 	mul.w	ip, r2, r1
    if ( wtemp > 0 )
 800865e:	f1bc 0f00 	cmp.w	ip, #0
{
 8008662:	b500      	push	{lr}
    wtemp = ( int32_t )hEstimatedSpeedUnit * ( int32_t )hForcedMecSpeedUnit;
 8008664:	468e      	mov	lr, r1
    if ( wtemp > 0 )
 8008666:	dd3b      	ble.n	80086e0 <STO_PLL_IsObserverConverged+0xa8>
      if ( hEstimatedSpeedUnit < 0 )
 8008668:	2a00      	cmp	r2, #0
        hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 800866a:	bfbc      	itt	lt
 800866c:	4252      	neglt	r2, r2
 800866e:	b212      	sxthlt	r2, r2
      if ( hForcedMecSpeedUnit < 0 )
 8008670:	2900      	cmp	r1, #0
        hForcedMecSpeedUnit = -hForcedMecSpeedUnit;
 8008672:	bfbc      	itt	lt
 8008674:	4249      	neglt	r1, r1
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 8008676:	fa0f fe81 	sxthlt.w	lr, r1
      if ( pHandle->IsSpeedReliable == true )
 800867a:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
 800867e:	b361      	cbz	r1, 80086da <STO_PLL_IsObserverConverged+0xa2>
        if ( ( uint16_t )hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed )
 8008680:	f8b0 c114 	ldrh.w	ip, [r0, #276]	; 0x114
 8008684:	b291      	uxth	r1, r2
 8008686:	458c      	cmp	ip, r1
 8008688:	d227      	bcs.n	80086da <STO_PLL_IsObserverConverged+0xa2>
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_L;
 800868a:	f890 1113 	ldrb.w	r1, [r0, #275]	; 0x113
 800868e:	fb0e f101 	mul.w	r1, lr, r1
      hLowerThreshold = ( int16_t )( wAux / ( int32_t )16 );
 8008692:	2900      	cmp	r1, #0
 8008694:	bfb8      	it	lt
 8008696:	310f      	addlt	r1, #15
          if ( hEstimatedSpeedUnit >= hLowerThreshold )
 8008698:	f341 110f 	sbfx	r1, r1, #4, #16
 800869c:	428a      	cmp	r2, r1
 800869e:	db1c      	blt.n	80086da <STO_PLL_IsObserverConverged+0xa2>
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 80086a0:	f890 1112 	ldrb.w	r1, [r0, #274]	; 0x112
 80086a4:	fb0e f101 	mul.w	r1, lr, r1
      hUpperThreshold = ( int16_t )( wAux / ( int32_t )16 );
 80086a8:	2900      	cmp	r1, #0
 80086aa:	bfb8      	it	lt
 80086ac:	310f      	addlt	r1, #15
            if ( hEstimatedSpeedUnit <= hUpperThreshold )
 80086ae:	f341 110f 	sbfx	r1, r1, #4, #16
 80086b2:	428a      	cmp	r2, r1
 80086b4:	dc11      	bgt.n	80086da <STO_PLL_IsObserverConverged+0xa2>
              pHandle->ConsistencyCounter++;
 80086b6:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
              if ( pHandle->ConsistencyCounter >=
 80086ba:	f890 1116 	ldrb.w	r1, [r0, #278]	; 0x116
              pHandle->ConsistencyCounter++;
 80086be:	3201      	adds	r2, #1
 80086c0:	b2d2      	uxtb	r2, r2
              if ( pHandle->ConsistencyCounter >=
 80086c2:	4291      	cmp	r1, r2
              pHandle->ConsistencyCounter++;
 80086c4:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
              if ( pHandle->ConsistencyCounter >=
 80086c8:	d80a      	bhi.n	80086e0 <STO_PLL_IsObserverConverged+0xa8>
    pHandle->_Super.bSpeedErrorNumber = 0u;
 80086ca:	2200      	movs	r2, #0
    pHandle->IsAlgorithmConverged = true;
 80086cc:	2301      	movs	r3, #1
    pHandle->_Super.bSpeedErrorNumber = 0u;
 80086ce:	7002      	strb	r2, [r0, #0]
    pHandle->IsAlgorithmConverged = true;
 80086d0:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	f85d fb04 	ldr.w	pc, [sp], #4
              pHandle->ConsistencyCounter = 0u;
 80086da:	2200      	movs	r2, #0
 80086dc:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80086e6:	bf00      	nop

080086e8 <STO_PLL_GetEstimatedBemf>:
__weak alphabeta_t STO_PLL_GetEstimatedBemf( STO_PLL_Handle_t * pHandle )
{
  alphabeta_t Vaux;
  Vaux.alpha = pHandle->hBemf_alfa_est;
  Vaux.beta = pHandle->hBemf_beta_est;
  return ( Vaux );
 80086e8:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80086ea:	2200      	movs	r2, #0
 80086ec:	b299      	uxth	r1, r3
 80086ee:	f361 020f 	bfi	r2, r1, #0, #16
 80086f2:	0c1b      	lsrs	r3, r3, #16
 80086f4:	f363 421f 	bfi	r2, r3, #16, #16
{
 80086f8:	b082      	sub	sp, #8
}
 80086fa:	4610      	mov	r0, r2
 80086fc:	b002      	add	sp, #8
 80086fe:	4770      	bx	lr

08008700 <STO_PLL_GetEstimatedCurrent>:
#endif

#ifdef FULL_MISRA_C_COMPLIANCY
  Iaux.beta = ( int16_t )( pHandle->Ibeta_est / ( pHandle->hF1 ) );
#else
  Iaux.beta = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
 8008700:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
  Iaux.alpha = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 8008704:	f8b0 c11c 	ldrh.w	ip, [r0, #284]	; 0x11c
 8008708:	fa42 f20c 	asr.w	r2, r2, ip
#endif

  return ( Iaux );
 800870c:	fa43 f30c 	asr.w	r3, r3, ip
 8008710:	b292      	uxth	r2, r2
 8008712:	2100      	movs	r1, #0
 8008714:	f362 010f 	bfi	r1, r2, #0, #16
 8008718:	b29b      	uxth	r3, r3
 800871a:	f363 411f 	bfi	r1, r3, #16, #16
{
 800871e:	b082      	sub	sp, #8
}
 8008720:	4608      	mov	r0, r1
 8008722:	b002      	add	sp, #8
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop

08008728 <STO_PLL_GetObserverGains>:
  * @param  phC4 pointer to int16_t used to return parameters hhC4
  * @retval none
  */
__weak void STO_PLL_GetObserverGains( STO_PLL_Handle_t * pHandle, int16_t * phC2, int16_t * phC4 )
{
  *phC2 = pHandle->hC2;
 8008728:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800872c:	800b      	strh	r3, [r1, #0]
  *phC4 = pHandle->hC4;
 800872e:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 8008732:	8013      	strh	r3, [r2, #0]
}
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop

08008738 <STO_PLL_SetObserverGains>:
  * @retval none
  */
__weak void STO_PLL_SetObserverGains( STO_PLL_Handle_t * pHandle, int16_t hhC1, int16_t hhC2 )
{

  pHandle->hC2 = hhC1;
 8008738:	8441      	strh	r1, [r0, #34]	; 0x22
  pHandle->hC4 = hhC2;
 800873a:	84c2      	strh	r2, [r0, #38]	; 0x26
}
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop

08008740 <STO_GetPLLGains>:
  * @param  pPgain pointer to int16_t used to return PLL proportional gain
  * @param  pIgain pointer to int16_t used to return PLL integral gain
  * @retval none
  */
__weak void STO_GetPLLGains( STO_PLL_Handle_t * pHandle, int16_t * pPgain, int16_t * pIgain )
{
 8008740:	b570      	push	{r4, r5, r6, lr}

  *pPgain = PID_GetKP( & pHandle->PIRegulator );
 8008742:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8008746:	4620      	mov	r0, r4
{
 8008748:	460e      	mov	r6, r1
 800874a:	4615      	mov	r5, r2
  *pPgain = PID_GetKP( & pHandle->PIRegulator );
 800874c:	f7fe f84a 	bl	80067e4 <PID_GetKP>
 8008750:	8030      	strh	r0, [r6, #0]
  *pIgain = PID_GetKI( & pHandle->PIRegulator );
 8008752:	4620      	mov	r0, r4
 8008754:	f7fe f84a 	bl	80067ec <PID_GetKI>
 8008758:	8028      	strh	r0, [r5, #0]
}
 800875a:	bd70      	pop	{r4, r5, r6, pc}

0800875c <STO_SetPLLGains>:
  * @param  hPgain new value for PLL proportional gain
  * @param  hIgain new value for PLL integral gain
  * @retval none
  */
__weak void STO_SetPLLGains( STO_PLL_Handle_t * pHandle, int16_t hPgain, int16_t hIgain )
{
 800875c:	b510      	push	{r4, lr}
 800875e:	b082      	sub	sp, #8
  PID_SetKP( & pHandle->PIRegulator, hPgain );
 8008760:	3034      	adds	r0, #52	; 0x34
{
 8008762:	4614      	mov	r4, r2
  PID_SetKP( & pHandle->PIRegulator, hPgain );
 8008764:	9001      	str	r0, [sp, #4]
 8008766:	f7fe f839 	bl	80067dc <PID_SetKP>
  PID_SetKI( & pHandle->PIRegulator, hIgain );
 800876a:	9801      	ldr	r0, [sp, #4]
 800876c:	4621      	mov	r1, r4
}
 800876e:	b002      	add	sp, #8
 8008770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  PID_SetKI( & pHandle->PIRegulator, hIgain );
 8008774:	f7fe b834 	b.w	80067e0 <PID_SetKI>

08008778 <STO_OTF_ResetPLL>:
  * @retval none
  */
__weak void STO_OTF_ResetPLL( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  PID_SetIntegralTerm( &pHdl->PIRegulator, ( int32_t )0 );
 8008778:	6800      	ldr	r0, [r0, #0]
 800877a:	2100      	movs	r1, #0
 800877c:	3034      	adds	r0, #52	; 0x34
 800877e:	f7fe b839 	b.w	80067f4 <PID_SetIntegralTerm>
 8008782:	bf00      	nop

08008784 <STO_ResetPLL>:
  * @param  pHandle: handler of the current instance of the STO component
  * @retval none
  */
__weak void STO_ResetPLL( STO_PLL_Handle_t * pHandle )
{
  PID_SetIntegralTerm( &pHandle->PIRegulator, ( int32_t )0 );
 8008784:	2100      	movs	r1, #0
 8008786:	3034      	adds	r0, #52	; 0x34
 8008788:	f7fe b834 	b.w	80067f4 <PID_SetIntegralTerm>

0800878c <STO_PLL_GetEstimatedBemfLevel>:
  * @retval int32_t
  */
__weak int32_t STO_PLL_GetEstimatedBemfLevel( STO_PLL_Handle_t * pHandle )
{
  return ( pHandle->Est_Bemf_Level );
}
 800878c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop

08008794 <STO_PLL_GetObservedBemfLevel>:
  * @retval int32_t
  */
__weak int32_t STO_PLL_GetObservedBemfLevel( STO_PLL_Handle_t * pHandle )
{
  return ( pHandle->Obs_Bemf_Level );
}
 8008794:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop

0800879c <STO_PLL_IsVarianceTight>:
  * @retval bool Variance state
  */
__weak bool STO_PLL_IsVarianceTight( const STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  return ( pHdl->IsSpeedReliable );
 800879c:	6803      	ldr	r3, [r0, #0]
}
 800879e:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 80087a2:	4770      	bx	lr

080087a4 <STO_PLL_ForceConvergency1>:
  * @param  pHandle: handler of the current instance of the STO component
  */
__weak void STO_PLL_ForceConvergency1( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  pHdl->ForceConvergency = true;
 80087a4:	6803      	ldr	r3, [r0, #0]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
}
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop

080087b0 <STO_PLL_ForceConvergency2>:
  * @param  pHandle: handler of the current instance of the STO component
  */
__weak void STO_PLL_ForceConvergency2( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  pHdl->ForceConvergency2 = true;
 80087b0:	6803      	ldr	r3, [r0, #0]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
}
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop

080087bc <STO_SetDirection>:
  * @brief  forces the rotation direction
  * @param  direction: imposed direction
  */
__weak void STO_SetDirection( STO_PLL_Handle_t * pHandle, uint8_t direction )
{
  pHandle->hForcedDirection = direction;
 80087bc:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
}
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop

080087c4 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 80087c4:	f7fd bf52 	b.w	800666c <FCP_Init>

080087c8 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 80087c8:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
 80087cc:	b16b      	cbz	r3, 80087ea <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 80087ce:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 80087d2:	4602      	mov	r2, r0
 80087d4:	b1a3      	cbz	r3, 8008800 <UFCP_TX_IRQ_Handler+0x38>
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d108      	bne.n	80087ec <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 80087da:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80087dc:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80087e0:	6281      	str	r1, [r0, #40]	; 0x28

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 80087e2:	3301      	adds	r3, #1
 80087e4:	f882 3098 	strb.w	r3, [r2, #152]	; 0x98
 80087e8:	4770      	bx	lr
 80087ea:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80087ec:	7d41      	ldrb	r1, [r0, #21]
 80087ee:	3101      	adds	r1, #1
 80087f0:	428b      	cmp	r3, r1
 80087f2:	dc07      	bgt.n	8008804 <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 80087f4:	18c1      	adds	r1, r0, r3
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80087f6:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 80087fa:	7d09      	ldrb	r1, [r1, #20]
 80087fc:	6281      	str	r1, [r0, #40]	; 0x28
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80087fe:	e7f0      	b.n	80087e2 <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8008800:	7d01      	ldrb	r1, [r0, #20]
        break;
 8008802:	e7eb      	b.n	80087dc <UFCP_TX_IRQ_Handler+0x14>
{
 8008804:	b410      	push	{r4}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8008806:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
 800880a:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
 800880e:	628b      	str	r3, [r1, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008810:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008818:	e841 3400 	strex	r4, r3, [r1]
 800881c:	2c00      	cmp	r4, #0
 800881e:	d1f7      	bne.n	8008810 <UFCP_TX_IRQ_Handler+0x48>
    }
    else
    {
      LL_USART_DisableIT_TXE(pHandle->USARTx);
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8008820:	f882 4097 	strb.w	r4, [r2, #151]	; 0x97

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8008824:	e9d2 0300 	ldrd	r0, r3, [r2]
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8008828:	f85d 4b04 	ldr.w	r4, [sp], #4
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800882c:	4718      	bx	r3
 800882e:	bf00      	nop

08008830 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8008830:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8008834:	b973      	cbnz	r3, 8008854 <UFCP_Receive+0x24>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8008836:	2301      	movs	r3, #1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008838:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 800883c:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	e852 3f00 	ldrex	r3, [r2]
 8008844:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008848:	e842 3100 	strex	r1, r3, [r2]
 800884c:	2900      	cmp	r1, #0
 800884e:	d1f7      	bne.n	8008840 <UFCP_Receive+0x10>

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8008850:	2002      	movs	r0, #2
 8008852:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8008854:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8008856:	4770      	bx	lr

08008858 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800885c:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8008860:	2800      	cmp	r0, #0
 8008862:	d147      	bne.n	80088f4 <UFCP_Send+0x9c>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 8008864:	1e58      	subs	r0, r3, #1
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8008866:	f104 0616 	add.w	r6, r4, #22
    pHandle->TxFrame.Code = code;
 800886a:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 800886c:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 800886e:	b2c0      	uxtb	r0, r0
 8008870:	b343      	cbz	r3, 80088c4 <UFCP_Send+0x6c>
 8008872:	1c51      	adds	r1, r2, #1
 8008874:	1a75      	subs	r5, r6, r1
 8008876:	2d02      	cmp	r5, #2
 8008878:	d93e      	bls.n	80088f8 <UFCP_Send+0xa0>
 800887a:	2807      	cmp	r0, #7
 800887c:	d93c      	bls.n	80088f8 <UFCP_Send+0xa0>
 800887e:	089d      	lsrs	r5, r3, #2
 8008880:	3d01      	subs	r5, #1
 8008882:	b2e9      	uxtb	r1, r5
 8008884:	1d15      	adds	r5, r2, #4
 8008886:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 800888a:	46b4      	mov	ip, r6
 800888c:	4611      	mov	r1, r2
 800888e:	f851 eb04 	ldr.w	lr, [r1], #4
 8008892:	f84c eb04 	str.w	lr, [ip], #4
 8008896:	42a9      	cmp	r1, r5
 8008898:	d1f9      	bne.n	800888e <UFCP_Send+0x36>
 800889a:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 800889e:	1a40      	subs	r0, r0, r1
 80088a0:	428b      	cmp	r3, r1
 80088a2:	b2c0      	uxtb	r0, r0
 80088a4:	eb02 0c01 	add.w	ip, r2, r1
 80088a8:	eb06 0501 	add.w	r5, r6, r1
 80088ac:	d00a      	beq.n	80088c4 <UFCP_Send+0x6c>
 80088ae:	5c53      	ldrb	r3, [r2, r1]
 80088b0:	5473      	strb	r3, [r6, r1]
 80088b2:	b138      	cbz	r0, 80088c4 <UFCP_Send+0x6c>
 80088b4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80088b8:	706b      	strb	r3, [r5, #1]
 80088ba:	2801      	cmp	r0, #1
 80088bc:	d002      	beq.n	80088c4 <UFCP_Send+0x6c>
 80088be:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80088c2:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 80088c4:	f104 0014 	add.w	r0, r4, #20
 80088c8:	f7fd fee4 	bl	8006694 <FCP_CalcCRC>

    pHandle->TxFrameLevel = 0;
 80088cc:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 80088ce:	2301      	movs	r3, #1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 80088d0:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 80088d4:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 80088d8:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 80088dc:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e0:	e852 3f00 	ldrex	r3, [r2]
 80088e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e8:	e842 3100 	strex	r1, r3, [r2]
 80088ec:	2900      	cmp	r1, #0
 80088ee:	d1f7      	bne.n	80088e0 <UFCP_Send+0x88>
 80088f0:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 80088f2:	bd70      	pop	{r4, r5, r6, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 80088f4:	2001      	movs	r0, #1
}
 80088f6:	bd70      	pop	{r4, r5, r6, pc}
 80088f8:	f104 0015 	add.w	r0, r4, #21
 80088fc:	4413      	add	r3, r2
 80088fe:	e000      	b.n	8008902 <UFCP_Send+0xaa>
 8008900:	3101      	adds	r1, #1
    while ( size-- ) *dest++ = *buffer++;
 8008902:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8008906:	f800 2f01 	strb.w	r2, [r0, #1]!
 800890a:	4299      	cmp	r1, r3
 800890c:	d1f8      	bne.n	8008900 <UFCP_Send+0xa8>
 800890e:	e7d9      	b.n	80088c4 <UFCP_Send+0x6c>

08008910 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8008910:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8008914:	b90b      	cbnz	r3, 800891a <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008916:	4830      	ldr	r0, [pc, #192]	; (80089d8 <UFCP_RX_IRQ_Handler+0xc8>)
}
 8008918:	4770      	bx	lr
{
 800891a:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 800891c:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 8008920:	b083      	sub	sp, #12
 8008922:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8008924:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 8008926:	b393      	cbz	r3, 800898e <UFCP_RX_IRQ_Handler+0x7e>
 8008928:	2b01      	cmp	r3, #1
 800892a:	d03a      	beq.n	80089a2 <UFCP_RX_IRQ_Handler+0x92>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800892c:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 8008930:	3101      	adds	r1, #1
 8008932:	428b      	cmp	r3, r1
 8008934:	dc08      	bgt.n	8008948 <UFCP_RX_IRQ_Handler+0x38>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8008936:	18c1      	adds	r1, r0, r3
          pBaseHandle->RxFrameLevel++;
 8008938:	3301      	adds	r3, #1
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800893a:	4827      	ldr	r0, [pc, #156]	; (80089d8 <UFCP_RX_IRQ_Handler+0xc8>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800893c:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 8008940:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8008944:	b003      	add	sp, #12
 8008946:	bd30      	pop	{r4, r5, pc}
          pBaseHandle->RxTimeoutCountdown = 0;
 8008948:	2300      	movs	r3, #0
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800894a:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 800894e:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 8008952:	8243      	strh	r3, [r0, #18]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008954:	e851 3f00 	ldrex	r3, [r1]
 8008958:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895c:	e841 3200 	strex	r2, r3, [r1]
 8008960:	2a00      	cmp	r2, #0
 8008962:	d1f7      	bne.n	8008954 <UFCP_RX_IRQ_Handler+0x44>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008964:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8008968:	f104 0099 	add.w	r0, r4, #153	; 0x99
 800896c:	f7fd fe92 	bl	8006694 <FCP_CalcCRC>
 8008970:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8008974:	4283      	cmp	r3, r0
 8008976:	d122      	bne.n	80089be <UFCP_RX_IRQ_Handler+0xae>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8008978:	6820      	ldr	r0, [r4, #0]
 800897a:	68a5      	ldr	r5, [r4, #8]
 800897c:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8008980:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 8008984:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8008988:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800898a:	4814      	ldr	r0, [pc, #80]	; (80089dc <UFCP_RX_IRQ_Handler+0xcc>)
 800898c:	e7da      	b.n	8008944 <UFCP_RX_IRQ_Handler+0x34>
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800898e:	8a01      	ldrh	r1, [r0, #16]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8008990:	4813      	ldr	r0, [pc, #76]	; (80089e0 <UFCP_RX_IRQ_Handler+0xd0>)
        pBaseHandle->RxFrame.Code = rx_byte;
 8008992:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 8008996:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8008998:	8261      	strh	r1, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 800899a:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 800899e:	b003      	add	sp, #12
 80089a0:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 80089a2:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 80089a4:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 80089a8:	d404      	bmi.n	80089b4 <UFCP_RX_IRQ_Handler+0xa4>
        pBaseHandle->RxFrameLevel++;
 80089aa:	2302      	movs	r3, #2
 80089ac:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 80089b0:	4809      	ldr	r0, [pc, #36]	; (80089d8 <UFCP_RX_IRQ_Handler+0xc8>)
 80089b2:	e7c7      	b.n	8008944 <UFCP_RX_IRQ_Handler+0x34>
          pBaseHandle->RxFrameLevel =0 ;
 80089b4:	2300      	movs	r3, #0
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 80089b6:	4808      	ldr	r0, [pc, #32]	; (80089d8 <UFCP_RX_IRQ_Handler+0xc8>)
          pBaseHandle->RxFrameLevel =0 ;
 80089b8:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
 80089bc:	e7c2      	b.n	8008944 <UFCP_RX_IRQ_Handler+0x34>
            error_code = FCP_MSG_RX_BAD_CRC;
 80089be:	250a      	movs	r5, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80089c0:	2301      	movs	r3, #1
 80089c2:	f10d 0207 	add.w	r2, sp, #7
 80089c6:	21ff      	movs	r1, #255	; 0xff
 80089c8:	4620      	mov	r0, r4
            error_code = FCP_MSG_RX_BAD_CRC;
 80089ca:	f88d 5007 	strb.w	r5, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80089ce:	f7ff ff43 	bl	8008858 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80089d2:	4802      	ldr	r0, [pc, #8]	; (80089dc <UFCP_RX_IRQ_Handler+0xcc>)
  return ret_val;
 80089d4:	e7b6      	b.n	8008944 <UFCP_RX_IRQ_Handler+0x34>
 80089d6:	bf00      	nop
 80089d8:	08008ee4 	.word	0x08008ee4
 80089dc:	08008ee8 	.word	0x08008ee8
 80089e0:	08008ee6 	.word	0x08008ee6

080089e4 <UFCP_OVR_IRQ_Handler>:
{
 80089e4:	b500      	push	{lr}
 80089e6:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 80089e8:	f04f 0c08 	mov.w	ip, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80089ec:	2301      	movs	r3, #1
 80089ee:	f10d 0207 	add.w	r2, sp, #7
 80089f2:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 80089f4:	f88d c007 	strb.w	ip, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80089f8:	f7ff ff2e 	bl	8008858 <UFCP_Send>
}
 80089fc:	b003      	add	sp, #12
 80089fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a02:	bf00      	nop

08008a04 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008a04:	2300      	movs	r3, #0
 8008a06:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 8008a0a:	4770      	bx	lr

08008a0c <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 8008a0c:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8008a0e:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
  pHandle->_Super.bSpeedErrorNumber = 0u;
 8008a10:	7003      	strb	r3, [r0, #0]
  pHandle->wElSpeedDpp32 = 0;
 8008a12:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.hElAngle = 0;
 8008a16:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 8008a18:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 8008a1a:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 8008a1c:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 8008a1e:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8008a20:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->hElAngleAccu = 0;
 8008a22:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop

08008a28 <VSS_Init>:
{
 8008a28:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 8008a2a:	f7ff ffef 	bl	8008a0c <VSS_Clear>
}
 8008a2e:	bd08      	pop	{r3, pc}

08008a30 <VSS_CalcElAngle>:
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 8008a30:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 8008a34:	b123      	cbz	r3, 8008a40 <VSS_CalcElAngle+0x10>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 8008a36:	f9b1 3000 	ldrsh.w	r3, [r1]
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 8008a3a:	8083      	strh	r3, [r0, #4]
  return hRetAngle;
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	4770      	bx	lr
{
 8008a40:	b530      	push	{r4, r5, lr}
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008a42:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8008a46:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008a48:	88c5      	ldrh	r5, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 8008a4a:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 8008a4e:	7842      	ldrb	r2, [r0, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008a50:	fb9c f2f2 	sdiv	r2, ip, r2
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008a54:	4463      	add	r3, ip
 8008a56:	fa1f fe83 	uxth.w	lr, r3
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008a5a:	442a      	add	r2, r5
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008a5c:	b21b      	sxth	r3, r3
 8008a5e:	8603      	strh	r3, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008a60:	80c2      	strh	r2, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 8008a62:	b1fc      	cbz	r4, 8008aa4 <VSS_CalcElAngle+0x74>
      if ( pHandle->hTransitionRemainingSteps == 0 )
 8008a64:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 8008a68:	b1fa      	cbz	r2, 8008aaa <VSS_CalcElAngle+0x7a>
        pHandle->hTransitionRemainingSteps--;
 8008a6a:	3a01      	subs	r2, #1
 8008a6c:	b212      	sxth	r2, r2
 8008a6e:	85c2      	strh	r2, [r0, #46]	; 0x2e
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8008a70:	f1bc 0f00 	cmp.w	ip, #0
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8008a74:	8809      	ldrh	r1, [r1, #0]
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8008a76:	db28      	blt.n	8008aca <VSS_CalcElAngle+0x9a>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8008a78:	eba1 0e0e 	sub.w	lr, r1, lr
 8008a7c:	fa0f fe8e 	sxth.w	lr, lr
 8008a80:	2501      	movs	r5, #1
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 8008a82:	f9b0 4036 	ldrsh.w	r4, [r0, #54]	; 0x36
        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 8008a86:	fb0e f202 	mul.w	r2, lr, r2
        if ( hAngleDiff >= 0 )
 8008a8a:	f1be 0f00 	cmp.w	lr, #0
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 8008a8e:	fb92 f2f4 	sdiv	r2, r2, r4
        hAngleCorr *= hSignCorr;
 8008a92:	fb12 f205 	smulbb	r2, r2, r5
 8008a96:	b292      	uxth	r2, r2
        if ( hAngleDiff >= 0 )
 8008a98:	db10      	blt.n	8008abc <VSS_CalcElAngle+0x8c>
          pHandle->bTransitionLocked = true;
 8008a9a:	2301      	movs	r3, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8008a9c:	1a8a      	subs	r2, r1, r2
          pHandle->bTransitionLocked = true;
 8008a9e:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8008aa2:	b213      	sxth	r3, r2
  pHandle->_Super.hElAngle = hRetAngle;
 8008aa4:	8083      	strh	r3, [r0, #4]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	bd30      	pop	{r4, r5, pc}
        hRetAngle = *( int16_t * )pInputVars_str;
 8008aaa:	f9b1 3000 	ldrsh.w	r3, [r1]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 8008aae:	7002      	strb	r2, [r0, #0]
        pHandle->bTransitionEnded = true;
 8008ab0:	2401      	movs	r4, #1
 8008ab2:	f880 402d 	strb.w	r4, [r0, #45]	; 0x2d
  pHandle->_Super.hElAngle = hRetAngle;
 8008ab6:	8083      	strh	r3, [r0, #4]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	bd30      	pop	{r4, r5, pc}
          if ( pHandle->bTransitionLocked == false )
 8008abc:	f890 4032 	ldrb.w	r4, [r0, #50]	; 0x32
 8008ac0:	2c00      	cmp	r4, #0
 8008ac2:	d0ef      	beq.n	8008aa4 <VSS_CalcElAngle+0x74>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 8008ac4:	440a      	add	r2, r1
 8008ac6:	b213      	sxth	r3, r2
 8008ac8:	e7ec      	b.n	8008aa4 <VSS_CalcElAngle+0x74>
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 8008aca:	ebae 0e01 	sub.w	lr, lr, r1
 8008ace:	fa0f fe8e 	sxth.w	lr, lr
 8008ad2:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8008ad6:	e7d4      	b.n	8008a82 <VSS_CalcElAngle+0x52>

08008ad8 <VSS_CalcAvrgMecSpeedUnit>:
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 8008ad8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d929      	bls.n	8008b32 <VSS_CalcAvrgMecSpeedUnit+0x5a>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8008ade:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 8008ae2:	4413      	add	r3, r2
{
 8008ae4:	b500      	push	{lr}
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8008ae6:	6243      	str	r3, [r0, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	db1e      	blt.n	8008b2a <VSS_CalcAvrgMecSpeedUnit+0x52>

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8008aec:	8b42      	ldrh	r2, [r0, #26]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8008aee:	f890 e001 	ldrb.w	lr, [r0, #1]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8008af2:	ea4f 4c23 	mov.w	ip, r3, asr #16
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8008af6:	fb0c f202 	mul.w	r2, ip, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8008afa:	eb02 0382 	add.w	r3, r2, r2, lsl #2
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8008afe:	69c2      	ldr	r2, [r0, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8008b00:	f8a0 c00e 	strh.w	ip, [r0, #14]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8008b04:	fb02 f20e 	mul.w	r2, r2, lr
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8008b08:	005b      	lsls	r3, r3, #1
 8008b0a:	fb93 f3f2 	sdiv	r3, r3, r2
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8008b0e:	b21b      	sxth	r3, r3
 8008b10:	800b      	strh	r3, [r1, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;

    pHandle->hRemainingStep--;
 8008b12:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8008b14:	8183      	strh	r3, [r0, #12]
    pHandle->hRemainingStep--;
 8008b16:	1e53      	subs	r3, r2, #1
 8008b18:	8503      	strh	r3, [r0, #40]	; 0x28
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 8008b1a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008b1e:	b99b      	cbnz	r3, 8008b48 <VSS_CalcAvrgMecSpeedUnit+0x70>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8008b20:	78c2      	ldrb	r2, [r0, #3]
 8008b22:	7002      	strb	r2, [r0, #0]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
  }

  return ( SpeedSensorReliability );
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	f85d fb04 	ldr.w	pc, [sp], #4
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8008b2a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8008b2e:	33ff      	adds	r3, #255	; 0xff
 8008b30:	e7dc      	b.n	8008aec <VSS_CalcAvrgMecSpeedUnit+0x14>
  else if ( pHandle->hRemainingStep == 1u )
 8008b32:	d00d      	beq.n	8008b50 <VSS_CalcAvrgMecSpeedUnit+0x78>
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008b34:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8008b38:	800b      	strh	r3, [r1, #0]
  if ( pHandle->bTransitionEnded == false )
 8008b3a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008b3e:	bb03      	cbnz	r3, 8008b82 <VSS_CalcAvrgMecSpeedUnit+0xaa>
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8008b40:	78c2      	ldrb	r2, [r0, #3]
 8008b42:	7002      	strb	r2, [r0, #0]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	4770      	bx	lr
 8008b48:	f85d eb04 	ldr.w	lr, [sp], #4
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 8008b4c:	f7ff b992 	b.w	8007e74 <SPD_IsMecSpeedReliable>
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8008b50:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	; 0x2a
 8008b54:	f8a1 c000 	strh.w	ip, [r1]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008b58:	8b43      	ldrh	r3, [r0, #26]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8008b5a:	69c2      	ldr	r2, [r0, #28]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8008b5c:	f8a0 c00c 	strh.w	ip, [r0, #12]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008b60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8008b64:	fb02 f20c 	mul.w	r2, r2, ip
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008b68:	005b      	lsls	r3, r3, #1
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 8008b6a:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008b6e:	7842      	ldrb	r2, [r0, #1]
 8008b70:	fb12 f303 	smulbb	r3, r2, r3
 8008b74:	81c3      	strh	r3, [r0, #14]
  if ( pHandle->bTransitionEnded == false )
 8008b76:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    pHandle->hRemainingStep = 0u;
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	8502      	strh	r2, [r0, #40]	; 0x28
  if ( pHandle->bTransitionEnded == false )
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0de      	beq.n	8008b40 <VSS_CalcAvrgMecSpeedUnit+0x68>
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 8008b82:	f7ff b977 	b.w	8007e74 <SPD_IsMecSpeedReliable>
 8008b86:	bf00      	nop

08008b88 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008b88:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 8008b8a:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008b8c:	fb91 f3f3 	sdiv	r3, r1, r3
  pHandle->_Super.hElAngle = hMecAngle;
 8008b90:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008b92:	80c3      	strh	r3, [r0, #6]
}
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop

08008b98 <VSS_SetMecAcceleration>:
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 8008b98:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8008b9c:	b99b      	cbnz	r3, 8008bc6 <VSS_SetMecAcceleration+0x2e>
{
 8008b9e:	b510      	push	{r4, lr}
  {
    if ( hDurationms == 0u )
 8008ba0:	b992      	cbnz	r2, 8008bc8 <VSS_SetMecAcceleration+0x30>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008ba2:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8008ba4:	69c4      	ldr	r4, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8008ba6:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008ba8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8008bac:	fb04 fc01 	mul.w	ip, r4, r1
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008bb0:	005b      	lsls	r3, r3, #1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008bb2:	fb9c f3f3 	sdiv	r3, ip, r3

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008bb6:	f890 c001 	ldrb.w	ip, [r0, #1]

      pHandle->hRemainingStep = 0u;
 8008bba:	8502      	strh	r2, [r0, #40]	; 0x28
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008bbc:	fb1c f303 	smulbb	r3, ip, r3
 8008bc0:	81c3      	strh	r3, [r0, #14]

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008bc2:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 8008bc4:	bd10      	pop	{r4, pc}
 8008bc6:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8008bc8:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8008bca:	4c12      	ldr	r4, [pc, #72]	; (8008c14 <VSS_SetMecAcceleration+0x7c>)
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8008bcc:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 8008bd0:	f890 c001 	ldrb.w	ip, [r0, #1]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008bd4:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8008bd6:	fb03 f202 	mul.w	r2, r3, r2
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8008bda:	fba4 2302 	umull	r2, r3, r4, r2
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8008bde:	f3c3 138f 	ubfx	r3, r3, #6, #16
      hNbrStep++;
 8008be2:	3301      	adds	r3, #1
 8008be4:	b29a      	uxth	r2, r3
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008be6:	8b43      	ldrh	r3, [r0, #26]
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008be8:	69c4      	ldr	r4, [r0, #28]
      pHandle->hRemainingStep = hNbrStep;
 8008bea:	8502      	strh	r2, [r0, #40]	; 0x28
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008bec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008bf0:	fb04 f101 	mul.w	r1, r4, r1
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008bf4:	005b      	lsls	r3, r3, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008bf6:	fb91 f3f3 	sdiv	r3, r1, r3
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8008bfa:	fb9e f1fc 	sdiv	r1, lr, ip
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008bfe:	1a5b      	subs	r3, r3, r1
 8008c00:	041b      	lsls	r3, r3, #16
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8008c02:	ea4f 410e 	mov.w	r1, lr, lsl #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008c06:	fb93 f3f2 	sdiv	r3, r3, r2
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8008c0a:	fb0c f303 	mul.w	r3, ip, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8008c0e:	e9c0 3108 	strd	r3, r1, [r0, #32]
}
 8008c12:	bd10      	pop	{r4, pc}
 8008c14:	10624dd3 	.word	0x10624dd3

08008c18 <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 8008c18:	b151      	cbz	r1, 8008c30 <VSS_SetStartTransition+0x18>
  {
    pHandle->bTransitionStarted = true;

    if ( pHandle->hTransitionSteps == 0 )
 8008c1a:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
    pHandle->bTransitionStarted = true;
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    if ( pHandle->hTransitionSteps == 0 )
 8008c24:	b923      	cbnz	r3, 8008c30 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionEnded = true;
 8008c26:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 8008c2a:	7003      	strb	r3, [r0, #0]
      bAux = false;
 8008c2c:	4618      	mov	r0, r3
    }
  }
  return bAux;
}
 8008c2e:	4770      	bx	lr
  bool bAux = true;
 8008c30:	2001      	movs	r0, #1
 8008c32:	4770      	bx	lr

08008c34 <VSS_TransitionEnded>:
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
}
 8008c34:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop

08008c3c <__libc_init_array>:
 8008c3c:	b570      	push	{r4, r5, r6, lr}
 8008c3e:	4d0d      	ldr	r5, [pc, #52]	; (8008c74 <__libc_init_array+0x38>)
 8008c40:	4c0d      	ldr	r4, [pc, #52]	; (8008c78 <__libc_init_array+0x3c>)
 8008c42:	1b64      	subs	r4, r4, r5
 8008c44:	10a4      	asrs	r4, r4, #2
 8008c46:	2600      	movs	r6, #0
 8008c48:	42a6      	cmp	r6, r4
 8008c4a:	d109      	bne.n	8008c60 <__libc_init_array+0x24>
 8008c4c:	4d0b      	ldr	r5, [pc, #44]	; (8008c7c <__libc_init_array+0x40>)
 8008c4e:	4c0c      	ldr	r4, [pc, #48]	; (8008c80 <__libc_init_array+0x44>)
 8008c50:	f000 f820 	bl	8008c94 <_init>
 8008c54:	1b64      	subs	r4, r4, r5
 8008c56:	10a4      	asrs	r4, r4, #2
 8008c58:	2600      	movs	r6, #0
 8008c5a:	42a6      	cmp	r6, r4
 8008c5c:	d105      	bne.n	8008c6a <__libc_init_array+0x2e>
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}
 8008c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c64:	4798      	blx	r3
 8008c66:	3601      	adds	r6, #1
 8008c68:	e7ee      	b.n	8008c48 <__libc_init_array+0xc>
 8008c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c6e:	4798      	blx	r3
 8008c70:	3601      	adds	r6, #1
 8008c72:	e7f2      	b.n	8008c5a <__libc_init_array+0x1e>
 8008c74:	08008ef4 	.word	0x08008ef4
 8008c78:	08008ef4 	.word	0x08008ef4
 8008c7c:	08008ef4 	.word	0x08008ef4
 8008c80:	08008ef8 	.word	0x08008ef8

08008c84 <memset>:
 8008c84:	4402      	add	r2, r0
 8008c86:	4603      	mov	r3, r0
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d100      	bne.n	8008c8e <memset+0xa>
 8008c8c:	4770      	bx	lr
 8008c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c92:	e7f9      	b.n	8008c88 <memset+0x4>

08008c94 <_init>:
 8008c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c96:	bf00      	nop
 8008c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9a:	bc08      	pop	{r3}
 8008c9c:	469e      	mov	lr, r3
 8008c9e:	4770      	bx	lr

08008ca0 <_fini>:
 8008ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca2:	bf00      	nop
 8008ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca6:	bc08      	pop	{r3}
 8008ca8:	469e      	mov	lr, r3
 8008caa:	4770      	bx	lr
