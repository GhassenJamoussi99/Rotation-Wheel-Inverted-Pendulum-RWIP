
position_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c77c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c4  0800c960  0800c960  0001c960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d224  0800d224  0002085c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d224  0800d224  0001d224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d22c  0800d22c  0002085c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d22c  0800d22c  0001d22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d230  0800d230  0001d230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000085c  20000000  0800d234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  2000085c  0800da90  0002085c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d44  0800da90  00020d44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002085c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00048f16  00000000  00000000  0002088c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00060a34  00000000  00000000  000697a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000095ea  00000000  00000000  000ca1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fc0  00000000  00000000  000d37c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00103807  00000000  00000000  000d5780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00005150  00000000  00000000  001d8f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0002a083  00000000  00000000  001de0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002ea9a  00000000  00000000  0020815b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00236bf5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000069f0  00000000  00000000  00236c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000085c 	.word	0x2000085c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c944 	.word	0x0800c944

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000860 	.word	0x20000860
 800021c:	0800c944 	.word	0x0800c944

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa2:	490e      	ldr	r1, [pc, #56]	; (8000fdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <LoopForever+0xe>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb8:	4c0b      	ldr	r4, [pc, #44]	; (8000fe8 <LoopForever+0x16>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fc6:	f003 fb71 	bl	80046ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fca:	f008 fecd 	bl	8009d68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fce:	f000 fa9b 	bl	8001508 <main>

08000fd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fd2:	e7fe      	b.n	8000fd2 <LoopForever>
  ldr   r0, =_estack
 8000fd4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fdc:	2000085c 	.word	0x2000085c
  ldr r2, =_sidata
 8000fe0:	0800d234 	.word	0x0800d234
  ldr r2, =_sbss
 8000fe4:	2000085c 	.word	0x2000085c
  ldr r4, =_ebss
 8000fe8:	20000d44 	.word	0x20000d44

08000fec <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <BusFault_Handler>
	...

08000ff0 <getMecSpeed>:
#include <math.h>

#include "Control/encoder.h"
#include "trajectory_ctrl.h"

float getMecSpeed(MCI_Handle_t *pHandle){
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	4604      	mov	r4, r0
	return (MCI_GetAvrgMecSpeedUnit(pHandle) <= 0) ? 0 : MCI_GetAvrgMecSpeedUnit(pHandle);
 8000ff4:	f000 ff02 	bl	8001dfc <MCI_GetAvrgMecSpeedUnit>
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	dc02      	bgt.n	8001002 <getMecSpeed+0x12>
 8000ffc:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8001014 <getMecSpeed+0x24>
}
 8001000:	bd10      	pop	{r4, pc}
	return (MCI_GetAvrgMecSpeedUnit(pHandle) <= 0) ? 0 : MCI_GetAvrgMecSpeedUnit(pHandle);
 8001002:	4620      	mov	r0, r4
 8001004:	f000 fefa 	bl	8001dfc <MCI_GetAvrgMecSpeedUnit>
 8001008:	ee07 0a90 	vmov	s15, r0
 800100c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 8001010:	bd10      	pop	{r4, pc}
 8001012:	bf00      	nop
 8001014:	00000000 	.word	0x00000000

08001018 <getAngle>:

float getAngle(MCI_Handle_t *pHandle){
 8001018:	b538      	push	{r3, r4, r5, lr}
    pHandle->pFOCVars->bDriveInput = INTERNAL;
 800101a:	6883      	ldr	r3, [r0, #8]
 800101c:	2500      	movs	r5, #0
 800101e:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
float getAngle(MCI_Handle_t *pHandle){
 8001022:	4604      	mov	r4, r0
    float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001024:	6840      	ldr	r0, [r0, #4]
 8001026:	f008 f91f 	bl	8009268 <STC_GetSpeedSensor>
 800102a:	f008 f8bb 	bl	80091a4 <SPD_GetMecAngle>
 800102e:	ee07 0a90 	vmov	s15, r0
    pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
    return currentPositionRad*180/M_PI;
 8001032:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001068 <getAngle+0x50>
    pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8001036:	7765      	strb	r5, [r4, #29]
    float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return currentPositionRad*180/M_PI;
 800103c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001040:	ee17 0a90 	vmov	r0, s15
 8001044:	f7ff faa8 	bl	8000598 <__aeabi_f2d>
 8001048:	a305      	add	r3, pc, #20	; (adr r3, 8001060 <getAngle+0x48>)
 800104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104e:	f7ff fafb 	bl	8000648 <__aeabi_dmul>
 8001052:	f7ff fdd1 	bl	8000bf8 <__aeabi_d2f>
}
 8001056:	ee00 0a10 	vmov	s0, r0
 800105a:	bd38      	pop	{r3, r4, r5, pc}
 800105c:	f3af 8000 	nop.w
 8001060:	6dc9c883 	.word	0x6dc9c883
 8001064:	3fd45f30 	.word	0x3fd45f30
 8001068:	3c8d5f26 	.word	0x3c8d5f26

0800106c <faultCodeToString>:
    
}
*/

char *faultCodeToString(uint16_t fCode)
{
 800106c:	b530      	push	{r4, r5, lr}
    char errorString[50];

    switch (fCode)
 800106e:	2820      	cmp	r0, #32
{
 8001070:	b08f      	sub	sp, #60	; 0x3c
    switch (fCode)
 8001072:	d814      	bhi.n	800109e <faultCodeToString+0x32>
 8001074:	2820      	cmp	r0, #32
 8001076:	d826      	bhi.n	80010c6 <faultCodeToString+0x5a>
 8001078:	e8df f000 	tbb	[pc, r0]
 800107c:	254d3e31 	.word	0x254d3e31
 8001080:	2525255c 	.word	0x2525255c
 8001084:	2525256b 	.word	0x2525256b
 8001088:	25252525 	.word	0x25252525
 800108c:	2525257a 	.word	0x2525257a
 8001090:	25252525 	.word	0x25252525
 8001094:	25252525 	.word	0x25252525
 8001098:	25252525 	.word	0x25252525
 800109c:	7c          	.byte	0x7c
 800109d:	00          	.byte	0x00
 800109e:	2840      	cmp	r0, #64	; 0x40
 80010a0:	d077      	beq.n	8001192 <faultCodeToString+0x126>
 80010a2:	2880      	cmp	r0, #128	; 0x80
 80010a4:	d10f      	bne.n	80010c6 <faultCodeToString+0x5a>
        break;
    case MC_BREAK_IN:
        snprintf(errorString, sizeof(errorString), "Error: Emergency Input (Over Current)");
        break;
    case MC_SW_ERROR:
        snprintf(errorString, sizeof(errorString), "Error: Software Error");
 80010a6:	4d45      	ldr	r5, [pc, #276]	; (80011bc <faultCodeToString+0x150>)
 80010a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010aa:	f10d 0c04 	add.w	ip, sp, #4
 80010ae:	4664      	mov	r4, ip
 80010b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010b6:	f844 0b04 	str.w	r0, [r4], #4
    default:
        snprintf(errorString, sizeof(errorString), "Unknown Error");
        break;
    }
    
    return strdup(errorString);
 80010ba:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: Software Error");
 80010bc:	8021      	strh	r1, [r4, #0]
    return strdup(errorString);
 80010be:	f009 fb77 	bl	800a7b0 <strdup>
}
 80010c2:	b00f      	add	sp, #60	; 0x3c
 80010c4:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Unknown Error");
 80010c6:	4b3e      	ldr	r3, [pc, #248]	; (80011c0 <faultCodeToString+0x154>)
 80010c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ca:	f10d 0c04 	add.w	ip, sp, #4
 80010ce:	4664      	mov	r4, ip
 80010d0:	c407      	stmia	r4!, {r0, r1, r2}
    return strdup(errorString);
 80010d2:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Unknown Error");
 80010d4:	8023      	strh	r3, [r4, #0]
    return strdup(errorString);
 80010d6:	f009 fb6b 	bl	800a7b0 <strdup>
}
 80010da:	b00f      	add	sp, #60	; 0x3c
 80010dc:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "No Error");
 80010de:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <faultCodeToString+0x158>)
 80010e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010e4:	f10d 0c04 	add.w	ip, sp, #4
 80010e8:	4663      	mov	r3, ip
 80010ea:	c303      	stmia	r3!, {r0, r1}
    return strdup(errorString);
 80010ec:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "No Error");
 80010ee:	701a      	strb	r2, [r3, #0]
    return strdup(errorString);
 80010f0:	f009 fb5e 	bl	800a7b0 <strdup>
}
 80010f4:	b00f      	add	sp, #60	; 0x3c
 80010f6:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: FOC Rate Too High");
 80010f8:	4d33      	ldr	r5, [pc, #204]	; (80011c8 <faultCodeToString+0x15c>)
 80010fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010fc:	f10d 0c04 	add.w	ip, sp, #4
 8001100:	4664      	mov	r4, ip
 8001102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001104:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001108:	c403      	stmia	r4!, {r0, r1}
    return strdup(errorString);
 800110a:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: FOC Rate Too High");
 800110c:	7022      	strb	r2, [r4, #0]
    return strdup(errorString);
 800110e:	f009 fb4f 	bl	800a7b0 <strdup>
}
 8001112:	b00f      	add	sp, #60	; 0x3c
 8001114:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Software Over Voltage");
 8001116:	4d2d      	ldr	r5, [pc, #180]	; (80011cc <faultCodeToString+0x160>)
 8001118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111a:	f10d 0c04 	add.w	ip, sp, #4
 800111e:	4664      	mov	r4, ip
 8001120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001122:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001126:	c407      	stmia	r4!, {r0, r1, r2}
    return strdup(errorString);
 8001128:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: Software Over Voltage");
 800112a:	7023      	strb	r3, [r4, #0]
    return strdup(errorString);
 800112c:	f009 fb40 	bl	800a7b0 <strdup>
}
 8001130:	b00f      	add	sp, #60	; 0x3c
 8001132:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Software Under Voltage");
 8001134:	4d26      	ldr	r5, [pc, #152]	; (80011d0 <faultCodeToString+0x164>)
 8001136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001138:	f10d 0c04 	add.w	ip, sp, #4
 800113c:	4664      	mov	r4, ip
 800113e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001140:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001144:	c407      	stmia	r4!, {r0, r1, r2}
    return strdup(errorString);
 8001146:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: Software Under Voltage");
 8001148:	8023      	strh	r3, [r4, #0]
    return strdup(errorString);
 800114a:	f009 fb31 	bl	800a7b0 <strdup>
}
 800114e:	b00f      	add	sp, #60	; 0x3c
 8001150:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Software Over Temperature");
 8001152:	4d20      	ldr	r5, [pc, #128]	; (80011d4 <faultCodeToString+0x168>)
 8001154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001156:	f10d 0c04 	add.w	ip, sp, #4
 800115a:	4664      	mov	r4, ip
 800115c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800115e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001162:	682b      	ldr	r3, [r5, #0]
 8001164:	7023      	strb	r3, [r4, #0]
    return strdup(errorString);
 8001166:	4660      	mov	r0, ip
 8001168:	f009 fb22 	bl	800a7b0 <strdup>
}
 800116c:	b00f      	add	sp, #60	; 0x3c
 800116e:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Startup Failed");
 8001170:	4d19      	ldr	r5, [pc, #100]	; (80011d8 <faultCodeToString+0x16c>)
 8001172:	e799      	b.n	80010a8 <faultCodeToString+0x3c>
        snprintf(errorString, sizeof(errorString), "Error: Speed Feedback Error");
 8001174:	4d19      	ldr	r5, [pc, #100]	; (80011dc <faultCodeToString+0x170>)
 8001176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001178:	f10d 0c04 	add.w	ip, sp, #4
 800117c:	4664      	mov	r4, ip
 800117e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001180:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001184:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return strdup(errorString);
 8001188:	4660      	mov	r0, ip
 800118a:	f009 fb11 	bl	800a7b0 <strdup>
}
 800118e:	b00f      	add	sp, #60	; 0x3c
 8001190:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Emergency Input (Over Current)");
 8001192:	4c13      	ldr	r4, [pc, #76]	; (80011e0 <faultCodeToString+0x174>)
 8001194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001196:	f10d 0c04 	add.w	ip, sp, #4
 800119a:	46e6      	mov	lr, ip
 800119c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80011a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80011a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011aa:	f84e 0b04 	str.w	r0, [lr], #4
    return strdup(errorString);
 80011ae:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: Emergency Input (Over Current)");
 80011b0:	f8ae 1000 	strh.w	r1, [lr]
    return strdup(errorString);
 80011b4:	f009 fafc 	bl	800a7b0 <strdup>
}
 80011b8:	b00f      	add	sp, #60	; 0x3c
 80011ba:	bd30      	pop	{r4, r5, pc}
 80011bc:	0800ca48 	.word	0x0800ca48
 80011c0:	0800ca60 	.word	0x0800ca60
 80011c4:	0800c960 	.word	0x0800c960
 80011c8:	0800c96c 	.word	0x0800c96c
 80011cc:	0800c988 	.word	0x0800c988
 80011d0:	0800c9a8 	.word	0x0800c9a8
 80011d4:	0800c9c8 	.word	0x0800c9c8
 80011d8:	0800c9ec 	.word	0x0800c9ec
 80011dc:	0800ca04 	.word	0x0800ca04
 80011e0:	0800ca20 	.word	0x0800ca20

080011e4 <getMotorStatus>:

//Status of motor
char *getMotorStatus(MCI_Handle_t *pHandle)
{
 80011e4:	b530      	push	{r4, r5, lr}
 80011e6:	b08f      	sub	sp, #60	; 0x3c
    return faultCodeToString(MCI_GetCurrentFaults(pHandle));
 80011e8:	f000 fdf4 	bl	8001dd4 <MCI_GetCurrentFaults>
    switch (fCode)
 80011ec:	2820      	cmp	r0, #32
 80011ee:	d814      	bhi.n	800121a <getMotorStatus+0x36>
 80011f0:	2820      	cmp	r0, #32
 80011f2:	d826      	bhi.n	8001242 <getMotorStatus+0x5e>
 80011f4:	e8df f000 	tbb	[pc, r0]
 80011f8:	254d3e31 	.word	0x254d3e31
 80011fc:	2525255c 	.word	0x2525255c
 8001200:	2525256b 	.word	0x2525256b
 8001204:	25252525 	.word	0x25252525
 8001208:	2525257a 	.word	0x2525257a
 800120c:	25252525 	.word	0x25252525
 8001210:	25252525 	.word	0x25252525
 8001214:	25252525 	.word	0x25252525
 8001218:	7c          	.byte	0x7c
 8001219:	00          	.byte	0x00
 800121a:	2840      	cmp	r0, #64	; 0x40
 800121c:	d077      	beq.n	800130e <getMotorStatus+0x12a>
 800121e:	2880      	cmp	r0, #128	; 0x80
 8001220:	d10f      	bne.n	8001242 <getMotorStatus+0x5e>
        snprintf(errorString, sizeof(errorString), "Error: Software Error");
 8001222:	4d45      	ldr	r5, [pc, #276]	; (8001338 <getMotorStatus+0x154>)
 8001224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001226:	f10d 0c04 	add.w	ip, sp, #4
 800122a:	4664      	mov	r4, ip
 800122c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001232:	f844 0b04 	str.w	r0, [r4], #4
    return strdup(errorString);
 8001236:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: Software Error");
 8001238:	8021      	strh	r1, [r4, #0]
    return strdup(errorString);
 800123a:	f009 fab9 	bl	800a7b0 <strdup>
}
 800123e:	b00f      	add	sp, #60	; 0x3c
 8001240:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Unknown Error");
 8001242:	4b3e      	ldr	r3, [pc, #248]	; (800133c <getMotorStatus+0x158>)
 8001244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001246:	f10d 0c04 	add.w	ip, sp, #4
 800124a:	4664      	mov	r4, ip
 800124c:	c407      	stmia	r4!, {r0, r1, r2}
    return strdup(errorString);
 800124e:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Unknown Error");
 8001250:	8023      	strh	r3, [r4, #0]
    return strdup(errorString);
 8001252:	f009 faad 	bl	800a7b0 <strdup>
}
 8001256:	b00f      	add	sp, #60	; 0x3c
 8001258:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "No Error");
 800125a:	4b39      	ldr	r3, [pc, #228]	; (8001340 <getMotorStatus+0x15c>)
 800125c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001260:	f10d 0c04 	add.w	ip, sp, #4
 8001264:	4663      	mov	r3, ip
 8001266:	c303      	stmia	r3!, {r0, r1}
    return strdup(errorString);
 8001268:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "No Error");
 800126a:	701a      	strb	r2, [r3, #0]
    return strdup(errorString);
 800126c:	f009 faa0 	bl	800a7b0 <strdup>
}
 8001270:	b00f      	add	sp, #60	; 0x3c
 8001272:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: FOC Rate Too High");
 8001274:	4d33      	ldr	r5, [pc, #204]	; (8001344 <getMotorStatus+0x160>)
 8001276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001278:	f10d 0c04 	add.w	ip, sp, #4
 800127c:	4664      	mov	r4, ip
 800127e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001280:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001284:	c403      	stmia	r4!, {r0, r1}
    return strdup(errorString);
 8001286:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: FOC Rate Too High");
 8001288:	7022      	strb	r2, [r4, #0]
    return strdup(errorString);
 800128a:	f009 fa91 	bl	800a7b0 <strdup>
}
 800128e:	b00f      	add	sp, #60	; 0x3c
 8001290:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Software Over Voltage");
 8001292:	4d2d      	ldr	r5, [pc, #180]	; (8001348 <getMotorStatus+0x164>)
 8001294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001296:	f10d 0c04 	add.w	ip, sp, #4
 800129a:	4664      	mov	r4, ip
 800129c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012a2:	c407      	stmia	r4!, {r0, r1, r2}
    return strdup(errorString);
 80012a4:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: Software Over Voltage");
 80012a6:	7023      	strb	r3, [r4, #0]
    return strdup(errorString);
 80012a8:	f009 fa82 	bl	800a7b0 <strdup>
}
 80012ac:	b00f      	add	sp, #60	; 0x3c
 80012ae:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Software Under Voltage");
 80012b0:	4d26      	ldr	r5, [pc, #152]	; (800134c <getMotorStatus+0x168>)
 80012b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b4:	f10d 0c04 	add.w	ip, sp, #4
 80012b8:	4664      	mov	r4, ip
 80012ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012c0:	c407      	stmia	r4!, {r0, r1, r2}
    return strdup(errorString);
 80012c2:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: Software Under Voltage");
 80012c4:	8023      	strh	r3, [r4, #0]
    return strdup(errorString);
 80012c6:	f009 fa73 	bl	800a7b0 <strdup>
}
 80012ca:	b00f      	add	sp, #60	; 0x3c
 80012cc:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Software Over Temperature");
 80012ce:	4d20      	ldr	r5, [pc, #128]	; (8001350 <getMotorStatus+0x16c>)
 80012d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d2:	f10d 0c04 	add.w	ip, sp, #4
 80012d6:	4664      	mov	r4, ip
 80012d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012de:	682b      	ldr	r3, [r5, #0]
 80012e0:	7023      	strb	r3, [r4, #0]
    return strdup(errorString);
 80012e2:	4660      	mov	r0, ip
 80012e4:	f009 fa64 	bl	800a7b0 <strdup>
}
 80012e8:	b00f      	add	sp, #60	; 0x3c
 80012ea:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Startup Failed");
 80012ec:	4d19      	ldr	r5, [pc, #100]	; (8001354 <getMotorStatus+0x170>)
 80012ee:	e799      	b.n	8001224 <getMotorStatus+0x40>
        snprintf(errorString, sizeof(errorString), "Error: Speed Feedback Error");
 80012f0:	4d19      	ldr	r5, [pc, #100]	; (8001358 <getMotorStatus+0x174>)
 80012f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f4:	f10d 0c04 	add.w	ip, sp, #4
 80012f8:	4664      	mov	r4, ip
 80012fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001300:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return strdup(errorString);
 8001304:	4660      	mov	r0, ip
 8001306:	f009 fa53 	bl	800a7b0 <strdup>
}
 800130a:	b00f      	add	sp, #60	; 0x3c
 800130c:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Emergency Input (Over Current)");
 800130e:	4c13      	ldr	r4, [pc, #76]	; (800135c <getMotorStatus+0x178>)
 8001310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001312:	f10d 0c04 	add.w	ip, sp, #4
 8001316:	46e6      	mov	lr, ip
 8001318:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800131c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001322:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001326:	f84e 0b04 	str.w	r0, [lr], #4
    return strdup(errorString);
 800132a:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: Emergency Input (Over Current)");
 800132c:	f8ae 1000 	strh.w	r1, [lr]
    return strdup(errorString);
 8001330:	f009 fa3e 	bl	800a7b0 <strdup>
}
 8001334:	b00f      	add	sp, #60	; 0x3c
 8001336:	bd30      	pop	{r4, r5, pc}
 8001338:	0800ca48 	.word	0x0800ca48
 800133c:	0800ca60 	.word	0x0800ca60
 8001340:	0800c960 	.word	0x0800c960
 8001344:	0800c96c 	.word	0x0800c96c
 8001348:	0800c988 	.word	0x0800c988
 800134c:	0800c9a8 	.word	0x0800c9a8
 8001350:	0800c9c8 	.word	0x0800c9c8
 8001354:	0800c9ec 	.word	0x0800c9ec
 8001358:	0800ca04 	.word	0x0800ca04
 800135c:	0800ca20 	.word	0x0800ca20

08001360 <getCurrentMotorState>:

//State machine
int getCurrentMotorState(MCI_Handle_t *pHandle)
{
 8001360:	b508      	push	{r3, lr}
    return MCI_GetSTMState(pHandle);
 8001362:	f000 fd33 	bl	8001dcc <MCI_GetSTMState>
}
 8001366:	bd08      	pop	{r3, pc}

08001368 <computeStabilization>:
#include <stdio.h>
#include "Control/regulator.h"

#define _sign(a) ( ( (a) < 0 )  ?  -1   : ( (a) > 0 ) )

float computeStabilization(float currentPendulumVelocity) {
 8001368:	b508      	push	{r3, lr}
    // Implementation of stabilization control
    printf("Computing stabilize algorithm...\r\n");
 800136a:	4802      	ldr	r0, [pc, #8]	; (8001374 <computeStabilization+0xc>)
 800136c:	f009 fa18 	bl	800a7a0 <puts>

}
 8001370:	bd08      	pop	{r3, pc}
 8001372:	bf00      	nop
 8001374:	0800ca70 	.word	0x0800ca70

08001378 <computeSwingUp>:

float computeSwingUp(float currentPendulumVelocity) {
 8001378:	b508      	push	{r3, lr}
    printf("Computing swing up algorithm...\r\n");
 800137a:	480d      	ldr	r0, [pc, #52]	; (80013b0 <computeSwingUp+0x38>)
float computeSwingUp(float currentPendulumVelocity) {
 800137c:	ed2d 8b02 	vpush	{d8}
 8001380:	eeb0 8a40 	vmov.f32	s16, s0
    printf("Computing swing up algorithm...\r\n");
 8001384:	f009 fa0c 	bl	800a7a0 <puts>

    //set the scaling factor
    float scaling_factor = 0.5;

    // calculate the target torque based on the updated velocity
    float target_torque = -_sign(currentPendulumVelocity) * motorTorqueLimit * scaling_factor;
 8001388:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800138c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001390:	db09      	blt.n	80013a6 <computeSwingUp+0x2e>

    return target_torque;
}
 8001392:	ecbd 8b02 	vpop	{d8}
    float target_torque = -_sign(currentPendulumVelocity) * motorTorqueLimit * scaling_factor;
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <computeSwingUp+0x3c>)
 8001398:	bfd8      	it	le
 800139a:	2300      	movle	r3, #0
 800139c:	ee00 3a10 	vmov	s0, r3
 80013a0:	eeba 0aef 	vcvt.f32.s32	s0, s0, #1
}
 80013a4:	bd08      	pop	{r3, pc}
 80013a6:	ecbd 8b02 	vpop	{d8}
 80013aa:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80013b8 <computeSwingUp+0x40>
 80013ae:	bd08      	pop	{r3, pc}
 80013b0:	0800ca94 	.word	0x0800ca94
 80013b4:	ffffe890 	.word	0xffffe890
 80013b8:	453b8000 	.word	0x453b8000

080013bc <indicateError>:
 * yellow and green LEDs.
 * 
 * Note: GPIO pins for the LEDs need to be defined separately.
 */
void indicateError() {
    printf("Error LED turned on.\n");
 80013bc:	4801      	ldr	r0, [pc, #4]	; (80013c4 <indicateError+0x8>)
 80013be:	f009 b9ef 	b.w	800a7a0 <puts>
 80013c2:	bf00      	nop
 80013c4:	0800cab8 	.word	0x0800cab8

080013c8 <indicateWarning>:
 * red and green LEDs.
 * 
 * Note: GPIO pins for the LEDs need to be defined separately.
 */
void indicateWarning() {
    printf("Warning LED turned on.\n");
 80013c8:	4801      	ldr	r0, [pc, #4]	; (80013d0 <indicateWarning+0x8>)
 80013ca:	f009 b9e9 	b.w	800a7a0 <puts>
 80013ce:	bf00      	nop
 80013d0:	0800cad0 	.word	0x0800cad0

080013d4 <indicateNormalOperation>:
 * yellow LEDs.
 * 
 * Note: GPIO pins for the LEDs need to be defined separately.
 */
void indicateNormalOperation() {
    printf("Normal operation LED turned on.\n");
 80013d4:	4801      	ldr	r0, [pc, #4]	; (80013dc <indicateNormalOperation+0x8>)
 80013d6:	f009 b9e3 	b.w	800a7a0 <puts>
 80013da:	bf00      	nop
 80013dc:	0800cae8 	.word	0x0800cae8

080013e0 <turnOffAllLeds>:
 * @brief Turn off all LEDs by turning off the red, yellow, and green LEDs.
 * 
 * Note: GPIO pins for the LEDs need to be defined separately.
 */
void turnOffAllLeds() {
    printf("All LEDs turned off.\n");
 80013e0:	4801      	ldr	r0, [pc, #4]	; (80013e8 <turnOffAllLeds+0x8>)
 80013e2:	f009 b9dd 	b.w	800a7a0 <puts>
 80013e6:	bf00      	nop
 80013e8:	0800cb08 	.word	0x0800cb08

080013ec <turnOnLed>:
 * @brief Turn on the specified LED color.
 *
 * @param color The LED color to turn on (RED, YELLOW, or GREEN).
 */
void turnOnLed(LedColor color) {
    switch (color) {
 80013ec:	2801      	cmp	r0, #1
 80013ee:	d003      	beq.n	80013f8 <turnOnLed+0xc>
 80013f0:	2802      	cmp	r0, #2
 80013f2:	d007      	beq.n	8001404 <turnOnLed+0x18>
 80013f4:	b118      	cbz	r0, 80013fe <turnOnLed+0x12>
            break;
        case GREEN:
            indicateNormalOperation();
            break;
    }
 80013f6:	4770      	bx	lr
    printf("Warning LED turned on.\n");
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <turnOnLed+0x20>)
 80013fa:	f009 b9d1 	b.w	800a7a0 <puts>
    printf("Error LED turned on.\n");
 80013fe:	4804      	ldr	r0, [pc, #16]	; (8001410 <turnOnLed+0x24>)
 8001400:	f009 b9ce 	b.w	800a7a0 <puts>
    printf("Normal operation LED turned on.\n");
 8001404:	4803      	ldr	r0, [pc, #12]	; (8001414 <turnOnLed+0x28>)
 8001406:	f009 b9cb 	b.w	800a7a0 <puts>
 800140a:	bf00      	nop
 800140c:	0800cad0 	.word	0x0800cad0
 8001410:	0800cab8 	.word	0x0800cab8
 8001414:	0800cae8 	.word	0x0800cae8

08001418 <DAC_Init>:
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 8001418:	4a02      	ldr	r2, [pc, #8]	; (8001424 <DAC_Init+0xc>)
 800141a:	6813      	ldr	r3, [r2, #0]
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6013      	str	r3, [r2, #0]
  */
__weak void DAC_Init(UI_Handle_t *pHandle)
{
  /* Enable DAC Channel1 */
  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_1);
}
 8001422:	4770      	bx	lr
 8001424:	50000800 	.word	0x50000800

08001428 <DAC_Exec>:
  *         variables will be provided in the related output channels. This is
  *         the implementation of the virtual function.
  * @param  pHandle pointer on related component instance.
  */
__weak void DAC_Exec(UI_Handle_t *pHandle)
{
 8001428:	b508      	push	{r3, lr}
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  MC_Protocol_REG_t bCh_var;

  bCh_var = pDacHandle->bChannel_variable[DAC_CH0];
  LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_1,
                                  DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var,MC_NULL)));
 800142a:	2200      	movs	r2, #0
 800142c:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8001430:	f002 fedc 	bl	80041ec <UI_GetReg>
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8001434:	4908      	ldr	r1, [pc, #32]	; (8001458 <DAC_Exec+0x30>)
  SET_BIT(DACx->SWTRIGR,
 8001436:	4a09      	ldr	r2, [pc, #36]	; (800145c <DAC_Exec+0x34>)
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8001438:	684b      	ldr	r3, [r1, #4]
 800143a:	b200      	sxth	r0, r0
 800143c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001440:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001444:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8001448:	4318      	orrs	r0, r3
 800144a:	6048      	str	r0, [r1, #4]
  SET_BIT(DACx->SWTRIGR,
 800144c:	6853      	ldr	r3, [r2, #4]
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6053      	str	r3, [r2, #4]
  LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_1);
}
 8001454:	bd08      	pop	{r3, pc}
 8001456:	bf00      	nop
 8001458:	50000808 	.word	0x50000808
 800145c:	50000800 	.word	0x50000800

08001460 <_write>:
int16_t man_mecAngle = 0;
int motorDegrees = 0;
qd_t IqdUser = {552, -24612};

int _write(int file, char ptr, int len)
{
 8001460:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart2, (uint8_t)ptr, len, HAL_MAX_DELAY);
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
{
 8001466:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t)ptr, len, HAL_MAX_DELAY);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <_write+0x14>)
 800146a:	b292      	uxth	r2, r2
 800146c:	f005 fff8 	bl	8007460 <HAL_UART_Transmit>
  return len;
}
 8001470:	4620      	mov	r0, r4
 8001472:	bd10      	pop	{r4, pc}
 8001474:	20000a4c 	.word	0x20000a4c

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b500      	push	{lr}
 800147a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147c:	2238      	movs	r2, #56	; 0x38
 800147e:	2100      	movs	r1, #0
 8001480:	a806      	add	r0, sp, #24
 8001482:	f008 fc95 	bl	8009db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001486:	2000      	movs	r0, #0
 8001488:	e9cd 0000 	strd	r0, r0, [sp]
 800148c:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8001490:	9004      	str	r0, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001492:	f004 facf 	bl	8005a34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001496:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80014f0 <SystemClock_Config+0x78>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149a:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800149c:	2103      	movs	r1, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800149e:	2206      	movs	r2, #6
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a0:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80014a4:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80014a6:	2155      	movs	r1, #85	; 0x55
 80014a8:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014aa:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ac:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80014b0:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014b4:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b8:	f004 fb3a 	bl	8005b30 <HAL_RCC_OscConfig>
 80014bc:	b108      	cbz	r0, 80014c2 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014be:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80014f8 <SystemClock_Config+0x80>
 80014c6:	ed8d 7b00 	vstr	d7, [sp]
 80014ca:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8001500 <SystemClock_Config+0x88>
 80014ce:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014d0:	2104      	movs	r1, #4
 80014d2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d4:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d8:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014da:	f004 fdad 	bl	8006038 <HAL_RCC_ClockConfig>
 80014de:	b108      	cbz	r0, 80014e4 <SystemClock_Config+0x6c>
 80014e0:	b672      	cpsid	i
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <SystemClock_Config+0x6a>
  HAL_RCC_EnableCSS();
 80014e4:	f004 fee4 	bl	80062b0 <HAL_RCC_EnableCSS>
}
 80014e8:	b015      	add	sp, #84	; 0x54
 80014ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80014ee:	bf00      	nop
 80014f0:	00000001 	.word	0x00000001
 80014f4:	00010000 	.word	0x00010000
 80014f8:	0000000f 	.word	0x0000000f
 80014fc:	00000003 	.word	0x00000003
	...

08001508 <main>:
{
 8001508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800150c:	ed2d 8b02 	vpush	{d8}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	2400      	movs	r4, #0
{
 8001512:	b0ad      	sub	sp, #180	; 0xb4
  HAL_Init();
 8001514:	f003 f8fa 	bl	800470c <HAL_Init>
  SystemClock_Config();
 8001518:	f7ff ffae 	bl	8001478 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 8001520:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001524:	4bae      	ldr	r3, [pc, #696]	; (80017e0 <main+0x2d8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	9420      	str	r4, [sp, #128]	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001528:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hadc1.Instance = ADC1;
 800152a:	4dae      	ldr	r5, [pc, #696]	; (80017e4 <main+0x2dc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152c:	f042 0204 	orr.w	r2, r2, #4
 8001530:	64da      	str	r2, [r3, #76]	; 0x4c
 8001532:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001534:	f002 0204 	and.w	r2, r2, #4
 8001538:	9202      	str	r2, [sp, #8]
 800153a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800153c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800153e:	2120      	movs	r1, #32
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001540:	430a      	orrs	r2, r1
 8001542:	64da      	str	r2, [r3, #76]	; 0x4c
 8001544:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001546:	400a      	ands	r2, r1
 8001548:	9203      	str	r2, [sp, #12]
 800154a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800154e:	f042 0201 	orr.w	r2, r2, #1
 8001552:	64da      	str	r2, [r3, #76]	; 0x4c
 8001554:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001556:	f002 0201 	and.w	r2, r2, #1
 800155a:	9204      	str	r2, [sp, #16]
 800155c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001560:	f042 0202 	orr.w	r2, r2, #2
 8001564:	64da      	str	r2, [r3, #76]	; 0x4c
 8001566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001568:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800156c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001576:	f004 fa57 	bl	8005a28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 800157a:	4622      	mov	r2, r4
 800157c:	489a      	ldr	r0, [pc, #616]	; (80017e8 <main+0x2e0>)
 800157e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001582:	f004 fa51 	bl	8005a28 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800158e:	4897      	ldr	r0, [pc, #604]	; (80017ec <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001592:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001594:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001598:	f004 f94e 	bl	8005838 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800159c:	2220      	movs	r2, #32
 800159e:	2301      	movs	r3, #1
 80015a0:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015a4:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = LD2_Pin;
 80015a6:	2200      	movs	r2, #0
 80015a8:	2300      	movs	r3, #0
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin;
 80015ae:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f004 f941 	bl	8005838 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_ENCODER_Z_Pin;
 80015b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 80015be:	488a      	ldr	r0, [pc, #552]	; (80017e8 <main+0x2e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 80015c2:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = M1_ENCODER_Z_Pin;
 80015c4:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f004 f936 	bl	8005838 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80015cc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80015d0:	2301      	movs	r3, #1
 80015d2:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	4884      	ldr	r0, [pc, #528]	; (80017e8 <main+0x2e0>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80015d8:	2302      	movs	r3, #2
 80015da:	2202      	movs	r2, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015dc:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 80015de:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e2:	f004 f929 	bl	8005838 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80015e6:	4621      	mov	r1, r4
 80015e8:	223c      	movs	r2, #60	; 0x3c
 80015ea:	a81c      	add	r0, sp, #112	; 0x70
  ADC_MultiModeTypeDef multimode = {0};
 80015ec:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 80015f0:	9416      	str	r4, [sp, #88]	; 0x58
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80015f2:	f44f 2800 	mov.w	r8, #524288	; 0x80000
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80015f6:	f008 fbdb 	bl	8009db0 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80015fa:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80015fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001602:	60ac      	str	r4, [r5, #8]
  hadc1.Init.GainCompensation = 0;
 8001604:	612c      	str	r4, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001606:	83ac      	strh	r4, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001608:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800160c:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001610:	63ec      	str	r4, [r5, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001612:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001616:	2604      	movs	r6, #4
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001618:	2401      	movs	r4, #1
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800161a:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800161c:	e9c5 3800 	strd	r3, r8, [r5]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001620:	616c      	str	r4, [r5, #20]
  hadc1.Init.NbrOfConversion = 1;
 8001622:	622c      	str	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001624:	60ef      	str	r7, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001626:	61ae      	str	r6, [r5, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001628:	f003 f8a4 	bl	8004774 <HAL_ADC_Init>
 800162c:	b108      	cbz	r0, 8001632 <main+0x12a>
 800162e:	b672      	cpsid	i
  while (1)
 8001630:	e7fe      	b.n	8001630 <main+0x128>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001632:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001634:	a914      	add	r1, sp, #80	; 0x50
 8001636:	4628      	mov	r0, r5
 8001638:	f003 ff06 	bl	8005448 <HAL_ADCEx_MultiModeConfigChannel>
 800163c:	b108      	cbz	r0, 8001642 <main+0x13a>
 800163e:	b672      	cpsid	i
  while (1)
 8001640:	e7fe      	b.n	8001640 <main+0x138>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001642:	ed9f 8b61 	vldr	d8, [pc, #388]	; 80017c8 <main+0x2c0>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001646:	4b6a      	ldr	r3, [pc, #424]	; (80017f0 <main+0x2e8>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001648:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
  sConfigInjected.InjectedOffset = 0;
 800164c:	e9cd 6020 	strd	r6, r0, [sp, #128]	; 0x80
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001650:	f88d 0096 	strb.w	r0, [sp, #150]	; 0x96
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001654:	f88d 00a0 	strb.w	r0, [sp, #160]	; 0xa0
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001658:	f04f 0b09 	mov.w	fp, #9
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800165c:	f04f 0a7f 	mov.w	sl, #127	; 0x7f
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001660:	f04f 0902 	mov.w	r9, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001664:	a91c      	add	r1, sp, #112	; 0x70
 8001666:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001668:	e9cd 3b1c 	strd	r3, fp, [sp, #112]	; 0x70
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 800166c:	ed8d 8b26 	vstr	d8, [sp, #152]	; 0x98
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001670:	941e      	str	r4, [sp, #120]	; 0x78
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001672:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001676:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800167a:	f003 fbeb 	bl	8004e54 <HAL_ADCEx_InjectedConfigChannel>
 800167e:	b108      	cbz	r0, 8001684 <main+0x17c>
 8001680:	b672      	cpsid	i
  while (1)
 8001682:	e7fe      	b.n	8001682 <main+0x17a>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8001684:	4a5b      	ldr	r2, [pc, #364]	; (80017f4 <main+0x2ec>)
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001686:	a91c      	add	r1, sp, #112	; 0x70
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8001688:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800168c:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 800168e:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001692:	f003 fbdf 	bl	8004e54 <HAL_ADCEx_InjectedConfigChannel>
 8001696:	4601      	mov	r1, r0
 8001698:	b108      	cbz	r0, 800169e <main+0x196>
 800169a:	b672      	cpsid	i
  while (1)
 800169c:	e7fe      	b.n	800169c <main+0x194>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800169e:	223c      	movs	r2, #60	; 0x3c
 80016a0:	9001      	str	r0, [sp, #4]
 80016a2:	a81c      	add	r0, sp, #112	; 0x70
  hadc2.Instance = ADC2;
 80016a4:	4d54      	ldr	r5, [pc, #336]	; (80017f8 <main+0x2f0>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80016a6:	f008 fb83 	bl	8009db0 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80016aa:	9901      	ldr	r1, [sp, #4]
 80016ac:	2220      	movs	r2, #32
 80016ae:	a814      	add	r0, sp, #80	; 0x50
 80016b0:	f008 fb7e 	bl	8009db0 <memset>
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016b4:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 80016b6:	4b51      	ldr	r3, [pc, #324]	; (80017fc <main+0x2f4>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80016b8:	83a9      	strh	r1, [r5, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80016ba:	4628      	mov	r0, r5
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016bc:	e9c5 1404 	strd	r1, r4, [r5, #16]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016c0:	e9c5 110b 	strd	r1, r1, [r5, #44]	; 0x2c
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80016c4:	f8c5 8004 	str.w	r8, [r5, #4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80016c8:	60ef      	str	r7, [r5, #12]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016ca:	60a9      	str	r1, [r5, #8]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016cc:	61ae      	str	r6, [r5, #24]
  hadc2.Init.NbrOfConversion = 2;
 80016ce:	f8c5 9020 	str.w	r9, [r5, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80016d2:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80016d6:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016da:	63e9      	str	r1, [r5, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80016dc:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
  hadc2.Instance = ADC2;
 80016e0:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80016e2:	f003 f847 	bl	8004774 <HAL_ADC_Init>
 80016e6:	b108      	cbz	r0, 80016ec <main+0x1e4>
 80016e8:	b672      	cpsid	i
  while (1)
 80016ea:	e7fe      	b.n	80016ea <main+0x1e2>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 80016ec:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <main+0x2ec>)
  sConfigInjected.InjectedOffset = 0;
 80016ee:	9021      	str	r0, [sp, #132]	; 0x84
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80016f0:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
  sConfigInjected.QueueInjectedContext = DISABLE;
 80016f4:	f88d 0096 	strb.w	r0, [sp, #150]	; 0x96
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80016f8:	f88d 00a0 	strb.w	r0, [sp, #160]	; 0xa0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80016fc:	a91c      	add	r1, sp, #112	; 0x70
 80016fe:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001700:	ed8d 8b26 	vstr	d8, [sp, #152]	; 0x98
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001704:	e9cd b41d 	strd	fp, r4, [sp, #116]	; 0x74
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001708:	e9cd a61f 	strd	sl, r6, [sp, #124]	; 0x7c
  sConfigInjected.InjectedNbrOfConversion = 2;
 800170c:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8001710:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001712:	f003 fb9f 	bl	8004e54 <HAL_ADCEx_InjectedConfigChannel>
 8001716:	b108      	cbz	r0, 800171c <main+0x214>
 8001718:	b672      	cpsid	i
  while (1)
 800171a:	e7fe      	b.n	800171a <main+0x212>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800171c:	4a38      	ldr	r2, [pc, #224]	; (8001800 <main+0x2f8>)
 800171e:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001722:	a91c      	add	r1, sp, #112	; 0x70
 8001724:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8001726:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800172a:	f003 fb93 	bl	8004e54 <HAL_ADCEx_InjectedConfigChannel>
 800172e:	b108      	cbz	r0, 8001734 <main+0x22c>
 8001730:	b672      	cpsid	i
  while (1)
 8001732:	e7fe      	b.n	8001732 <main+0x22a>
  sConfig.Channel = ADC_CHANNEL_11;
 8001734:	a326      	add	r3, pc, #152	; (adr r3, 80017d0 <main+0x2c8>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800173e:	2204      	movs	r2, #4
 8001740:	237f      	movs	r3, #127	; 0x7f
 8001742:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001746:	a914      	add	r1, sp, #80	; 0x50
  sConfig.Channel = ADC_CHANNEL_11;
 8001748:	2204      	movs	r2, #4
 800174a:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800174c:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_11;
 800174e:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001752:	f003 f913 	bl	800497c <HAL_ADC_ConfigChannel>
 8001756:	b108      	cbz	r0, 800175c <main+0x254>
 8001758:	b672      	cpsid	i
  while (1)
 800175a:	e7fe      	b.n	800175a <main+0x252>
  sConfig.Channel = ADC_CHANNEL_5;
 800175c:	a31e      	add	r3, pc, #120	; (adr r3, 80017d8 <main+0x2d0>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001762:	4628      	mov	r0, r5
 8001764:	a914      	add	r1, sp, #80	; 0x50
  sConfig.Channel = ADC_CHANNEL_5;
 8001766:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800176a:	f003 f907 	bl	800497c <HAL_ADC_ConfigChannel>
 800176e:	b108      	cbz	r0, 8001774 <main+0x26c>
 8001770:	b672      	cpsid	i
  while (1)
 8001772:	e7fe      	b.n	8001772 <main+0x26a>
  hcordic.Instance = CORDIC;
 8001774:	4823      	ldr	r0, [pc, #140]	; (8001804 <main+0x2fc>)
 8001776:	4b24      	ldr	r3, [pc, #144]	; (8001808 <main+0x300>)
 8001778:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800177a:	f003 fecb 	bl	8005514 <HAL_CORDIC_Init>
 800177e:	b108      	cbz	r0, 8001784 <main+0x27c>
 8001780:	b672      	cpsid	i
  while (1)
 8001782:	e7fe      	b.n	8001782 <main+0x27a>
  hdac1.Instance = DAC1;
 8001784:	4c21      	ldr	r4, [pc, #132]	; (800180c <main+0x304>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8001786:	2230      	movs	r2, #48	; 0x30
 8001788:	2100      	movs	r1, #0
 800178a:	a81c      	add	r0, sp, #112	; 0x70
 800178c:	f008 fb10 	bl	8009db0 <memset>
  hdac1.Instance = DAC1;
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <main+0x308>)
 8001792:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001794:	4620      	mov	r0, r4
 8001796:	f003 ff55 	bl	8005644 <HAL_DAC_Init>
 800179a:	4602      	mov	r2, r0
 800179c:	b108      	cbz	r0, 80017a2 <main+0x29a>
 800179e:	b672      	cpsid	i
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <main+0x298>
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80017a2:	2602      	movs	r6, #2
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80017a4:	4620      	mov	r0, r4
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80017a6:	2701      	movs	r7, #1
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80017a8:	a91c      	add	r1, sp, #112	; 0x70
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80017aa:	e9cd 261e 	strd	r2, r6, [sp, #120]	; 0x78
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80017ae:	e9cd 2620 	strd	r2, r6, [sp, #128]	; 0x80
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80017b2:	961c      	str	r6, [sp, #112]	; 0x70
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80017b4:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80017b8:	9223      	str	r2, [sp, #140]	; 0x8c
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80017ba:	9722      	str	r7, [sp, #136]	; 0x88
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80017bc:	f003 ff58 	bl	8005670 <HAL_DAC_ConfigChannel>
 80017c0:	4604      	mov	r4, r0
 80017c2:	b338      	cbz	r0, 8001814 <main+0x30c>
 80017c4:	b672      	cpsid	i
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <main+0x2be>
 80017c8:	00000080 	.word	0x00000080
 80017cc:	00000080 	.word	0x00000080
 80017d0:	2e300800 	.word	0x2e300800
 80017d4:	00000006 	.word	0x00000006
 80017d8:	14f00020 	.word	0x14f00020
 80017dc:	0000000c 	.word	0x0000000c
 80017e0:	40021000 	.word	0x40021000
 80017e4:	200008a0 	.word	0x200008a0
 80017e8:	48000400 	.word	0x48000400
 80017ec:	48000800 	.word	0x48000800
 80017f0:	08600004 	.word	0x08600004
 80017f4:	3ac04000 	.word	0x3ac04000
 80017f8:	2000090c 	.word	0x2000090c
 80017fc:	50000100 	.word	0x50000100
 8001800:	10c00010 	.word	0x10c00010
 8001804:	20000978 	.word	0x20000978
 8001808:	40020c00 	.word	0x40020c00
 800180c:	200009a0 	.word	0x200009a0
 8001810:	50000800 	.word	0x50000800
  htim1.Instance = TIM1;
 8001814:	4d81      	ldr	r5, [pc, #516]	; (8001a1c <main+0x514>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001816:	900e      	str	r0, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001818:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
 800181c:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
 8001820:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001824:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
 8001828:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182c:	e9cd 0007 	strd	r0, r0, [sp, #28]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001830:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001834:	9006      	str	r0, [sp, #24]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001836:	900a      	str	r0, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001838:	901a      	str	r0, [sp, #104]	; 0x68
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800183a:	4601      	mov	r1, r0
 800183c:	2234      	movs	r2, #52	; 0x34
 800183e:	a81c      	add	r0, sp, #112	; 0x70
 8001840:	f008 fab6 	bl	8009db0 <memset>
  htim1.Instance = TIM1;
 8001844:	4b76      	ldr	r3, [pc, #472]	; (8001a20 <main+0x518>)
 8001846:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001848:	2020      	movs	r0, #32
 800184a:	f640 3311 	movw	r3, #2833	; 0xb11
 800184e:	e9c5 0302 	strd	r0, r3, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001852:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001856:	4628      	mov	r0, r5
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001858:	e9c5 7405 	strd	r7, r4, [r5, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800185c:	606c      	str	r4, [r5, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800185e:	612b      	str	r3, [r5, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001860:	f004 ff36 	bl	80066d0 <HAL_TIM_Base_Init>
 8001864:	b108      	cbz	r0, 800186a <main+0x362>
 8001866:	b672      	cpsid	i
  while (1)
 8001868:	e7fe      	b.n	8001868 <main+0x360>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800186a:	4628      	mov	r0, r5
 800186c:	f004 ffba 	bl	80067e4 <HAL_TIM_PWM_Init>
 8001870:	b108      	cbz	r0, 8001876 <main+0x36e>
 8001872:	b672      	cpsid	i
  while (1)
 8001874:	e7fe      	b.n	8001874 <main+0x36c>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001876:	2206      	movs	r2, #6
 8001878:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800187a:	a90e      	add	r1, sp, #56	; 0x38
 800187c:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800187e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001882:	f005 f8d5 	bl	8006a30 <HAL_TIM_SlaveConfigSynchro>
 8001886:	b108      	cbz	r0, 800188c <main+0x384>
 8001888:	b672      	cpsid	i
  while (1)
 800188a:	e7fe      	b.n	800188a <main+0x382>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188c:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800188e:	2270      	movs	r2, #112	; 0x70
 8001890:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001892:	a906      	add	r1, sp, #24
 8001894:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001896:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800189a:	f005 faad 	bl	8006df8 <HAL_TIMEx_MasterConfigSynchronization>
 800189e:	b108      	cbz	r0, 80018a4 <main+0x39c>
 80018a0:	b672      	cpsid	i
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <main+0x39a>
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 80018a4:	970c      	str	r7, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80018a6:	aa0a      	add	r2, sp, #40	; 0x28
 80018a8:	4631      	mov	r1, r6
 80018aa:	4628      	mov	r0, r5
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80018ac:	2601      	movs	r6, #1
 80018ae:	2701      	movs	r7, #1
 80018b0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80018b4:	f005 fb38 	bl	8006f28 <HAL_TIMEx_ConfigBreakInput>
 80018b8:	4602      	mov	r2, r0
 80018ba:	b108      	cbz	r0, 80018c0 <main+0x3b8>
 80018bc:	b672      	cpsid	i
  while (1)
 80018be:	e7fe      	b.n	80018be <main+0x3b6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c0:	2100      	movs	r1, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018c2:	901a      	str	r0, [sp, #104]	; 0x68
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c4:	2060      	movs	r0, #96	; 0x60
 80018c6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80018ca:	2000      	movs	r0, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80018d2:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d6:	a914      	add	r1, sp, #80	; 0x50
 80018d8:	4628      	mov	r0, r5
 80018da:	f005 f98f 	bl	8006bfc <HAL_TIM_PWM_ConfigChannel>
 80018de:	b108      	cbz	r0, 80018e4 <main+0x3dc>
 80018e0:	b672      	cpsid	i
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <main+0x3da>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018e4:	2204      	movs	r2, #4
 80018e6:	a914      	add	r1, sp, #80	; 0x50
 80018e8:	4628      	mov	r0, r5
 80018ea:	f005 f987 	bl	8006bfc <HAL_TIM_PWM_ConfigChannel>
 80018ee:	b108      	cbz	r0, 80018f4 <main+0x3ec>
 80018f0:	b672      	cpsid	i
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <main+0x3ea>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018f4:	2208      	movs	r2, #8
 80018f6:	a914      	add	r1, sp, #80	; 0x50
 80018f8:	4628      	mov	r0, r5
 80018fa:	f005 f97f 	bl	8006bfc <HAL_TIM_PWM_ConfigChannel>
 80018fe:	b108      	cbz	r0, 8001904 <main+0x3fc>
 8001900:	b672      	cpsid	i
  while (1)
 8001902:	e7fe      	b.n	8001902 <main+0x3fa>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001904:	2370      	movs	r3, #112	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001906:	4845      	ldr	r0, [pc, #276]	; (8001a1c <main+0x514>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001908:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800190a:	220c      	movs	r2, #12
 800190c:	a914      	add	r1, sp, #80	; 0x50
 800190e:	f005 f975 	bl	8006bfc <HAL_TIM_PWM_ConfigChannel>
 8001912:	b108      	cbz	r0, 8001918 <main+0x410>
 8001914:	b672      	cpsid	i
  while (1)
 8001916:	e7fe      	b.n	8001916 <main+0x40e>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800191c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001920:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8001924:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001928:	2300      	movs	r3, #0
 800192a:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 800192e:	2200      	movs	r2, #0
 8001930:	2300      	movs	r3, #0
 8001932:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8001936:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 800193a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800193e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001942:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001946:	9028      	str	r0, [sp, #160]	; 0xa0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001948:	2203      	movs	r2, #3
 800194a:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800194c:	4833      	ldr	r0, [pc, #204]	; (8001a1c <main+0x514>)
 800194e:	a91c      	add	r1, sp, #112	; 0x70
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001950:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001954:	f005 fa9a 	bl	8006e8c <HAL_TIMEx_ConfigBreakDeadTime>
 8001958:	4604      	mov	r4, r0
 800195a:	b108      	cbz	r0, 8001960 <main+0x458>
 800195c:	b672      	cpsid	i
  while (1)
 800195e:	e7fe      	b.n	800195e <main+0x456>
  htim2.Instance = TIM2;
 8001960:	4d30      	ldr	r5, [pc, #192]	; (8001a24 <main+0x51c>)
  HAL_TIM_MspPostInit(&htim1);
 8001962:	482e      	ldr	r0, [pc, #184]	; (8001a1c <main+0x514>)
 8001964:	f002 f804 	bl	8003970 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8001968:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800196c:	2701      	movs	r7, #1
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 800196e:	f04f 080c 	mov.w	r8, #12
  htim2.Instance = TIM2;
 8001972:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001974:	a91c      	add	r1, sp, #112	; 0x70
  htim2.Init.Period = M1_PULSE_NBR;
 8001976:	f641 73ff 	movw	r3, #8191	; 0x1fff
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800197a:	2603      	movs	r6, #3
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800197c:	4628      	mov	r0, r5
  htim2.Init.Period = M1_PULSE_NBR;
 800197e:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001980:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001988:	941d      	str	r4, [sp, #116]	; 0x74
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198a:	9416      	str	r4, [sp, #88]	; 0x58
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198c:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198e:	61ac      	str	r4, [r5, #24]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001990:	941f      	str	r4, [sp, #124]	; 0x7c
 8001992:	9421      	str	r4, [sp, #132]	; 0x84
 8001994:	9423      	str	r4, [sp, #140]	; 0x8c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001996:	971e      	str	r7, [sp, #120]	; 0x78
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8001998:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800199c:	9722      	str	r7, [sp, #136]	; 0x88
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 800199e:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019a2:	961c      	str	r6, [sp, #112]	; 0x70
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80019a4:	f004 ffa6 	bl	80068f4 <HAL_TIM_Encoder_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	b108      	cbz	r0, 80019b0 <main+0x4a8>
 80019ac:	b672      	cpsid	i
  while (1)
 80019ae:	e7fe      	b.n	80019ae <main+0x4a6>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b0:	a914      	add	r1, sp, #80	; 0x50
 80019b2:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b4:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b6:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b8:	f005 fa1e 	bl	8006df8 <HAL_TIMEx_MasterConfigSynchronization>
 80019bc:	4603      	mov	r3, r0
 80019be:	b108      	cbz	r0, 80019c4 <main+0x4bc>
 80019c0:	b672      	cpsid	i
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <main+0x4ba>
  huart2.Instance = USART2;
 80019c4:	4c18      	ldr	r4, [pc, #96]	; (8001a28 <main+0x520>)
  huart2.Init.BaudRate = 115200;
 80019c6:	4a19      	ldr	r2, [pc, #100]	; (8001a2c <main+0x524>)
  huart2.Init.Parity = UART_PARITY_NONE;
 80019c8:	6123      	str	r3, [r4, #16]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019ca:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ce:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019d2:	e9c4 3308 	strd	r3, r3, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019d8:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 115200;
 80019da:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80019de:	e9c4 2300 	strd	r2, r3, [r4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019e2:	f8c4 8014 	str.w	r8, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019e6:	f005 fe01 	bl	80075ec <HAL_UART_Init>
 80019ea:	4601      	mov	r1, r0
 80019ec:	b108      	cbz	r0, 80019f2 <main+0x4ea>
 80019ee:	b672      	cpsid	i
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <main+0x4e8>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f2:	4620      	mov	r0, r4
 80019f4:	f005 fe84 	bl	8007700 <HAL_UARTEx_SetTxFifoThreshold>
 80019f8:	4601      	mov	r1, r0
 80019fa:	b108      	cbz	r0, 8001a00 <main+0x4f8>
 80019fc:	b672      	cpsid	i
  while (1)
 80019fe:	e7fe      	b.n	80019fe <main+0x4f6>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a00:	4620      	mov	r0, r4
 8001a02:	f005 febf 	bl	8007784 <HAL_UARTEx_SetRxFifoThreshold>
 8001a06:	b108      	cbz	r0, 8001a0c <main+0x504>
 8001a08:	b672      	cpsid	i
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <main+0x502>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f005 fe59 	bl	80076c4 <HAL_UARTEx_DisableFifoMode>
 8001a12:	4604      	mov	r4, r0
 8001a14:	b160      	cbz	r0, 8001a30 <main+0x528>
 8001a16:	b672      	cpsid	i
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <main+0x510>
 8001a1a:	bf00      	nop
 8001a1c:	200009b4 	.word	0x200009b4
 8001a20:	40012c00 	.word	0x40012c00
 8001a24:	20000a00 	.word	0x20000a00
 8001a28:	20000a4c 	.word	0x20000a4c
 8001a2c:	40004400 	.word	0x40004400
  MX_MotorControl_Init();
 8001a30:	f001 fb76 	bl	8003120 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8001a34:	463a      	mov	r2, r7
 8001a36:	2104      	movs	r1, #4
 8001a38:	2018      	movs	r0, #24
 8001a3a:	f003 fd97 	bl	800556c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001a3e:	2018      	movs	r0, #24
 8001a40:	f003 fdd2 	bl	80055e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001a44:	4622      	mov	r2, r4
 8001a46:	4621      	mov	r1, r4
 8001a48:	2019      	movs	r0, #25
 8001a4a:	f003 fd8f 	bl	800556c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a4e:	2019      	movs	r0, #25
 8001a50:	f003 fdca 	bl	80055e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001a54:	4622      	mov	r2, r4
 8001a56:	2102      	movs	r1, #2
 8001a58:	2012      	movs	r0, #18
 8001a5a:	f003 fd87 	bl	800556c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a5e:	2012      	movs	r0, #18
 8001a60:	f003 fdc2 	bl	80055e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8001a64:	4622      	mov	r2, r4
 8001a66:	4631      	mov	r1, r6
 8001a68:	201c      	movs	r0, #28
 8001a6a:	f003 fd7f 	bl	800556c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a6e:	201c      	movs	r0, #28
 8001a70:	f003 fdba 	bl	80055e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8001a74:	463a      	mov	r2, r7
 8001a76:	4631      	mov	r1, r6
 8001a78:	2026      	movs	r0, #38	; 0x26
 8001a7a:	f003 fd77 	bl	800556c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a7e:	2026      	movs	r0, #38	; 0x26
 8001a80:	f003 fdb2 	bl	80055e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001a84:	4622      	mov	r2, r4
 8001a86:	4631      	mov	r1, r6
 8001a88:	2028      	movs	r0, #40	; 0x28
 8001a8a:	f003 fd6f 	bl	800556c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a8e:	2028      	movs	r0, #40	; 0x28
 8001a90:	f003 fdaa 	bl	80055e8 <HAL_NVIC_EnableIRQ>
  MCI_Handle_t *pHandle = pMCI[M1];
 8001a94:	4c44      	ldr	r4, [pc, #272]	; (8001ba8 <main+0x6a0>)
  printf("Starting program...\r\n");
 8001a96:	4845      	ldr	r0, [pc, #276]	; (8001bac <main+0x6a4>)
  while(!isAligned){  printf("STM state 1: %d\r\n", MCI_GetSTMState(pHandle));
 8001a98:	4f45      	ldr	r7, [pc, #276]	; (8001bb0 <main+0x6a8>)
  	  	  	  	  	  	 isAligned = EAC_IsAligned(&EncAlignCtrlM1);}
 8001a9a:	4e46      	ldr	r6, [pc, #280]	; (8001bb4 <main+0x6ac>)
  printf("Starting program...\r\n");
 8001a9c:	f008 fe80 	bl	800a7a0 <puts>
  encoder->getMecSpeed = getMecSpeed;
 8001aa0:	4a45      	ldr	r2, [pc, #276]	; (8001bb8 <main+0x6b0>)
  regulator->computeStabilization = computeStabilization;
 8001aa2:	4846      	ldr	r0, [pc, #280]	; (8001bbc <main+0x6b4>)
  MCI_Handle_t *pHandle = pMCI[M1];
 8001aa4:	6825      	ldr	r5, [r4, #0]
  errorHandling->getMotorStatus = getMotorStatus;
 8001aa6:	4946      	ldr	r1, [pc, #280]	; (8001bc0 <main+0x6b8>)
    led->indicateError = indicateError;
 8001aa8:	4b46      	ldr	r3, [pc, #280]	; (8001bc4 <main+0x6bc>)
  encoder->pendulum_speed = 0.0f;
 8001aaa:	2400      	movs	r4, #0
 8001aac:	6014      	str	r4, [r2, #0]
  encoder->pendulum_angle = 0.0f;
 8001aae:	6054      	str	r4, [r2, #4]
  regulator->computeStabilization = computeStabilization;
 8001ab0:	4c45      	ldr	r4, [pc, #276]	; (8001bc8 <main+0x6c0>)
 8001ab2:	6004      	str	r4, [r0, #0]
  regulator->computeSwingUp = computeSwingUp;
 8001ab4:	4c45      	ldr	r4, [pc, #276]	; (8001bcc <main+0x6c4>)
 8001ab6:	6044      	str	r4, [r0, #4]
  encoder->getMecSpeed = getMecSpeed;
 8001ab8:	4845      	ldr	r0, [pc, #276]	; (8001bd0 <main+0x6c8>)
 8001aba:	60d0      	str	r0, [r2, #12]
  encoder->getAngle = getAngle;
 8001abc:	4845      	ldr	r0, [pc, #276]	; (8001bd4 <main+0x6cc>)
 8001abe:	6110      	str	r0, [r2, #16]
  errorHandling->faultCodeToString = faultCodeToString;
 8001ac0:	4a45      	ldr	r2, [pc, #276]	; (8001bd8 <main+0x6d0>)
 8001ac2:	60ca      	str	r2, [r1, #12]
  errorHandling->getCurrentMotorState = getCurrentMotorState;
 8001ac4:	4a45      	ldr	r2, [pc, #276]	; (8001bdc <main+0x6d4>)
 8001ac6:	608a      	str	r2, [r1, #8]
  errorHandling->getMotorStatus = getMotorStatus;
 8001ac8:	4845      	ldr	r0, [pc, #276]	; (8001be0 <main+0x6d8>)
    led->indicateError = indicateError;
 8001aca:	4c46      	ldr	r4, [pc, #280]	; (8001be4 <main+0x6dc>)
    led->indicateWarning = indicateWarning;
 8001acc:	4a46      	ldr	r2, [pc, #280]	; (8001be8 <main+0x6e0>)
  errorHandling->getMotorStatus = getMotorStatus;
 8001ace:	6048      	str	r0, [r1, #4]
    led->turnOffAllLeds = turnOffAllLeds;
 8001ad0:	4946      	ldr	r1, [pc, #280]	; (8001bec <main+0x6e4>)
    led->indicateNormalOperation = indicateNormalOperation;
 8001ad2:	4847      	ldr	r0, [pc, #284]	; (8001bf0 <main+0x6e8>)
    led->indicateWarning = indicateWarning;
 8001ad4:	e9c3 4200 	strd	r4, r2, [r3]
    led->turnOnLed = turnOnLed;
 8001ad8:	4a46      	ldr	r2, [pc, #280]	; (8001bf4 <main+0x6ec>)
 8001ada:	611a      	str	r2, [r3, #16]
    led->turnOffAllLeds = turnOffAllLeds;
 8001adc:	e9c3 0102 	strd	r0, r1, [r3, #8]
  MC_StartMotor1();
 8001ae0:	f000 f89a 	bl	8001c18 <MC_StartMotor1>
  isAligned = EAC_IsAligned(&EncAlignCtrlM1);
 8001ae4:	4833      	ldr	r0, [pc, #204]	; (8001bb4 <main+0x6ac>)
 8001ae6:	f005 ff1f 	bl	8007928 <EAC_IsAligned>
 8001aea:	4604      	mov	r4, r0
  printf("STM state 0: %d\r\n", MCI_GetSTMState(pHandle));
 8001aec:	4628      	mov	r0, r5
 8001aee:	f000 f96d 	bl	8001dcc <MCI_GetSTMState>
 8001af2:	4601      	mov	r1, r0
 8001af4:	4840      	ldr	r0, [pc, #256]	; (8001bf8 <main+0x6f0>)
 8001af6:	f008 fdcd 	bl	800a694 <iprintf>
  while(!isAligned){  printf("STM state 1: %d\r\n", MCI_GetSTMState(pHandle));
 8001afa:	4628      	mov	r0, r5
 8001afc:	b954      	cbnz	r4, 8001b14 <main+0x60c>
 8001afe:	f000 f965 	bl	8001dcc <MCI_GetSTMState>
 8001b02:	4601      	mov	r1, r0
 8001b04:	4638      	mov	r0, r7
 8001b06:	f008 fdc5 	bl	800a694 <iprintf>
  	  	  	  	  	  	 isAligned = EAC_IsAligned(&EncAlignCtrlM1);}
 8001b0a:	4630      	mov	r0, r6
 8001b0c:	f005 ff0c 	bl	8007928 <EAC_IsAligned>
 8001b10:	4604      	mov	r4, r0
 8001b12:	e7f2      	b.n	8001afa <main+0x5f2>
  printf("Encoder is now aligned = %d\r\n",isAligned);
 8001b14:	4839      	ldr	r0, [pc, #228]	; (8001bfc <main+0x6f4>)
 8001b16:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8001c0c <main+0x704>
		currentPositionRad = ((float)motorDegrees/180) * M_PI;
 8001b1a:	eddf 8a39 	vldr	s17, [pc, #228]	; 8001c00 <main+0x6f8>
		man_mecAngle = RADTOS16 * currentPositionRad;
 8001b1e:	ed9f 8a39 	vldr	s16, [pc, #228]	; 8001c04 <main+0x6fc>
 8001b22:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8001c10 <main+0x708>
  printf("Encoder is now aligned = %d\r\n",isAligned);
 8001b26:	2101      	movs	r1, #1
 8001b28:	f008 fdb4 	bl	800a694 <iprintf>
		currentPositionRad = ((float)motorDegrees/180) * M_PI;
 8001b2c:	a71c      	add	r7, pc, #112	; (adr r7, 8001ba0 <main+0x698>)
 8001b2e:	e9d7 6700 	ldrd	r6, r7, [r7]
  pPosCtrlM1.PositionControlRegulation = false;
 8001b32:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <main+0x700>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  int sign = 1;
 8001b3a:	2401      	movs	r4, #1
		currentPositionRad = ((float)motorDegrees/180) * M_PI;
 8001b3c:	f8d8 5000 	ldr.w	r5, [r8]
 8001b40:	ee07 5a90 	vmov	s15, r5
 8001b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b48:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8001b4c:	ee17 0a90 	vmov	r0, s15
 8001b50:	f7fe fd22 	bl	8000598 <__aeabi_f2d>
 8001b54:	4632      	mov	r2, r6
 8001b56:	463b      	mov	r3, r7
 8001b58:	f7fe fd76 	bl	8000648 <__aeabi_dmul>
 8001b5c:	f7ff f84c 	bl	8000bf8 <__aeabi_d2f>
		man_mecAngle = RADTOS16 * currentPositionRad;
 8001b60:	ee07 0a90 	vmov	s15, r0
 8001b64:	ee67 7a88 	vmul.f32	s15, s15, s16
		if (abs(motorDegrees) == 1500 || abs(motorDegrees) == 0)
 8001b68:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
		man_mecAngle = RADTOS16 * currentPositionRad;
 8001b6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		if (abs(motorDegrees) == 1500 || abs(motorDegrees) == 0)
 8001b70:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
		man_mecAngle = RADTOS16 * currentPositionRad;
 8001b74:	ee17 3a90 	vmov	r3, s15
 8001b78:	f8a9 3000 	strh.w	r3, [r9]
		if (abs(motorDegrees) == 1500 || abs(motorDegrees) == 0)
 8001b7c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d000      	beq.n	8001b86 <main+0x67e>
 8001b84:	b905      	cbnz	r5, 8001b88 <main+0x680>
			sign = -sign;
 8001b86:	4264      	negs	r4, r4
		motorDegrees += sign*5;
 8001b88:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001b8c:	441d      	add	r5, r3
		HAL_Delay(4);
 8001b8e:	2004      	movs	r0, #4
		motorDegrees += sign*5;
 8001b90:	f8c8 5000 	str.w	r5, [r8]
		HAL_Delay(4);
 8001b94:	f002 fddc 	bl	8004750 <HAL_Delay>
		currentPositionRad = ((float)motorDegrees/180) * M_PI;
 8001b98:	e7d0      	b.n	8001b3c <main+0x634>
 8001b9a:	bf00      	nop
 8001b9c:	f3af 8000 	nop.w
 8001ba0:	54442d18 	.word	0x54442d18
 8001ba4:	400921fb 	.word	0x400921fb
 8001ba8:	20000bf8 	.word	0x20000bf8
 8001bac:	0800cb20 	.word	0x0800cb20
 8001bb0:	0800cb4c 	.word	0x0800cb4c
 8001bb4:	2000016c 	.word	0x2000016c
 8001bb8:	20000878 	.word	0x20000878
 8001bbc:	20000af8 	.word	0x20000af8
 8001bc0:	2000088c 	.word	0x2000088c
 8001bc4:	20000adc 	.word	0x20000adc
 8001bc8:	08001369 	.word	0x08001369
 8001bcc:	08001379 	.word	0x08001379
 8001bd0:	08000ff1 	.word	0x08000ff1
 8001bd4:	08001019 	.word	0x08001019
 8001bd8:	0800106d 	.word	0x0800106d
 8001bdc:	08001361 	.word	0x08001361
 8001be0:	080011e5 	.word	0x080011e5
 8001be4:	080013bd 	.word	0x080013bd
 8001be8:	080013c9 	.word	0x080013c9
 8001bec:	080013e1 	.word	0x080013e1
 8001bf0:	080013d5 	.word	0x080013d5
 8001bf4:	080013ed 	.word	0x080013ed
 8001bf8:	0800cb38 	.word	0x0800cb38
 8001bfc:	0800cb60 	.word	0x0800cb60
 8001c00:	3bb60b61 	.word	0x3bb60b61
 8001c04:	4622f983 	.word	0x4622f983
 8001c08:	200004cc 	.word	0x200004cc
 8001c0c:	20000af4 	.word	0x20000af4
 8001c10:	20000af0 	.word	0x20000af0

08001c14 <Error_Handler>:
 8001c14:	b672      	cpsid	i
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <Error_Handler+0x2>

08001c18 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001c18:	4b01      	ldr	r3, [pc, #4]	; (8001c20 <MC_StartMotor1+0x8>)
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	f000 b878 	b.w	8001d10 <MCI_StartMotor>
 8001c20:	20000bf8 	.word	0x20000bf8

08001c24 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8001c24:	4b01      	ldr	r3, [pc, #4]	; (8001c2c <MC_StopMotor1+0x8>)
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	f000 b87c 	b.w	8001d24 <MCI_StopMotor>
 8001c2c:	20000bf8 	.word	0x20000bf8

08001c30 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8001c30:	4b01      	ldr	r3, [pc, #4]	; (8001c38 <MC_GetSTMStateMotor1+0x8>)
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	f000 b8ca 	b.w	8001dcc <MCI_GetSTMState>
 8001c38:	20000bf8 	.word	0x20000bf8

08001c3c <MCI_Init>:
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars, PosCtrl_Handle_t * pPosCtrl )
{
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;
 8001c3c:	e9c0 2301 	strd	r2, r3, [r0, #4]
  pHandle->pSTM = pSTM;
 8001c40:	6001      	str	r1, [r0, #0]
  pHandle->pPosCtrl = pPosCtrl;
 8001c42:	9b00      	ldr	r3, [sp, #0]
 8001c44:	60c3      	str	r3, [r0, #12]

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001c46:	2100      	movs	r1, #0
 8001c48:	7401      	strb	r1, [r0, #16]
  pHandle->hFinalSpeed = 0;
 8001c4a:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8001c4e:	8341      	strh	r1, [r0, #26]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001c50:	7701      	strb	r1, [r0, #28]
}
 8001c52:	4770      	bx	lr

08001c54 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8001c54:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001c58:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8001c5c:	f880 c010 	strb.w	ip, [r0, #16]
  pHandle->hFinalSpeed = hFinalSpeed;
 8001c60:	8241      	strh	r1, [r0, #18]
  pHandle->hDurationms = hDurationms;
 8001c62:	8342      	strh	r2, [r0, #26]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001c64:	8383      	strh	r3, [r0, #28]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8001c66:	4770      	bx	lr

08001c68 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8001c68:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001c6c:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8001c6e:	f880 c010 	strb.w	ip, [r0, #16]
  pHandle->hFinalTorque = hFinalTorque;
 8001c72:	8281      	strh	r1, [r0, #20]
  pHandle->hDurationms = hDurationms;
 8001c74:	8342      	strh	r2, [r0, #26]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001c76:	8383      	strh	r3, [r0, #28]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop

08001c7c <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8001c7c:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8001c7e:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001c80:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8001c82:	7402      	strb	r2, [r0, #16]
  pHandle->Iqdref.q = Iqdref.q;
 8001c84:	f8c0 1016 	str.w	r1, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001c88:	8383      	strh	r3, [r0, #28]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8001c8a:	b002      	add	sp, #8
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop

08001c90 <MCI_ExecPositionCommand>:
  * @param  FinalPosition is the desired rotor position asked.
  * @param  Duration the duration of the movement to reach the final position.
  * @retval none.
  */
__weak void MCI_ExecPositionCommand( MCI_Handle_t * pHandle, float FinalPosition, float Duration )
{
 8001c90:	b510      	push	{r4, lr}
 8001c92:	ed2d 8b02 	vpush	{d8}
  pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001c96:	6883      	ldr	r3, [r0, #8]
 8001c98:	2200      	movs	r2, #0
{
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	b082      	sub	sp, #8
  pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  printf("dont tell me here?\r\n");
 8001ca2:	4819      	ldr	r0, [pc, #100]	; (8001d08 <MCI_ExecPositionCommand+0x78>)
{
 8001ca4:	eeb0 8a60 	vmov.f32	s16, s1
 8001ca8:	eef0 8a40 	vmov.f32	s17, s0
  printf("dont tell me here?\r\n");
 8001cac:	f008 fd78 	bl	800a7a0 <puts>
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001cb0:	6860      	ldr	r0, [r4, #4]
 8001cb2:	f007 fad9 	bl	8009268 <STC_GetSpeedSensor>
 8001cb6:	f007 fa75 	bl	80091a4 <SPD_GetMecAngle>
  if (Duration > 0) {
 8001cba:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001cc2:	9001      	str	r0, [sp, #4]
  if (Duration > 0) {
 8001cc4:	dd14      	ble.n	8001cf0 <MCI_ExecPositionCommand+0x60>
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001cc6:	ee07 0a90 	vmov	s15, r0
 8001cca:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001d0c <MCI_ExecPositionCommand+0x7c>
    TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8001cce:	68e0      	ldr	r0, [r4, #12]
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8001cd4:	eeb0 1a48 	vmov.f32	s2, s16
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001cd8:	ee27 0a80 	vmul.f32	s0, s15, s0
    TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8001cdc:	ee78 0ac0 	vsub.f32	s1, s17, s0
 8001ce0:	f007 fc58 	bl	8009594 <TC_MoveCommand>
  } else {
    TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
  }

  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	7763      	strb	r3, [r4, #29]
}
 8001ce8:	b002      	add	sp, #8
 8001cea:	ecbd 8b02 	vpop	{d8}
 8001cee:	bd10      	pop	{r4, pc}
    TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
 8001cf0:	68e0      	ldr	r0, [r4, #12]
 8001cf2:	eeb0 0a68 	vmov.f32	s0, s17
 8001cf6:	f007 fcbf 	bl	8009678 <TC_FollowCommand>
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	7763      	strb	r3, [r4, #29]
}
 8001cfe:	b002      	add	sp, #8
 8001d00:	ecbd 8b02 	vpop	{d8}
 8001d04:	bd10      	pop	{r4, pc}
 8001d06:	bf00      	nop
 8001d08:	0800cb80 	.word	0x0800cb80
 8001d0c:	38c90fdb 	.word	0x38c90fdb

08001d10 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8001d10:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8001d12:	2103      	movs	r1, #3
{
 8001d14:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8001d16:	6800      	ldr	r0, [r0, #0]
 8001d18:	f007 fb84 	bl	8009424 <STM_NextState>

  if ( RetVal == true )
 8001d1c:	b108      	cbz	r0, 8001d22 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	7723      	strb	r3, [r4, #28]
  }

  return RetVal;
}
 8001d22:	bd10      	pop	{r4, pc}

08001d24 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8001d24:	6800      	ldr	r0, [r0, #0]
 8001d26:	2107      	movs	r1, #7
 8001d28:	f007 bb7c 	b.w	8009424 <STM_NextState>

08001d2c <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8001d2c:	6800      	ldr	r0, [r0, #0]
 8001d2e:	f007 bbef 	b.w	8009510 <STM_FaultAcknowledged>
 8001d32:	bf00      	nop

08001d34 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8001d34:	6800      	ldr	r0, [r0, #0]
 8001d36:	2101      	movs	r1, #1
 8001d38:	f007 bb74 	b.w	8009424 <STM_NextState>

08001d3c <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8001d3c:	b198      	cbz	r0, 8001d66 <MCI_ExecBufferedCommands+0x2a>
{
 8001d3e:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001d40:	7f03      	ldrb	r3, [r0, #28]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	4604      	mov	r4, r0
 8001d46:	d000      	beq.n	8001d4a <MCI_ExecBufferedCommands+0xe>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
        printf("MCI_COMMAND_EXECUTED_UNSUCCESFULLY\r\n");
      }
    }
  }
}
 8001d48:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8001d4a:	7c01      	ldrb	r1, [r0, #16]
 8001d4c:	2902      	cmp	r1, #2
 8001d4e:	d028      	beq.n	8001da2 <MCI_ExecBufferedCommands+0x66>
 8001d50:	2903      	cmp	r1, #3
 8001d52:	d009      	beq.n	8001d68 <MCI_ExecBufferedCommands+0x2c>
 8001d54:	2901      	cmp	r1, #1
 8001d56:	d014      	beq.n	8001d82 <MCI_ExecBufferedCommands+0x46>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	7723      	strb	r3, [r4, #28]
}
 8001d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        printf("MCI_COMMAND_EXECUTED_UNSUCCESFULLY\r\n");
 8001d60:	4818      	ldr	r0, [pc, #96]	; (8001dc4 <MCI_ExecBufferedCommands+0x88>)
 8001d62:	f008 bd1d 	b.w	800a7a0 <puts>
 8001d66:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001d68:	6882      	ldr	r2, [r0, #8]
 8001d6a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001d6e:	f8d0 3016 	ldr.w	r3, [r0, #22]
 8001d72:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001d74:	2302      	movs	r3, #2
 8001d76:	7723      	strb	r3, [r4, #28]
}
 8001d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        printf("MCI_COMMAND_EXECUTED_SUCCESFULLY\r\n");
 8001d7c:	4812      	ldr	r0, [pc, #72]	; (8001dc8 <MCI_ExecBufferedCommands+0x8c>)
 8001d7e:	f008 bd0f 	b.w	800a7a0 <puts>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001d82:	6883      	ldr	r3, [r0, #8]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8001d8a:	6840      	ldr	r0, [r0, #4]
 8001d8c:	f007 fa86 	bl	800929c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8001d90:	8b62      	ldrh	r2, [r4, #26]
 8001d92:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001d96:	6860      	ldr	r0, [r4, #4]
 8001d98:	f007 fa84 	bl	80092a4 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8001d9c:	2800      	cmp	r0, #0
 8001d9e:	d0db      	beq.n	8001d58 <MCI_ExecBufferedCommands+0x1c>
 8001da0:	e7e8      	b.n	8001d74 <MCI_ExecBufferedCommands+0x38>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001da2:	6883      	ldr	r3, [r0, #8]
 8001da4:	2100      	movs	r1, #0
 8001da6:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8001daa:	6840      	ldr	r0, [r0, #4]
 8001dac:	f007 fa76 	bl	800929c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8001db0:	8b62      	ldrh	r2, [r4, #26]
 8001db2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8001db6:	6860      	ldr	r0, [r4, #4]
 8001db8:	f007 fa74 	bl	80092a4 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d0cb      	beq.n	8001d58 <MCI_ExecBufferedCommands+0x1c>
 8001dc0:	e7d8      	b.n	8001d74 <MCI_ExecBufferedCommands+0x38>
 8001dc2:	bf00      	nop
 8001dc4:	0800cbb8 	.word	0x0800cbb8
 8001dc8:	0800cb94 	.word	0x0800cb94

08001dcc <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8001dcc:	6800      	ldr	r0, [r0, #0]
 8001dce:	f007 bb9d 	b.w	800950c <STM_GetState>
 8001dd2:	bf00      	nop

08001dd4 <MCI_GetCurrentFaults>:
  * @retval uint16_t  16 bit fields with information about about currently
  *         present faults.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults( MCI_Handle_t * pHandle )
{
 8001dd4:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) >> 16 );
 8001dd6:	6800      	ldr	r0, [r0, #0]
 8001dd8:	f007 fba6 	bl	8009528 <STM_GetFaultState>
}
 8001ddc:	0c00      	lsrs	r0, r0, #16
 8001dde:	bd08      	pop	{r3, pc}

08001de0 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8001de0:	7f40      	ldrb	r0, [r0, #29]
 8001de2:	4770      	bx	lr

08001de4 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8001de4:	7c03      	ldrb	r3, [r0, #16]
 8001de6:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8001de8:	bf0c      	ite	eq
 8001dea:	f9b0 0012 	ldrsheq.w	r0, [r0, #18]
  int16_t hRetVal = 0;
 8001dee:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop

08001df4 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8001df4:	6840      	ldr	r0, [r0, #4]
 8001df6:	f007 ba9d 	b.w	8009334 <STC_StopRamp>
 8001dfa:	bf00      	nop

08001dfc <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8001dfc:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8001dfe:	6840      	ldr	r0, [r0, #4]
 8001e00:	f007 fa32 	bl	8009268 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8001e04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8001e08:	f007 b9ce 	b.w	80091a8 <SPD_GetAvrgMecSpeedUnit>

08001e0c <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8001e0c:	6840      	ldr	r0, [r0, #4]
 8001e0e:	f007 ba35 	b.w	800927c <STC_GetMecSpeedRefUnit>
 8001e12:	bf00      	nop

08001e14 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8001e14:	6882      	ldr	r2, [r0, #8]
 8001e16:	6810      	ldr	r0, [r2, #0]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	b282      	uxth	r2, r0
 8001e1c:	f362 030f 	bfi	r3, r2, #0, #16
 8001e20:	0c00      	lsrs	r0, r0, #16
 8001e22:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001e26:	b082      	sub	sp, #8
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	b002      	add	sp, #8
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop

08001e30 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8001e30:	6882      	ldr	r2, [r0, #8]
 8001e32:	6850      	ldr	r0, [r2, #4]
 8001e34:	2300      	movs	r3, #0
 8001e36:	b282      	uxth	r2, r0
 8001e38:	f362 030f 	bfi	r3, r2, #0, #16
 8001e3c:	0c00      	lsrs	r0, r0, #16
 8001e3e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001e42:	b082      	sub	sp, #8
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	b002      	add	sp, #8
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop

08001e4c <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8001e4c:	6882      	ldr	r2, [r0, #8]
 8001e4e:	68d0      	ldr	r0, [r2, #12]
 8001e50:	2300      	movs	r3, #0
 8001e52:	b282      	uxth	r2, r0
 8001e54:	f362 030f 	bfi	r3, r2, #0, #16
 8001e58:	0c00      	lsrs	r0, r0, #16
 8001e5a:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001e5e:	b082      	sub	sp, #8
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	b002      	add	sp, #8
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop

08001e68 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8001e68:	6882      	ldr	r2, [r0, #8]
 8001e6a:	6910      	ldr	r0, [r2, #16]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	b282      	uxth	r2, r0
 8001e70:	f362 030f 	bfi	r3, r2, #0, #16
 8001e74:	0c00      	lsrs	r0, r0, #16
 8001e76:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001e7a:	b082      	sub	sp, #8
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	b002      	add	sp, #8
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop

08001e84 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8001e84:	6882      	ldr	r2, [r0, #8]
 8001e86:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	b282      	uxth	r2, r0
 8001e8e:	f362 030f 	bfi	r3, r2, #0, #16
 8001e92:	0c00      	lsrs	r0, r0, #16
 8001e94:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001e98:	b082      	sub	sp, #8
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	b002      	add	sp, #8
 8001e9e:	4770      	bx	lr

08001ea0 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8001ea0:	6882      	ldr	r2, [r0, #8]
 8001ea2:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	b282      	uxth	r2, r0
 8001eaa:	f362 030f 	bfi	r3, r2, #0, #16
 8001eae:	0c00      	lsrs	r0, r0, #16
 8001eb0:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001eb4:	b082      	sub	sp, #8
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	b002      	add	sp, #8
 8001eba:	4770      	bx	lr

08001ebc <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8001ebc:	6883      	ldr	r3, [r0, #8]
}
 8001ebe:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8001ec2:	4770      	bx	lr

08001ec4 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	6882      	ldr	r2, [r0, #8]
 8001ec8:	f361 030f 	bfi	r3, r1, #0, #16
 8001ecc:	f361 431f 	bfi	r3, r1, #16, #16
 8001ed0:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop

08001ed8 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8001ed8:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8001eda:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8001ede:	f007 fa69 	bl	80093b4 <STC_GetDefaultIqdref>
 8001ee2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001ee6:	8220      	strh	r0, [r4, #16]
 8001ee8:	8263      	strh	r3, [r4, #18]
}
 8001eea:	bd10      	pop	{r4, pc}

08001eec <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8001eec:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8001ef0:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8001ef2:	fb13 f201 	smulbb	r2, r3, r1
{
 8001ef6:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8001efa:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8001efe:	4250      	negs	r0, r2
 8001f00:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8001f04:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8001f08:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8001f0a:	da05      	bge.n	8001f18 <MCM_Clarke+0x2c>
 8001f0c:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8001f0e:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8001f12:	da0c      	bge.n	8001f2e <MCM_Clarke+0x42>
 8001f14:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <MCM_Clarke+0x50>)
 8001f16:	e001      	b.n	8001f1c <MCM_Clarke+0x30>
 8001f18:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f363 000f 	bfi	r0, r3, #0, #16
 8001f24:	b293      	uxth	r3, r2
 8001f26:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001f2a:	b004      	add	sp, #16
 8001f2c:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8001f2e:	4803      	ldr	r0, [pc, #12]	; (8001f3c <MCM_Clarke+0x50>)
 8001f30:	b20a      	sxth	r2, r1
 8001f32:	4282      	cmp	r2, r0
 8001f34:	bfb8      	it	lt
 8001f36:	4602      	movlt	r2, r0
 8001f38:	e7f0      	b.n	8001f1c <MCM_Clarke+0x30>
 8001f3a:	bf00      	nop
 8001f3c:	ffff8001 	.word	0xffff8001

08001f40 <MCM_Trig_Functions>:
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;

  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MCM_Trig_Functions+0x28>)
 8001f42:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <MCM_Trig_Functions+0x2c>)
 8001f44:	601a      	str	r2, [r3, #0]
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 8001f46:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 8001f4a:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8001f4e:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001f50:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components);
 8001f52:	2000      	movs	r0, #0
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	f362 000f 	bfi	r0, r2, #0, #16
 8001f5a:	0c1b      	lsrs	r3, r3, #16
{
 8001f5c:	b082      	sub	sp, #8
  return (CosSin.Components);
 8001f5e:	f363 401f 	bfi	r0, r3, #16, #16

}
 8001f62:	b002      	add	sp, #8
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40020c00 	.word	0x40020c00
 8001f6c:	00600040 	.word	0x00600040

08001f70 <MCM_Park>:
{
 8001f70:	b530      	push	{r4, r5, lr}
 8001f72:	b085      	sub	sp, #20
 8001f74:	4603      	mov	r3, r0
 8001f76:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001f78:	4608      	mov	r0, r1
 8001f7a:	141c      	asrs	r4, r3, #16
{
 8001f7c:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001f7e:	f7ff ffdf 	bl	8001f40 <MCM_Trig_Functions>
 8001f82:	b22d      	sxth	r5, r5
 8001f84:	fa0f fc80 	sxth.w	ip, r0
 8001f88:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8001f8a:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8001f8e:	fb04 1113 	mls	r1, r4, r3, r1
  if ( wqd_tmp > INT16_MAX )
 8001f92:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8001f96:	da05      	bge.n	8001fa4 <MCM_Park+0x34>
 8001f98:	13ca      	asrs	r2, r1, #15
  else if ( wqd_tmp < ( -32768 ) )
 8001f9a:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001f9e:	da22      	bge.n	8001fe6 <MCM_Park+0x76>
 8001fa0:	4914      	ldr	r1, [pc, #80]	; (8001ff4 <MCM_Park+0x84>)
 8001fa2:	e001      	b.n	8001fa8 <MCM_Park+0x38>
 8001fa4:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8001fa8:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001fac:	fb05 4403 	mla	r4, r5, r3, r4
  if ( wqd_tmp > INT16_MAX )
 8001fb0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001fb4:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 8001fb8:	da04      	bge.n	8001fc4 <MCM_Park+0x54>
  else if ( wqd_tmp < ( -32768 ) )
 8001fba:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001fbe:	da0c      	bge.n	8001fda <MCM_Park+0x6a>
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <MCM_Park+0x84>)
 8001fc2:	e001      	b.n	8001fc8 <MCM_Park+0x58>
 8001fc4:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8001fc8:	b28a      	uxth	r2, r1
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f362 000f 	bfi	r0, r2, #0, #16
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001fd6:	b005      	add	sp, #20
 8001fd8:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001fda:	4806      	ldr	r0, [pc, #24]	; (8001ff4 <MCM_Park+0x84>)
 8001fdc:	b213      	sxth	r3, r2
 8001fde:	4283      	cmp	r3, r0
 8001fe0:	bfb8      	it	lt
 8001fe2:	4603      	movlt	r3, r0
 8001fe4:	e7f0      	b.n	8001fc8 <MCM_Park+0x58>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001fe6:	4903      	ldr	r1, [pc, #12]	; (8001ff4 <MCM_Park+0x84>)
 8001fe8:	b212      	sxth	r2, r2
 8001fea:	4291      	cmp	r1, r2
 8001fec:	bfb8      	it	lt
 8001fee:	4611      	movlt	r1, r2
 8001ff0:	e7da      	b.n	8001fa8 <MCM_Park+0x38>
 8001ff2:	bf00      	nop
 8001ff4:	ffff8001 	.word	0xffff8001

08001ff8 <MCM_Rev_Park>:
{
 8001ff8:	b530      	push	{r4, r5, lr}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	4604      	mov	r4, r0
 8001ffe:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8002000:	4608      	mov	r0, r1
{
 8002002:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8002004:	f7ff ff9c 	bl	8001f40 <MCM_Trig_Functions>
 8002008:	1424      	asrs	r4, r4, #16
 800200a:	1402      	asrs	r2, r0, #16
 800200c:	b22d      	sxth	r5, r5
 800200e:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8002010:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8002014:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8002018:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 800201c:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 8002020:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8002024:	2000      	movs	r0, #0
 8002026:	f363 000f 	bfi	r0, r3, #0, #16
 800202a:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 800202e:	f364 401f 	bfi	r0, r4, #16, #16
}
 8002032:	b005      	add	sp, #20
 8002034:	bd30      	pop	{r4, r5, pc}
 8002036:	bf00      	nop

08002038 <FOC_Clear>:
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8002038:	2226      	movs	r2, #38	; 0x26
{
 800203a:	b538      	push	{r3, r4, r5, lr}
 800203c:	fb00 f202 	mul.w	r2, r0, r2
 8002040:	4b15      	ldr	r3, [pc, #84]	; (8002098 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 8002042:	2400      	movs	r4, #0
 8002044:	509c      	str	r4, [r3, r2]
{
 8002046:	4605      	mov	r5, r0
 8002048:	f102 0108 	add.w	r1, r2, #8
 800204c:	1898      	adds	r0, r3, r2
 800204e:	3210      	adds	r2, #16
 8002050:	4419      	add	r1, r3
 8002052:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8002054:	4a11      	ldr	r2, [pc, #68]	; (800209c <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8002056:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8002058:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 800205c:	604c      	str	r4, [r1, #4]
 800205e:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 8002060:	f8c3 4006 	str.w	r4, [r3, #6]
 8002064:	f8c3 400a 	str.w	r4, [r3, #10]
 8002068:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800206c:	4621      	mov	r1, r4
 800206e:	f005 fe7d 	bl	8007d6c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <FOC_Clear+0x68>)
 8002074:	4621      	mov	r1, r4
 8002076:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800207a:	f005 fe77 	bl	8007d6c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <FOC_Clear+0x6c>)
 8002080:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002084:	f007 f8f2 	bl	800926c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002088:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <FOC_Clear+0x70>)
 800208a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800208e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002092:	f006 b8ad 	b.w	80081f0 <PWMC_SwitchOffPWM>
 8002096:	bf00      	nop
 8002098:	20000b0c 	.word	0x20000b0c
 800209c:	20000bd0 	.word	0x20000bd0
 80020a0:	20000bcc 	.word	0x20000bcc
 80020a4:	20000be4 	.word	0x20000be4
 80020a8:	20000bec 	.word	0x20000bec

080020ac <MCboot>:
{
 80020ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 80020b0:	4f70      	ldr	r7, [pc, #448]	; (8002274 <MCboot+0x1c8>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80020b2:	4d71      	ldr	r5, [pc, #452]	; (8002278 <MCboot+0x1cc>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 80020b4:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80022cc <MCboot+0x220>
  ENC_Init (&ENCODER_M1);
 80020b8:	4e70      	ldr	r6, [pc, #448]	; (800227c <MCboot+0x1d0>)
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80020ba:	f8df 9214 	ldr.w	r9, [pc, #532]	; 80022d0 <MCboot+0x224>
 80020be:	f8df a214 	ldr.w	sl, [pc, #532]	; 80022d4 <MCboot+0x228>
  pPIDPosCtrl[M1] = &PID_PosParamsM1;
 80020c2:	f8df b214 	ldr.w	fp, [pc, #532]	; 80022d8 <MCboot+0x22c>
{
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 80020ca:	4638      	mov	r0, r7
{
 80020cc:	e9cd 3103 	strd	r3, r1, [sp, #12]
  STM_Init(&STM[M1]);
 80020d0:	f007 f986 	bl	80093e0 <STM_Init>
  bMCBootCompleted = 0;
 80020d4:	4a6a      	ldr	r2, [pc, #424]	; (8002280 <MCboot+0x1d4>)
  pCLM[M1] = &CircleLimitationM1;
 80020d6:	4b6b      	ldr	r3, [pc, #428]	; (8002284 <MCboot+0x1d8>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80020d8:	486b      	ldr	r0, [pc, #428]	; (8002288 <MCboot+0x1dc>)
 80020da:	6028      	str	r0, [r5, #0]
  bMCBootCompleted = 0;
 80020dc:	2400      	movs	r4, #0
 80020de:	7014      	strb	r4, [r2, #0]
  pCLM[M1] = &CircleLimitationM1;
 80020e0:	4a6a      	ldr	r2, [pc, #424]	; (800228c <MCboot+0x1e0>)
 80020e2:	601a      	str	r2, [r3, #0]
  R3_2_Init(&PWM_Handle_M1);
 80020e4:	f006 fc14 	bl	8008910 <R3_2_Init>
  startTimers();
 80020e8:	f005 feea 	bl	8007ec0 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 80020ec:	4640      	mov	r0, r8
 80020ee:	f005 fe29 	bl	8007d44 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80020f2:	4a67      	ldr	r2, [pc, #412]	; (8002290 <MCboot+0x1e4>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 80020f4:	4d67      	ldr	r5, [pc, #412]	; (8002294 <MCboot+0x1e8>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80020f6:	f8c2 8000 	str.w	r8, [r2]
  pSTC[M1] = &SpeednTorqCtrlM1;
 80020fa:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 80022dc <MCboot+0x230>
 80020fe:	f8c5 8000 	str.w	r8, [r5]
  ENC_Init (&ENCODER_M1);
 8002102:	4630      	mov	r0, r6
 8002104:	f005 fc16 	bl	8007934 <ENC_Init>
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8002108:	6829      	ldr	r1, [r5, #0]
 800210a:	464a      	mov	r2, r9
 800210c:	4633      	mov	r3, r6
 800210e:	4650      	mov	r0, sl
 8002110:	f005 fbc2 	bl	8007898 <EAC_Init>
  pEAC[M1] = &EncAlignCtrlM1;
 8002114:	4b60      	ldr	r3, [pc, #384]	; (8002298 <MCboot+0x1ec>)
  pPIDPosCtrl[M1] = &PID_PosParamsM1;
 8002116:	4861      	ldr	r0, [pc, #388]	; (800229c <MCboot+0x1f0>)
 8002118:	f8cb 0000 	str.w	r0, [fp]
  pEAC[M1] = &EncAlignCtrlM1;
 800211c:	f8c3 a000 	str.w	sl, [r3]
  PID_HandleInit(pPIDPosCtrl[M1]);
 8002120:	f005 fe10 	bl	8007d44 <PID_HandleInit>
  TC_Init(pPosCtrl[M1], pPIDPosCtrl[M1], &SpeednTorqCtrlM1, &ENCODER_M1);
 8002124:	4642      	mov	r2, r8
  pPosCtrl[M1] = &pPosCtrlM1;
 8002126:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80022e0 <MCboot+0x234>
 800212a:	485d      	ldr	r0, [pc, #372]	; (80022a0 <MCboot+0x1f4>)
  TC_Init(pPosCtrl[M1], pPIDPosCtrl[M1], &SpeednTorqCtrlM1, &ENCODER_M1);
 800212c:	f8db 1000 	ldr.w	r1, [fp]
  pPosCtrl[M1] = &pPosCtrlM1;
 8002130:	f8c8 0000 	str.w	r0, [r8]
  TC_Init(pPosCtrl[M1], pPIDPosCtrl[M1], &SpeednTorqCtrlM1, &ENCODER_M1);
 8002134:	4633      	mov	r3, r6
 8002136:	f007 f9fd 	bl	8009534 <TC_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 800213a:	4855      	ldr	r0, [pc, #340]	; (8002290 <MCboot+0x1e4>)
  PID_HandleInit(&PIDIqHandle_M1);
 800213c:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 80022e4 <MCboot+0x238>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 8002140:	6801      	ldr	r1, [r0, #0]
 8002142:	6828      	ldr	r0, [r5, #0]
  PID_HandleInit(&PIDIdHandle_M1);
 8002144:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 80022e8 <MCboot+0x23c>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 8002148:	4632      	mov	r2, r6
 800214a:	f007 f875 	bl	8009238 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 800214e:	4648      	mov	r0, r9
 8002150:	f007 fdb8 	bl	8009cc4 <VSS_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8002154:	4658      	mov	r0, fp
 8002156:	f005 fdf5 	bl	8007d44 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 800215a:	4650      	mov	r0, sl
 800215c:	f005 fdf2 	bl	8007d44 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8002160:	4950      	ldr	r1, [pc, #320]	; (80022a4 <MCboot+0x1f8>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8002162:	4b51      	ldr	r3, [pc, #324]	; (80022a8 <MCboot+0x1fc>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8002164:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80022ec <MCboot+0x240>
 8002168:	4850      	ldr	r0, [pc, #320]	; (80022ac <MCboot+0x200>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 800216a:	f8c1 b000 	str.w	fp, [r1]
  pPIDId[M1] = &PIDIdHandle_M1;
 800216e:	f8c3 a000 	str.w	sl, [r3]
  NTC_Init(&TempSensorParamsM1);
 8002172:	f8df b17c 	ldr.w	fp, [pc, #380]	; 80022f0 <MCboot+0x244>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8002176:	f8c9 0000 	str.w	r0, [r9]
  RVBS_Init(pBusSensorM1);
 800217a:	f006 ff8d 	bl	8009098 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 800217e:	494c      	ldr	r1, [pc, #304]	; (80022b0 <MCboot+0x204>)
 8002180:	4b4c      	ldr	r3, [pc, #304]	; (80022b4 <MCboot+0x208>)
 8002182:	600b      	str	r3, [r1, #0]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002184:	f8df a16c 	ldr.w	sl, [pc, #364]	; 80022f4 <MCboot+0x248>
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8002188:	f8d9 2000 	ldr.w	r2, [r9]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 800218c:	f8c3 a10c 	str.w	sl, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8002190:	4658      	mov	r0, fp
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8002192:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  NTC_Init(&TempSensorParamsM1);
 8002196:	f005 fd91 	bl	8007cbc <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 800219a:	4a47      	ldr	r2, [pc, #284]	; (80022b8 <MCboot+0x20c>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 800219c:	4b47      	ldr	r3, [pc, #284]	; (80022bc <MCboot+0x210>)
 800219e:	4848      	ldr	r0, [pc, #288]	; (80022c0 <MCboot+0x214>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80021a0:	f8c2 b000 	str.w	fp, [r2]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 80021a4:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 80021a6:	f006 ffc5 	bl	8009134 <REMNG_Init>
  FOCVars[M1].bDriveInput = EXTERNAL;
 80021aa:	f04f 0b01 	mov.w	fp, #1
  FOC_Clear(M1);
 80021ae:	4620      	mov	r0, r4
 80021b0:	f7ff ff42 	bl	8002038 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 80021b4:	f88a b024 	strb.w	fp, [sl, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80021b8:	6828      	ldr	r0, [r5, #0]
 80021ba:	f007 f8fb 	bl	80093b4 <STC_GetDefaultIqdref>
 80021be:	f8ca 0010 	str.w	r0, [sl, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80021c2:	6828      	ldr	r0, [r5, #0]
 80021c4:	f007 f8f6 	bl	80093b4 <STC_GetDefaultIqdref>
 80021c8:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80021cc:	f8aa 0014 	strh.w	r0, [sl, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 80021d0:	4653      	mov	r3, sl
  oMCInterface[M1] = & Mci[M1];
 80021d2:	f8df a124 	ldr.w	sl, [pc, #292]	; 80022f8 <MCboot+0x24c>
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 80021d6:	f8d8 2000 	ldr.w	r2, [r8]
  oMCInterface[M1] = & Mci[M1];
 80021da:	483a      	ldr	r0, [pc, #232]	; (80022c4 <MCboot+0x218>)
 80021dc:	f8ca 0000 	str.w	r0, [sl]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 80021e0:	9200      	str	r2, [sp, #0]
 80021e2:	682a      	ldr	r2, [r5, #0]
 80021e4:	4639      	mov	r1, r7
 80021e6:	f7ff fd29 	bl	8001c3c <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 80021ea:	f8da 3000 	ldr.w	r3, [sl]
 80021ee:	6828      	ldr	r0, [r5, #0]
 80021f0:	9305      	str	r3, [sp, #20]
 80021f2:	f007 f8d5 	bl	80093a0 <STC_GetMecSpeedRefUnitDefault>
 80021f6:	9b05      	ldr	r3, [sp, #20]
 80021f8:	4601      	mov	r1, r0
 80021fa:	4622      	mov	r2, r4
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fd29 	bl	8001c54 <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 8002202:	9903      	ldr	r1, [sp, #12]
 8002204:	f8da 3000 	ldr.w	r3, [sl]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8002208:	4821      	ldr	r0, [pc, #132]	; (8002290 <MCboot+0x1e4>)
  pMCIList[M1] = oMCInterface[M1];
 800220a:	600b      	str	r3, [r1, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 800220c:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <MCboot+0x1cc>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 800220e:	f8d0 e000 	ldr.w	lr, [r0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8002212:	4824      	ldr	r0, [pc, #144]	; (80022a4 <MCboot+0x1f8>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8002214:	6819      	ldr	r1, [r3, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8002216:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8002218:	4b25      	ldr	r3, [pc, #148]	; (80022b0 <MCboot+0x204>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 800221a:	4d27      	ldr	r5, [pc, #156]	; (80022b8 <MCboot+0x20c>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 800221c:	f8d0 c000 	ldr.w	ip, [r0]
  MCT[M1].pPIDId = pPIDId[M1];
 8002220:	4821      	ldr	r0, [pc, #132]	; (80022a8 <MCboot+0x1fc>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8002222:	f8d3 a000 	ldr.w	sl, [r3]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8002226:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <MCboot+0x21c>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800222a:	f8d9 9000 	ldr.w	r9, [r9]
  MCT[M1].pPIDId = pPIDId[M1];
 800222e:	6800      	ldr	r0, [r0, #0]
  MCT[M1].pPosCtrl = pPosCtrl[M1];
 8002230:	f8d8 8000 	ldr.w	r8, [r8]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8002234:	6119      	str	r1, [r3, #16]
  MCT[M1].pStateMachine = &STM[M1];
 8002236:	e9c3 2709 	strd	r2, r7, [r3, #36]	; 0x24
  MCT[M1].pPIDIq = pPIDIq[M1];
 800223a:	e9c3 ec00 	strd	lr, ip, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800223e:	e9c3 590b 	strd	r5, r9, [r3, #44]	; 0x2c
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8002242:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8002246:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 800224a:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  bMCBootCompleted = 1;
 800224e:	4a0c      	ldr	r2, [pc, #48]	; (8002280 <MCboot+0x1d4>)
  MCT[M1].pPIDId = pPIDId[M1];
 8002250:	6098      	str	r0, [r3, #8]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &ENCODER_M1;
 8002252:	619e      	str	r6, [r3, #24]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8002254:	f8c3 a03c 	str.w	sl, [r3, #60]	; 0x3c
  MCT[M1].pPosCtrl = pPosCtrl[M1];
 8002258:	f8c3 8048 	str.w	r8, [r3, #72]	; 0x48
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 800225c:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 800225e:	615c      	str	r4, [r3, #20]
  MCT[M1].pOTT = MC_NULL;
 8002260:	e9c3 4413 	strd	r4, r4, [r3, #76]	; 0x4c
  pMCTList[M1] = &MCT[M1];
 8002264:	9904      	ldr	r1, [sp, #16]
 8002266:	600b      	str	r3, [r1, #0]
  bMCBootCompleted = 1;
 8002268:	f882 b000 	strb.w	fp, [r2]
}
 800226c:	b009      	add	sp, #36	; 0x24
 800226e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002272:	bf00      	nop
 8002274:	20000ba8 	.word	0x20000ba8
 8002278:	20000bec 	.word	0x20000bec
 800227c:	200000f0 	.word	0x200000f0
 8002280:	20000bae 	.word	0x20000bae
 8002284:	20000bc0 	.word	0x20000bc0
 8002288:	2000034c 	.word	0x2000034c
 800228c:	20000000 	.word	0x20000000
 8002290:	20000bd8 	.word	0x20000bd8
 8002294:	20000be4 	.word	0x20000be4
 8002298:	20000bc4 	.word	0x20000bc4
 800229c:	2000020c 	.word	0x2000020c
 80022a0:	200004cc 	.word	0x200004cc
 80022a4:	20000bd0 	.word	0x20000bd0
 80022a8:	20000bcc 	.word	0x20000bcc
 80022ac:	200003e0 	.word	0x200003e0
 80022b0:	20000bc8 	.word	0x20000bc8
 80022b4:	20000238 	.word	0x20000238
 80022b8:	20000be8 	.word	0x20000be8
 80022bc:	20000be0 	.word	0x20000be0
 80022c0:	200003c8 	.word	0x200003c8
 80022c4:	20000b88 	.word	0x20000b88
 80022c8:	20000b34 	.word	0x20000b34
 80022cc:	200001e0 	.word	0x200001e0
 80022d0:	20000494 	.word	0x20000494
 80022d4:	2000016c 	.word	0x2000016c
 80022d8:	20000bd4 	.word	0x20000bd4
 80022dc:	20000408 	.word	0x20000408
 80022e0:	20000bdc 	.word	0x20000bdc
 80022e4:	200001b4 	.word	0x200001b4
 80022e8:	20000188 	.word	0x20000188
 80022ec:	20000bbc 	.word	0x20000bbc
 80022f0:	2000043c 	.word	0x2000043c
 80022f4:	20000b0c 	.word	0x20000b0c
 80022f8:	20000bb8 	.word	0x20000bb8

080022fc <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop

08002300 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8002300:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8002302:	4c08      	ldr	r4, [pc, #32]	; (8002324 <FOC_CalcCurrRef+0x24>)
 8002304:	2326      	movs	r3, #38	; 0x26
 8002306:	fb03 4400 	mla	r4, r3, r0, r4
 800230a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800230e:	b103      	cbz	r3, 8002312 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8002310:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8002312:	4b05      	ldr	r3, [pc, #20]	; (8002328 <FOC_CalcCurrRef+0x28>)
 8002314:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002318:	f007 f810 	bl	800933c <STC_CalcTorqueReference>
 800231c:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800231e:	8220      	strh	r0, [r4, #16]
}
 8002320:	bd10      	pop	{r4, pc}
 8002322:	bf00      	nop
 8002324:	20000b0c 	.word	0x20000b0c
 8002328:	20000be4 	.word	0x20000be4

0800232c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 800232c:	4b01      	ldr	r3, [pc, #4]	; (8002334 <TSK_SetChargeBootCapDelayM1+0x8>)
 800232e:	8018      	strh	r0, [r3, #0]
}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	20000bb0 	.word	0x20000bb0

08002338 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800233a:	8818      	ldrh	r0, [r3, #0]
 800233c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800233e:	fab0 f080 	clz	r0, r0
 8002342:	0940      	lsrs	r0, r0, #5
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000bb0 	.word	0x20000bb0

0800234c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 800234c:	4b01      	ldr	r3, [pc, #4]	; (8002354 <TSK_SetStopPermanencyTimeM1+0x8>)
 800234e:	8018      	strh	r0, [r3, #0]
}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000bb4 	.word	0x20000bb4

08002358 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800235a:	8818      	ldrh	r0, [r3, #0]
 800235c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800235e:	fab0 f080 	clz	r0, r0
 8002362:	0940      	lsrs	r0, r0, #5
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000bb4 	.word	0x20000bb4

0800236c <TSK_MediumFrequencyTaskM1>:
{
 800236c:	b510      	push	{r4, lr}
  PQD_CalcElMotorPower( pMPM[M1] );
 800236e:	4c92      	ldr	r4, [pc, #584]	; (80025b8 <TSK_MediumFrequencyTaskM1+0x24c>)
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8002370:	4892      	ldr	r0, [pc, #584]	; (80025bc <TSK_MediumFrequencyTaskM1+0x250>)
{
 8002372:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8002374:	2300      	movs	r3, #0
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8002376:	f10d 0106 	add.w	r1, sp, #6
  int16_t wAux = 0;
 800237a:	f8ad 3006 	strh.w	r3, [sp, #6]
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 800237e:	f005 fb39 	bl	80079f4 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8002382:	6820      	ldr	r0, [r4, #0]
 8002384:	f005 fd66 	bl	8007e54 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8002388:	488d      	ldr	r0, [pc, #564]	; (80025c0 <TSK_MediumFrequencyTaskM1+0x254>)
 800238a:	f007 f8bf 	bl	800950c <STM_GetState>
  switch ( StateM1 )
 800238e:	2812      	cmp	r0, #18
 8002390:	d818      	bhi.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
 8002392:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002396:	002a      	.short	0x002a
 8002398:	00440038 	.word	0x00440038
 800239c:	00620053 	.word	0x00620053
 80023a0:	007e006b 	.word	0x007e006b
 80023a4:	009d008a 	.word	0x009d008a
 80023a8:	00170013 	.word	0x00170013
 80023ac:	00170017 	.word	0x00170017
 80023b0:	00b600a7 	.word	0x00b600a7
 80023b4:	00d700c3 	.word	0x00d700c3
 80023b8:	001900e6 	.word	0x001900e6
    STM_NextState( &STM[M1], IDLE );
 80023bc:	4880      	ldr	r0, [pc, #512]	; (80025c0 <TSK_MediumFrequencyTaskM1+0x254>)
 80023be:	2100      	movs	r1, #0
 80023c0:	f007 f830 	bl	8009424 <STM_NextState>
}
 80023c4:	b002      	add	sp, #8
 80023c6:	bd10      	pop	{r4, pc}
    ENC_Clear( &ENCODER_M1 );
 80023c8:	487c      	ldr	r0, [pc, #496]	; (80025bc <TSK_MediumFrequencyTaskM1+0x250>)
 80023ca:	f005 faed 	bl	80079a8 <ENC_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 80023ce:	487c      	ldr	r0, [pc, #496]	; (80025c0 <TSK_MediumFrequencyTaskM1+0x254>)
 80023d0:	2104      	movs	r1, #4
 80023d2:	f007 f827 	bl	8009424 <STM_NextState>
 80023d6:	2800      	cmp	r0, #0
 80023d8:	d0f4      	beq.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
      FOC_Clear( M1 );
 80023da:	2000      	movs	r0, #0
 80023dc:	f7ff fe2c 	bl	8002038 <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 80023e0:	4b78      	ldr	r3, [pc, #480]	; (80025c4 <TSK_MediumFrequencyTaskM1+0x258>)
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	f006 f916 	bl	8008614 <R3_2_SwitchOnPWM>
 80023e8:	e7ec      	b.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( EAC_GetRestartState( &EncAlignCtrlM1 ) )
 80023ea:	4877      	ldr	r0, [pc, #476]	; (80025c8 <TSK_MediumFrequencyTaskM1+0x25c>)
 80023ec:	f005 faa0 	bl	8007930 <EAC_GetRestartState>
 80023f0:	2800      	cmp	r0, #0
 80023f2:	d0e7      	beq.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
      EAC_SetRestartState( &EncAlignCtrlM1,false );
 80023f4:	4874      	ldr	r0, [pc, #464]	; (80025c8 <TSK_MediumFrequencyTaskM1+0x25c>)
 80023f6:	2100      	movs	r1, #0
 80023f8:	f005 fa98 	bl	800792c <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_START );
 80023fc:	2103      	movs	r1, #3
 80023fe:	4870      	ldr	r0, [pc, #448]	; (80025c0 <TSK_MediumFrequencyTaskM1+0x254>)
 8002400:	f007 f810 	bl	8009424 <STM_NextState>
 8002404:	e7de      	b.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8002406:	4b6f      	ldr	r3, [pc, #444]	; (80025c4 <TSK_MediumFrequencyTaskM1+0x258>)
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	f006 f8d9 	bl	80085c0 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 800240e:	2014      	movs	r0, #20
 8002410:	f7ff ff8c 	bl	800232c <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], ALIGN_CHARGE_BOOT_CAP );
 8002414:	210d      	movs	r1, #13
 8002416:	486a      	ldr	r0, [pc, #424]	; (80025c0 <TSK_MediumFrequencyTaskM1+0x254>)
 8002418:	f007 f804 	bl	8009424 <STM_NextState>
    break;
 800241c:	e7d2      	b.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( !EAC_Exec( &EncAlignCtrlM1 ) )
 800241e:	486a      	ldr	r0, [pc, #424]	; (80025c8 <TSK_MediumFrequencyTaskM1+0x25c>)
 8002420:	f005 fa6a 	bl	80078f8 <EAC_Exec>
 8002424:	4604      	mov	r4, r0
 8002426:	2800      	cmp	r0, #0
 8002428:	f040 80b4 	bne.w	8002594 <TSK_MediumFrequencyTaskM1+0x228>
      IqdRef.d = STC_CalcTorqueReference( pSTC[M1] );
 800242c:	4b67      	ldr	r3, [pc, #412]	; (80025cc <TSK_MediumFrequencyTaskM1+0x260>)
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	f006 ff84 	bl	800933c <STC_CalcTorqueReference>
      FOCVars[M1].Iqdref = IqdRef;
 8002434:	4b66      	ldr	r3, [pc, #408]	; (80025d0 <TSK_MediumFrequencyTaskM1+0x264>)
 8002436:	821c      	strh	r4, [r3, #16]
 8002438:	8258      	strh	r0, [r3, #18]
 800243a:	e7c3      	b.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( EAC_IsAligned( &EncAlignCtrlM1 ) == false )
 800243c:	4862      	ldr	r0, [pc, #392]	; (80025c8 <TSK_MediumFrequencyTaskM1+0x25c>)
 800243e:	f005 fa73 	bl	8007928 <EAC_IsAligned>
 8002442:	2800      	cmp	r0, #0
 8002444:	f040 809a 	bne.w	800257c <TSK_MediumFrequencyTaskM1+0x210>
      EAC_SetRestartState( &EncAlignCtrlM1, true );
 8002448:	485f      	ldr	r0, [pc, #380]	; (80025c8 <TSK_MediumFrequencyTaskM1+0x25c>)
 800244a:	2101      	movs	r1, #1
 800244c:	f005 fa6e 	bl	800792c <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_ALIGNMENT );
 8002450:	2101      	movs	r1, #1
 8002452:	485b      	ldr	r0, [pc, #364]	; (80025c0 <TSK_MediumFrequencyTaskM1+0x254>)
 8002454:	f006 ffe6 	bl	8009424 <STM_NextState>
      break;
 8002458:	e7b4      	b.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
        TC_EncAlignmentCommand(pPosCtrl[M1]);
 800245a:	4b5e      	ldr	r3, [pc, #376]	; (80025d4 <TSK_MediumFrequencyTaskM1+0x268>)
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	f007 fa1f 	bl	80098a0 <TC_EncAlignmentCommand>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8002462:	2105      	movs	r1, #5
 8002464:	4856      	ldr	r0, [pc, #344]	; (80025c0 <TSK_MediumFrequencyTaskM1+0x254>)
 8002466:	f006 ffdd 	bl	8009424 <STM_NextState>
    break;
 800246a:	e7ab      	b.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
	  FOC_InitAdditionalMethods(M1);
 800246c:	2000      	movs	r0, #0
 800246e:	f7ff ff45 	bl	80022fc <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8002472:	2000      	movs	r0, #0
 8002474:	f7ff ff44 	bl	8002300 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8002478:	2106      	movs	r1, #6
 800247a:	4851      	ldr	r0, [pc, #324]	; (80025c0 <TSK_MediumFrequencyTaskM1+0x254>)
 800247c:	f006 ffd2 	bl	8009424 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8002480:	4b52      	ldr	r3, [pc, #328]	; (80025cc <TSK_MediumFrequencyTaskM1+0x260>)
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	f006 ffa4 	bl	80093d0 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8002488:	4b53      	ldr	r3, [pc, #332]	; (80025d8 <TSK_MediumFrequencyTaskM1+0x26c>)
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	f7ff fc56 	bl	8001d3c <MCI_ExecBufferedCommands>
    break;
 8002490:	e798      	b.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
    TC_PositionRegulation(pPosCtrl[M1]);
 8002492:	4b50      	ldr	r3, [pc, #320]	; (80025d4 <TSK_MediumFrequencyTaskM1+0x268>)
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	f007 f9c1 	bl	800981c <TC_PositionRegulation>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 800249a:	4b4f      	ldr	r3, [pc, #316]	; (80025d8 <TSK_MediumFrequencyTaskM1+0x26c>)
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	f7ff fc4d 	bl	8001d3c <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 80024a2:	2000      	movs	r0, #0
 80024a4:	f7ff ff2c 	bl	8002300 <FOC_CalcCurrRef>
    break;
 80024a8:	e78c      	b.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 80024aa:	4b46      	ldr	r3, [pc, #280]	; (80025c4 <TSK_MediumFrequencyTaskM1+0x258>)
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	f006 f8fd 	bl	80086ac <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 80024b2:	2000      	movs	r0, #0
 80024b4:	f7ff fdc0 	bl	8002038 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 80024b8:	6820      	ldr	r0, [r4, #0]
 80024ba:	f005 fbbd 	bl	8007c38 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 80024be:	f44f 7048 	mov.w	r0, #800	; 0x320
 80024c2:	f7ff ff43 	bl	800234c <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 80024c6:	2108      	movs	r1, #8
 80024c8:	483d      	ldr	r0, [pc, #244]	; (80025c0 <TSK_MediumFrequencyTaskM1+0x254>)
 80024ca:	f006 ffab 	bl	8009424 <STM_NextState>
    break;
 80024ce:	e779      	b.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 80024d0:	f7ff ff42 	bl	8002358 <TSK_StopPermanencyTimeHasElapsedM1>
 80024d4:	2800      	cmp	r0, #0
 80024d6:	f43f af75 	beq.w	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], STOP_IDLE );
 80024da:	2109      	movs	r1, #9
 80024dc:	4838      	ldr	r0, [pc, #224]	; (80025c0 <TSK_MediumFrequencyTaskM1+0x254>)
 80024de:	f006 ffa1 	bl	8009424 <STM_NextState>
 80024e2:	e76f      	b.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80024e4:	f7ff ff28 	bl	8002338 <TSK_ChargeBootCapDelayHasElapsedM1>
 80024e8:	2800      	cmp	r0, #0
 80024ea:	f43f af6b 	beq.w	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80024ee:	4b35      	ldr	r3, [pc, #212]	; (80025c4 <TSK_MediumFrequencyTaskM1+0x258>)
 80024f0:	2100      	movs	r1, #0
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	f005 fe7e 	bl	80081f4 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],ALIGN_OFFSET_CALIB);
 80024f8:	210e      	movs	r1, #14
 80024fa:	4831      	ldr	r0, [pc, #196]	; (80025c0 <TSK_MediumFrequencyTaskM1+0x254>)
 80024fc:	f006 ff92 	bl	8009424 <STM_NextState>
 8002500:	e760      	b.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8002502:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <TSK_MediumFrequencyTaskM1+0x258>)
 8002504:	2101      	movs	r1, #1
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	f005 fe74 	bl	80081f4 <PWMC_CurrentReadingCalibr>
 800250c:	2800      	cmp	r0, #0
 800250e:	f43f af59 	beq.w	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], ALIGN_CLEAR );
 8002512:	210f      	movs	r1, #15
 8002514:	482a      	ldr	r0, [pc, #168]	; (80025c0 <TSK_MediumFrequencyTaskM1+0x254>)
 8002516:	f006 ff85 	bl	8009424 <STM_NextState>
 800251a:	e753      	b.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800251c:	4a2b      	ldr	r2, [pc, #172]	; (80025cc <TSK_MediumFrequencyTaskM1+0x260>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 800251e:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <TSK_MediumFrequencyTaskM1+0x264>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002520:	6810      	ldr	r0, [r2, #0]
 8002522:	492e      	ldr	r1, [pc, #184]	; (80025dc <TSK_MediumFrequencyTaskM1+0x270>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800252a:	f006 fe9b 	bl	8009264 <STC_SetSpeedSensor>
    EAC_StartAlignment( &EncAlignCtrlM1 );
 800252e:	4826      	ldr	r0, [pc, #152]	; (80025c8 <TSK_MediumFrequencyTaskM1+0x25c>)
 8002530:	f005 f9ba 	bl	80078a8 <EAC_StartAlignment>
    if ( STM_NextState( &STM[M1], ALIGNMENT ) == true )
 8002534:	4822      	ldr	r0, [pc, #136]	; (80025c0 <TSK_MediumFrequencyTaskM1+0x254>)
 8002536:	2102      	movs	r1, #2
 8002538:	f006 ff74 	bl	8009424 <STM_NextState>
 800253c:	2800      	cmp	r0, #0
 800253e:	f43f af41 	beq.w	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
 8002542:	e74a      	b.n	80023da <TSK_MediumFrequencyTaskM1+0x6e>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8002544:	f7ff fef8 	bl	8002338 <TSK_ChargeBootCapDelayHasElapsedM1>
 8002548:	2800      	cmp	r0, #0
 800254a:	f43f af3b 	beq.w	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 800254e:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <TSK_MediumFrequencyTaskM1+0x258>)
 8002550:	2100      	movs	r1, #0
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	f005 fe4e 	bl	80081f4 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8002558:	2111      	movs	r1, #17
 800255a:	4819      	ldr	r0, [pc, #100]	; (80025c0 <TSK_MediumFrequencyTaskM1+0x254>)
 800255c:	f006 ff62 	bl	8009424 <STM_NextState>
 8002560:	e730      	b.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <TSK_MediumFrequencyTaskM1+0x258>)
 8002564:	2101      	movs	r1, #1
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	f005 fe44 	bl	80081f4 <PWMC_CurrentReadingCalibr>
 800256c:	2800      	cmp	r0, #0
 800256e:	f43f af29 	beq.w	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], CLEAR );
 8002572:	2112      	movs	r1, #18
 8002574:	4812      	ldr	r0, [pc, #72]	; (80025c0 <TSK_MediumFrequencyTaskM1+0x254>)
 8002576:	f006 ff55 	bl	8009424 <STM_NextState>
 800257a:	e723      	b.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <TSK_MediumFrequencyTaskM1+0x258>)
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	f006 f81e 	bl	80085c0 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8002584:	2014      	movs	r0, #20
 8002586:	f7ff fed1 	bl	800232c <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 800258a:	2110      	movs	r1, #16
 800258c:	480c      	ldr	r0, [pc, #48]	; (80025c0 <TSK_MediumFrequencyTaskM1+0x254>)
 800258e:	f006 ff49 	bl	8009424 <STM_NextState>
    break;
 8002592:	e717      	b.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <TSK_MediumFrequencyTaskM1+0x258>)
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 8002596:	4c0d      	ldr	r4, [pc, #52]	; (80025cc <TSK_MediumFrequencyTaskM1+0x260>)
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	f006 f887 	bl	80086ac <R3_2_SwitchOffPWM>
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 800259e:	6820      	ldr	r0, [r4, #0]
 80025a0:	2101      	movs	r1, #1
 80025a2:	f006 fe7b 	bl	800929c <STC_SetControlMode>
      STC_SetSpeedSensor( pSTC[M1], &ENCODER_M1._Super );
 80025a6:	6820      	ldr	r0, [r4, #0]
 80025a8:	4904      	ldr	r1, [pc, #16]	; (80025bc <TSK_MediumFrequencyTaskM1+0x250>)
 80025aa:	f006 fe5b 	bl	8009264 <STC_SetSpeedSensor>
      STM_NextState( &STM[M1], ANY_STOP );
 80025ae:	2107      	movs	r1, #7
 80025b0:	4803      	ldr	r0, [pc, #12]	; (80025c0 <TSK_MediumFrequencyTaskM1+0x254>)
 80025b2:	f006 ff37 	bl	8009424 <STM_NextState>
 80025b6:	e705      	b.n	80023c4 <TSK_MediumFrequencyTaskM1+0x58>
 80025b8:	20000bc8 	.word	0x20000bc8
 80025bc:	200000f0 	.word	0x200000f0
 80025c0:	20000ba8 	.word	0x20000ba8
 80025c4:	20000bec 	.word	0x20000bec
 80025c8:	2000016c 	.word	0x2000016c
 80025cc:	20000be4 	.word	0x20000be4
 80025d0:	20000b0c 	.word	0x20000b0c
 80025d4:	20000bdc 	.word	0x20000bdc
 80025d8:	20000bb8 	.word	0x20000bb8
 80025dc:	20000494 	.word	0x20000494

080025e0 <MC_Scheduler>:
{
 80025e0:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <MC_Scheduler+0x48>)
 80025e4:	781c      	ldrb	r4, [r3, #0]
 80025e6:	2c01      	cmp	r4, #1
 80025e8:	d000      	beq.n	80025ec <MC_Scheduler+0xc>
}
 80025ea:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 80025ec:	4d0f      	ldr	r5, [pc, #60]	; (800262c <MC_Scheduler+0x4c>)
 80025ee:	882b      	ldrh	r3, [r5, #0]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	b1ab      	cbz	r3, 8002620 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 80025f4:	882b      	ldrh	r3, [r5, #0]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 80025fc:	4a0c      	ldr	r2, [pc, #48]	; (8002630 <MC_Scheduler+0x50>)
 80025fe:	8813      	ldrh	r3, [r2, #0]
 8002600:	b29b      	uxth	r3, r3
 8002602:	b11b      	cbz	r3, 800260c <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8002604:	8813      	ldrh	r3, [r2, #0]
 8002606:	3b01      	subs	r3, #1
 8002608:	b29b      	uxth	r3, r3
 800260a:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 800260c:	4a09      	ldr	r2, [pc, #36]	; (8002634 <MC_Scheduler+0x54>)
 800260e:	8813      	ldrh	r3, [r2, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0e9      	beq.n	80025ea <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8002616:	8813      	ldrh	r3, [r2, #0]
 8002618:	3b01      	subs	r3, #1
 800261a:	b29b      	uxth	r3, r3
 800261c:	8013      	strh	r3, [r2, #0]
}
 800261e:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8002620:	f7ff fea4 	bl	800236c <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8002624:	802c      	strh	r4, [r5, #0]
 8002626:	e7e9      	b.n	80025fc <MC_Scheduler+0x1c>
 8002628:	20000bae 	.word	0x20000bae
 800262c:	20000bb2 	.word	0x20000bb2
 8002630:	20000bb0 	.word	0x20000bb0
 8002634:	20000bb4 	.word	0x20000bb4

08002638 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 800263c:	4832      	ldr	r0, [pc, #200]	; (8002708 <TSK_HighFrequencyTask+0xd0>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800263e:	4f33      	ldr	r7, [pc, #204]	; (800270c <TSK_HighFrequencyTask+0xd4>)

  //Iqd = IqdUser;   //MCM_Park(Ialphabeta, hElAngle);
  Iqd = MCM_Park(Ialphabeta, hElAngle);   //;

  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002640:	4c33      	ldr	r4, [pc, #204]	; (8002710 <TSK_HighFrequencyTask+0xd8>)
{
 8002642:	b086      	sub	sp, #24
  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8002644:	f005 f9be 	bl	80079c4 <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002648:	4b32      	ldr	r3, [pc, #200]	; (8002714 <TSK_HighFrequencyTask+0xdc>)
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	f006 fe0c 	bl	8009268 <STC_GetSpeedSensor>
 8002650:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8002652:	f006 fda3 	bl	800919c <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002656:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8002658:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800265a:	6838      	ldr	r0, [r7, #0]
 800265c:	f005 fc90 	bl	8007f80 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8002660:	f000 ffb8 	bl	80035d4 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8002664:	f000 ff60 	bl	8003528 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8002668:	9803      	ldr	r0, [sp, #12]
 800266a:	f7ff fc3f 	bl	8001eec <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);   //;
 800266e:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8002670:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);   //;
 8002672:	f7ff fc7d 	bl	8001f70 <MCM_Park>
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002676:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);   //;
 800267a:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800267c:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 800267e:	1ac9      	subs	r1, r1, r3
 8002680:	4b25      	ldr	r3, [pc, #148]	; (8002718 <TSK_HighFrequencyTask+0xe0>)
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	f005 fb7e 	bl	8007d84 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002688:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800268c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 8002690:	1ac9      	subs	r1, r1, r3
 8002692:	4b22      	ldr	r3, [pc, #136]	; (800271c <TSK_HighFrequencyTask+0xe4>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002694:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	f005 fb74 	bl	8007d84 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800269c:	4b20      	ldr	r3, [pc, #128]	; (8002720 <TSK_HighFrequencyTask+0xe8>)
 800269e:	f8ad 8008 	strh.w	r8, [sp, #8]
 80026a2:	f8ad 000a 	strh.w	r0, [sp, #10]
 80026a6:	9902      	ldr	r1, [sp, #8]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	f005 f8b3 	bl	8007814 <Circle_Limitation>
 80026ae:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80026b0:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80026b2:	fa0f f883 	sxth.w	r8, r3
 80026b6:	141d      	asrs	r5, r3, #16
 80026b8:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80026ba:	f006 fd79 	bl	80091b0 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80026be:	4631      	mov	r1, r6
 80026c0:	9802      	ldr	r0, [sp, #8]
 80026c2:	f7ff fc99 	bl	8001ff8 <MCM_Rev_Park>
 80026c6:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80026c8:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80026ca:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80026cc:	f005 fc5a 	bl	8007f84 <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80026d0:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80026d2:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 80026d4:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80026d6:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 80026d8:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 80026da:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 80026dc:	f8a4 8016 	strh.w	r8, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 80026e0:	2901      	cmp	r1, #1
  FOCVars[M1].Vqd = Vqd;
 80026e2:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80026e4:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80026e6:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 80026e8:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 80026ec:	8426      	strh	r6, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 80026ee:	d003      	beq.n	80026f8 <TSK_HighFrequencyTask+0xc0>
}
 80026f0:	2000      	movs	r0, #0
 80026f2:	b006      	add	sp, #24
 80026f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 80026f8:	2200      	movs	r2, #0
 80026fa:	480a      	ldr	r0, [pc, #40]	; (8002724 <TSK_HighFrequencyTask+0xec>)
 80026fc:	f006 fe76 	bl	80093ec <STM_FaultProcessing>
}
 8002700:	2000      	movs	r0, #0
 8002702:	b006      	add	sp, #24
 8002704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002708:	200000f0 	.word	0x200000f0
 800270c:	20000bec 	.word	0x20000bec
 8002710:	20000b0c 	.word	0x20000b0c
 8002714:	20000be4 	.word	0x20000be4
 8002718:	20000bd0 	.word	0x20000bd0
 800271c:	20000bcc 	.word	0x20000bcc
 8002720:	20000bc0 	.word	0x20000bc0
 8002724:	20000ba8 	.word	0x20000ba8

08002728 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8002728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800272a:	4b23      	ldr	r3, [pc, #140]	; (80027b8 <TSK_SafetyTask_PWMOFF+0x90>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800272c:	4e23      	ldr	r6, [pc, #140]	; (80027bc <TSK_SafetyTask_PWMOFF+0x94>)
{
 800272e:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002730:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002734:	f005 fad4 	bl	8007ce0 <NTC_CalcAvTemp>
 8002738:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800273a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800273e:	f005 fd83 	bl	8008248 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002742:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002746:	4328      	orrs	r0, r5
 8002748:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 800274a:	b36c      	cbz	r4, 80027a8 <TSK_SafetyTask_PWMOFF+0x80>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 800274c:	4f1c      	ldr	r7, [pc, #112]	; (80027c0 <TSK_SafetyTask_PWMOFF+0x98>)
 800274e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8002752:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8002756:	43ea      	mvns	r2, r5
 8002758:	b292      	uxth	r2, r2
 800275a:	4629      	mov	r1, r5
 800275c:	4638      	mov	r0, r7
 800275e:	f006 fe45 	bl	80093ec <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8002762:	4638      	mov	r0, r7
 8002764:	f006 fed2 	bl	800950c <STM_GetState>
 8002768:	280a      	cmp	r0, #10
 800276a:	d002      	beq.n	8002772 <TSK_SafetyTask_PWMOFF+0x4a>
 800276c:	280b      	cmp	r0, #11
 800276e:	d015      	beq.n	800279c <TSK_SafetyTask_PWMOFF+0x74>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8002770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pEAC[bMotor] != MC_NULL)
 8002772:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <TSK_SafetyTask_PWMOFF+0x9c>)
 8002774:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002778:	b110      	cbz	r0, 8002780 <TSK_SafetyTask_PWMOFF+0x58>
      EAC_SetRestartState( pEAC[bMotor], false );
 800277a:	2100      	movs	r1, #0
 800277c:	f005 f8d6 	bl	800792c <EAC_SetRestartState>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002780:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002784:	f005 fd34 	bl	80081f0 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8002788:	4620      	mov	r0, r4
 800278a:	f7ff fc55 	bl	8002038 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <TSK_SafetyTask_PWMOFF+0xa0>)
 8002790:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8002794:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8002798:	f005 ba4e 	b.w	8007c38 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800279c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 80027a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80027a4:	f005 bd24 	b.w	80081f0 <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <TSK_SafetyTask_PWMOFF+0xa4>)
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	f006 fc8c 	bl	80090c8 <RVBS_CalcAvVbus>
 80027b0:	f000 000e 	and.w	r0, r0, #14
 80027b4:	4305      	orrs	r5, r0
 80027b6:	e7c9      	b.n	800274c <TSK_SafetyTask_PWMOFF+0x24>
 80027b8:	20000be8 	.word	0x20000be8
 80027bc:	20000bec 	.word	0x20000bec
 80027c0:	20000ba8 	.word	0x20000ba8
 80027c4:	20000bc4 	.word	0x20000bc4
 80027c8:	20000bc8 	.word	0x20000bc8
 80027cc:	20000bbc 	.word	0x20000bbc

080027d0 <TSK_SafetyTask>:
{
 80027d0:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <TSK_SafetyTask+0x1c>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d000      	beq.n	80027dc <TSK_SafetyTask+0xc>
}
 80027da:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80027dc:	2000      	movs	r0, #0
 80027de:	f7ff ffa3 	bl	8002728 <TSK_SafetyTask_PWMOFF>
}
 80027e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 80027e6:	f000 be6f 	b.w	80034c8 <RCM_ExecUserConv>
 80027ea:	bf00      	nop
 80027ec:	20000bae 	.word	0x20000bae

080027f0 <MC_RunMotorControlTasks>:
{
 80027f0:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <MC_RunMotorControlTasks+0x1c>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	b903      	cbnz	r3, 80027fa <MC_RunMotorControlTasks+0xa>
}
 80027f8:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 80027fa:	f7ff fef1 	bl	80025e0 <MC_Scheduler>
    TSK_SafetyTask();
 80027fe:	f7ff ffe7 	bl	80027d0 <TSK_SafetyTask>
}
 8002802:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 8002806:	f001 bae3 	b.w	8003dd0 <UI_Scheduler>
 800280a:	bf00      	nop
 800280c:	20000bae 	.word	0x20000bae

08002810 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002810:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <TSK_HardwareFaultTask+0x18>)
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	f005 ff49 	bl	80086ac <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800281a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 800281e:	4803      	ldr	r0, [pc, #12]	; (800282c <TSK_HardwareFaultTask+0x1c>)
 8002820:	2200      	movs	r2, #0
 8002822:	2180      	movs	r1, #128	; 0x80
 8002824:	f006 bde2 	b.w	80093ec <STM_FaultProcessing>
 8002828:	20000bec 	.word	0x20000bec
 800282c:	20000ba8 	.word	0x20000ba8

08002830 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8002830:	b5f0      	push	{r4, r5, r6, r7, lr}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002832:	4a4a      	ldr	r2, [pc, #296]	; (800295c <mc_lock_pins+0x12c>)
 8002834:	4b4a      	ldr	r3, [pc, #296]	; (8002960 <mc_lock_pins+0x130>)
 8002836:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002838:	2120      	movs	r1, #32
 800283a:	b091      	sub	sp, #68	; 0x44
 800283c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800283e:	61d3      	str	r3, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8002840:	69d3      	ldr	r3, [r2, #28]
 8002842:	930f      	str	r3, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002844:	2110      	movs	r1, #16
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002846:	4b47      	ldr	r3, [pc, #284]	; (8002964 <mc_lock_pins+0x134>)
  (void) temp;
 8002848:	980f      	ldr	r0, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800284a:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800284c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800284e:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002850:	69d2      	ldr	r2, [r2, #28]
 8002852:	920e      	str	r2, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002854:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002858:	4a43      	ldr	r2, [pc, #268]	; (8002968 <mc_lock_pins+0x138>)
  (void) temp;
 800285a:	980e      	ldr	r0, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800285c:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800285e:	2180      	movs	r1, #128	; 0x80
 8002860:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002862:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	920d      	str	r2, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002868:	f44f 34c0 	mov.w	r4, #98304	; 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 800286c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  (void) temp;
 8002870:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002872:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002874:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002876:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002878:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800287a:	4a3c      	ldr	r2, [pc, #240]	; (800296c <mc_lock_pins+0x13c>)
  temp = READ_REG(GPIOx->LCKR);
 800287c:	910c      	str	r1, [sp, #48]	; 0x30
  (void) temp;
 800287e:	980c      	ldr	r0, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002880:	493b      	ldr	r1, [pc, #236]	; (8002970 <mc_lock_pins+0x140>)
 8002882:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002884:	2008      	movs	r0, #8
 8002886:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002888:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800288a:	69d1      	ldr	r1, [r2, #28]
 800288c:	910b      	str	r1, [sp, #44]	; 0x2c
  (void) temp;
 800288e:	980b      	ldr	r0, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002890:	4938      	ldr	r1, [pc, #224]	; (8002974 <mc_lock_pins+0x144>)
 8002892:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002894:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002898:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800289a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800289c:	69d9      	ldr	r1, [r3, #28]
 800289e:	910a      	str	r1, [sp, #40]	; 0x28
  (void) temp;
 80028a0:	980a      	ldr	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028a2:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 80028a6:	f44f 7000 	mov.w	r0, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028aa:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80028ac:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028ae:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80028b0:	69d9      	ldr	r1, [r3, #28]
 80028b2:	9109      	str	r1, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 80028b4:	f44f 6500 	mov.w	r5, #2048	; 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028b8:	f44f 3184 	mov.w	r1, #67584	; 0x10800
  (void) temp;
 80028bc:	9809      	ldr	r0, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028be:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80028c0:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028c2:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80028c4:	69d8      	ldr	r0, [r3, #28]
 80028c6:	9008      	str	r0, [sp, #32]
  (void) temp;
 80028c8:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80028ca:	f44f 6680 	mov.w	r6, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028ce:	f44f 3082 	mov.w	r0, #66560	; 0x10400
 80028d2:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80028d4:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028d6:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80028d8:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80028dc:	f8cd c01c 	str.w	ip, [sp, #28]
  (void) temp;
 80028e0:	f8dd c01c 	ldr.w	ip, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80028e4:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028e8:	f44f 3ca0 	mov.w	ip, #81920	; 0x14000
 80028ec:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80028f0:	f8c2 e01c 	str.w	lr, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028f4:	f8c2 c01c 	str.w	ip, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80028f8:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80028fc:	f8cd c018 	str.w	ip, [sp, #24]
  (void) temp;
 8002900:	f8dd c018 	ldr.w	ip, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002904:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002908:	f44f 3c90 	mov.w	ip, #73728	; 0x12000
 800290c:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002910:	f8c2 e01c 	str.w	lr, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002914:	f8c2 c01c 	str.w	ip, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002918:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800291c:	f8cd c014 	str.w	ip, [sp, #20]
  (void) temp;
 8002920:	f8dd c014 	ldr.w	ip, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002924:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002926:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002928:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800292a:	69d4      	ldr	r4, [r2, #28]
 800292c:	9404      	str	r4, [sp, #16]
  (void) temp;
 800292e:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002930:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002932:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002934:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002936:	69d0      	ldr	r0, [r2, #28]
 8002938:	9003      	str	r0, [sp, #12]
  (void) temp;
 800293a:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800293c:	480e      	ldr	r0, [pc, #56]	; (8002978 <mc_lock_pins+0x148>)
 800293e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002940:	2402      	movs	r4, #2
 8002942:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002944:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	9302      	str	r3, [sp, #8]
  (void) temp;
 800294a:	9b02      	ldr	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800294c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800294e:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002950:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002952:	69d3      	ldr	r3, [r2, #28]
 8002954:	9301      	str	r3, [sp, #4]
  (void) temp;
 8002956:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_EN_U_GPIO_Port, M1_PWM_EN_U_Pin);
LL_GPIO_LockPin(M1_PWM_EN_W_GPIO_Port, M1_PWM_EN_W_Pin);
LL_GPIO_LockPin(M1_ENCODER_Z_GPIO_Port, M1_ENCODER_Z_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
}
 8002958:	b011      	add	sp, #68	; 0x44
 800295a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800295c:	48000800 	.word	0x48000800
 8002960:	00010020 	.word	0x00010020
 8002964:	00010010 	.word	0x00010010
 8002968:	00010080 	.word	0x00010080
 800296c:	48000400 	.word	0x48000400
 8002970:	00010008 	.word	0x00010008
 8002974:	00010100 	.word	0x00010100
 8002978:	00010002 	.word	0x00010002

0800297c <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 800297c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002980:	b08e      	sub	sp, #56	; 0x38
 8002982:	4616      	mov	r6, r2
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8002984:	2700      	movs	r7, #0
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8002986:	094a      	lsrs	r2, r1, #5
{
 8002988:	460c      	mov	r4, r1
 800298a:	4605      	mov	r5, r0
 800298c:	4698      	mov	r8, r3
  bool bNoError = false; // Default is error
 800298e:	f88d 7011 	strb.w	r7, [sp, #17]
  if (bMotorSelection != 0)
 8002992:	d123      	bne.n	80029dc <MCP_ReceivedFrame+0x60>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8002994:	2912      	cmp	r1, #18
 8002996:	d814      	bhi.n	80029c2 <MCP_ReceivedFrame+0x46>
 8002998:	e8df f011 	tbh	[pc, r1, lsl #1]
 800299c:	027a0016 	.word	0x027a0016
 80029a0:	020400e9 	.word	0x020400e9
 80029a4:	00130013 	.word	0x00130013
 80029a8:	00810057 	.word	0x00810057
 80029ac:	00c70096 	.word	0x00c70096
 80029b0:	023d022c 	.word	0x023d022c
 80029b4:	02c70254 	.word	0x02c70254
 80029b8:	00130013 	.word	0x00130013
 80029bc:	00130013 	.word	0x00130013
 80029c0:	020e      	.short	0x020e
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f88d 3016 	strb.w	r3, [sp, #22]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 80029c8:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 80029cc:	2301      	movs	r3, #1
 80029ce:	f10d 0216 	add.w	r2, sp, #22
 80029d2:	21ff      	movs	r1, #255	; 0xff
 80029d4:	47a0      	blx	r4
    }
  }
}
 80029d6:	b00e      	add	sp, #56	; 0x38
 80029d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 80029dc:	3a01      	subs	r2, #1
 80029de:	4639      	mov	r1, r7
 80029e0:	9203      	str	r2, [sp, #12]
 80029e2:	f001 fa55 	bl	8003e90 <UI_SetReg>
 80029e6:	b300      	cbz	r0, 8002a2a <MCP_ReceivedFrame+0xae>
      if (pHandle->pDAC)
 80029e8:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
      Code &= 0x1F; /* Mask: 0001|1111 */
 80029ec:	f004 041f 	and.w	r4, r4, #31
      if (pHandle->pDAC)
 80029f0:	b118      	cbz	r0, 80029fa <MCP_ReceivedFrame+0x7e>
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 80029f2:	9a03      	ldr	r2, [sp, #12]
 80029f4:	4639      	mov	r1, r7
 80029f6:	f001 fa4b 	bl	8003e90 <UI_SetReg>
  switch (Code)
 80029fa:	2c12      	cmp	r4, #18
 80029fc:	f200 82a5 	bhi.w	8002f4a <MCP_ReceivedFrame+0x5ce>
 8002a00:	e8df f014 	tbh	[pc, r4, lsl #1]
 8002a04:	02460090 	.word	0x02460090
 8002a08:	01d000b5 	.word	0x01d000b5
 8002a0c:	02a302a3 	.word	0x02a302a3
 8002a10:	004d0023 	.word	0x004d0023
 8002a14:	00930062 	.word	0x00930062
 8002a18:	020901f8 	.word	0x020901f8
 8002a1c:	02930220 	.word	0x02930220
 8002a20:	02a302a3 	.word	0x02a302a3
 8002a24:	02a302a3 	.word	0x02a302a3
 8002a28:	01da      	.short	0x01da
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8002a2a:	230b      	movs	r3, #11
    if (bNoError)
 8002a2c:	f89d 0011 	ldrb.w	r0, [sp, #17]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8002a30:	f88d 3016 	strb.w	r3, [sp, #22]
    if (bNoError)
 8002a34:	2800      	cmp	r0, #0
 8002a36:	d0c7      	beq.n	80029c8 <MCP_ReceivedFrame+0x4c>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8002a3e:	461a      	mov	r2, r3
 8002a40:	21f0      	movs	r1, #240	; 0xf0
 8002a42:	47a0      	blx	r4
}
 8002a44:	b00e      	add	sp, #56	; 0x38
 8002a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        outBuff[i] = 0;
 8002a4a:	ac06      	add	r4, sp, #24
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2220      	movs	r2, #32
 8002a50:	4620      	mov	r0, r4
 8002a52:	f007 f9ad 	bl	8009db0 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8002a56:	f8d5 70c0 	ldr.w	r7, [r5, #192]	; 0xc0
 8002a5a:	f10d 001a 	add.w	r0, sp, #26
 8002a5e:	1e79      	subs	r1, r7, #1
 8002a60:	2300      	movs	r3, #0
 8002a62:	e004      	b.n	8002a6e <MCP_ReceivedFrame+0xf2>
 8002a64:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8002a66:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8002a6a:	f000 831a 	beq.w	80030a2 <MCP_ReceivedFrame+0x726>
 8002a6e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002a72:	2a09      	cmp	r2, #9
 8002a74:	b2de      	uxtb	r6, r3
 8002a76:	f103 0301 	add.w	r3, r3, #1
 8002a7a:	d1f3      	bne.n	8002a64 <MCP_ReceivedFrame+0xe8>
      outBuff[0] = pHandle->s_fwVer[i+5];
 8002a7c:	1d72      	adds	r2, r6, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 8002a7e:	1df3      	adds	r3, r6, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 8002a80:	3609      	adds	r6, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8002a82:	b2d2      	uxtb	r2, r2
      outBuff[1] = pHandle->s_fwVer[i+7];
 8002a84:	b2db      	uxtb	r3, r3
      outBuff[2] = pHandle->s_fwVer[i+9];
 8002a86:	b2f6      	uxtb	r6, r6
      outBuff[0] = pHandle->s_fwVer[i+5];
 8002a88:	5cba      	ldrb	r2, [r7, r2]
 8002a8a:	f88d 2018 	strb.w	r2, [sp, #24]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8002a8e:	5cfb      	ldrb	r3, [r7, r3]
 8002a90:	f88d 3019 	strb.w	r3, [sp, #25]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8002a94:	5dbb      	ldrb	r3, [r7, r6]
 8002a96:	f88d 301a 	strb.w	r3, [sp, #26]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8002a9a:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8002a9c:	e1ea      	b.n	8002e74 <MCP_ReceivedFrame+0x4f8>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002a9e:	7871      	ldrb	r1, [r6, #1]
 8002aa0:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002aa2:	7970      	ldrb	r0, [r6, #5]
 8002aa4:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002aa6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8002aaa:	78b1      	ldrb	r1, [r6, #2]
 8002aac:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8002ab0:	78f1      	ldrb	r1, [r6, #3]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002ab2:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8002ab6:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8002aba:	b292      	uxth	r2, r2
 8002abc:	4628      	mov	r0, r5
 8002abe:	f001 fb13 	bl	80040e8 <UI_ExecSpeedRamp>
 8002ac2:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8002ac6:	e7b5      	b.n	8002a34 <MCP_ReceivedFrame+0xb8>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8002ac8:	f10d 0016 	add.w	r0, sp, #22
 8002acc:	7831      	ldrb	r1, [r6, #0]
 8002ace:	9000      	str	r0, [sp, #0]
 8002ad0:	ab05      	add	r3, sp, #20
 8002ad2:	f10d 0212 	add.w	r2, sp, #18
 8002ad6:	4628      	mov	r0, r5
 8002ad8:	f001 fb2c 	bl	8004134 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8002adc:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
      outBuff[4] = (uint8_t)(FinalTorque);
 8002ae0:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
      outBuff[6] = (uint8_t)(Durationms);
 8002ae4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
      outBuff[4] = (uint8_t)(FinalTorque);
 8002ae8:	f88d 101c 	strb.w	r1, [sp, #28]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8002aec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002af0:	005b      	lsls	r3, r3, #1
      outBuff[1] = (uint8_t)(rpm >> 8);
 8002af2:	1218      	asrs	r0, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 8002af4:	f88d 3018 	strb.w	r3, [sp, #24]
      outBuff[1] = (uint8_t)(rpm >> 8);
 8002af8:	f88d 0019 	strb.w	r0, [sp, #25]
      outBuff[2] = (uint8_t)(rpm >> 16);
 8002afc:	1418      	asrs	r0, r3, #16
      outBuff[3] = (uint8_t)(rpm >> 24);
 8002afe:	161b      	asrs	r3, r3, #24
      outBuff[2] = (uint8_t)(rpm >> 16);
 8002b00:	f88d 001a 	strb.w	r0, [sp, #26]
      outBuff[3] = (uint8_t)(rpm >> 24);
 8002b04:	f88d 301b 	strb.w	r3, [sp, #27]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8002b08:	1208      	asrs	r0, r1, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8002b0a:	0a13      	lsrs	r3, r2, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8002b0c:	f88d 001d 	strb.w	r0, [sp, #29]
      outBuff[6] = (uint8_t)(Durationms);
 8002b10:	f88d 201e 	strb.w	r2, [sp, #30]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8002b14:	f88d 301f 	strb.w	r3, [sp, #31]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8002b18:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8002b1a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002b1c:	2308      	movs	r3, #8
 8002b1e:	aa06      	add	r2, sp, #24
 8002b20:	21f0      	movs	r1, #240	; 0xf0
 8002b22:	47a0      	blx	r4
    if (bNoError)
 8002b24:	f89d 0011 	ldrb.w	r0, [sp, #17]
 8002b28:	e784      	b.n	8002a34 <MCP_ReceivedFrame+0xb8>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002b2a:	78b1      	ldrb	r1, [r6, #2]
 8002b2c:	7873      	ldrb	r3, [r6, #1]
 8002b2e:	78f2      	ldrb	r2, [r6, #3]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8002b30:	7970      	ldrb	r0, [r6, #5]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002b32:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8002b36:	7931      	ldrb	r1, [r6, #4]
 8002b38:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8002b3c:	4ad2      	ldr	r2, [pc, #840]	; (8002e88 <MCP_ReceivedFrame+0x50c>)
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002b3e:	eb03 6301 	add.w	r3, r3, r1, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8002b42:	fb82 1203 	smull	r1, r2, r2, r3
 8002b46:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      hDurationms = buffer[7] + (buffer[8] << 8);
 8002b4a:	7a31      	ldrb	r1, [r6, #8]
 8002b4c:	79f2      	ldrb	r2, [r6, #7]
 8002b4e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8002b52:	79b1      	ldrb	r1, [r6, #6]
 8002b54:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8002b58:	b200      	sxth	r0, r0
 8002b5a:	7831      	ldrb	r1, [r6, #0]
 8002b5c:	9000      	str	r0, [sp, #0]
 8002b5e:	b21b      	sxth	r3, r3
 8002b60:	b292      	uxth	r2, r2
 8002b62:	4628      	mov	r0, r5
 8002b64:	f001 fb04 	bl	8004170 <UI_SetRevupData>
 8002b68:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8002b6c:	e762      	b.n	8002a34 <MCP_ReceivedFrame+0xb8>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002b6e:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8002b70:	2303      	movs	r3, #3
 8002b72:	f88d 3016 	strb.w	r3, [sp, #22]
      switch (bRegID)
 8002b76:	2988      	cmp	r1, #136	; 0x88
 8002b78:	d8d4      	bhi.n	8002b24 <MCP_ReceivedFrame+0x1a8>
 8002b7a:	a301      	add	r3, pc, #4	; (adr r3, 8002b80 <MCP_ReceivedFrame+0x204>)
 8002b7c:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8002b80:	08002fdf 	.word	0x08002fdf
 8002b84:	08002f9b 	.word	0x08002f9b
 8002b88:	08002fdf 	.word	0x08002fdf
 8002b8c:	08002fdf 	.word	0x08002fdf
 8002b90:	08002f9b 	.word	0x08002f9b
 8002b94:	08002f57 	.word	0x08002f57
 8002b98:	08002f57 	.word	0x08002f57
 8002b9c:	08002f57 	.word	0x08002f57
 8002ba0:	08002f57 	.word	0x08002f57
 8002ba4:	08002f57 	.word	0x08002f57
 8002ba8:	08002f57 	.word	0x08002f57
 8002bac:	08002f57 	.word	0x08002f57
 8002bb0:	08002f57 	.word	0x08002f57
 8002bb4:	08002f57 	.word	0x08002f57
 8002bb8:	08002f57 	.word	0x08002f57
 8002bbc:	08002f57 	.word	0x08002f57
 8002bc0:	08002f57 	.word	0x08002f57
 8002bc4:	08002f57 	.word	0x08002f57
 8002bc8:	08002f57 	.word	0x08002f57
 8002bcc:	08002f57 	.word	0x08002f57
 8002bd0:	08002f57 	.word	0x08002f57
 8002bd4:	08002f57 	.word	0x08002f57
 8002bd8:	08002f57 	.word	0x08002f57
 8002bdc:	08002f57 	.word	0x08002f57
 8002be0:	08002f57 	.word	0x08002f57
 8002be4:	08002f57 	.word	0x08002f57
 8002be8:	08002f57 	.word	0x08002f57
 8002bec:	08002f57 	.word	0x08002f57
 8002bf0:	0800307f 	.word	0x0800307f
 8002bf4:	08003057 	.word	0x08003057
 8002bf8:	08002f9b 	.word	0x08002f9b
 8002bfc:	08002f57 	.word	0x08002f57
 8002c00:	08002f57 	.word	0x08002f57
 8002c04:	08002f57 	.word	0x08002f57
 8002c08:	08002fdf 	.word	0x08002fdf
 8002c0c:	08002b25 	.word	0x08002b25
 8002c10:	08002b25 	.word	0x08002b25
 8002c14:	08002b25 	.word	0x08002b25
 8002c18:	08002b25 	.word	0x08002b25
 8002c1c:	08002b25 	.word	0x08002b25
 8002c20:	08002b25 	.word	0x08002b25
 8002c24:	08002b25 	.word	0x08002b25
 8002c28:	08002b25 	.word	0x08002b25
 8002c2c:	08002b25 	.word	0x08002b25
 8002c30:	08002b25 	.word	0x08002b25
 8002c34:	08002b25 	.word	0x08002b25
 8002c38:	08002b25 	.word	0x08002b25
 8002c3c:	08002b25 	.word	0x08002b25
 8002c40:	08002b25 	.word	0x08002b25
 8002c44:	08002b25 	.word	0x08002b25
 8002c48:	08002b25 	.word	0x08002b25
 8002c4c:	08002b25 	.word	0x08002b25
 8002c50:	08002b25 	.word	0x08002b25
 8002c54:	08002b25 	.word	0x08002b25
 8002c58:	08002b25 	.word	0x08002b25
 8002c5c:	08002b25 	.word	0x08002b25
 8002c60:	08002b25 	.word	0x08002b25
 8002c64:	08002b25 	.word	0x08002b25
 8002c68:	08002b25 	.word	0x08002b25
 8002c6c:	08002b25 	.word	0x08002b25
 8002c70:	08002b25 	.word	0x08002b25
 8002c74:	08002b25 	.word	0x08002b25
 8002c78:	08002b25 	.word	0x08002b25
 8002c7c:	08002b25 	.word	0x08002b25
 8002c80:	08002b25 	.word	0x08002b25
 8002c84:	08002f57 	.word	0x08002f57
 8002c88:	08002b25 	.word	0x08002b25
 8002c8c:	08002b25 	.word	0x08002b25
 8002c90:	08002b25 	.word	0x08002b25
 8002c94:	08002b25 	.word	0x08002b25
 8002c98:	08002f9b 	.word	0x08002f9b
 8002c9c:	08002f9b 	.word	0x08002f9b
 8002ca0:	08002f9b 	.word	0x08002f9b
 8002ca4:	08002f57 	.word	0x08002f57
 8002ca8:	08002f57 	.word	0x08002f57
 8002cac:	08002f57 	.word	0x08002f57
 8002cb0:	08002f57 	.word	0x08002f57
 8002cb4:	08002fdf 	.word	0x08002fdf
 8002cb8:	08002f9b 	.word	0x08002f9b
 8002cbc:	08002f57 	.word	0x08002f57
 8002cc0:	08002f57 	.word	0x08002f57
 8002cc4:	08002f57 	.word	0x08002f57
 8002cc8:	08002f57 	.word	0x08002f57
 8002ccc:	08002f57 	.word	0x08002f57
 8002cd0:	08002f57 	.word	0x08002f57
 8002cd4:	08002f57 	.word	0x08002f57
 8002cd8:	08002f57 	.word	0x08002f57
 8002cdc:	08002f57 	.word	0x08002f57
 8002ce0:	08002f57 	.word	0x08002f57
 8002ce4:	08002f57 	.word	0x08002f57
 8002ce8:	08002fdf 	.word	0x08002fdf
 8002cec:	08002f9b 	.word	0x08002f9b
 8002cf0:	08002b25 	.word	0x08002b25
 8002cf4:	08002f57 	.word	0x08002f57
 8002cf8:	08002f57 	.word	0x08002f57
 8002cfc:	08002f57 	.word	0x08002f57
 8002d00:	08002f57 	.word	0x08002f57
 8002d04:	08002f57 	.word	0x08002f57
 8002d08:	08002b25 	.word	0x08002b25
 8002d0c:	08002b25 	.word	0x08002b25
 8002d10:	08002f57 	.word	0x08002f57
 8002d14:	08002f57 	.word	0x08002f57
 8002d18:	08002fdf 	.word	0x08002fdf
 8002d1c:	08002fdf 	.word	0x08002fdf
 8002d20:	08002f9b 	.word	0x08002f9b
 8002d24:	08002f9b 	.word	0x08002f9b
 8002d28:	08002f9b 	.word	0x08002f9b
 8002d2c:	08002f9b 	.word	0x08002f9b
 8002d30:	08002f9b 	.word	0x08002f9b
 8002d34:	08002fdf 	.word	0x08002fdf
 8002d38:	08002f57 	.word	0x08002f57
 8002d3c:	08002f57 	.word	0x08002f57
 8002d40:	08002f9b 	.word	0x08002f9b
 8002d44:	08002b25 	.word	0x08002b25
 8002d48:	08002f57 	.word	0x08002f57
 8002d4c:	08002f57 	.word	0x08002f57
 8002d50:	08002fdf 	.word	0x08002fdf
 8002d54:	08002f9b 	.word	0x08002f9b
 8002d58:	08002f9b 	.word	0x08002f9b
 8002d5c:	08002f9b 	.word	0x08002f9b
 8002d60:	08002f9b 	.word	0x08002f9b
 8002d64:	08002f9b 	.word	0x08002f9b
 8002d68:	08002f9b 	.word	0x08002f9b
 8002d6c:	08002f9b 	.word	0x08002f9b
 8002d70:	08002f9b 	.word	0x08002f9b
 8002d74:	08002f9b 	.word	0x08002f9b
 8002d78:	08002f9b 	.word	0x08002f9b
 8002d7c:	08002f9b 	.word	0x08002f9b
 8002d80:	08002fdf 	.word	0x08002fdf
 8002d84:	08002b25 	.word	0x08002b25
 8002d88:	08002fdf 	.word	0x08002fdf
 8002d8c:	08002f9b 	.word	0x08002f9b
 8002d90:	08002f9b 	.word	0x08002f9b
 8002d94:	08002f9b 	.word	0x08002f9b
 8002d98:	08002f57 	.word	0x08002f57
 8002d9c:	08002f57 	.word	0x08002f57
 8002da0:	08002f57 	.word	0x08002f57
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8002da4:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8002da6:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8002da8:	f88d 3016 	strb.w	r3, [sp, #22]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8002dac:	4628      	mov	r0, r5
 8002dae:	f001 f95d 	bl	800406c <UI_ExecCmd>
 8002db2:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8002db6:	e63d      	b.n	8002a34 <MCP_ReceivedFrame+0xb8>
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8002db8:	7970      	ldrb	r0, [r6, #5]
 8002dba:	7932      	ldrb	r2, [r6, #4]
 8002dbc:	79b3      	ldrb	r3, [r6, #6]
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002dbe:	7871      	ldrb	r1, [r6, #1]
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8002dc0:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8002dc4:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8002dc8:	79f3      	ldrb	r3, [r6, #7]
      bNoError = UI_ExecPositionCmd(&pHandle->_Super, Position.Float_Val, Duration.Float_Val);
 8002dca:	eb02 6303 	add.w	r3, r2, r3, lsl #24
 8002dce:	ee00 3a90 	vmov	s1, r3
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002dd2:	7833      	ldrb	r3, [r6, #0]
 8002dd4:	78f2      	ldrb	r2, [r6, #3]
 8002dd6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8002dda:	78b1      	ldrb	r1, [r6, #2]
 8002ddc:	eb03 4301 	add.w	r3, r3, r1, lsl #16
      bNoError = UI_ExecPositionCmd(&pHandle->_Super, Position.Float_Val, Duration.Float_Val);
 8002de0:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8002de4:	ee00 3a10 	vmov	s0, r3
 8002de8:	4628      	mov	r0, r5
 8002dea:	f001 f999 	bl	8004120 <UI_ExecPositionCmd>
 8002dee:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8002df2:	e61f      	b.n	8002a34 <MCP_ReceivedFrame+0xb8>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8002df4:	78f3      	ldrb	r3, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8002df6:	7870      	ldrb	r0, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8002df8:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8002dfa:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8002dfc:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8002e00:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8002e04:	b212      	sxth	r2, r2
 8002e06:	b209      	sxth	r1, r1
 8002e08:	4628      	mov	r0, r5
 8002e0a:	f001 f9cd 	bl	80041a8 <UI_SetCurrentReferences>
      bNoError = true;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8002e14:	e610      	b.n	8002a38 <MCP_ReceivedFrame+0xbc>
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002e16:	4c1d      	ldr	r4, [pc, #116]	; (8002e8c <MCP_ReceivedFrame+0x510>)
      stepList.data = buffer;
 8002e18:	9606      	str	r6, [sp, #24]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8002e1a:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	a806      	add	r0, sp, #24
      stepList.len = Size;
 8002e20:	f88d 801c 	strb.w	r8, [sp, #28]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8002e24:	f88d 3016 	strb.w	r3, [sp, #22]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002e28:	f001 f9cc 	bl	80041c4 <UI_GetMPInfo>
 8002e2c:	f88d 0011 	strb.w	r0, [sp, #17]
      if (bNoError)
 8002e30:	2800      	cmp	r0, #0
 8002e32:	f43f adc9 	beq.w	80029c8 <MCP_ReceivedFrame+0x4c>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8002e36:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8002e38:	7923      	ldrb	r3, [r4, #4]
 8002e3a:	6822      	ldr	r2, [r4, #0]
 8002e3c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002e3e:	21f0      	movs	r1, #240	; 0xf0
 8002e40:	47b0      	blx	r6
  if (RequireAck)
 8002e42:	e5c8      	b.n	80029d6 <MCP_ReceivedFrame+0x5a>
 8002e44:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8002e48:	ac06      	add	r4, sp, #24
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8002e4e:	2000      	movs	r0, #0
 8002e50:	e004      	b.n	8002e5c <MCP_ReceivedFrame+0x4e0>
 8002e52:	3001      	adds	r0, #1
 8002e54:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8002e56:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8002e5a:	d00a      	beq.n	8002e72 <MCP_ReceivedFrame+0x4f6>
 8002e5c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002e60:	b2c6      	uxtb	r6, r0
 8002e62:	2900      	cmp	r1, #0
 8002e64:	d1f5      	bne.n	8002e52 <MCP_ReceivedFrame+0x4d6>
        outBuff[i] = 0;
 8002e66:	f1c6 0220 	rsb	r2, r6, #32
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	4420      	add	r0, r4
 8002e6e:	f006 ff9f 	bl	8009db0 <memset>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8002e72:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8002e74:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002e76:	2320      	movs	r3, #32
 8002e78:	4622      	mov	r2, r4
 8002e7a:	21f0      	movs	r1, #240	; 0xf0
 8002e7c:	47b0      	blx	r6
      bNoError = true;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8002e84:	e5d8      	b.n	8002a38 <MCP_ReceivedFrame+0xbc>
 8002e86:	bf00      	nop
 8002e88:	2aaaaaab 	.word	0x2aaaaaab
 8002e8c:	20000bf0 	.word	0x20000bf0
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002e90:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8002e92:	2305      	movs	r3, #5
 8002e94:	f88d 3016 	strb.w	r3, [sp, #22]
      switch (bRegID)
 8002e98:	2988      	cmp	r1, #136	; 0x88
 8002e9a:	d86e      	bhi.n	8002f7a <MCP_ReceivedFrame+0x5fe>
 8002e9c:	e8df f001 	tbb	[pc, r1]
 8002ea0:	b16d6dcc 	.word	0xb16d6dcc
 8002ea4:	7373736d 	.word	0x7373736d
 8002ea8:	73737373 	.word	0x73737373
 8002eac:	73737373 	.word	0x73737373
 8002eb0:	6d6d8f8f 	.word	0x6d6d8f8f
 8002eb4:	73737373 	.word	0x73737373
 8002eb8:	6d6d6d73 	.word	0x6d6d6d73
 8002ebc:	6d6db8c2 	.word	0x6d6db8c2
 8002ec0:	6d6d6d6d 	.word	0x6d6d6d6d
 8002ec4:	6d6d6d6d 	.word	0x6d6d6d6d
 8002ec8:	6d6d6d6d 	.word	0x6d6d6d6d
 8002ecc:	6d6d6d6d 	.word	0x6d6d6d6d
 8002ed0:	6d6d6d6d 	.word	0x6d6d6d6d
 8002ed4:	6d6d6d6d 	.word	0x6d6d6d6d
 8002ed8:	6d6d6d6d 	.word	0x6d6d6d6d
 8002edc:	6d6d6d6d 	.word	0x6d6d6d6d
 8002ee0:	6d6d736d 	.word	0x6d6d736d
 8002ee4:	8f8f6d6d 	.word	0x8f8f6d6d
 8002ee8:	6d6d6d8f 	.word	0x6d6d6d8f
 8002eec:	736d6d6d 	.word	0x736d6d6d
 8002ef0:	736d6d6d 	.word	0x736d6d6d
 8002ef4:	73737373 	.word	0x73737373
 8002ef8:	8f6d7373 	.word	0x8f6d7373
 8002efc:	6d6d6d6d 	.word	0x6d6d6d6d
 8002f00:	6d6d736d 	.word	0x6d6d736d
 8002f04:	6d6d7373 	.word	0x6d6d7373
 8002f08:	6d6d6d6d 	.word	0x6d6d6d6d
 8002f0c:	6d6d6d6d 	.word	0x6d6d6d6d
 8002f10:	6d6d6d6d 	.word	0x6d6d6d6d
 8002f14:	8f8f8fb1 	.word	0x8f8f8fb1
 8002f18:	6d6d8f8f 	.word	0x6d6d8f8f
 8002f1c:	6d8f8f6d 	.word	0x6d8f8f6d
 8002f20:	6d6d6d6d 	.word	0x6d6d6d6d
 8002f24:	73736d6d 	.word	0x73736d6d
 8002f28:	73          	.byte	0x73
 8002f29:	00          	.byte	0x00
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002f2a:	7870      	ldrb	r0, [r6, #1]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002f2c:	7973      	ldrb	r3, [r6, #5]
 8002f2e:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002f30:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002f32:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002f36:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8002f3a:	b292      	uxth	r2, r2
 8002f3c:	b209      	sxth	r1, r1
 8002f3e:	4628      	mov	r0, r5
 8002f40:	f001 f8e4 	bl	800410c <UI_ExecTorqueRamp>
 8002f44:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8002f48:	e574      	b.n	8002a34 <MCP_ReceivedFrame+0xb8>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8002f4a:	2301      	movs	r3, #1
    if (bNoError)
 8002f4c:	f89d 0011 	ldrb.w	r0, [sp, #17]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8002f50:	f88d 3016 	strb.w	r3, [sp, #22]
  if (RequireAck)
 8002f54:	e56e      	b.n	8002a34 <MCP_ReceivedFrame+0xb8>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002f56:	f10d 0211 	add.w	r2, sp, #17
 8002f5a:	4628      	mov	r0, r5
 8002f5c:	f001 f946 	bl	80041ec <UI_GetReg>
          if ( bNoError == true )
 8002f60:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002f64:	9006      	str	r0, [sp, #24]
          if ( bNoError == true )
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f43f ad2e 	beq.w	80029c8 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8002f6c:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8002f70:	2302      	movs	r3, #2
 8002f72:	aa06      	add	r2, sp, #24
 8002f74:	21f0      	movs	r1, #240	; 0xf0
 8002f76:	47a0      	blx	r4
  if (RequireAck)
 8002f78:	e52d      	b.n	80029d6 <MCP_ReceivedFrame+0x5a>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8002f7a:	2302      	movs	r3, #2
    if (bNoError)
 8002f7c:	f89d 0011 	ldrb.w	r0, [sp, #17]
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8002f80:	f88d 3016 	strb.w	r3, [sp, #22]
  if (RequireAck)
 8002f84:	e556      	b.n	8002a34 <MCP_ReceivedFrame+0xb8>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8002f86:	78b2      	ldrb	r2, [r6, #2]
 8002f88:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8002f90:	f000 ff7e 	bl	8003e90 <UI_SetReg>
 8002f94:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8002f98:	e54c      	b.n	8002a34 <MCP_ReceivedFrame+0xb8>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002f9a:	f10d 0211 	add.w	r2, sp, #17
 8002f9e:	4628      	mov	r0, r5
 8002fa0:	f001 f924 	bl	80041ec <UI_GetReg>
          if ( bNoError == true )
 8002fa4:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002fa8:	9006      	str	r0, [sp, #24]
          if ( bNoError == true )
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f43f ad0c 	beq.w	80029c8 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8002fb0:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	aa06      	add	r2, sp, #24
 8002fb8:	21f0      	movs	r1, #240	; 0xf0
 8002fba:	47a0      	blx	r4
  if (RequireAck)
 8002fbc:	e50b      	b.n	80029d6 <MCP_ReceivedFrame+0x5a>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002fbe:	78b2      	ldrb	r2, [r6, #2]
 8002fc0:	7873      	ldrb	r3, [r6, #1]
 8002fc2:	78f0      	ldrb	r0, [r6, #3]
 8002fc4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002fc8:	7932      	ldrb	r2, [r6, #4]
 8002fca:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002fce:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	f000 ff5c 	bl	8003e90 <UI_SetReg>
 8002fd8:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8002fdc:	e52a      	b.n	8002a34 <MCP_ReceivedFrame+0xb8>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002fde:	f10d 0211 	add.w	r2, sp, #17
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	f001 f902 	bl	80041ec <UI_GetReg>
           if ( bNoError == true )
 8002fe8:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002fec:	9006      	str	r0, [sp, #24]
           if ( bNoError == true )
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f43f acea 	beq.w	80029c8 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8002ff4:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	aa06      	add	r2, sp, #24
 8002ffc:	21f0      	movs	r1, #240	; 0xf0
 8002ffe:	47a0      	blx	r4
  if (RequireAck)
 8003000:	e4e9      	b.n	80029d6 <MCP_ReceivedFrame+0x5a>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8003002:	7872      	ldrb	r2, [r6, #1]
 8003004:	4628      	mov	r0, r5
 8003006:	f000 ff43 	bl	8003e90 <UI_SetReg>
 800300a:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 800300e:	e511      	b.n	8002a34 <MCP_ReceivedFrame+0xb8>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 8003010:	7872      	ldrb	r2, [r6, #1]
 8003012:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8003016:	2101      	movs	r1, #1
 8003018:	f001 f8de 	bl	80041d8 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 800301c:	2301      	movs	r3, #1
 800301e:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8003022:	e509      	b.n	8002a38 <MCP_ReceivedFrame+0xbc>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH0, (MC_Protocol_REG_t)(buffer[1]));
 8003024:	7872      	ldrb	r2, [r6, #1]
 8003026:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 800302a:	2100      	movs	r1, #0
 800302c:	f001 f8d4 	bl	80041d8 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8003030:	2301      	movs	r3, #1
 8003032:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8003036:	e4ff      	b.n	8002a38 <MCP_ReceivedFrame+0xbc>
          int32_t wValue = (int32_t)(buffer[1]);
 8003038:	7872      	ldrb	r2, [r6, #1]
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 800303a:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 800303e:	9203      	str	r2, [sp, #12]
 8003040:	2100      	movs	r1, #0
 8003042:	f000 ff25 	bl	8003e90 <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8003046:	9a03      	ldr	r2, [sp, #12]
 8003048:	2100      	movs	r1, #0
 800304a:	4628      	mov	r0, r5
 800304c:	f000 ff20 	bl	8003e90 <UI_SetReg>
 8003050:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8003054:	e4ee      	b.n	8002a34 <MCP_ReceivedFrame+0xb8>
          if (pHandle->pDAC)
 8003056:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 800305a:	2800      	cmp	r0, #0
 800305c:	f43f ad62 	beq.w	8002b24 <MCP_ReceivedFrame+0x1a8>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8003060:	2101      	movs	r1, #1
 8003062:	f001 f8bd 	bl	80041e0 <UI_GetDAC>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8003066:	2301      	movs	r3, #1
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8003068:	f88d 0018 	strb.w	r0, [sp, #24]
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 800306c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800306e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003070:	aa06      	add	r2, sp, #24
 8003072:	21f0      	movs	r1, #240	; 0xf0
 8003074:	47a0      	blx	r4
            bNoError = true;
 8003076:	2301      	movs	r3, #1
 8003078:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 800307c:	e4dc      	b.n	8002a38 <MCP_ReceivedFrame+0xbc>
          if (pHandle->pDAC)
 800307e:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8003082:	2800      	cmp	r0, #0
 8003084:	f43f ad4e 	beq.w	8002b24 <MCP_ReceivedFrame+0x1a8>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8003088:	2100      	movs	r1, #0
 800308a:	f001 f8a9 	bl	80041e0 <UI_GetDAC>
 800308e:	4603      	mov	r3, r0
 8003090:	f88d 3018 	strb.w	r3, [sp, #24]
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8003094:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8003098:	2301      	movs	r3, #1
 800309a:	aa06      	add	r2, sp, #24
 800309c:	21f0      	movs	r1, #240	; 0xf0
 800309e:	47a0      	blx	r4
  if (RequireAck)
 80030a0:	e499      	b.n	80029d6 <MCP_ReceivedFrame+0x5a>
 80030a2:	2626      	movs	r6, #38	; 0x26
 80030a4:	2324      	movs	r3, #36	; 0x24
 80030a6:	2222      	movs	r2, #34	; 0x22
 80030a8:	e4ee      	b.n	8002a88 <MCP_ReceivedFrame+0x10c>
 80030aa:	bf00      	nop

080030ac <MCP_WaitNextFrame>:
{
 80030ac:	b510      	push	{r4, lr}
 80030ae:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 80030b0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80030b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030b4:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
  pHandle->fFcpReceive(pHandle->pFCP);
 80030bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030be:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 80030c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 80030c4:	4718      	bx	r3
 80030c6:	bf00      	nop

080030c8 <MCP_Init>:
{
 80030c8:	b570      	push	{r4, r5, r6, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	4604      	mov	r4, r0
 80030ce:	461d      	mov	r5, r3
 80030d0:	9b07      	ldr	r3, [sp, #28]
  pHandle->pDAC = pDAC;
 80030d2:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
{
 80030d6:	9b08      	ldr	r3, [sp, #32]
  pHandle->s_fwVer = s_fwVer;
 80030d8:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  FCP_SetClient( pFCP, pHandle,
 80030dc:	4b09      	ldr	r3, [pc, #36]	; (8003104 <MCP_Init+0x3c>)
  pHandle->pFCP = pFCP;
 80030de:	6321      	str	r1, [r4, #48]	; 0x30
{
 80030e0:	4608      	mov	r0, r1
 80030e2:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	4a08      	ldr	r2, [pc, #32]	; (8003108 <MCP_Init+0x40>)
 80030e8:	4b08      	ldr	r3, [pc, #32]	; (800310c <MCP_Init+0x44>)
 80030ea:	4621      	mov	r1, r4
 80030ec:	f004 fd86 	bl	8007bfc <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 80030f0:	9b06      	ldr	r3, [sp, #24]
 80030f2:	63e3      	str	r3, [r4, #60]	; 0x3c
  pHandle->fFcpReceive = fFcpReceive;
 80030f4:	e9c4 650d 	strd	r6, r5, [r4, #52]	; 0x34
  MCP_WaitNextFrame(pHandle);
 80030f8:	4620      	mov	r0, r4
 80030fa:	f7ff ffd7 	bl	80030ac <MCP_WaitNextFrame>
}
 80030fe:	b002      	add	sp, #8
 8003100:	bd70      	pop	{r4, r5, r6, pc}
 8003102:	bf00      	nop
 8003104:	08003111 	.word	0x08003111
 8003108:	08003119 	.word	0x08003119
 800310c:	0800297d 	.word	0x0800297d

08003110 <MCP_OnTimeOut>:
{
 8003110:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8003112:	f7ff ffcb 	bl	80030ac <MCP_WaitNextFrame>
}
 8003116:	bd08      	pop	{r3, pc}

08003118 <MCP_SentFrame>:
{
 8003118:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 800311a:	f7ff ffc7 	bl	80030ac <MCP_WaitNextFrame>
}
 800311e:	bd08      	pop	{r3, pc}

08003120 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8003120:	b530      	push	{r4, r5, lr}
 8003122:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8003124:	f003 f89a 	bl	800625c <HAL_RCC_GetHCLKFreq>
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 800312a:	4d0c      	ldr	r5, [pc, #48]	; (800315c <MX_MotorControl_Init+0x3c>)
 800312c:	4c0c      	ldr	r4, [pc, #48]	; (8003160 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 800312e:	fba3 3000 	umull	r3, r0, r3, r0
 8003132:	09c0      	lsrs	r0, r0, #7
 8003134:	f002 fa66 	bl	8005604 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8003138:	4629      	mov	r1, r5
 800313a:	4620      	mov	r0, r4
 800313c:	f7fe ffb6 	bl	80020ac <MCboot>
  mc_lock_pins();
 8003140:	f7ff fb76 	bl	8002830 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8003144:	4b07      	ldr	r3, [pc, #28]	; (8003164 <MX_MotorControl_Init+0x44>)
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	4807      	ldr	r0, [pc, #28]	; (8003168 <MX_MotorControl_Init+0x48>)
 800314a:	462b      	mov	r3, r5
 800314c:	4622      	mov	r2, r4
 800314e:	2101      	movs	r1, #1
 8003150:	f000 fdce 	bl	8003cf0 <UI_TaskInit>
}
 8003154:	b003      	add	sp, #12
 8003156:	bd30      	pop	{r4, r5, pc}
 8003158:	10624dd3 	.word	0x10624dd3
 800315c:	20000bfc 	.word	0x20000bfc
 8003160:	20000bf8 	.word	0x20000bf8
 8003164:	0800cca0 	.word	0x0800cca0
 8003168:	20000678 	.word	0x20000678

0800316c <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800316c:	4a6f      	ldr	r2, [pc, #444]	; (800332c <RCM_RegisterRegConv+0x1c0>)
{
 800316e:	b530      	push	{r4, r5, lr}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003170:	6814      	ldr	r4, [r2, #0]
{
 8003172:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003174:	2c00      	cmp	r4, #0
 8003176:	f000 8088 	beq.w	800328a <RCM_RegisterRegConv+0x11e>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800317a:	f890 c004 	ldrb.w	ip, [r0, #4]
 800317e:	7923      	ldrb	r3, [r4, #4]
 8003180:	459c      	cmp	ip, r3
 8003182:	d01f      	beq.n	80031c4 <RCM_RegisterRegConv+0x58>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003184:	6853      	ldr	r3, [r2, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8097 	beq.w	80032ba <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800318c:	791c      	ldrb	r4, [r3, #4]
 800318e:	4564      	cmp	r4, ip
  uint8_t handle=255;
 8003190:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003194:	f000 8083 	beq.w	800329e <RCM_RegisterRegConv+0x132>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003198:	6894      	ldr	r4, [r2, #8]
 800319a:	2c00      	cmp	r4, #0
 800319c:	f000 80ad 	beq.w	80032fa <RCM_RegisterRegConv+0x18e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80031a0:	7923      	ldrb	r3, [r4, #4]
 80031a2:	4563      	cmp	r3, ip
 80031a4:	f000 8082 	beq.w	80032ac <RCM_RegisterRegConv+0x140>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80031a8:	68d3      	ldr	r3, [r2, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80ae 	beq.w	800330c <RCM_RegisterRegConv+0x1a0>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80031b0:	791c      	ldrb	r4, [r3, #4]
 80031b2:	4564      	cmp	r4, ip
 80031b4:	f000 808c 	beq.w	80032d0 <RCM_RegisterRegConv+0x164>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 80031b8:	2803      	cmp	r0, #3
 80031ba:	bf88      	it	hi
 80031bc:	20ff      	movhi	r0, #255	; 0xff
 80031be:	f240 80b1 	bls.w	8003324 <RCM_RegisterRegConv+0x1b8>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 80031c2:	bd30      	pop	{r4, r5, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80031c4:	6803      	ldr	r3, [r0, #0]
 80031c6:	6820      	ldr	r0, [r4, #0]
 80031c8:	4283      	cmp	r3, r0
 80031ca:	d1db      	bne.n	8003184 <RCM_RegisterRegConv+0x18>
  uint8_t i=0;
 80031cc:	2000      	movs	r0, #0
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80031ce:	4c58      	ldr	r4, [pc, #352]	; (8003330 <RCM_RegisterRegConv+0x1c4>)
      RCM_handle_array [handle] = regConv;
 80031d0:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031d4:	689a      	ldr	r2, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80031d6:	2500      	movs	r5, #0
 80031d8:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 80031dc:	07d5      	lsls	r5, r2, #31
 80031de:	d422      	bmi.n	8003226 <RCM_RegisterRegConv+0xba>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80031e0:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80031e2:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80031e4:	f022 0204 	bic.w	r2, r2, #4
 80031e8:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80031ea:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80031ec:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80031ee:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80031f0:	f022 0220 	bic.w	r2, r2, #32
 80031f4:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80031f6:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80031fe:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003202:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003206:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	2a00      	cmp	r2, #0
 800320c:	dbfc      	blt.n	8003208 <RCM_RegisterRegConv+0x9c>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800320e:	681a      	ldr	r2, [r3, #0]
        while (  LL_ADC_IsActiveFlag_ADRDY( regConv->regADC ) == 0)
 8003210:	07d4      	lsls	r4, r2, #31
 8003212:	d408      	bmi.n	8003226 <RCM_RegisterRegConv+0xba>
  MODIFY_REG(ADCx->CR,
 8003214:	4c47      	ldr	r4, [pc, #284]	; (8003334 <RCM_RegisterRegConv+0x1c8>)
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	4022      	ands	r2, r4
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	07d2      	lsls	r2, r2, #31
 8003224:	d5f7      	bpl.n	8003216 <RCM_RegisterRegConv+0xaa>
      RCM_NoInj_array [handle].enable = false;
 8003226:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 800322a:	4c43      	ldr	r4, [pc, #268]	; (8003338 <RCM_RegisterRegConv+0x1cc>)
 800322c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003230:	2200      	movs	r2, #0
 8003232:	f804 200c 	strb.w	r2, [r4, ip]
      RCM_NoInj_array [handle].prev = handle;
 8003236:	4464      	add	r4, ip
 8003238:	f360 0207 	bfi	r2, r0, #0, #8
 800323c:	f360 220f 	bfi	r2, r0, #8, #8
 8003240:	80a2      	strh	r2, [r4, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003244:	f022 020f 	bic.w	r2, r2, #15
 8003248:	631a      	str	r2, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 800324a:	790c      	ldrb	r4, [r1, #4]
 800324c:	2c09      	cmp	r4, #9
 800324e:	d846      	bhi.n	80032de <RCM_RegisterRegConv+0x172>
 8003250:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8003254:	06a2      	lsls	r2, r4, #26
 8003256:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 800325a:	2501      	movs	r5, #1
 800325c:	fa05 f404 	lsl.w	r4, r5, r4
 8003260:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003262:	0dd4      	lsrs	r4, r2, #23
  MODIFY_REG(*preg,
 8003264:	6889      	ldr	r1, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003266:	f004 0404 	and.w	r4, r4, #4
 800326a:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 800326c:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003270:	fa01 fc02 	lsl.w	ip, r1, r2
 8003274:	f04f 0e07 	mov.w	lr, #7
 8003278:	58e1      	ldr	r1, [r4, r3]
 800327a:	fa0e f202 	lsl.w	r2, lr, r2
 800327e:	ea21 0202 	bic.w	r2, r1, r2
 8003282:	ea42 020c 	orr.w	r2, r2, ip
 8003286:	50e2      	str	r2, [r4, r3]
}
 8003288:	bd30      	pop	{r4, r5, pc}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800328a:	6853      	ldr	r3, [r2, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d041      	beq.n	8003314 <RCM_RegisterRegConv+0x1a8>
 8003290:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 8003294:	4620      	mov	r0, r4
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003296:	791c      	ldrb	r4, [r3, #4]
 8003298:	4564      	cmp	r4, ip
 800329a:	f47f af7d 	bne.w	8003198 <RCM_RegisterRegConv+0x2c>
 800329e:	681c      	ldr	r4, [r3, #0]
 80032a0:	680b      	ldr	r3, [r1, #0]
 80032a2:	429c      	cmp	r4, r3
 80032a4:	f47f af78 	bne.w	8003198 <RCM_RegisterRegConv+0x2c>
      i++;
 80032a8:	2001      	movs	r0, #1
 80032aa:	e790      	b.n	80031ce <RCM_RegisterRegConv+0x62>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80032ac:	6824      	ldr	r4, [r4, #0]
 80032ae:	680b      	ldr	r3, [r1, #0]
 80032b0:	429c      	cmp	r4, r3
 80032b2:	f47f af79 	bne.w	80031a8 <RCM_RegisterRegConv+0x3c>
      i++;
 80032b6:	2002      	movs	r0, #2
 80032b8:	e789      	b.n	80031ce <RCM_RegisterRegConv+0x62>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80032ba:	6894      	ldr	r4, [r2, #8]
      i++;
 80032bc:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80032be:	2c00      	cmp	r4, #0
 80032c0:	f47f af6e 	bne.w	80031a0 <RCM_RegisterRegConv+0x34>
 80032c4:	68d3      	ldr	r3, [r2, #12]
 80032c6:	b36b      	cbz	r3, 8003324 <RCM_RegisterRegConv+0x1b8>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80032c8:	791d      	ldrb	r5, [r3, #4]
 80032ca:	790c      	ldrb	r4, [r1, #4]
 80032cc:	42a5      	cmp	r5, r4
 80032ce:	d129      	bne.n	8003324 <RCM_RegisterRegConv+0x1b8>
 80032d0:	681c      	ldr	r4, [r3, #0]
 80032d2:	680b      	ldr	r3, [r1, #0]
 80032d4:	429c      	cmp	r4, r3
 80032d6:	f47f af6f 	bne.w	80031b8 <RCM_RegisterRegConv+0x4c>
      i++;
 80032da:	2003      	movs	r0, #3
 80032dc:	e777      	b.n	80031ce <RCM_RegisterRegConv+0x62>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80032de:	2203      	movs	r2, #3
 80032e0:	f06f 051d 	mvn.w	r5, #29
 80032e4:	fb12 5504 	smlabb	r5, r2, r4, r5
 80032e8:	2201      	movs	r2, #1
 80032ea:	40a2      	lsls	r2, r4
 80032ec:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 80032f0:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 80032f4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80032f8:	e7b3      	b.n	8003262 <RCM_RegisterRegConv+0xf6>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80032fa:	2804      	cmp	r0, #4
 80032fc:	d910      	bls.n	8003320 <RCM_RegisterRegConv+0x1b4>
 80032fe:	68d3      	ldr	r3, [r2, #12]
 8003300:	b113      	cbz	r3, 8003308 <RCM_RegisterRegConv+0x19c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003302:	7918      	ldrb	r0, [r3, #4]
 8003304:	4584      	cmp	ip, r0
 8003306:	d00f      	beq.n	8003328 <RCM_RegisterRegConv+0x1bc>
 8003308:	680b      	ldr	r3, [r1, #0]
 800330a:	e7d4      	b.n	80032b6 <RCM_RegisterRegConv+0x14a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800330c:	2804      	cmp	r0, #4
 800330e:	680b      	ldr	r3, [r1, #0]
 8003310:	d8e3      	bhi.n	80032da <RCM_RegisterRegConv+0x16e>
 8003312:	e75c      	b.n	80031ce <RCM_RegisterRegConv+0x62>
 8003314:	6894      	ldr	r4, [r2, #8]
 8003316:	b11c      	cbz	r4, 8003320 <RCM_RegisterRegConv+0x1b4>
 8003318:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 800331c:	4618      	mov	r0, r3
 800331e:	e73f      	b.n	80031a0 <RCM_RegisterRegConv+0x34>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003320:	4620      	mov	r0, r4
 8003322:	e7cf      	b.n	80032c4 <RCM_RegisterRegConv+0x158>
 8003324:	680b      	ldr	r3, [r1, #0]
 8003326:	e752      	b.n	80031ce <RCM_RegisterRegConv+0x62>
      i++;
 8003328:	2002      	movs	r0, #2
 800332a:	e7d1      	b.n	80032d0 <RCM_RegisterRegConv+0x164>
 800332c:	20000c40 	.word	0x20000c40
 8003330:	20000c00 	.word	0x20000c00
 8003334:	7fffffc0 	.word	0x7fffffc0
 8003338:	20000c20 	.word	0x20000c20

0800333c <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 800333c:	4b5e      	ldr	r3, [pc, #376]	; (80034b8 <RCM_ExecRegularConv+0x17c>)
 800333e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 8003342:	b510      	push	{r4, lr}
  if (RCM_NoInj_array [handle].enable == false)
 8003344:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8003348:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 800334c:	2a00      	cmp	r2, #0
 800334e:	d13c      	bne.n	80033ca <RCM_ExecRegularConv+0x8e>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 8003350:	7819      	ldrb	r1, [r3, #0]
 8003352:	b9a9      	cbnz	r1, 8003380 <RCM_ExecRegularConv+0x44>
  uint8_t LastEnable = RCM_MAX_CONV;
 8003354:	2204      	movs	r2, #4
      if (RCM_NoInj_array [i].enable == true)
 8003356:	7999      	ldrb	r1, [r3, #6]
 8003358:	2900      	cmp	r1, #0
 800335a:	d07e      	beq.n	800345a <RCM_ExecRegularConv+0x11e>
      {
        if (RCM_NoInj_array [i].next > handle)
 800335c:	7ad9      	ldrb	r1, [r3, #11]
 800335e:	4288      	cmp	r0, r1
 8003360:	f0c0 809a 	bcc.w	8003498 <RCM_ExecRegularConv+0x15c>
      if (RCM_NoInj_array [i].enable == true)
 8003364:	7b1a      	ldrb	r2, [r3, #12]
 8003366:	2a00      	cmp	r2, #0
 8003368:	f000 8099 	beq.w	800349e <RCM_ExecRegularConv+0x162>
        if (RCM_NoInj_array [i].next > handle)
 800336c:	7c59      	ldrb	r1, [r3, #17]
 800336e:	4288      	cmp	r0, r1
 8003370:	f0c0 809f 	bcc.w	80034b2 <RCM_ExecRegularConv+0x176>
      if (RCM_NoInj_array [i].enable == true)
 8003374:	7c9a      	ldrb	r2, [r3, #18]
 8003376:	2a00      	cmp	r2, #0
 8003378:	f040 8095 	bne.w	80034a6 <RCM_ExecRegularConv+0x16a>
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 800337c:	2202      	movs	r2, #2
 800337e:	e073      	b.n	8003468 <RCM_ExecRegularConv+0x12c>
        if (RCM_NoInj_array [i].next > handle)
 8003380:	7959      	ldrb	r1, [r3, #5]
 8003382:	4281      	cmp	r1, r0
 8003384:	d9e7      	bls.n	8003356 <RCM_ExecRegularConv+0x1a>
      if (RCM_NoInj_array [i].enable == true)
 8003386:	4696      	mov	lr, r2
          RCM_NoInj_array [handle].next = formerNext;
 8003388:	eb0c 0400 	add.w	r4, ip, r0
 800338c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
          RCM_NoInj_array [i].next = handle;
 8003390:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
          RCM_NoInj_array [handle].prev = i;
 8003394:	7122      	strb	r2, [r4, #4]
          RCM_NoInj_array [handle].next = formerNext;
 8003396:	7161      	strb	r1, [r4, #5]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8003398:	4c48      	ldr	r4, [pc, #288]	; (80034bc <RCM_ExecRegularConv+0x180>)
          RCM_NoInj_array [formerNext].prev = handle;
 800339a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array [i].next = handle;
 800339e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 80033a2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80033a6:	7822      	ldrb	r2, [r4, #0]
          RCM_NoInj_array [i].next = handle;
 80033a8:	f88e 0005 	strb.w	r0, [lr, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 80033ac:	7108      	strb	r0, [r1, #4]
    RCM_NoInj_array [handle].enable = true;
 80033ae:	eb0c 0100 	add.w	r1, ip, r0
 80033b2:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80033b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array [handle].enable = true;
 80033ba:	f823 e011 	strh.w	lr, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80033be:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80033c2:	7852      	ldrb	r2, [r2, #1]
 80033c4:	4572      	cmp	r2, lr
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 80033c6:	bf18      	it	ne
 80033c8:	7020      	strbne	r0, [r4, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 80033ca:	4a3d      	ldr	r2, [pc, #244]	; (80034c0 <RCM_ExecRegularConv+0x184>)
 80033cc:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 80033d0:	2a00      	cmp	r2, #0
 80033d2:	d132      	bne.n	800343a <RCM_ExecRegularConv+0xfe>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80033d4:	4a3b      	ldr	r2, [pc, #236]	; (80034c4 <RCM_ExecRegularConv+0x188>)
 80033d6:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80033da:	7914      	ldrb	r4, [r2, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80033dc:	6811      	ldr	r1, [r2, #0]
 80033de:	2c09      	cmp	r4, #9
 80033e0:	d930      	bls.n	8003444 <RCM_ExecRegularConv+0x108>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80033e2:	2203      	movs	r2, #3
 80033e4:	f06f 0e1d 	mvn.w	lr, #29
 80033e8:	fb12 ee04 	smlabb	lr, r2, r4, lr
 80033ec:	2201      	movs	r2, #1
 80033ee:	40a2      	lsls	r2, r4
 80033f0:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 80033f4:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80033f8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 80033fc:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80033fe:	0d12      	lsrs	r2, r2, #20
 8003400:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8003404:	f424 64f8 	bic.w	r4, r4, #1984	; 0x7c0
 8003408:	4322      	orrs	r2, r4
 800340a:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800340c:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 800340e:	688a      	ldr	r2, [r1, #8]
 8003410:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003414:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003418:	f042 0204 	orr.w	r2, r2, #4
 800341c:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800341e:	680a      	ldr	r2, [r1, #0]
 8003420:	0752      	lsls	r2, r2, #29
 8003422:	d5fc      	bpl.n	800341e <RCM_ExecRegularConv+0xe2>
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8003424:	eb0c 0200 	add.w	r2, ip, r0
 8003428:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800342c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800342e:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8003430:	4922      	ldr	r1, [pc, #136]	; (80034bc <RCM_ExecRegularConv+0x180>)
 8003432:	7954      	ldrb	r4, [r2, #5]
 8003434:	700c      	strb	r4, [r1, #0]
    RCM_NoInj_array [handle].status = valid;
 8003436:	2102      	movs	r1, #2
 8003438:	7051      	strb	r1, [r2, #1]
  }
  retVal = RCM_NoInj_array [handle].value;
 800343a:	4460      	add	r0, ip
 800343c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
return retVal;
}
 8003440:	8858      	ldrh	r0, [r3, #2]
 8003442:	bd10      	pop	{r4, pc}
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003444:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8003448:	06a2      	lsls	r2, r4, #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800344a:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800344e:	f04f 0e01 	mov.w	lr, #1
 8003452:	fa0e f404 	lsl.w	r4, lr, r4
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003456:	4322      	orrs	r2, r4
 8003458:	e7d0      	b.n	80033fc <RCM_ExecRegularConv+0xc0>
      if (RCM_NoInj_array [i].enable == true)
 800345a:	7b19      	ldrb	r1, [r3, #12]
 800345c:	2900      	cmp	r1, #0
 800345e:	d185      	bne.n	800336c <RCM_ExecRegularConv+0x30>
 8003460:	7c99      	ldrb	r1, [r3, #18]
 8003462:	bb01      	cbnz	r1, 80034a6 <RCM_ExecRegularConv+0x16a>
       if (LastEnable != RCM_MAX_CONV )
 8003464:	2a04      	cmp	r2, #4
 8003466:	d013      	beq.n	8003490 <RCM_ExecRegularConv+0x154>
         formerNext = RCM_NoInj_array [LastEnable].next;
 8003468:	eb02 0142 	add.w	r1, r2, r2, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 800346c:	eb0c 0400 	add.w	r4, ip, r0
 8003470:	eb03 0444 	add.w	r4, r3, r4, lsl #1
         formerNext = RCM_NoInj_array [LastEnable].next;
 8003474:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 8003478:	7122      	strb	r2, [r4, #4]
         formerNext = RCM_NoInj_array [LastEnable].next;
 800347a:	794a      	ldrb	r2, [r1, #5]
         RCM_NoInj_array [handle].next = formerNext;
 800347c:	7162      	strb	r2, [r4, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 800347e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003482:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8003486:	4c0d      	ldr	r4, [pc, #52]	; (80034bc <RCM_ExecRegularConv+0x180>)
         RCM_NoInj_array [formerNext].prev = handle;
 8003488:	7110      	strb	r0, [r2, #4]
         RCM_NoInj_array [LastEnable].next = handle;
 800348a:	7148      	strb	r0, [r1, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 800348c:	7822      	ldrb	r2, [r4, #0]
 800348e:	e78e      	b.n	80033ae <RCM_ExecRegularConv+0x72>
         RCM_currentHandle = handle;
 8003490:	4c0a      	ldr	r4, [pc, #40]	; (80034bc <RCM_ExecRegularConv+0x180>)
 8003492:	4602      	mov	r2, r0
 8003494:	7020      	strb	r0, [r4, #0]
    while (i < RCM_MAX_CONV)
 8003496:	e78a      	b.n	80033ae <RCM_ExecRegularConv+0x72>
      i++;
 8003498:	2201      	movs	r2, #1
      if (RCM_NoInj_array [i].enable == true)
 800349a:	4696      	mov	lr, r2
 800349c:	e774      	b.n	8003388 <RCM_ExecRegularConv+0x4c>
 800349e:	7c9a      	ldrb	r2, [r3, #18]
 80034a0:	b90a      	cbnz	r2, 80034a6 <RCM_ExecRegularConv+0x16a>
      i++;
 80034a2:	2201      	movs	r2, #1
 80034a4:	e7e0      	b.n	8003468 <RCM_ExecRegularConv+0x12c>
        if (RCM_NoInj_array [i].next > handle)
 80034a6:	7dd9      	ldrb	r1, [r3, #23]
 80034a8:	4281      	cmp	r1, r0
      i++;
 80034aa:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array [i].next > handle)
 80034ae:	d9db      	bls.n	8003468 <RCM_ExecRegularConv+0x12c>
 80034b0:	e769      	b.n	8003386 <RCM_ExecRegularConv+0x4a>
      i++;
 80034b2:	2202      	movs	r2, #2
 80034b4:	e767      	b.n	8003386 <RCM_ExecRegularConv+0x4a>
 80034b6:	bf00      	nop
 80034b8:	20000c20 	.word	0x20000c20
 80034bc:	20000c3c 	.word	0x20000c3c
 80034c0:	2000034c 	.word	0x2000034c
 80034c4:	20000c40 	.word	0x20000c40

080034c8 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 80034c8:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 80034ca:	4c12      	ldr	r4, [pc, #72]	; (8003514 <RCM_ExecUserConv+0x4c>)
 80034cc:	7823      	ldrb	r3, [r4, #0]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d000      	beq.n	80034d4 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 80034d2:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80034d4:	4d10      	ldr	r5, [pc, #64]	; (8003518 <RCM_ExecUserConv+0x50>)
 80034d6:	7828      	ldrb	r0, [r5, #0]
 80034d8:	f7ff ff30 	bl	800333c <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80034dc:	782b      	ldrb	r3, [r5, #0]
 80034de:	4a0f      	ldr	r2, [pc, #60]	; (800351c <RCM_ExecUserConv+0x54>)
 80034e0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80034e4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80034e8:	490d      	ldr	r1, [pc, #52]	; (8003520 <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80034ea:	7852      	ldrb	r2, [r2, #1]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80034ec:	8008      	strh	r0, [r1, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80034ee:	b10a      	cbz	r2, 80034f4 <RCM_ExecUserConv+0x2c>
      RCM_UserConvState = RCM_USERCONV_EOC;
 80034f0:	2202      	movs	r2, #2
 80034f2:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80034f4:	4a0b      	ldr	r2, [pc, #44]	; (8003524 <RCM_ExecUserConv+0x5c>)
 80034f6:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80034fa:	2d00      	cmp	r5, #0
 80034fc:	d0e9      	beq.n	80034d2 <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80034fe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003502:	4601      	mov	r1, r0
 8003504:	4618      	mov	r0, r3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003506:	2300      	movs	r3, #0
 8003508:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800350a:	6852      	ldr	r2, [r2, #4]
 800350c:	462b      	mov	r3, r5
}
 800350e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003512:	4718      	bx	r3
 8003514:	20000c39 	.word	0x20000c39
 8003518:	20000c38 	.word	0x20000c38
 800351c:	20000c20 	.word	0x20000c20
 8003520:	20000c3a 	.word	0x20000c3a
 8003524:	20000c00 	.word	0x20000c00

08003528 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 8003528:	4a27      	ldr	r2, [pc, #156]	; (80035c8 <RCM_ExecNextConv+0xa0>)
 800352a:	4928      	ldr	r1, [pc, #160]	; (80035cc <RCM_ExecNextConv+0xa4>)
 800352c:	7813      	ldrb	r3, [r2, #0]
 800352e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8003532:	f811 0010 	ldrb.w	r0, [r1, r0, lsl #1]
 8003536:	2800      	cmp	r0, #0
 8003538:	d038      	beq.n	80035ac <RCM_ExecNextConv+0x84>
{
 800353a:	b410      	push	{r4}
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 800353c:	4c24      	ldr	r4, [pc, #144]	; (80035d0 <RCM_ExecNextConv+0xa8>)
 800353e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003542:	681b      	ldr	r3, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003544:	2004      	movs	r0, #4
 8003546:	6018      	str	r0, [r3, #0]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8003548:	7810      	ldrb	r0, [r2, #0]
 800354a:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 800354e:	f893 c004 	ldrb.w	ip, [r3, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	f1bc 0f09 	cmp.w	ip, #9
 8003558:	d929      	bls.n	80035ae <RCM_ExecNextConv+0x86>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 800355a:	2303      	movs	r3, #3
 800355c:	f06f 041d 	mvn.w	r4, #29
 8003560:	fb13 440c 	smlabb	r4, r3, ip, r4
 8003564:	2301      	movs	r3, #1
 8003566:	fa03 f30c 	lsl.w	r3, r3, ip
 800356a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 800356e:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8003572:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8003576:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8003578:	0d1b      	lsrs	r3, r3, #20
 800357a:	f424 6cf8 	bic.w	ip, r4, #1984	; 0x7c0
 800357e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003582:	ea43 030c 	orr.w	r3, r3, ip
 8003586:	6313      	str	r3, [r2, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003588:	6c13      	ldr	r3, [r2, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 800358a:	6893      	ldr	r3, [r2, #8]

    LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 800358c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003590:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003594:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8003598:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800359c:	f043 0304 	orr.w	r3, r3, #4
 80035a0:	2001      	movs	r0, #1
 80035a2:	6093      	str	r3, [r2, #8]
 80035a4:	7048      	strb	r0, [r1, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 80035a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80035ae:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 80035b2:	ea4f 638c 	mov.w	r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80035b6:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80035ba:	2401      	movs	r4, #1
 80035bc:	fa04 fc0c 	lsl.w	ip, r4, ip
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80035c0:	ea43 030c 	orr.w	r3, r3, ip
 80035c4:	e7d7      	b.n	8003576 <RCM_ExecNextConv+0x4e>
 80035c6:	bf00      	nop
 80035c8:	20000c3c 	.word	0x20000c3c
 80035cc:	20000c20 	.word	0x20000c20
 80035d0:	20000c40 	.word	0x20000c40

080035d4 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 80035d4:	b470      	push	{r4, r5, r6}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 80035d6:	4c10      	ldr	r4, [pc, #64]	; (8003618 <RCM_ReadOngoingConv+0x44>)
 80035d8:	4a10      	ldr	r2, [pc, #64]	; (800361c <RCM_ReadOngoingConv+0x48>)
 80035da:	7823      	ldrb	r3, [r4, #0]
 80035dc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80035e0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80035e4:	0058      	lsls	r0, r3, #1
 80035e6:	f891 c001 	ldrb.w	ip, [r1, #1]
 80035ea:	f1bc 0f01 	cmp.w	ip, #1
 80035ee:	d006      	beq.n	80035fe <RCM_ReadOngoingConv+0x2a>
    RCM_NoInj_array [RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 80035f0:	4403      	add	r3, r0
 80035f2:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80035f6:	7953      	ldrb	r3, [r2, #5]
 80035f8:	7023      	strb	r3, [r4, #0]
}
 80035fa:	bc70      	pop	{r4, r5, r6}
 80035fc:	4770      	bx	lr
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 80035fe:	4d08      	ldr	r5, [pc, #32]	; (8003620 <RCM_ReadOngoingConv+0x4c>)
 8003600:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8003604:	682d      	ldr	r5, [r5, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003606:	682e      	ldr	r6, [r5, #0]
 8003608:	0776      	lsls	r6, r6, #29
 800360a:	d5f1      	bpl.n	80035f0 <RCM_ReadOngoingConv+0x1c>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800360c:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 800360e:	804d      	strh	r5, [r1, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 8003610:	2502      	movs	r5, #2
 8003612:	704d      	strb	r5, [r1, #1]
 8003614:	e7ec      	b.n	80035f0 <RCM_ReadOngoingConv+0x1c>
 8003616:	bf00      	nop
 8003618:	20000c3c 	.word	0x20000c3c
 800361c:	20000c20 	.word	0x20000c20
 8003620:	20000c40 	.word	0x20000c40

08003624 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003624:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <HAL_MspInit+0x30>)
 8003626:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003628:	f042 0201 	orr.w	r2, r2, #1
 800362c:	661a      	str	r2, [r3, #96]	; 0x60
 800362e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003630:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003632:	f002 0201 	and.w	r2, r2, #1
 8003636:	9200      	str	r2, [sp, #0]
 8003638:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800363a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800363c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003640:	659a      	str	r2, [r3, #88]	; 0x58
 8003642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800364c:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800364e:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003650:	f001 bf7a 	b.w	8005548 <HAL_NVIC_SetPriorityGrouping>
 8003654:	40021000 	.word	0x40021000

08003658 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003658:	b510      	push	{r4, lr}
 800365a:	4604      	mov	r4, r0
 800365c:	b09e      	sub	sp, #120	; 0x78
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003660:	2244      	movs	r2, #68	; 0x44
 8003662:	a80d      	add	r0, sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003664:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8003668:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
 800366c:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800366e:	f006 fb9f 	bl	8009db0 <memset>
  if(hadc->Instance==ADC1)
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003678:	d004      	beq.n	8003684 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800367a:	4a4d      	ldr	r2, [pc, #308]	; (80037b0 <HAL_ADC_MspInit+0x158>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d047      	beq.n	8003710 <HAL_ADC_MspInit+0xb8>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003680:	b01e      	add	sp, #120	; 0x78
 8003682:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003684:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003688:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800368c:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800368e:	920d      	str	r2, [sp, #52]	; 0x34
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003690:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003692:	f002 fe15 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 8003696:	2800      	cmp	r0, #0
 8003698:	f040 8084 	bne.w	80037a4 <HAL_ADC_MspInit+0x14c>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800369c:	4a45      	ldr	r2, [pc, #276]	; (80037b4 <HAL_ADC_MspInit+0x15c>)
 800369e:	6813      	ldr	r3, [r2, #0]
 80036a0:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80036a2:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80036a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80036a6:	d109      	bne.n	80036bc <HAL_ADC_MspInit+0x64>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80036a8:	4b43      	ldr	r3, [pc, #268]	; (80037b8 <HAL_ADC_MspInit+0x160>)
 80036aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80036b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036bc:	4b3e      	ldr	r3, [pc, #248]	; (80037b8 <HAL_ADC_MspInit+0x160>)
 80036be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036c0:	f042 0201 	orr.w	r2, r2, #1
 80036c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80036c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036c8:	f002 0201 	and.w	r2, r2, #1
 80036cc:	9202      	str	r2, [sp, #8]
 80036ce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036d2:	f042 0202 	orr.w	r2, r2, #2
 80036d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80036d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 80036e0:	2202      	movs	r2, #2
 80036e2:	2303      	movs	r3, #3
 80036e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e8:	2400      	movs	r4, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ea:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 80036ee:	a908      	add	r1, sp, #32
 80036f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036f4:	f002 f8a0 	bl	8005838 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 80036f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036fc:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80036fe:	482f      	ldr	r0, [pc, #188]	; (80037bc <HAL_ADC_MspInit+0x164>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003700:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8003702:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8003704:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8003708:	f002 f896 	bl	8005838 <HAL_GPIO_Init>
}
 800370c:	b01e      	add	sp, #120	; 0x78
 800370e:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003710:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003714:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003718:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800371a:	920d      	str	r2, [sp, #52]	; 0x34
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800371c:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800371e:	f002 fdcf 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 8003722:	2800      	cmp	r0, #0
 8003724:	d141      	bne.n	80037aa <HAL_ADC_MspInit+0x152>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003726:	4a23      	ldr	r2, [pc, #140]	; (80037b4 <HAL_ADC_MspInit+0x15c>)
 8003728:	6813      	ldr	r3, [r2, #0]
 800372a:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800372c:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800372e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003730:	d109      	bne.n	8003746 <HAL_ADC_MspInit+0xee>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003732:	4b21      	ldr	r3, [pc, #132]	; (80037b8 <HAL_ADC_MspInit+0x160>)
 8003734:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003736:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800373a:	64da      	str	r2, [r3, #76]	; 0x4c
 800373c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003742:	9304      	str	r3, [sp, #16]
 8003744:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003746:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <HAL_ADC_MspInit+0x160>)
 8003748:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003750:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003752:	f002 0201 	and.w	r2, r2, #1
 8003756:	9205      	str	r2, [sp, #20]
 8003758:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800375a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800375c:	f042 0204 	orr.w	r2, r2, #4
 8003760:	64da      	str	r2, [r3, #76]	; 0x4c
 8003762:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003764:	f002 0204 	and.w	r2, r2, #4
 8003768:	9206      	str	r2, [sp, #24]
 800376a:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800376c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800376e:	f042 0202 	orr.w	r2, r2, #2
 8003772:	64da      	str	r2, [r3, #76]	; 0x4c
 8003774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin;
 800377c:	2280      	movs	r2, #128	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377e:	2400      	movs	r4, #0
    HAL_GPIO_Init(M1_CURR_AMPL_W_GPIO_Port, &GPIO_InitStruct);
 8003780:	a908      	add	r1, sp, #32
 8003782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin;
 8003786:	2303      	movs	r3, #3
 8003788:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378c:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800378e:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(M1_CURR_AMPL_W_GPIO_Port, &GPIO_InitStruct);
 8003790:	f002 f852 	bl	8005838 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_BUS_VOLTAGE_Pin;
 8003794:	2230      	movs	r2, #48	; 0x30
 8003796:	2303      	movs	r3, #3
 8003798:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800379c:	4808      	ldr	r0, [pc, #32]	; (80037c0 <HAL_ADC_MspInit+0x168>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037a0:	a908      	add	r1, sp, #32
 80037a2:	e7a7      	b.n	80036f4 <HAL_ADC_MspInit+0x9c>
      Error_Handler();
 80037a4:	f7fe fa36 	bl	8001c14 <Error_Handler>
 80037a8:	e778      	b.n	800369c <HAL_ADC_MspInit+0x44>
      Error_Handler();
 80037aa:	f7fe fa33 	bl	8001c14 <Error_Handler>
 80037ae:	e7ba      	b.n	8003726 <HAL_ADC_MspInit+0xce>
 80037b0:	50000100 	.word	0x50000100
 80037b4:	20000c50 	.word	0x20000c50
 80037b8:	40021000 	.word	0x40021000
 80037bc:	48000400 	.word	0x48000400
 80037c0:	48000800 	.word	0x48000800

080037c4 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 80037c4:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <HAL_CORDIC_MspInit+0x2c>)
 80037c6:	6802      	ldr	r2, [r0, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d000      	beq.n	80037ce <HAL_CORDIC_MspInit+0xa>
 80037cc:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80037ce:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 80037d2:	f042 0208 	orr.w	r2, r2, #8
 80037d6:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 80037da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 80037de:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80037e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 80037ea:	b002      	add	sp, #8
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40020c00 	.word	0x40020c00
 80037f4:	00000000 	.word	0x00000000

080037f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80037f8:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 80037fa:	4a1b      	ldr	r2, [pc, #108]	; (8003868 <HAL_DAC_MspInit+0x70>)
 80037fc:	6801      	ldr	r1, [r0, #0]
{
 80037fe:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003800:	2300      	movs	r3, #0
  if(hdac->Instance==DAC1)
 8003802:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003804:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003808:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800380c:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC1)
 800380e:	d002      	beq.n	8003816 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003810:	b009      	add	sp, #36	; 0x24
 8003812:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003816:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800381a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 800381e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8003860 <HAL_DAC_MspInit+0x68>
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003822:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003824:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003828:	64da      	str	r2, [r3, #76]	; 0x4c
 800382a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800382c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003830:	9200      	str	r2, [sp, #0]
 8003832:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003834:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	64da      	str	r2, [r3, #76]	; 0x4c
 800383c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8003844:	a902      	add	r1, sp, #8
 8003846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 800384a:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800384e:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8003850:	f001 fff2 	bl	8005838 <HAL_GPIO_Init>
}
 8003854:	b009      	add	sp, #36	; 0x24
 8003856:	f85d fb04 	ldr.w	pc, [sp], #4
 800385a:	bf00      	nop
 800385c:	f3af 8000 	nop.w
 8003860:	00000010 	.word	0x00000010
 8003864:	00000003 	.word	0x00000003
 8003868:	50000800 	.word	0x50000800
 800386c:	00000000 	.word	0x00000000

08003870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003870:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8003872:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <HAL_TIM_Base_MspInit+0x70>)
 8003874:	6801      	ldr	r1, [r0, #0]
{
 8003876:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003878:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 800387a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800387c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003880:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003884:	9306      	str	r3, [sp, #24]
  if(htim_base->Instance==TIM1)
 8003886:	d001      	beq.n	800388c <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003888:	b008      	add	sp, #32
 800388a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800388c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003890:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8003894:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80038d8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003898:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800389a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800389e:	661a      	str	r2, [r3, #96]	; 0x60
 80038a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038a2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80038a6:	9200      	str	r2, [sp, #0]
 80038a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038ac:	f042 0201 	orr.w	r2, r2, #1
 80038b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80038b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038ba:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 80038bc:	230c      	movs	r3, #12
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80038be:	a902      	add	r1, sp, #8
 80038c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80038c4:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c8:	9c01      	ldr	r4, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038ca:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 80038cc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80038ce:	f001 ffb3 	bl	8005838 <HAL_GPIO_Init>
}
 80038d2:	b008      	add	sp, #32
 80038d4:	bd10      	pop	{r4, pc}
 80038d6:	bf00      	nop
 80038d8:	00000800 	.word	0x00000800
 80038dc:	00000012 	.word	0x00000012
 80038e0:	40012c00 	.word	0x40012c00

080038e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80038e4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM2)
 80038e6:	6802      	ldr	r2, [r0, #0]
{
 80038e8:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ea:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM2)
 80038ec:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80038f4:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80038f8:	9308      	str	r3, [sp, #32]
  if(htim_encoder->Instance==TIM2)
 80038fa:	d001      	beq.n	8003900 <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80038fc:	b00a      	add	sp, #40	; 0x28
 80038fe:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003900:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003904:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003908:	2401      	movs	r4, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 800390a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800390c:	4322      	orrs	r2, r4
 800390e:	659a      	str	r2, [r3, #88]	; 0x58
 8003910:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003912:	4022      	ands	r2, r4
 8003914:	9201      	str	r2, [sp, #4]
 8003916:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003918:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800391a:	4322      	orrs	r2, r4
 800391c:	64da      	str	r2, [r3, #76]	; 0x4c
 800391e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003920:	4022      	ands	r2, r4
 8003922:	9202      	str	r2, [sp, #8]
 8003924:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003928:	f042 0202 	orr.w	r2, r2, #2
 800392c:	64da      	str	r2, [r3, #76]	; 0x4c
 800392e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003930:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8003938:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin;
 800393a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    HAL_GPIO_Init(M1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 800393e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin;
 8003942:	2302      	movs	r3, #2
 8003944:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003948:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 800394a:	f001 ff75 	bl	8005838 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_ENCODER_B_Pin;
 800394e:	2208      	movs	r2, #8
 8003950:	2302      	movs	r3, #2
 8003952:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(M1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8003956:	4805      	ldr	r0, [pc, #20]	; (800396c <HAL_TIM_Encoder_MspInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003958:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = M1_ENCODER_B_Pin;
 800395a:	2200      	movs	r2, #0
 800395c:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 800395e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_ENCODER_B_Pin;
 8003960:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8003964:	f001 ff68 	bl	8005838 <HAL_GPIO_Init>
}
 8003968:	b00a      	add	sp, #40	; 0x28
 800396a:	bd10      	pop	{r4, pc}
 800396c:	48000400 	.word	0x48000400

08003970 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003970:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003972:	4a1b      	ldr	r2, [pc, #108]	; (80039e0 <HAL_TIM_MspPostInit+0x70>)
 8003974:	6801      	ldr	r1, [r0, #0]
{
 8003976:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003978:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800397a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800397c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003980:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003984:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8003986:	d002      	beq.n	800398e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003988:	b009      	add	sp, #36	; 0x24
 800398a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800398e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003992:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003996:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80039d0 <HAL_TIM_MspPostInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800399a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800399c:	f042 0201 	orr.w	r2, r2, #1
 80039a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80039a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80039a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80039a8:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 80039d8 <HAL_TIM_MspPostInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80039b4:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80039ba:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039be:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80039c0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c2:	f001 ff39 	bl	8005838 <HAL_GPIO_Init>
}
 80039c6:	b009      	add	sp, #36	; 0x24
 80039c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80039cc:	f3af 8000 	nop.w
 80039d0:	00000700 	.word	0x00000700
 80039d4:	00000002 	.word	0x00000002
 80039d8:	00000002 	.word	0x00000002
 80039dc:	00000002 	.word	0x00000002
 80039e0:	40012c00 	.word	0x40012c00
 80039e4:	00000000 	.word	0x00000000

080039e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039e8:	b510      	push	{r4, lr}
 80039ea:	4604      	mov	r4, r0
 80039ec:	b098      	sub	sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ee:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039f0:	2244      	movs	r2, #68	; 0x44
 80039f2:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80039f8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80039fc:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039fe:	f006 f9d7 	bl	8009db0 <memset>
  if(huart->Instance==USART2)
 8003a02:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <HAL_UART_MspInit+0x90>)
 8003a04:	6822      	ldr	r2, [r4, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d001      	beq.n	8003a0e <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a0a:	b018      	add	sp, #96	; 0x60
 8003a0c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a0e:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a10:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a12:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a14:	f002 fc54 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 8003a18:	bb18      	cbnz	r0, 8003a62 <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a1a:	4b18      	ldr	r3, [pc, #96]	; (8003a7c <HAL_UART_MspInit+0x94>)
 8003a1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a1e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003a22:	659a      	str	r2, [r3, #88]	; 0x58
 8003a24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a26:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003a2a:	9200      	str	r2, [sp, #0]
 8003a2c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003a30:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8003a68 <HAL_UART_MspInit+0x80>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003a3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003a40:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8003a70 <HAL_UART_MspInit+0x88>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a4a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a4c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003a52:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a56:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a58:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5a:	f001 feed 	bl	8005838 <HAL_GPIO_Init>
}
 8003a5e:	b018      	add	sp, #96	; 0x60
 8003a60:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003a62:	f7fe f8d7 	bl	8001c14 <Error_Handler>
 8003a66:	e7d8      	b.n	8003a1a <HAL_UART_MspInit+0x32>
 8003a68:	0000000c 	.word	0x0000000c
 8003a6c:	00000002 	.word	0x00000002
	...
 8003a78:	40004400 	.word	0x40004400
 8003a7c:	40021000 	.word	0x40021000

08003a80 <ADC1_2_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC1_2_IRQHandler(void)
{
 8003a80:	b508      	push	{r3, lr}
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8003a82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a86:	2240      	movs	r2, #64	; 0x40
 8003a88:	601a      	str	r2, [r3, #0]

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task
  UI_DACUpdate(TSK_HighFrequencyTask());
 8003a8a:	f7fe fdd5 	bl	8002638 <TSK_HighFrequencyTask>
 /* USER CODE END HighFreq  */

 /* USER CODE BEGIN ADC1_2_IRQn 1 */

 /* USER CODE END ADC1_2_IRQn 1 */
}
 8003a8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UI_DACUpdate(TSK_HighFrequencyTask());
 8003a92:	f000 b9bf 	b.w	8003e14 <UI_DACUpdate>
 8003a96:	bf00      	nop

08003a98 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003a98:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003a9a:	4804      	ldr	r0, [pc, #16]	; (8003aac <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003a9c:	f06f 0201 	mvn.w	r2, #1
 8003aa0:	611a      	str	r2, [r3, #16]
 8003aa2:	f005 b91b 	b.w	8008cdc <R3_2_TIMx_UP_IRQHandler>
 8003aa6:	bf00      	nop
 8003aa8:	40012c00 	.word	0x40012c00
 8003aac:	2000034c 	.word	0x2000034c

08003ab0 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8003ab0:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003ab2:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	0611      	lsls	r1, r2, #24
 8003ab8:	d505      	bpl.n	8003ac6 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003aba:	f06f 0280 	mvn.w	r2, #128	; 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8003abe:	480a      	ldr	r0, [pc, #40]	; (8003ae8 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003ac0:	611a      	str	r2, [r3, #16]
 8003ac2:	f005 f967 	bl	8008d94 <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8003ac6:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	05d2      	lsls	r2, r2, #23
 8003acc:	d505      	bpl.n	8003ada <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8003ace:	f46f 7280 	mvn.w	r2, #256	; 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 8003ad2:	4805      	ldr	r0, [pc, #20]	; (8003ae8 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003ad4:	611a      	str	r2, [r3, #16]
 8003ad6:	f005 f93d 	bl	8008d54 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8003ada:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8003ade:	f7fe bd7f 	b.w	80025e0 <MC_Scheduler>
 8003ae2:	bf00      	nop
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	2000034c 	.word	0x2000034c

08003aec <TIM2_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8003aec:	4806      	ldr	r0, [pc, #24]	; (8003b08 <TIM2_IRQHandler+0x1c>)
 8003aee:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	07d1      	lsls	r1, r2, #31
 8003af4:	d502      	bpl.n	8003afc <TIM2_IRQHandler+0x10>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	07d2      	lsls	r2, r2, #31
 8003afa:	d400      	bmi.n	8003afe <TIM2_IRQHandler+0x12>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8003afc:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003afe:	f06f 0201 	mvn.w	r2, #1
 8003b02:	611a      	str	r2, [r3, #16]
    ENC_IRQHandler(&ENCODER_M1);
 8003b04:	f004 b864 	b.w	8007bd0 <ENC_IRQHandler>
 8003b08:	200000f0 	.word	0x200000f0

08003b0c <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8003b0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8003b0e:	4c18      	ldr	r4, [pc, #96]	; (8003b70 <USART2_IRQHandler+0x64>)
 8003b10:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003b14:	69da      	ldr	r2, [r3, #28]
 8003b16:	0691      	lsls	r1, r2, #26
 8003b18:	d50b      	bpl.n	8003b32 <USART2_IRQHandler+0x26>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003b1a:	6a59      	ldr	r1, [r3, #36]	; 0x24
  {
    uint16_t retVal;
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	b2c9      	uxtb	r1, r1
 8003b20:	f006 f844 	bl	8009bac <UFCP_RX_IRQ_Handler>
 8003b24:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d01a      	beq.n	8003b60 <USART2_IRQHandler+0x54>
    {
      UI_SerialCommunicationTimeOutStart();
    }
    if (retVal == 2)
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d01d      	beq.n	8003b6a <USART2_IRQHandler+0x5e>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8003b2e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	0612      	lsls	r2, r2, #24
 8003b36:	d504      	bpl.n	8003b42 <USART2_IRQHandler+0x36>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8003b38:	480d      	ldr	r0, [pc, #52]	; (8003b70 <USART2_IRQHandler+0x64>)
 8003b3a:	f005 ff93 	bl	8009a64 <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8003b3e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	071b      	lsls	r3, r3, #28
 8003b46:	d50a      	bpl.n	8003b5e <USART2_IRQHandler+0x52>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8003b48:	4809      	ldr	r0, [pc, #36]	; (8003b70 <USART2_IRQHandler+0x64>)
 8003b4a:	f006 f899 	bl	8009c80 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8003b4e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8003b52:	2208      	movs	r2, #8
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8003b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b58:	621a      	str	r2, [r3, #32]
    UI_SerialCommunicationTimeOutStop();
 8003b5a:	f000 b96b 	b.w	8003e34 <UI_SerialCommunicationTimeOutStop>
}
 8003b5e:	bd10      	pop	{r4, pc}
      UI_SerialCommunicationTimeOutStart();
 8003b60:	f000 f96e 	bl	8003e40 <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8003b64:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003b68:	e7e3      	b.n	8003b32 <USART2_IRQHandler+0x26>
      UI_SerialCommunicationTimeOutStop();
 8003b6a:	f000 f963 	bl	8003e34 <UI_SerialCommunicationTimeOutStop>
 8003b6e:	e7de      	b.n	8003b2e <USART2_IRQHandler+0x22>
 8003b70:	2000053c 	.word	0x2000053c

08003b74 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003b74:	b538      	push	{r3, r4, r5, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003b76:	f7fe fe4b 	bl	8002810 <TSK_HardwareFaultTask>
 8003b7a:	4c18      	ldr	r4, [pc, #96]	; (8003bdc <HardFault_Handler+0x68>)
 8003b7c:	2508      	movs	r5, #8

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8003b7e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003b82:	69da      	ldr	r2, [r3, #28]
 8003b84:	0711      	lsls	r1, r2, #28
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8003b86:	4620      	mov	r0, r4
 8003b88:	d508      	bpl.n	8003b9c <HardFault_Handler+0x28>
 8003b8a:	f006 f879 	bl	8009c80 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8003b8e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8003b92:	621d      	str	r5, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 8003b94:	f000 f94e 	bl	8003e34 <UI_SerialCommunicationTimeOutStop>
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8003b98:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8003b9c:	69da      	ldr	r2, [r3, #28]
 8003b9e:	0612      	lsls	r2, r2, #24
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	d513      	bpl.n	8003bcc <HardFault_Handler+0x58>
 8003ba4:	f005 ff5e 	bl	8009a64 <UFCP_TX_IRQ_Handler>
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8003ba8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003bac:	69da      	ldr	r2, [r3, #28]
 8003bae:	0691      	lsls	r1, r2, #26
 8003bb0:	d5e7      	bpl.n	8003b82 <HardFault_Handler+0xe>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003bb2:	6a59      	ldr	r1, [r3, #36]	; 0x24
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	b2c9      	uxtb	r1, r1
 8003bb8:	f005 fff8 	bl	8009bac <UFCP_RX_IRQ_Handler>
 8003bbc:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d008      	beq.n	8003bd4 <HardFault_Handler+0x60>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d1db      	bne.n	8003b7e <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 8003bc6:	f000 f935 	bl	8003e34 <UI_SerialCommunicationTimeOutStop>
 8003bca:	e7d8      	b.n	8003b7e <HardFault_Handler+0xa>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003bcc:	69da      	ldr	r2, [r3, #28]
 8003bce:	0692      	lsls	r2, r2, #26
 8003bd0:	d5d7      	bpl.n	8003b82 <HardFault_Handler+0xe>
 8003bd2:	e7ee      	b.n	8003bb2 <HardFault_Handler+0x3e>
          UI_SerialCommunicationTimeOutStart();
 8003bd4:	f000 f934 	bl	8003e40 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8003bd8:	e7d1      	b.n	8003b7e <HardFault_Handler+0xa>
 8003bda:	bf00      	nop
 8003bdc:	2000053c 	.word	0x2000053c

08003be0 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003be0:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003be2:	4c0a      	ldr	r4, [pc, #40]	; (8003c0c <SysTick_Handler+0x2c>)
 8003be4:	7823      	ldrb	r3, [r4, #0]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d009      	beq.n	8003bfe <SysTick_Handler+0x1e>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8003bea:	3301      	adds	r3, #1
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	7023      	strb	r3, [r4, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 8003bf0:	f7fe fdfe 	bl	80027f0 <MC_RunMotorControlTasks>
    TC_IncTick(&pPosCtrlM1);

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TC_IncTick(&pPosCtrlM1);
 8003bf8:	4805      	ldr	r0, [pc, #20]	; (8003c10 <SysTick_Handler+0x30>)
 8003bfa:	f005 bf2d 	b.w	8009a58 <TC_IncTick>
    HAL_IncTick();
 8003bfe:	f000 fd95 	bl	800472c <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003c02:	f001 fd1b 	bl	800563c <HAL_SYSTICK_IRQHandler>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e7f1      	b.n	8003bee <SysTick_Handler+0xe>
 8003c0a:	bf00      	nop
 8003c0c:	2000067c 	.word	0x2000067c
 8003c10:	200004cc 	.word	0x200004cc

08003c14 <EXTI15_10_IRQHandler>:
/**
  * @brief  This function handles Button IRQ on PIN PC13.
  *                 and M1 Encoder Index IRQ on PIN PB10.
  */
void EXTI15_10_IRQHandler (void)
{
 8003c14:	b508      	push	{r3, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8003c16:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <EXTI15_10_IRQHandler+0x38>)
 8003c18:	695a      	ldr	r2, [r3, #20]
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 8003c1a:	0491      	lsls	r1, r2, #18
 8003c1c:	d404      	bmi.n	8003c28 <EXTI15_10_IRQHandler+0x14>
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <EXTI15_10_IRQHandler+0x38>)
 8003c20:	695a      	ldr	r2, [r3, #20]
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    UI_HandleStartStopButton_cb ();
  }

	/* USER CODE BEGIN ENCODER Z INDEX M1 */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10))
 8003c22:	0552      	lsls	r2, r2, #21
 8003c24:	d409      	bmi.n	8003c3a <EXTI15_10_IRQHandler+0x26>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_10);
    TC_EncoderReset(&pPosCtrlM1);
  }

}
 8003c26:	bd08      	pop	{r3, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003c28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c2c:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8003c2e:	f000 f90d 	bl	8003e4c <UI_HandleStartStopButton_cb>
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <EXTI15_10_IRQHandler+0x38>)
 8003c34:	695a      	ldr	r2, [r3, #20]
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10))
 8003c36:	0552      	lsls	r2, r2, #21
 8003c38:	d5f5      	bpl.n	8003c26 <EXTI15_10_IRQHandler+0x12>
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003c3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c3e:	615a      	str	r2, [r3, #20]
    TC_EncoderReset(&pPosCtrlM1);
 8003c40:	4803      	ldr	r0, [pc, #12]	; (8003c50 <EXTI15_10_IRQHandler+0x3c>)
}
 8003c42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TC_EncoderReset(&pPosCtrlM1);
 8003c46:	f005 bec9 	b.w	80099dc <TC_EncoderReset>
 8003c4a:	bf00      	nop
 8003c4c:	40010400 	.word	0x40010400
 8003c50:	200004cc 	.word	0x200004cc

08003c54 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8003c54:	2001      	movs	r0, #1
 8003c56:	4770      	bx	lr

08003c58 <_kill>:

int _kill(int pid, int sig)
{
 8003c58:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c5a:	f006 f87f 	bl	8009d5c <__errno>
 8003c5e:	2316      	movs	r3, #22
 8003c60:	6003      	str	r3, [r0, #0]
  return -1;
}
 8003c62:	f04f 30ff 	mov.w	r0, #4294967295
 8003c66:	bd08      	pop	{r3, pc}

08003c68 <_exit>:

void _exit (int status)
{
 8003c68:	b508      	push	{r3, lr}
  errno = EINVAL;
 8003c6a:	f006 f877 	bl	8009d5c <__errno>
 8003c6e:	2316      	movs	r3, #22
 8003c70:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8003c72:	e7fe      	b.n	8003c72 <_exit+0xa>

08003c74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c74:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c76:	1e16      	subs	r6, r2, #0
 8003c78:	dd07      	ble.n	8003c8a <_read+0x16>
 8003c7a:	460c      	mov	r4, r1
 8003c7c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8003c7e:	f3af 8000 	nop.w
 8003c82:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c86:	42a5      	cmp	r5, r4
 8003c88:	d1f9      	bne.n	8003c7e <_read+0xa>
  }

  return len;
}
 8003c8a:	4630      	mov	r0, r6
 8003c8c:	bd70      	pop	{r4, r5, r6, pc}
 8003c8e:	bf00      	nop

08003c90 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop

08003c98 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8003c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c9c:	604b      	str	r3, [r1, #4]
  return 0;
}
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop

08003ca4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	4770      	bx	lr

08003ca8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8003ca8:	2000      	movs	r0, #0
 8003caa:	4770      	bx	lr

08003cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cac:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cae:	4c0c      	ldr	r4, [pc, #48]	; (8003ce0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <_sbrk+0x38>)
 8003cb2:	490d      	ldr	r1, [pc, #52]	; (8003ce8 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8003cb4:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cb6:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8003cb8:	b12a      	cbz	r2, 8003cc6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cba:	4410      	add	r0, r2
 8003cbc:	4288      	cmp	r0, r1
 8003cbe:	d807      	bhi.n	8003cd0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003cc0:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003cc6:	4a09      	ldr	r2, [pc, #36]	; (8003cec <_sbrk+0x40>)
 8003cc8:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003cca:	4410      	add	r0, r2
 8003ccc:	4288      	cmp	r0, r1
 8003cce:	d9f7      	bls.n	8003cc0 <_sbrk+0x14>
    errno = ENOMEM;
 8003cd0:	f006 f844 	bl	8009d5c <__errno>
 8003cd4:	230c      	movs	r3, #12
    return (void *)-1;
 8003cd6:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8003cda:	6003      	str	r3, [r0, #0]
}
 8003cdc:	4610      	mov	r0, r2
 8003cde:	bd10      	pop	{r4, pc}
 8003ce0:	20000c54 	.word	0x20000c54
 8003ce4:	20008000 	.word	0x20008000
 8003ce8:	00000400 	.word	0x00000400
 8003cec:	20000d48 	.word	0x20000d48

08003cf0 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8003cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pDAC = &DAC_UI_Params;
      pDAC->_Super = UI_Params;
 8003cf4:	4d2d      	ldr	r5, [pc, #180]	; (8003dac <UI_TaskInit+0xbc>)
      pDAC = &DAC_UI_Params;
 8003cf6:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8003dc4 <UI_TaskInit+0xd4>
 8003cfa:	4e2d      	ldr	r6, [pc, #180]	; (8003db0 <UI_TaskInit+0xc0>)
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_I_A );
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );

    pMCP = &MCP_UI_Params;
 8003cfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003dc8 <UI_TaskInit+0xd8>
      pDAC = &DAC_UI_Params;
 8003d00:	f8c6 e000 	str.w	lr, [r6]
{
 8003d04:	b087      	sub	sp, #28
 8003d06:	4690      	mov	r8, r2
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 8003d08:	9000      	str	r0, [sp, #0]
{
 8003d0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 8003d0c:	9004      	str	r0, [sp, #16]
      pDAC->_Super = UI_Params;
 8003d0e:	462c      	mov	r4, r5
{
 8003d10:	460f      	mov	r7, r1
 8003d12:	4699      	mov	r9, r3
 8003d14:	9205      	str	r2, [sp, #20]
      pDAC->_Super = UI_Params;
 8003d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d18:	46f4      	mov	ip, lr
 8003d1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003d1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003d24:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d28:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 8003d2c:	4670      	mov	r0, lr
 8003d2e:	464b      	mov	r3, r9
 8003d30:	4642      	mov	r2, r8
 8003d32:	4639      	mov	r1, r7
 8003d34:	f000 f896 	bl	8003e64 <UI_Init>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 8003d38:	6830      	ldr	r0, [r6, #0]
    pMCP->_Super = UI_Params;

    UFCP_Init( & pUSART );
 8003d3a:	f8df b090 	ldr.w	fp, [pc, #144]	; 8003dcc <UI_TaskInit+0xdc>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 8003d3e:	f000 fa43 	bl	80041c8 <UI_DACInit>
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_I_A );
 8003d42:	6830      	ldr	r0, [r6, #0]
 8003d44:	2223      	movs	r2, #35	; 0x23
 8003d46:	2100      	movs	r1, #0
 8003d48:	f000 fa46 	bl	80041d8 <UI_SetDAC>
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );
 8003d4c:	6830      	ldr	r0, [r6, #0]
 8003d4e:	2224      	movs	r2, #36	; 0x24
 8003d50:	2101      	movs	r1, #1
 8003d52:	f000 fa41 	bl	80041d8 <UI_SetDAC>
    pMCP = &MCP_UI_Params;
 8003d56:	4b17      	ldr	r3, [pc, #92]	; (8003db4 <UI_TaskInit+0xc4>)
 8003d58:	f8ca 3000 	str.w	r3, [sl]
    pMCP->_Super = UI_Params;
 8003d5c:	469c      	mov	ip, r3
 8003d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003d6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d6e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    UFCP_Init( & pUSART );
 8003d72:	4658      	mov	r0, fp
 8003d74:	f005 fe74 	bl	8009a60 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 8003d78:	6833      	ldr	r3, [r6, #0]
 8003d7a:	9a05      	ldr	r2, [sp, #20]
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <UI_TaskInit+0xc8>)
 8003d80:	f8da 0000 	ldr.w	r0, [sl]
 8003d84:	9202      	str	r2, [sp, #8]
 8003d86:	4659      	mov	r1, fp
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	4a0c      	ldr	r2, [pc, #48]	; (8003dbc <UI_TaskInit+0xcc>)
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <UI_TaskInit+0xd0>)
 8003d8e:	f7ff f99b 	bl	80030c8 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8003d92:	9b04      	ldr	r3, [sp, #16]
 8003d94:	f8da 0000 	ldr.w	r0, [sl]
 8003d98:	9310      	str	r3, [sp, #64]	; 0x40
 8003d9a:	4642      	mov	r2, r8
 8003d9c:	464b      	mov	r3, r9
 8003d9e:	4639      	mov	r1, r7

}
 8003da0:	b007      	add	sp, #28
 8003da2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8003da6:	f000 b85d 	b.w	8003e64 <UI_Init>
 8003daa:	bf00      	nop
 8003dac:	20000464 	.word	0x20000464
 8003db0:	20000d28 	.word	0x20000d28
 8003db4:	20000c58 	.word	0x20000c58
 8003db8:	08009ca1 	.word	0x08009ca1
 8003dbc:	08009af5 	.word	0x08009af5
 8003dc0:	08009acd 	.word	0x08009acd
 8003dc4:	200000b4 	.word	0x200000b4
 8003dc8:	20000d2c 	.word	0x20000d2c
 8003dcc:	2000053c 	.word	0x2000053c

08003dd0 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8003dd0:	4a0d      	ldr	r2, [pc, #52]	; (8003e08 <UI_Scheduler+0x38>)
 8003dd2:	8813      	ldrh	r3, [r2, #0]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	b11b      	cbz	r3, 8003de0 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8003dd8:	8813      	ldrh	r3, [r2, #0]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8003de0:	4a0a      	ldr	r2, [pc, #40]	; (8003e0c <UI_Scheduler+0x3c>)
 8003de2:	8813      	ldrh	r3, [r2, #0]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d903      	bls.n	8003df2 <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8003dea:	8813      	ldrh	r3, [r2, #0]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8003df2:	4a07      	ldr	r2, [pc, #28]	; (8003e10 <UI_Scheduler+0x40>)
 8003df4:	8813      	ldrh	r3, [r2, #0]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d903      	bls.n	8003e04 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8003dfc:	8813      	ldrh	r3, [r2, #0]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	8013      	strh	r3, [r2, #0]
  }
}
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000d26 	.word	0x20000d26
 8003e0c:	20000d24 	.word	0x20000d24
 8003e10:	2000067e 	.word	0x2000067e

08003e14 <UI_DACUpdate>:

__weak void UI_DACUpdate(uint8_t bMotorNbr)
{
 8003e14:	b538      	push	{r3, r4, r5, lr}
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 8003e16:	4d06      	ldr	r5, [pc, #24]	; (8003e30 <UI_DACUpdate+0x1c>)
{
 8003e18:	4604      	mov	r4, r0
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 8003e1a:	6828      	ldr	r0, [r5, #0]
 8003e1c:	f000 f834 	bl	8003e88 <UI_GetSelectedMC>
 8003e20:	42a0      	cmp	r0, r4
 8003e22:	d000      	beq.n	8003e26 <UI_DACUpdate+0x12>
  {
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
  }
}
 8003e24:	bd38      	pop	{r3, r4, r5, pc}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 8003e26:	6828      	ldr	r0, [r5, #0]
}
 8003e28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 8003e2c:	f000 b9d0 	b.w	80041d0 <UI_DACExec>
 8003e30:	20000d28 	.word	0x20000d28

08003e34 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8003e34:	4b01      	ldr	r3, [pc, #4]	; (8003e3c <UI_SerialCommunicationTimeOutStop+0x8>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	801a      	strh	r2, [r3, #0]
}
 8003e3a:	4770      	bx	lr
 8003e3c:	20000d24 	.word	0x20000d24

08003e40 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8003e40:	4b01      	ldr	r3, [pc, #4]	; (8003e48 <UI_SerialCommunicationTimeOutStart+0x8>)
 8003e42:	224f      	movs	r2, #79	; 0x4f
 8003e44:	801a      	strh	r2, [r3, #0]
}
 8003e46:	4770      	bx	lr
 8003e48:	20000d24 	.word	0x20000d24

08003e4c <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8003e4c:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 8003e4e:	f7fd feef 	bl	8001c30 <MC_GetSTMStateMotor1>
 8003e52:	b918      	cbnz	r0, 8003e5c <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8003e54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 8003e58:	f7fd bede 	b.w	8001c18 <MC_StartMotor1>
}
 8003e5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8003e60:	f7fd bee0 	b.w	8001c24 <MC_StopMotor1>

08003e64 <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 8003e64:	e9c0 2308 	strd	r2, r3, [r0, #32]
  pHandle->bDriveNum = bMCNum;
 8003e68:	7701      	strb	r1, [r0, #28]
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8003e6a:	9b00      	ldr	r3, [sp, #0]
 8003e6c:	6283      	str	r3, [r0, #40]	; 0x28
  pHandle->bSelectedDrive = 0u;
 8003e6e:	2100      	movs	r1, #0
 8003e70:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
}
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop

08003e78 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8003e78:	7f03      	ldrb	r3, [r0, #28]
 8003e7a:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8003e7c:	bf86      	itte	hi
 8003e7e:	f880 102c 	strbhi.w	r1, [r0, #44]	; 0x2c
  bool retVal = true;
 8003e82:	2001      	movhi	r0, #1
    retVal = false;
 8003e84:	2000      	movls	r0, #0
  }
  return retVal;
}
 8003e86:	4770      	bx	lr

08003e88 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8003e88:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop

08003e90 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8003e90:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003e92:	6a04      	ldr	r4, [r0, #32]
 8003e94:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003e98:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 8003e9c:	4614      	mov	r4, r2
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003e9e:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
 8003ea0:	b083      	sub	sp, #12
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 8003ea6:	2988      	cmp	r1, #136	; 0x88
 8003ea8:	d846      	bhi.n	8003f38 <UI_SetReg+0xa8>
 8003eaa:	e8df f001 	tbb	[pc, r1]
 8003eae:	454f      	.short	0x454f
 8003eb0:	5a455345 	.word	0x5a455345
 8003eb4:	786c6660 	.word	0x786c6660
 8003eb8:	968a847e 	.word	0x968a847e
 8003ebc:	4545a29c 	.word	0x4545a29c
 8003ec0:	45454545 	.word	0x45454545
 8003ec4:	45454545 	.word	0x45454545
 8003ec8:	45454545 	.word	0x45454545
 8003ecc:	45454545 	.word	0x45454545
 8003ed0:	45454545 	.word	0x45454545
 8003ed4:	45454545 	.word	0x45454545
 8003ed8:	45454545 	.word	0x45454545
 8003edc:	45454545 	.word	0x45454545
 8003ee0:	45454545 	.word	0x45454545
 8003ee4:	45454545 	.word	0x45454545
 8003ee8:	45454545 	.word	0x45454545
 8003eec:	a8454545 	.word	0xa8454545
 8003ef0:	45454545 	.word	0x45454545
 8003ef4:	45454545 	.word	0x45454545
 8003ef8:	45454545 	.word	0x45454545
 8003efc:	45454545 	.word	0x45454545
 8003f00:	45454545 	.word	0x45454545
 8003f04:	45454545 	.word	0x45454545
 8003f08:	4545ae45 	.word	0x4545ae45
 8003f0c:	45454545 	.word	0x45454545
 8003f10:	45454545 	.word	0x45454545
 8003f14:	45454545 	.word	0x45454545
 8003f18:	45454545 	.word	0x45454545
 8003f1c:	45454545 	.word	0x45454545
 8003f20:	45454545 	.word	0x45454545
 8003f24:	45454545 	.word	0x45454545
 8003f28:	45454545 	.word	0x45454545
 8003f2c:	45454545 	.word	0x45454545
 8003f30:	45454545 	.word	0x45454545
 8003f34:	c1ba      	.short	0xc1ba
 8003f36:	48          	.byte	0x48
 8003f37:	00          	.byte	0x00
 8003f38:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8003f3a:	b003      	add	sp, #12
 8003f3c:	bd30      	pop	{r4, r5, pc}
      PID_SetKD(pMCT->pPosCtrl->PIDPosRegulator,(int16_t)wValue);
 8003f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f40:	b221      	sxth	r1, r4
 8003f42:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003f44:	f003 ff18 	bl	8007d78 <PID_SetKD>
  bool retVal = true;
 8003f48:	2001      	movs	r0, #1
    break;
 8003f4a:	e7f6      	b.n	8003f3a <UI_SetReg+0xaa>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8003f4c:	b2e1      	uxtb	r1, r4
 8003f4e:	f7ff ff93 	bl	8003e78 <UI_SelectMC>
    break;
 8003f52:	e7f2      	b.n	8003f3a <UI_SetReg+0xaa>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8003f54:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003f58:	d071      	beq.n	800403e <UI_SetReg+0x1ae>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8003f5a:	2c01      	cmp	r4, #1
 8003f5c:	d079      	beq.n	8004052 <UI_SetReg+0x1c2>
  bool retVal = true;
 8003f5e:	2001      	movs	r0, #1
 8003f60:	e7eb      	b.n	8003f3a <UI_SetReg+0xaa>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	b221      	sxth	r1, r4
 8003f66:	f003 fef5 	bl	8007d54 <PID_SetKP>
  bool retVal = true;
 8003f6a:	2001      	movs	r0, #1
    break;
 8003f6c:	e7e5      	b.n	8003f3a <UI_SetReg+0xaa>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	b221      	sxth	r1, r4
 8003f72:	f003 fef1 	bl	8007d58 <PID_SetKI>
  bool retVal = true;
 8003f76:	2001      	movs	r0, #1
    break;
 8003f78:	e7df      	b.n	8003f3a <UI_SetReg+0xaa>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	b221      	sxth	r1, r4
 8003f7e:	f003 fefb 	bl	8007d78 <PID_SetKD>
  bool retVal = true;
 8003f82:	2001      	movs	r0, #1
    break;
 8003f84:	e7d9      	b.n	8003f3a <UI_SetReg+0xaa>
      currComp = MCI_GetIqdref(pMCI);
 8003f86:	4628      	mov	r0, r5
 8003f88:	f7fd ff6e 	bl	8001e68 <MCI_GetIqdref>
 8003f8c:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8003f8e:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8003f92:	4628      	mov	r0, r5
 8003f94:	9901      	ldr	r1, [sp, #4]
 8003f96:	f7fd fe71 	bl	8001c7c <MCI_SetCurrentReferences>
  bool retVal = true;
 8003f9a:	2001      	movs	r0, #1
    break;
 8003f9c:	e7cd      	b.n	8003f3a <UI_SetReg+0xaa>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8003f9e:	6858      	ldr	r0, [r3, #4]
 8003fa0:	b221      	sxth	r1, r4
 8003fa2:	f003 fed7 	bl	8007d54 <PID_SetKP>
  bool retVal = true;
 8003fa6:	2001      	movs	r0, #1
    break;
 8003fa8:	e7c7      	b.n	8003f3a <UI_SetReg+0xaa>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8003faa:	6858      	ldr	r0, [r3, #4]
 8003fac:	b221      	sxth	r1, r4
 8003fae:	f003 fed3 	bl	8007d58 <PID_SetKI>
  bool retVal = true;
 8003fb2:	2001      	movs	r0, #1
    break;
 8003fb4:	e7c1      	b.n	8003f3a <UI_SetReg+0xaa>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8003fb6:	6858      	ldr	r0, [r3, #4]
 8003fb8:	b221      	sxth	r1, r4
 8003fba:	f003 fedd 	bl	8007d78 <PID_SetKD>
  bool retVal = true;
 8003fbe:	2001      	movs	r0, #1
    break;
 8003fc0:	e7bb      	b.n	8003f3a <UI_SetReg+0xaa>
      currComp = MCI_GetIqdref(pMCI);
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	f7fd ff50 	bl	8001e68 <MCI_GetIqdref>
 8003fc8:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8003fca:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8003fce:	4628      	mov	r0, r5
 8003fd0:	9901      	ldr	r1, [sp, #4]
 8003fd2:	f7fd fe53 	bl	8001c7c <MCI_SetCurrentReferences>
  bool retVal = true;
 8003fd6:	2001      	movs	r0, #1
    break;
 8003fd8:	e7af      	b.n	8003f3a <UI_SetReg+0xaa>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8003fda:	6898      	ldr	r0, [r3, #8]
 8003fdc:	b221      	sxth	r1, r4
 8003fde:	f003 feb9 	bl	8007d54 <PID_SetKP>
  bool retVal = true;
 8003fe2:	2001      	movs	r0, #1
    break;
 8003fe4:	e7a9      	b.n	8003f3a <UI_SetReg+0xaa>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8003fe6:	6898      	ldr	r0, [r3, #8]
 8003fe8:	b221      	sxth	r1, r4
 8003fea:	f003 feb5 	bl	8007d58 <PID_SetKI>
  bool retVal = true;
 8003fee:	2001      	movs	r0, #1
    break;
 8003ff0:	e7a3      	b.n	8003f3a <UI_SetReg+0xaa>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8003ff2:	6898      	ldr	r0, [r3, #8]
 8003ff4:	b221      	sxth	r1, r4
 8003ff6:	f003 febf 	bl	8007d78 <PID_SetKD>
  bool retVal = true;
 8003ffa:	2001      	movs	r0, #1
    break;
 8003ffc:	e79d      	b.n	8003f3a <UI_SetReg+0xaa>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8003ffe:	4628      	mov	r0, r5
 8004000:	b221      	sxth	r1, r4
 8004002:	f7fd ff5f 	bl	8001ec4 <MCI_SetIdref>
  bool retVal = true;
 8004006:	2001      	movs	r0, #1
    break;
 8004008:	e797      	b.n	8003f3a <UI_SetReg+0xaa>
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 800400a:	4917      	ldr	r1, [pc, #92]	; (8004068 <UI_SetReg+0x1d8>)
 800400c:	fb81 3104 	smull	r3, r1, r1, r4
 8004010:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8004014:	4628      	mov	r0, r5
 8004016:	2200      	movs	r2, #0
 8004018:	b209      	sxth	r1, r1
 800401a:	f7fd fe1b 	bl	8001c54 <MCI_ExecSpeedRamp>
  bool retVal = true;
 800401e:	2001      	movs	r0, #1
    break;
 8004020:	e78b      	b.n	8003f3a <UI_SetReg+0xaa>
      PID_SetKP(pMCT->pPosCtrl->PIDPosRegulator,(int16_t)wValue);
 8004022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004024:	b221      	sxth	r1, r4
 8004026:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004028:	f003 fe94 	bl	8007d54 <PID_SetKP>
  bool retVal = true;
 800402c:	2001      	movs	r0, #1
    break;
 800402e:	e784      	b.n	8003f3a <UI_SetReg+0xaa>
      PID_SetKI(pMCT->pPosCtrl->PIDPosRegulator,(int16_t)wValue);
 8004030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004032:	b221      	sxth	r1, r4
 8004034:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004036:	f003 fe8f 	bl	8007d58 <PID_SetKI>
  bool retVal = true;
 800403a:	2001      	movs	r0, #1
    break;
 800403c:	e77d      	b.n	8003f3a <UI_SetReg+0xaa>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 800403e:	4628      	mov	r0, r5
 8004040:	f7fd ff3c 	bl	8001ebc <MCI_GetTeref>
 8004044:	4622      	mov	r2, r4
 8004046:	4601      	mov	r1, r0
 8004048:	4628      	mov	r0, r5
 800404a:	f7fd fe0d 	bl	8001c68 <MCI_ExecTorqueRamp>
  bool retVal = true;
 800404e:	2001      	movs	r0, #1
 8004050:	e773      	b.n	8003f3a <UI_SetReg+0xaa>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8004052:	4628      	mov	r0, r5
 8004054:	f7fd feda 	bl	8001e0c <MCI_GetMecSpeedRefUnit>
 8004058:	2200      	movs	r2, #0
 800405a:	4601      	mov	r1, r0
 800405c:	4628      	mov	r0, r5
 800405e:	f7fd fdf9 	bl	8001c54 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8004062:	4620      	mov	r0, r4
 8004064:	e769      	b.n	8003f3a <UI_SetReg+0xaa>
 8004066:	bf00      	nop
 8004068:	2aaaaaab 	.word	0x2aaaaaab

0800406c <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 800406c:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800406e:	6a03      	ldr	r3, [r0, #32]
 8004070:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c

  switch (bCmdID)
 8004074:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004076:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 800407a:	290d      	cmp	r1, #13
 800407c:	d808      	bhi.n	8004090 <UI_ExecCmd+0x24>
 800407e:	e8df f001 	tbb	[pc, r1]
 8004082:	1419      	.short	0x1419
 8004084:	100e0e09 	.word	0x100e0e09
 8004088:	0728231e 	.word	0x0728231e
 800408c:	14070707 	.word	0x14070707
 8004090:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8004092:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 8004094:	4620      	mov	r0, r4
 8004096:	f7fd fe99 	bl	8001dcc <MCI_GetSTMState>
 800409a:	2806      	cmp	r0, #6
 800409c:	d01e      	beq.n	80040dc <UI_ExecCmd+0x70>
  bool retVal = true;
 800409e:	2001      	movs	r0, #1
}
 80040a0:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 80040a2:	4620      	mov	r0, r4
 80040a4:	f7fd fe92 	bl	8001dcc <MCI_GetSTMState>
 80040a8:	b120      	cbz	r0, 80040b4 <UI_ExecCmd+0x48>
        MCI_StopMotor(pMCI);
 80040aa:	4620      	mov	r0, r4
 80040ac:	f7fd fe3a 	bl	8001d24 <MCI_StopMotor>
  bool retVal = true;
 80040b0:	2001      	movs	r0, #1
}
 80040b2:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 80040b4:	4620      	mov	r0, r4
 80040b6:	f7fd fe2b 	bl	8001d10 <MCI_StartMotor>
  bool retVal = true;
 80040ba:	2001      	movs	r0, #1
}
 80040bc:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 80040be:	4620      	mov	r0, r4
 80040c0:	f7fd fe34 	bl	8001d2c <MCI_FaultAcknowledged>
  bool retVal = true;
 80040c4:	2001      	movs	r0, #1
}
 80040c6:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 80040c8:	4620      	mov	r0, r4
 80040ca:	f7fd fe33 	bl	8001d34 <MCI_EncoderAlign>
  bool retVal = true;
 80040ce:	2001      	movs	r0, #1
}
 80040d0:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 80040d2:	4620      	mov	r0, r4
 80040d4:	f7fd ff00 	bl	8001ed8 <MCI_Clear_Iqdref>
  bool retVal = true;
 80040d8:	2001      	movs	r0, #1
}
 80040da:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 80040dc:	4620      	mov	r0, r4
 80040de:	f7fd fe89 	bl	8001df4 <MCI_StopRamp>
  bool retVal = true;
 80040e2:	2001      	movs	r0, #1
}
 80040e4:	bd10      	pop	{r4, pc}
 80040e6:	bf00      	nop

080040e8 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 80040e8:	b508      	push	{r3, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 80040ea:	4b07      	ldr	r3, [pc, #28]	; (8004108 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80040ec:	f890 c02c 	ldrb.w	ip, [r0, #44]	; 0x2c
 80040f0:	6a00      	ldr	r0, [r0, #32]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 80040f2:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 80040f6:	fb83 c301 	smull	ip, r3, r3, r1
 80040fa:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 80040fe:	b209      	sxth	r1, r1
 8004100:	f7fd fda8 	bl	8001c54 <MCI_ExecSpeedRamp>
  return true;
}
 8004104:	2001      	movs	r0, #1
 8004106:	bd08      	pop	{r3, pc}
 8004108:	2aaaaaab 	.word	0x2aaaaaab

0800410c <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 800410c:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800410e:	6a03      	ldr	r3, [r0, #32]
 8004110:	f890 c02c 	ldrb.w	ip, [r0, #44]	; 0x2c

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8004114:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8004118:	f7fd fda6 	bl	8001c68 <MCI_ExecTorqueRamp>
  return true;
}
 800411c:	2001      	movs	r0, #1
 800411e:	bd08      	pop	{r3, pc}

08004120 <UI_ExecPositionCmd>:
  * @param  fTargetPosition: final position value.
  * @param  fDuration: duration alllowed to complete the positioning (expressed in seconds).
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_ExecPositionCmd(UI_Handle_t *pHandle, float fTargetPosition, float fDuration)
{
 8004120:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004122:	6a03      	ldr	r3, [r0, #32]
 8004124:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c

  /* Call MCI Position Command */
  MCI_ExecPositionCommand(pMCI,fTargetPosition,fDuration);
 8004128:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800412c:	f7fd fdb0 	bl	8001c90 <MCI_ExecPositionCommand>
  return true;
}
 8004130:	2001      	movs	r0, #1
 8004132:	bd08      	pop	{r3, pc}

08004134 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8004134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004136:	4617      	mov	r7, r2
 8004138:	461e      	mov	r6, r3
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800413a:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 800413e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004144:	695c      	ldr	r4, [r3, #20]
  if (pRevupCtrl)
 8004146:	b18c      	cbz	r4, 800416c <UI_GetRevupData+0x38>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8004148:	4620      	mov	r0, r4
 800414a:	460d      	mov	r5, r1
 800414c:	f005 f80c 	bl	8009168 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8004150:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8004152:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8004154:	4620      	mov	r0, r4
 8004156:	f005 f80d 	bl	8009174 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 800415a:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800415c:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 800415e:	4620      	mov	r0, r4
 8004160:	f005 f810 	bl	8009184 <RUC_GetPhaseFinalTorque>
 8004164:	9b06      	ldr	r3, [sp, #24]
 8004166:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 8004168:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 800416a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 800416c:	4620      	mov	r0, r4
}
 800416e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004170 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8004170:	b570      	push	{r4, r5, r6, lr}
 8004172:	461d      	mov	r5, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8004174:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8004178:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800417a:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800417c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
{
 8004180:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8004184:	6958      	ldr	r0, [r3, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8004186:	9001      	str	r0, [sp, #4]
{
 8004188:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 800418a:	f004 ffdb 	bl	8009144 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 800418e:	9801      	ldr	r0, [sp, #4]
 8004190:	462a      	mov	r2, r5
 8004192:	4621      	mov	r1, r4
 8004194:	f004 ffdc 	bl	8009150 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8004198:	9801      	ldr	r0, [sp, #4]
 800419a:	4632      	mov	r2, r6
 800419c:	4621      	mov	r1, r4
 800419e:	f004 ffdd 	bl	800915c <RUC_SetPhaseFinalTorque>
  return true;
}
 80041a2:	2001      	movs	r0, #1
 80041a4:	b002      	add	sp, #8
 80041a6:	bd70      	pop	{r4, r5, r6, pc}

080041a8 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 80041a8:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80041aa:	f890 c02c 	ldrb.w	ip, [r0, #44]	; 0x2c
 80041ae:	6a03      	ldr	r3, [r0, #32]
  qd_t currComp;
  currComp.q = hIqRef;
 80041b0:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 80041b4:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 80041b8:	9901      	ldr	r1, [sp, #4]
 80041ba:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
}
 80041be:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 80041c0:	f7fd bd5c 	b.w	8001c7c <MCI_SetCurrentReferences>

080041c4 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 80041c4:	2000      	movs	r0, #0
 80041c6:	4770      	bx	lr

080041c8 <UI_DACInit>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
__weak void UI_DACInit(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACInit)
 80041c8:	6943      	ldr	r3, [r0, #20]
 80041ca:	b103      	cbz	r3, 80041ce <UI_DACInit+0x6>
  {
	  pHandle->pFct_DACInit(pHandle);
 80041cc:	4718      	bx	r3
  }
}
 80041ce:	4770      	bx	lr

080041d0 <UI_DACExec>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
void UI_DACExec(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACExec)
 80041d0:	6983      	ldr	r3, [r0, #24]
 80041d2:	b103      	cbz	r3, 80041d6 <UI_DACExec+0x6>
  {
    pHandle->pFct_DACExec(pHandle);
 80041d4:	4718      	bx	r3
  }
}
 80041d6:	4770      	bx	lr

080041d8 <UI_SetDAC>:
  * @retval none.
  */
void UI_SetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                         MC_Protocol_REG_t bVariable)
{
  if (pHandle->pFctDACSetChannelConfig)
 80041d8:	6843      	ldr	r3, [r0, #4]
 80041da:	b103      	cbz	r3, 80041de <UI_SetDAC+0x6>
  {
	  pHandle->pFctDACSetChannelConfig(pHandle, bChannel, bVariable);
 80041dc:	4718      	bx	r3
  }
}
 80041de:	4770      	bx	lr

080041e0 <UI_GetDAC>:
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t UI_GetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
  if (pHandle->pFctDACGetChannelConfig)
 80041e0:	6883      	ldr	r3, [r0, #8]
 80041e2:	b103      	cbz	r3, 80041e6 <UI_GetDAC+0x6>
  {
    retVal = pHandle->pFctDACGetChannelConfig(pHandle, bChannel);
 80041e4:	4718      	bx	r3
  }
  return retVal;
}
 80041e6:	2089      	movs	r0, #137	; 0x89
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop

080041ec <UI_GetReg>:
{
 80041ec:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80041ee:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80041f0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80041f4:	6a05      	ldr	r5, [r0, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80041f6:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80041fa:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
{
 80041fe:	b08f      	sub	sp, #60	; 0x3c
  if ( success != (bool *) 0 )
 8004200:	2a00      	cmp	r2, #0
 8004202:	f000 8092 	beq.w	800432a <UI_GetReg+0x13e>
    *success = true;
 8004206:	f04f 0c01 	mov.w	ip, #1
 800420a:	f882 c000 	strb.w	ip, [r2]
  switch (bRegID)
 800420e:	2988      	cmp	r1, #136	; 0x88
 8004210:	f200 8121 	bhi.w	8004456 <UI_GetReg+0x26a>
 8004214:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004218:	015b0161 	.word	0x015b0161
 800421c:	01940198 	.word	0x01940198
 8004220:	02250229 	.word	0x02250229
 8004224:	021d0221 	.word	0x021d0221
 8004228:	02140122 	.word	0x02140122
 800422c:	020c0210 	.word	0x020c0210
 8004230:	0203011a 	.word	0x0203011a
 8004234:	01fb01ff 	.word	0x01fb01ff
 8004238:	011f011f 	.word	0x011f011f
 800423c:	011f011f 	.word	0x011f011f
 8004240:	011f011f 	.word	0x011f011f
 8004244:	011f011f 	.word	0x011f011f
 8004248:	01f7011f 	.word	0x01f7011f
 800424c:	01ef01f3 	.word	0x01ef01f3
 8004250:	01e701eb 	.word	0x01e701eb
 8004254:	012701e0 	.word	0x012701e0
 8004258:	011f012c 	.word	0x011f012c
 800425c:	01cf01d4 	.word	0x01cf01d4
 8004260:	01c501ca 	.word	0x01c501ca
 8004264:	012701ab 	.word	0x012701ab
 8004268:	0122012c 	.word	0x0122012c
 800426c:	01db011a 	.word	0x01db011a
 8004270:	01a101a6 	.word	0x01a101a6
 8004274:	0147019c 	.word	0x0147019c
 8004278:	011f0133 	.word	0x011f0133
 800427c:	011f011f 	.word	0x011f011f
 8004280:	011f011f 	.word	0x011f011f
 8004284:	011f011f 	.word	0x011f011f
 8004288:	011f011f 	.word	0x011f011f
 800428c:	011f011f 	.word	0x011f011f
 8004290:	018e011f 	.word	0x018e011f
 8004294:	01810188 	.word	0x01810188
 8004298:	011a017a 	.word	0x011a017a
 800429c:	011f011f 	.word	0x011f011f
 80042a0:	011f011f 	.word	0x011f011f
 80042a4:	011f011f 	.word	0x011f011f
 80042a8:	011f011f 	.word	0x011f011f
 80042ac:	011f011f 	.word	0x011f011f
 80042b0:	011f011f 	.word	0x011f011f
 80042b4:	011f011f 	.word	0x011f011f
 80042b8:	011f011f 	.word	0x011f011f
 80042bc:	011f011f 	.word	0x011f011f
 80042c0:	011f011f 	.word	0x011f011f
 80042c4:	011f011f 	.word	0x011f011f
 80042c8:	011f011f 	.word	0x011f011f
 80042cc:	0168011f 	.word	0x0168011f
 80042d0:	011f011f 	.word	0x011f011f
 80042d4:	011f011f 	.word	0x011f011f
 80042d8:	011f011f 	.word	0x011f011f
 80042dc:	011f011f 	.word	0x011f011f
 80042e0:	011f011f 	.word	0x011f011f
 80042e4:	011f011f 	.word	0x011f011f
 80042e8:	011f011f 	.word	0x011f011f
 80042ec:	011f011f 	.word	0x011f011f
 80042f0:	011f011f 	.word	0x011f011f
 80042f4:	02300234 	.word	0x02300234
 80042f8:	011f0166 	.word	0x011f0166
 80042fc:	01310164 	.word	0x01310164
 8004300:	011f011f 	.word	0x011f011f
 8004304:	011f011f 	.word	0x011f011f
 8004308:	011f011f 	.word	0x011f011f
 800430c:	011f011f 	.word	0x011f011f
 8004310:	011f011f 	.word	0x011f011f
 8004314:	011f011f 	.word	0x011f011f
 8004318:	0117011f 	.word	0x0117011f
 800431c:	01b0011f 	.word	0x01b0011f
 8004320:	01b701be 	.word	0x01b701be
 8004324:	02070175 	.word	0x02070175
 8004328:	0218      	.short	0x0218
 800432a:	2988      	cmp	r1, #136	; 0x88
 800432c:	f200 808b 	bhi.w	8004446 <UI_GetReg+0x25a>
 8004330:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004334:	00cd00d3 	.word	0x00cd00d3
 8004338:	0106010a 	.word	0x0106010a
 800433c:	0197019b 	.word	0x0197019b
 8004340:	018f0193 	.word	0x018f0193
 8004344:	01860094 	.word	0x01860094
 8004348:	017e0182 	.word	0x017e0182
 800434c:	0175008c 	.word	0x0175008c
 8004350:	016d0171 	.word	0x016d0171
 8004354:	00890089 	.word	0x00890089
 8004358:	00890089 	.word	0x00890089
 800435c:	00890089 	.word	0x00890089
 8004360:	00890089 	.word	0x00890089
 8004364:	01690089 	.word	0x01690089
 8004368:	01610165 	.word	0x01610165
 800436c:	0159015d 	.word	0x0159015d
 8004370:	00990152 	.word	0x00990152
 8004374:	0089009e 	.word	0x0089009e
 8004378:	01410146 	.word	0x01410146
 800437c:	0137013c 	.word	0x0137013c
 8004380:	0099011d 	.word	0x0099011d
 8004384:	0094009e 	.word	0x0094009e
 8004388:	014d008c 	.word	0x014d008c
 800438c:	01130118 	.word	0x01130118
 8004390:	00b9010e 	.word	0x00b9010e
 8004394:	008900a5 	.word	0x008900a5
 8004398:	00890089 	.word	0x00890089
 800439c:	00890089 	.word	0x00890089
 80043a0:	00890089 	.word	0x00890089
 80043a4:	00890089 	.word	0x00890089
 80043a8:	00890089 	.word	0x00890089
 80043ac:	01000089 	.word	0x01000089
 80043b0:	00f300fa 	.word	0x00f300fa
 80043b4:	008c00ec 	.word	0x008c00ec
 80043b8:	00890089 	.word	0x00890089
 80043bc:	00890089 	.word	0x00890089
 80043c0:	00890089 	.word	0x00890089
 80043c4:	00890089 	.word	0x00890089
 80043c8:	00890089 	.word	0x00890089
 80043cc:	00890089 	.word	0x00890089
 80043d0:	00890089 	.word	0x00890089
 80043d4:	00890089 	.word	0x00890089
 80043d8:	00890089 	.word	0x00890089
 80043dc:	00890089 	.word	0x00890089
 80043e0:	00890089 	.word	0x00890089
 80043e4:	00890089 	.word	0x00890089
 80043e8:	00da0089 	.word	0x00da0089
 80043ec:	00890089 	.word	0x00890089
 80043f0:	00890089 	.word	0x00890089
 80043f4:	00890089 	.word	0x00890089
 80043f8:	00890089 	.word	0x00890089
 80043fc:	00890089 	.word	0x00890089
 8004400:	00890089 	.word	0x00890089
 8004404:	00890089 	.word	0x00890089
 8004408:	00890089 	.word	0x00890089
 800440c:	00890089 	.word	0x00890089
 8004410:	01a201a6 	.word	0x01a201a6
 8004414:	008900d8 	.word	0x008900d8
 8004418:	00a300d6 	.word	0x00a300d6
 800441c:	00890089 	.word	0x00890089
 8004420:	00890089 	.word	0x00890089
 8004424:	00890089 	.word	0x00890089
 8004428:	00890089 	.word	0x00890089
 800442c:	00890089 	.word	0x00890089
 8004430:	00890089 	.word	0x00890089
 8004434:	00890089 	.word	0x00890089
 8004438:	01220089 	.word	0x01220089
 800443c:	01290130 	.word	0x01290130
 8004440:	017900e7 	.word	0x017900e7
 8004444:	018a      	.short	0x018a
        bRetVal = (uint32_t) 0;
 8004446:	2000      	movs	r0, #0
}
 8004448:	b00f      	add	sp, #60	; 0x3c
 800444a:	bd30      	pop	{r4, r5, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 800444c:	4628      	mov	r0, r5
 800444e:	f7fd fd0b 	bl	8001e68 <MCI_GetIqdref>
 8004452:	1400      	asrs	r0, r0, #16
    break;
 8004454:	e7f8      	b.n	8004448 <UI_GetReg+0x25c>
        *success = false;
 8004456:	2000      	movs	r0, #0
 8004458:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 800445a:	e7f5      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIqdref(pMCI).q;
 800445c:	4628      	mov	r0, r5
 800445e:	f7fd fd03 	bl	8001e68 <MCI_GetIqdref>
 8004462:	b200      	sxth	r0, r0
    break;
 8004464:	e7f0      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIqd(pMCI).q;
 8004466:	4628      	mov	r0, r5
 8004468:	f7fd fcf0 	bl	8001e4c <MCI_GetIqd>
 800446c:	b200      	sxth	r0, r0
    break;
 800446e:	e7eb      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIqd(pMCI).d;
 8004470:	4628      	mov	r0, r5
 8004472:	f7fd fceb 	bl	8001e4c <MCI_GetIqd>
 8004476:	1400      	asrs	r0, r0, #16
    break;
 8004478:	e7e6      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = PWBDID;
 800447a:	2035      	movs	r0, #53	; 0x35
 800447c:	e7e4      	b.n	8004448 <UI_GetReg+0x25c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800447e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004484:	0f1a      	lsrs	r2, r3, #28
 8004486:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004488:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800448c:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800448e:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004492:	f240 80fe 	bls.w	8004692 <UI_GetReg+0x4a6>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004496:	2b01      	cmp	r3, #1
 8004498:	d8d5      	bhi.n	8004446 <UI_GetReg+0x25a>
        pSPD = pMCT->pSpeedSensorAux;
 800449a:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800449c:	2800      	cmp	r0, #0
 800449e:	d0d2      	beq.n	8004446 <UI_GetReg+0x25a>
        bRetVal = SPD_GetS16Speed(pSPD);
 80044a0:	f004 fec0 	bl	8009224 <SPD_GetS16Speed>
 80044a4:	e7d0      	b.n	8004448 <UI_GetReg+0x25c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80044a6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80044a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80044ac:	0f1a      	lsrs	r2, r3, #28
 80044ae:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80044b0:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80044b4:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80044b6:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80044ba:	f240 80e5 	bls.w	8004688 <UI_GetReg+0x49c>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d8c1      	bhi.n	8004446 <UI_GetReg+0x25a>
        pSPD = pMCT->pSpeedSensorAux;
 80044c2:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d0be      	beq.n	8004446 <UI_GetReg+0x25a>
        bRetVal = SPD_GetElAngle(pSPD);
 80044c8:	f004 fe68 	bl	800919c <SPD_GetElAngle>
 80044cc:	e7bc      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80044ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 80044d0:	b00f      	add	sp, #60	; 0x3c
 80044d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80044d6:	f005 b827 	b.w	8009528 <STM_GetFaultState>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 80044da:	f7ff fcd5 	bl	8003e88 <UI_GetSelectedMC>
    break;
 80044de:	e7b3      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = CTRBDID;
 80044e0:	201d      	movs	r0, #29
 80044e2:	e7b1      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)(MC_UID);
 80044e4:	4870      	ldr	r0, [pc, #448]	; (80046a8 <UI_GetReg+0x4bc>)
 80044e6:	e7af      	b.n	8004448 <UI_GetReg+0x25c>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80044e8:	4628      	mov	r0, r5
 80044ea:	f7fd fc79 	bl	8001de0 <MCI_GetControlMode>
 80044ee:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80044f0:	4628      	mov	r0, r5
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80044f2:	f000 80d3 	beq.w	800469c <UI_GetReg+0x4b0>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 80044f6:	f7fd fc89 	bl	8001e0c <MCI_GetMecSpeedRefUnit>
 80044fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80044fe:	0040      	lsls	r0, r0, #1
 8004500:	e7a2      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t) PID_GetKP( pMCT->pPosCtrl->PIDPosRegulator );
 8004502:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004504:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004506:	f003 fc29 	bl	8007d5c <PID_GetKP>
      break;
 800450a:	e79d      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 800450c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800450e:	f004 ff4d 	bl	80093ac <STC_GetMinAppNegativeMecSpeedUnit>
 8004512:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004516:	0040      	lsls	r0, r0, #1
    break;
 8004518:	e796      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 800451a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800451c:	f004 ff44 	bl	80093a8 <STC_GetMaxAppPositiveMecSpeedUnit>
 8004520:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004524:	0040      	lsls	r0, r0, #1
    break;
 8004526:	e78f      	b.n	8004448 <UI_GetReg+0x25c>
      if (pHandle->pFctDACGetUserChannelValue)
 8004528:	6903      	ldr	r3, [r0, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d08b      	beq.n	8004446 <UI_GetReg+0x25a>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 1);
 800452e:	2101      	movs	r1, #1
 8004530:	4798      	blx	r3
 8004532:	e789      	b.n	8004448 <UI_GetReg+0x25c>
      if (pHandle->pFctDACGetUserChannelValue)
 8004534:	6903      	ldr	r3, [r0, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d085      	beq.n	8004446 <UI_GetReg+0x25a>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 0);
 800453a:	2100      	movs	r1, #0
 800453c:	4798      	blx	r3
 800453e:	e783      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8004540:	4628      	mov	r0, r5
 8004542:	f7fd fc4d 	bl	8001de0 <MCI_GetControlMode>
    break;
 8004546:	e77f      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8004548:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800454a:	f004 ffdf 	bl	800950c <STM_GetState>
	break;
 800454e:	e77b      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8004550:	4628      	mov	r0, r5
 8004552:	f7fd fca5 	bl	8001ea0 <MCI_GetValphabeta>
 8004556:	1400      	asrs	r0, r0, #16
    break;
 8004558:	e776      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 800455a:	4628      	mov	r0, r5
 800455c:	f7fd fca0 	bl	8001ea0 <MCI_GetValphabeta>
 8004560:	b200      	sxth	r0, r0
    break;
 8004562:	e771      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = MCI_GetVqd(pMCI).d;
 8004564:	4628      	mov	r0, r5
 8004566:	f7fd fc8d 	bl	8001e84 <MCI_GetVqd>
 800456a:	1400      	asrs	r0, r0, #16
    break;
 800456c:	e76c      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 800456e:	4628      	mov	r0, r5
 8004570:	f7fd fc5e 	bl	8001e30 <MCI_GetIalphabeta>
 8004574:	1400      	asrs	r0, r0, #16
    break;
 8004576:	e767      	b.n	8004448 <UI_GetReg+0x25c>
        ReadVal.Float_Val = TC_GetCurrentPosition(pMCT->pPosCtrl);
 8004578:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800457a:	f005 fa4d 	bl	8009a18 <TC_GetCurrentPosition>
 800457e:	ed8d 0a01 	vstr	s0, [sp, #4]
        bRetVal = ReadVal.U32_Val;
 8004582:	9801      	ldr	r0, [sp, #4]
      break;
 8004584:	e760      	b.n	8004448 <UI_GetReg+0x25c>
        ReadVal.Float_Val = TC_GetMoveDuration(pMCT->pPosCtrl);
 8004586:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004588:	f005 fa62 	bl	8009a50 <TC_GetMoveDuration>
 800458c:	ed8d 0a01 	vstr	s0, [sp, #4]
        bRetVal = ReadVal.U32_Val;
 8004590:	9801      	ldr	r0, [sp, #4]
      break;
 8004592:	e759      	b.n	8004448 <UI_GetReg+0x25c>
        ReadVal.Float_Val = TC_GetTargetPosition(pMCT->pPosCtrl);
 8004594:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004596:	f005 fa57 	bl	8009a48 <TC_GetTargetPosition>
 800459a:	ed8d 0a01 	vstr	s0, [sp, #4]
        bRetVal = ReadVal.U32_Val;
 800459e:	9801      	ldr	r0, [sp, #4]
      break;
 80045a0:	e752      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 80045a2:	4628      	mov	r0, r5
 80045a4:	f7fd fc44 	bl	8001e30 <MCI_GetIalphabeta>
 80045a8:	b200      	sxth	r0, r0
    break;
 80045aa:	e74d      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIab(pMCI).b;
 80045ac:	4628      	mov	r0, r5
 80045ae:	f7fd fc31 	bl	8001e14 <MCI_GetIab>
 80045b2:	1400      	asrs	r0, r0, #16
    break;
 80045b4:	e748      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIab(pMCI).a;
 80045b6:	4628      	mov	r0, r5
 80045b8:	f7fd fc2c 	bl	8001e14 <MCI_GetIab>
 80045bc:	b200      	sxth	r0, r0
    break;
 80045be:	e743      	b.n	8004448 <UI_GetReg+0x25c>
      if (pMCT->pRevupCtrl)
 80045c0:	6960      	ldr	r0, [r4, #20]
 80045c2:	2800      	cmp	r0, #0
 80045c4:	f43f af3f 	beq.w	8004446 <UI_GetReg+0x25a>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 80045c8:	f004 fde4 	bl	8009194 <RUC_GetNumberOfPhases>
 80045cc:	e73c      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = MCI_GetVqd(pMCI).q;
 80045ce:	4628      	mov	r0, r5
 80045d0:	f7fd fc58 	bl	8001e84 <MCI_GetVqd>
 80045d4:	b200      	sxth	r0, r0
    break;
 80045d6:	e737      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 80045d8:	4628      	mov	r0, r5
 80045da:	f7fd fc0f 	bl	8001dfc <MCI_GetAvrgMecSpeedUnit>
 80045de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80045e2:	0040      	lsls	r0, r0, #1
    break;
 80045e4:	e730      	b.n	8004448 <UI_GetReg+0x25c>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH1);
 80045e6:	2101      	movs	r1, #1
 80045e8:	f7ff fdfa 	bl	80041e0 <UI_GetDAC>
    break;
 80045ec:	e72c      	b.n	8004448 <UI_GetReg+0x25c>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH0);
 80045ee:	2100      	movs	r1, #0
 80045f0:	f7ff fdf6 	bl	80041e0 <UI_GetDAC>
    break;
 80045f4:	e728      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 80045f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80045f8:	f003 fb4a 	bl	8007c90 <MPM_GetAvrgElMotorPowerW>
    break;
 80045fc:	e724      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 80045fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004600:	f003 fb8a 	bl	8007d18 <NTC_GetAvTemp_C>
    break;
 8004604:	e720      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8004606:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004608:	f003 f8fe 	bl	8007808 <VBS_GetAvBusVoltage_V>
    break;
 800460c:	e71c      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 800460e:	68a0      	ldr	r0, [r4, #8]
 8004610:	f003 fbb4 	bl	8007d7c <PID_GetKD>
    break;
 8004614:	e718      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8004616:	68a0      	ldr	r0, [r4, #8]
 8004618:	f003 fba4 	bl	8007d64 <PID_GetKI>
    break;
 800461c:	e714      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 800461e:	68a0      	ldr	r0, [r4, #8]
 8004620:	f003 fb9c 	bl	8007d5c <PID_GetKP>
    break;
 8004624:	e710      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t) PID_GetKI( pMCT->pPosCtrl->PIDPosRegulator );
 8004626:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004628:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800462a:	f003 fb9b 	bl	8007d64 <PID_GetKI>
      break;
 800462e:	e70b      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8004630:	6860      	ldr	r0, [r4, #4]
 8004632:	f003 fba3 	bl	8007d7c <PID_GetKD>
    break;
 8004636:	e707      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8004638:	6860      	ldr	r0, [r4, #4]
 800463a:	f003 fb93 	bl	8007d64 <PID_GetKI>
    break;
 800463e:	e703      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8004640:	6860      	ldr	r0, [r4, #4]
 8004642:	f003 fb8b 	bl	8007d5c <PID_GetKP>
    break;
 8004646:	e6ff      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t) PID_GetKD( pMCT->pPosCtrl->PIDPosRegulator );
 8004648:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800464a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800464c:	f003 fb96 	bl	8007d7c <PID_GetKD>
      break;
 8004650:	e6fa      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8004652:	6820      	ldr	r0, [r4, #0]
 8004654:	f003 fb92 	bl	8007d7c <PID_GetKD>
    break;
 8004658:	e6f6      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 800465a:	6820      	ldr	r0, [r4, #0]
 800465c:	f003 fb82 	bl	8007d64 <PID_GetKI>
    break;
 8004660:	e6f2      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8004662:	6820      	ldr	r0, [r4, #0]
 8004664:	f003 fb7a 	bl	8007d5c <PID_GetKP>
    break;
 8004668:	e6ee      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 800466a:	4628      	mov	r0, r5
 800466c:	f7fd fbce 	bl	8001e0c <MCI_GetMecSpeedRefUnit>
 8004670:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004674:	0040      	lsls	r0, r0, #1
    break;
 8004676:	e6e7      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8004678:	6820      	ldr	r0, [r4, #0]
 800467a:	f003 fb7b 	bl	8007d74 <PID_GetKIDivisor>
    break;
 800467e:	e6e3      	b.n	8004448 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8004680:	6820      	ldr	r0, [r4, #0]
 8004682:	f003 fb75 	bl	8007d70 <PID_GetKPDivisor>
    break;
 8004686:	e6df      	b.n	8004448 <UI_GetReg+0x25c>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004688:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 800468a:	69a0      	ldr	r0, [r4, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800468c:	f63f af1a 	bhi.w	80044c4 <UI_GetReg+0x2d8>
 8004690:	e717      	b.n	80044c2 <UI_GetReg+0x2d6>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004692:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8004694:	69a0      	ldr	r0, [r4, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004696:	f63f af01 	bhi.w	800449c <UI_GetReg+0x2b0>
 800469a:	e6fe      	b.n	800449a <UI_GetReg+0x2ae>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 800469c:	f7fd fba2 	bl	8001de4 <MCI_GetLastRampFinalSpeed>
 80046a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80046a4:	0040      	lsls	r0, r0, #1
 80046a6:	e6cf      	b.n	8004448 <UI_GetReg+0x25c>
 80046a8:	34a6847a 	.word	0x34a6847a

080046ac <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80046ac:	4a03      	ldr	r2, [pc, #12]	; (80046bc <SystemInit+0x10>)
 80046ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80046b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046ba:	4770      	bx	lr
 80046bc:	e000ed00 	.word	0xe000ed00

080046c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046c0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80046c2:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <HAL_InitTick+0x40>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	b90b      	cbnz	r3, 80046cc <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80046c8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80046ca:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80046cc:	490d      	ldr	r1, [pc, #52]	; (8004704 <HAL_InitTick+0x44>)
 80046ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046d2:	4605      	mov	r5, r0
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	6808      	ldr	r0, [r1, #0]
 80046da:	fbb0 f0f3 	udiv	r0, r0, r3
 80046de:	f000 ff91 	bl	8005604 <HAL_SYSTICK_Config>
 80046e2:	4604      	mov	r4, r0
 80046e4:	2800      	cmp	r0, #0
 80046e6:	d1ef      	bne.n	80046c8 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046e8:	2d0f      	cmp	r5, #15
 80046ea:	d8ed      	bhi.n	80046c8 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046ec:	4602      	mov	r2, r0
 80046ee:	4629      	mov	r1, r5
 80046f0:	f04f 30ff 	mov.w	r0, #4294967295
 80046f4:	f000 ff3a 	bl	800556c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80046f8:	4b03      	ldr	r3, [pc, #12]	; (8004708 <HAL_InitTick+0x48>)
 80046fa:	4620      	mov	r0, r4
 80046fc:	601d      	str	r5, [r3, #0]
}
 80046fe:	bd38      	pop	{r3, r4, r5, pc}
 8004700:	20000684 	.word	0x20000684
 8004704:	20000680 	.word	0x20000680
 8004708:	20000688 	.word	0x20000688

0800470c <HAL_Init>:
{
 800470c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800470e:	2003      	movs	r0, #3
 8004710:	f000 ff1a 	bl	8005548 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004714:	2004      	movs	r0, #4
 8004716:	f7ff ffd3 	bl	80046c0 <HAL_InitTick>
 800471a:	b110      	cbz	r0, 8004722 <HAL_Init+0x16>
    status = HAL_ERROR;
 800471c:	2401      	movs	r4, #1
}
 800471e:	4620      	mov	r0, r4
 8004720:	bd10      	pop	{r4, pc}
 8004722:	4604      	mov	r4, r0
    HAL_MspInit();
 8004724:	f7fe ff7e 	bl	8003624 <HAL_MspInit>
}
 8004728:	4620      	mov	r0, r4
 800472a:	bd10      	pop	{r4, pc}

0800472c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800472c:	4a03      	ldr	r2, [pc, #12]	; (800473c <HAL_IncTick+0x10>)
 800472e:	4904      	ldr	r1, [pc, #16]	; (8004740 <HAL_IncTick+0x14>)
 8004730:	6813      	ldr	r3, [r2, #0]
 8004732:	6809      	ldr	r1, [r1, #0]
 8004734:	440b      	add	r3, r1
 8004736:	6013      	str	r3, [r2, #0]
}
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000d30 	.word	0x20000d30
 8004740:	20000684 	.word	0x20000684

08004744 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004744:	4b01      	ldr	r3, [pc, #4]	; (800474c <HAL_GetTick+0x8>)
 8004746:	6818      	ldr	r0, [r3, #0]
}
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	20000d30 	.word	0x20000d30

08004750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004750:	b538      	push	{r3, r4, r5, lr}
 8004752:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004754:	f7ff fff6 	bl	8004744 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004758:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800475a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800475c:	d002      	beq.n	8004764 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800475e:	4b04      	ldr	r3, [pc, #16]	; (8004770 <HAL_Delay+0x20>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004764:	f7ff ffee 	bl	8004744 <HAL_GetTick>
 8004768:	1b43      	subs	r3, r0, r5
 800476a:	42a3      	cmp	r3, r4
 800476c:	d3fa      	bcc.n	8004764 <HAL_Delay+0x14>
  {
  }
}
 800476e:	bd38      	pop	{r3, r4, r5, pc}
 8004770:	20000684 	.word	0x20000684

08004774 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004774:	b530      	push	{r4, r5, lr}
 8004776:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004778:	2300      	movs	r3, #0
 800477a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800477c:	2800      	cmp	r0, #0
 800477e:	f000 80c9 	beq.w	8004914 <HAL_ADC_Init+0x1a0>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004782:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004784:	4604      	mov	r4, r0
 8004786:	2d00      	cmp	r5, #0
 8004788:	f000 8092 	beq.w	80048b0 <HAL_ADC_Init+0x13c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800478c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800478e:	6893      	ldr	r3, [r2, #8]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	d505      	bpl.n	80047a0 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004794:	6893      	ldr	r3, [r2, #8]
 8004796:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800479a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800479e:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80047a0:	6893      	ldr	r3, [r2, #8]
 80047a2:	00dd      	lsls	r5, r3, #3
 80047a4:	d419      	bmi.n	80047da <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047a6:	4b70      	ldr	r3, [pc, #448]	; (8004968 <HAL_ADC_Init+0x1f4>)
 80047a8:	4870      	ldr	r0, [pc, #448]	; (800496c <HAL_ADC_Init+0x1f8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80047ac:	6891      	ldr	r1, [r2, #8]
 80047ae:	099b      	lsrs	r3, r3, #6
 80047b0:	fba0 0303 	umull	r0, r3, r0, r3
 80047b4:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 80047b8:	099b      	lsrs	r3, r3, #6
 80047ba:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80047be:	3301      	adds	r3, #1
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80047c6:	6091      	str	r1, [r2, #8]
 80047c8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80047ca:	9b01      	ldr	r3, [sp, #4]
 80047cc:	b12b      	cbz	r3, 80047da <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80047ce:	9b01      	ldr	r3, [sp, #4]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80047d4:	9b01      	ldr	r3, [sp, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f9      	bne.n	80047ce <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80047da:	6893      	ldr	r3, [r2, #8]
 80047dc:	00d8      	lsls	r0, r3, #3
 80047de:	d459      	bmi.n	8004894 <HAL_ADC_Init+0x120>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047e0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80047e2:	f043 0310 	orr.w	r3, r3, #16
 80047e6:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047e8:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80047ea:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ec:	4303      	orrs	r3, r0
 80047ee:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047f0:	6893      	ldr	r3, [r2, #8]
 80047f2:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80047f8:	d153      	bne.n	80048a2 <HAL_ADC_Init+0x12e>
 80047fa:	06d9      	lsls	r1, r3, #27
 80047fc:	d451      	bmi.n	80048a2 <HAL_ADC_Init+0x12e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004800:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004804:	f043 0302 	orr.w	r3, r3, #2
 8004808:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800480a:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800480c:	07db      	lsls	r3, r3, #31
 800480e:	d40e      	bmi.n	800482e <HAL_ADC_Init+0xba>
 8004810:	4b57      	ldr	r3, [pc, #348]	; (8004970 <HAL_ADC_Init+0x1fc>)
 8004812:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8004816:	6889      	ldr	r1, [r1, #8]
 8004818:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800481a:	430b      	orrs	r3, r1
 800481c:	07dd      	lsls	r5, r3, #31
 800481e:	d406      	bmi.n	800482e <HAL_ADC_Init+0xba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004820:	4954      	ldr	r1, [pc, #336]	; (8004974 <HAL_ADC_Init+0x200>)
 8004822:	6865      	ldr	r5, [r4, #4]
 8004824:	688b      	ldr	r3, [r1, #8]
 8004826:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800482a:	432b      	orrs	r3, r5
 800482c:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 800482e:	68e5      	ldr	r5, [r4, #12]
 8004830:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004832:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8004836:	432b      	orrs	r3, r5
 8004838:	68a5      	ldr	r5, [r4, #8]
 800483a:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800483c:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800483e:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8004840:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004844:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004848:	d05f      	beq.n	800490a <HAL_ADC_Init+0x196>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800484a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800484c:	b121      	cbz	r1, 8004858 <HAL_ADC_Init+0xe4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 800484e:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004850:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004854:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004856:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004858:	68d5      	ldr	r5, [r2, #12]
 800485a:	4947      	ldr	r1, [pc, #284]	; (8004978 <HAL_ADC_Init+0x204>)
 800485c:	4029      	ands	r1, r5
 800485e:	430b      	orrs	r3, r1
 8004860:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004862:	6913      	ldr	r3, [r2, #16]
 8004864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004866:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800486a:	430b      	orrs	r3, r1
 800486c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800486e:	6893      	ldr	r3, [r2, #8]
 8004870:	0759      	lsls	r1, r3, #29
 8004872:	d523      	bpl.n	80048bc <HAL_ADC_Init+0x148>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004874:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004876:	6963      	ldr	r3, [r4, #20]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d04e      	beq.n	800491a <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800487c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800487e:	f023 030f 	bic.w	r3, r3, #15
 8004882:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004884:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004890:	b003      	add	sp, #12
 8004892:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004894:	6893      	ldr	r3, [r2, #8]
 8004896:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800489a:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800489e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80048a0:	d0ab      	beq.n	80047fa <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80048a4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048a6:	f043 0310 	orr.w	r3, r3, #16
 80048aa:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80048ac:	b003      	add	sp, #12
 80048ae:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 80048b0:	f7fe fed2 	bl	8003658 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80048b4:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80048b6:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80048ba:	e767      	b.n	800478c <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80048bc:	6893      	ldr	r3, [r2, #8]
 80048be:	071b      	lsls	r3, r3, #28
 80048c0:	d4d9      	bmi.n	8004876 <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80048c2:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80048c4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80048c8:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80048ca:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80048ce:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80048d0:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80048d4:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80048d8:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 80048da:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80048dc:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80048de:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80048e0:	bb19      	cbnz	r1, 800492a <HAL_ADC_Init+0x1b6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80048e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e6:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80048e8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80048ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80048f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80048f4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 80048f8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d021      	beq.n	8004944 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004900:	6913      	ldr	r3, [r2, #16]
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	6113      	str	r3, [r2, #16]
 8004908:	e7b5      	b.n	8004876 <HAL_ADC_Init+0x102>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800490a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800490c:	3901      	subs	r1, #1
 800490e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8004912:	e79a      	b.n	800484a <HAL_ADC_Init+0xd6>
    return HAL_ERROR;
 8004914:	2001      	movs	r0, #1
}
 8004916:	b003      	add	sp, #12
 8004918:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800491a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800491c:	6a23      	ldr	r3, [r4, #32]
 800491e:	f021 010f 	bic.w	r1, r1, #15
 8004922:	3b01      	subs	r3, #1
 8004924:	430b      	orrs	r3, r1
 8004926:	6313      	str	r3, [r2, #48]	; 0x30
 8004928:	e7ac      	b.n	8004884 <HAL_ADC_Init+0x110>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800492a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004930:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004934:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004938:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800493c:	430b      	orrs	r3, r1
 800493e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004942:	e7d9      	b.n	80048f8 <HAL_ADC_Init+0x184>
        MODIFY_REG(hadc->Instance->CFGR2,
 8004944:	6911      	ldr	r1, [r2, #16]
 8004946:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004948:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800494a:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 800494e:	f021 0104 	bic.w	r1, r1, #4
 8004952:	432b      	orrs	r3, r5
 8004954:	430b      	orrs	r3, r1
 8004956:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004958:	430b      	orrs	r3, r1
 800495a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800495c:	430b      	orrs	r3, r1
 800495e:	f043 0301 	orr.w	r3, r3, #1
 8004962:	6113      	str	r3, [r2, #16]
 8004964:	e787      	b.n	8004876 <HAL_ADC_Init+0x102>
 8004966:	bf00      	nop
 8004968:	20000680 	.word	0x20000680
 800496c:	053e2d63 	.word	0x053e2d63
 8004970:	50000100 	.word	0x50000100
 8004974:	50000300 	.word	0x50000300
 8004978:	fff04007 	.word	0xfff04007

0800497c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800497c:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800497e:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8004982:	b083      	sub	sp, #12
 8004984:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004986:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004988:	f04f 0000 	mov.w	r0, #0
 800498c:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800498e:	f000 8145 	beq.w	8004c1c <HAL_ADC_ConfigChannel+0x2a0>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004992:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8004994:	2001      	movs	r0, #1
 8004996:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800499a:	68a2      	ldr	r2, [r4, #8]
 800499c:	0755      	lsls	r5, r2, #29
 800499e:	d44c      	bmi.n	8004a3a <HAL_ADC_ConfigChannel+0xbe>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80049a0:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(*preg,
 80049a2:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80049a4:	ea4f 1e90 	mov.w	lr, r0, lsr #6
 80049a8:	f00e 0e0c 	and.w	lr, lr, #12
 80049ac:	f104 0c30 	add.w	ip, r4, #48	; 0x30
  MODIFY_REG(*preg,
 80049b0:	f000 001f 	and.w	r0, r0, #31
 80049b4:	f85e 500c 	ldr.w	r5, [lr, ip]
 80049b8:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80049bc:	261f      	movs	r6, #31
 80049be:	4082      	lsls	r2, r0
 80049c0:	fa06 f000 	lsl.w	r0, r6, r0
 80049c4:	ea25 0000 	bic.w	r0, r5, r0
 80049c8:	4302      	orrs	r2, r0
 80049ca:	f84e 200c 	str.w	r2, [lr, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049ce:	68a2      	ldr	r2, [r4, #8]
 80049d0:	0750      	lsls	r0, r2, #29
 80049d2:	d543      	bpl.n	8004a5c <HAL_ADC_ConfigChannel+0xe0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049d4:	68a2      	ldr	r2, [r4, #8]
 80049d6:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049d8:	68a2      	ldr	r2, [r4, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049da:	f012 0f01 	tst.w	r2, #1
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80049de:	4602      	mov	r2, r0
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049e0:	d10c      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x80>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80049e2:	4dc2      	ldr	r5, [pc, #776]	; (8004cec <HAL_ADC_ConfigChannel+0x370>)
 80049e4:	68ce      	ldr	r6, [r1, #12]
 80049e6:	42ae      	cmp	r6, r5
 80049e8:	f000 80c1 	beq.w	8004b6e <HAL_ADC_ConfigChannel+0x1f2>
    CLEAR_BIT(ADCx->DIFSEL,
 80049ec:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 80049f0:	f3c0 0012 	ubfx	r0, r0, #0, #19
 80049f4:	ea21 0100 	bic.w	r1, r1, r0
 80049f8:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80049fc:	49bc      	ldr	r1, [pc, #752]	; (8004cf0 <HAL_ADC_ConfigChannel+0x374>)
 80049fe:	420a      	tst	r2, r1
 8004a00:	d02a      	beq.n	8004a58 <HAL_ADC_ConfigChannel+0xdc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004a02:	49bc      	ldr	r1, [pc, #752]	; (8004cf4 <HAL_ADC_ConfigChannel+0x378>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004a04:	4dbc      	ldr	r5, [pc, #752]	; (8004cf8 <HAL_ADC_ConfigChannel+0x37c>)
 8004a06:	6888      	ldr	r0, [r1, #8]
 8004a08:	42aa      	cmp	r2, r5
 8004a0a:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8004a0e:	d01d      	beq.n	8004a4c <HAL_ADC_ConfigChannel+0xd0>
 8004a10:	4dba      	ldr	r5, [pc, #744]	; (8004cfc <HAL_ADC_ConfigChannel+0x380>)
 8004a12:	42aa      	cmp	r2, r5
 8004a14:	d01a      	beq.n	8004a4c <HAL_ADC_ConfigChannel+0xd0>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a16:	4dba      	ldr	r5, [pc, #744]	; (8004d00 <HAL_ADC_ConfigChannel+0x384>)
 8004a18:	42aa      	cmp	r2, r5
 8004a1a:	f040 8131 	bne.w	8004c80 <HAL_ADC_ConfigChannel+0x304>
 8004a1e:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8004a22:	d119      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0xdc>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a24:	4ab7      	ldr	r2, [pc, #732]	; (8004d04 <HAL_ADC_ConfigChannel+0x388>)
 8004a26:	4294      	cmp	r4, r2
 8004a28:	d016      	beq.n	8004a58 <HAL_ADC_ConfigChannel+0xdc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004a2a:	688a      	ldr	r2, [r1, #8]
 8004a2c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004a30:	4316      	orrs	r6, r2
 8004a32:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 8004a36:	608e      	str	r6, [r1, #8]
}
 8004a38:	e003      	b.n	8004a42 <HAL_ADC_ConfigChannel+0xc6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a3c:	f042 0220 	orr.w	r2, r2, #32
 8004a40:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004a48:	b003      	add	sp, #12
 8004a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a4c:	0202      	lsls	r2, r0, #8
 8004a4e:	d403      	bmi.n	8004a58 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a50:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8004a54:	f000 80f5 	beq.w	8004c42 <HAL_ADC_ConfigChannel+0x2c6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a58:	2000      	movs	r0, #0
 8004a5a:	e7f2      	b.n	8004a42 <HAL_ADC_ConfigChannel+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004a5c:	68a2      	ldr	r2, [r4, #8]
 8004a5e:	f012 0208 	ands.w	r2, r2, #8
 8004a62:	f040 8082 	bne.w	8004b6a <HAL_ADC_ConfigChannel+0x1ee>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004a66:	6888      	ldr	r0, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004a68:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004a6a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8004a6e:	f000 811b 	beq.w	8004ca8 <HAL_ADC_ConfigChannel+0x32c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004a72:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 8004a76:	f104 0714 	add.w	r7, r4, #20
 8004a7a:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8004a7e:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8004a82:	f85c 5007 	ldr.w	r5, [ip, r7]
 8004a86:	f04f 0e07 	mov.w	lr, #7
 8004a8a:	40b0      	lsls	r0, r6
 8004a8c:	fa0e f606 	lsl.w	r6, lr, r6
 8004a90:	ea25 0506 	bic.w	r5, r5, r6
 8004a94:	4328      	orrs	r0, r5
 8004a96:	f84c 0007 	str.w	r0, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004a9a:	6960      	ldr	r0, [r4, #20]
 8004a9c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004aa0:	6160      	str	r0, [r4, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004aa2:	690f      	ldr	r7, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004aa4:	68e5      	ldr	r5, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004aa6:	2f04      	cmp	r7, #4
 8004aa8:	d02f      	beq.n	8004b0a <HAL_ADC_ConfigChannel+0x18e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004aaa:	f104 0060 	add.w	r0, r4, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004aae:	f3c5 05c1 	ubfx	r5, r5, #3, #2
  MODIFY_REG(*preg,
 8004ab2:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
 8004ab6:	f8df c25c 	ldr.w	ip, [pc, #604]	; 8004d14 <HAL_ADC_ConfigChannel+0x398>
 8004aba:	006e      	lsls	r6, r5, #1
 8004abc:	680d      	ldr	r5, [r1, #0]
 8004abe:	ea0e 0c0c 	and.w	ip, lr, ip
 8004ac2:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004ac6:	ea45 0c0c 	orr.w	ip, r5, ip
 8004aca:	694d      	ldr	r5, [r1, #20]
 8004acc:	40b5      	lsls	r5, r6
 8004ace:	ea45 050c 	orr.w	r5, r5, ip
 8004ad2:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8004ad6:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ada:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8004adc:	698e      	ldr	r6, [r1, #24]
 8004ade:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
 8004ae2:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8004ae6:	4335      	orrs	r5, r6
 8004ae8:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004aec:	7f0d      	ldrb	r5, [r1, #28]
 8004aee:	690e      	ldr	r6, [r1, #16]
 8004af0:	2d01      	cmp	r5, #1
  MODIFY_REG(*preg,
 8004af2:	f850 5026 	ldr.w	r5, [r0, r6, lsl #2]
 8004af6:	bf08      	it	eq
 8004af8:	f04f 7200 	moveq.w	r2, #33554432	; 0x2000000
 8004afc:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8004b00:	432a      	orrs	r2, r5
 8004b02:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 8004b06:	6808      	ldr	r0, [r1, #0]
}
 8004b08:	e766      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x5c>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b0a:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004b0c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004b0e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004b10:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b14:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b18:	2d00      	cmp	r5, #0
 8004b1a:	f040 80fd 	bne.w	8004d18 <HAL_ADC_ConfigChannel+0x39c>
 8004b1e:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b22:	42aa      	cmp	r2, r5
 8004b24:	f000 8171 	beq.w	8004e0a <HAL_ADC_ConfigChannel+0x48e>
 8004b28:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b2a:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b2c:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b30:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004b34:	f104 0764 	add.w	r7, r4, #100	; 0x64
 8004b38:	42ae      	cmp	r6, r5
 8004b3a:	f000 8154 	beq.w	8004de6 <HAL_ADC_ConfigChannel+0x46a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004b3e:	6896      	ldr	r6, [r2, #8]
 8004b40:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b42:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b46:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004b4a:	42ae      	cmp	r6, r5
 8004b4c:	f000 8139 	beq.w	8004dc2 <HAL_ADC_ConfigChannel+0x446>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004b50:	68d6      	ldr	r6, [r2, #12]
 8004b52:	68d6      	ldr	r6, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b54:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b58:	f3c6 6284 	ubfx	r2, r6, #26, #5
 8004b5c:	4295      	cmp	r5, r2
 8004b5e:	f47f af3b 	bne.w	80049d8 <HAL_ADC_ConfigChannel+0x5c>
  MODIFY_REG(*preg,
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b68:	603a      	str	r2, [r7, #0]
 8004b6a:	6808      	ldr	r0, [r1, #0]
}
 8004b6c:	e734      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x5c>
    SET_BIT(ADCx->DIFSEL,
 8004b6e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004b72:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8004b76:	432a      	orrs	r2, r5
 8004b78:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b7c:	2d00      	cmp	r5, #0
 8004b7e:	d050      	beq.n	8004c22 <HAL_ADC_ConfigChannel+0x2a6>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b80:	fa90 f2a0 	rbit	r2, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b84:	2a00      	cmp	r2, #0
 8004b86:	f000 80f8 	beq.w	8004d7a <HAL_ADC_ConfigChannel+0x3fe>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004b8a:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b8e:	3201      	adds	r2, #1
 8004b90:	f002 021f 	and.w	r2, r2, #31
 8004b94:	2a09      	cmp	r2, #9
 8004b96:	f240 80f0 	bls.w	8004d7a <HAL_ADC_ConfigChannel+0x3fe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9a:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8004b9e:	2a00      	cmp	r2, #0
 8004ba0:	f000 814f 	beq.w	8004e42 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8004ba4:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ba8:	3201      	adds	r2, #1
 8004baa:	0692      	lsls	r2, r2, #26
 8004bac:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004bb4:	2d00      	cmp	r5, #0
 8004bb6:	f000 8149 	beq.w	8004e4c <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8004bba:	fab5 f585 	clz	r5, r5
 8004bbe:	3501      	adds	r5, #1
 8004bc0:	f005 051f 	and.w	r5, r5, #31
 8004bc4:	2601      	movs	r6, #1
 8004bc6:	fa06 f505 	lsl.w	r5, r6, r5
 8004bca:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bcc:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	f000 8139 	beq.w	8004e48 <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 8004bd6:	fab0 f080 	clz	r0, r0
 8004bda:	1c42      	adds	r2, r0, #1
 8004bdc:	f002 001f 	and.w	r0, r2, #31
 8004be0:	f06f 061d 	mvn.w	r6, #29
 8004be4:	2203      	movs	r2, #3
 8004be6:	fb12 6200 	smlabb	r2, r2, r0, r6
 8004bea:	0512      	lsls	r2, r2, #20
 8004bec:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bf0:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004bf2:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 8004bf4:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004bf6:	f006 0604 	and.w	r6, r6, #4
 8004bfa:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 8004bfe:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004c02:	fa00 f702 	lsl.w	r7, r0, r2
 8004c06:	f04f 0c07 	mov.w	ip, #7
 8004c0a:	5970      	ldr	r0, [r6, r5]
 8004c0c:	fa0c f202 	lsl.w	r2, ip, r2
 8004c10:	ea20 0202 	bic.w	r2, r0, r2
 8004c14:	433a      	orrs	r2, r7
 8004c16:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c18:	680a      	ldr	r2, [r1, #0]
}
 8004c1a:	e6ef      	b.n	80049fc <HAL_ADC_ConfigChannel+0x80>
  __HAL_LOCK(hadc);
 8004c1c:	2002      	movs	r0, #2
}
 8004c1e:	b003      	add	sp, #12
 8004c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c22:	0e80      	lsrs	r0, r0, #26
 8004c24:	3001      	adds	r0, #1
 8004c26:	f000 061f 	and.w	r6, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c2a:	2e09      	cmp	r6, #9
 8004c2c:	d850      	bhi.n	8004cd0 <HAL_ADC_ConfigChannel+0x354>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c2e:	0685      	lsls	r5, r0, #26
 8004c30:	2201      	movs	r2, #1
 8004c32:	40b2      	lsls	r2, r6
 8004c34:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004c38:	4315      	orrs	r5, r2
 8004c3a:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8004c3e:	0512      	lsls	r2, r2, #20
 8004c40:	e7d6      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0x274>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004c42:	492c      	ldr	r1, [pc, #176]	; (8004cf4 <HAL_ADC_ConfigChannel+0x378>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c44:	4830      	ldr	r0, [pc, #192]	; (8004d08 <HAL_ADC_ConfigChannel+0x38c>)
 8004c46:	688a      	ldr	r2, [r1, #8]
 8004c48:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004c4c:	4316      	orrs	r6, r2
 8004c4e:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8004c52:	608e      	str	r6, [r1, #8]
 8004c54:	6802      	ldr	r2, [r0, #0]
 8004c56:	492d      	ldr	r1, [pc, #180]	; (8004d0c <HAL_ADC_ConfigChannel+0x390>)
 8004c58:	0992      	lsrs	r2, r2, #6
 8004c5a:	fba1 1202 	umull	r1, r2, r1, r2
 8004c5e:	0992      	lsrs	r2, r2, #6
 8004c60:	3201      	adds	r2, #1
 8004c62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004c66:	0092      	lsls	r2, r2, #2
 8004c68:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004c6a:	9a01      	ldr	r2, [sp, #4]
 8004c6c:	2a00      	cmp	r2, #0
 8004c6e:	f43f aef3 	beq.w	8004a58 <HAL_ADC_ConfigChannel+0xdc>
            wait_loop_index--;
 8004c72:	9a01      	ldr	r2, [sp, #4]
 8004c74:	3a01      	subs	r2, #1
 8004c76:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004c78:	9a01      	ldr	r2, [sp, #4]
 8004c7a:	2a00      	cmp	r2, #0
 8004c7c:	d1f9      	bne.n	8004c72 <HAL_ADC_ConfigChannel+0x2f6>
 8004c7e:	e6eb      	b.n	8004a58 <HAL_ADC_ConfigChannel+0xdc>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004c80:	4d23      	ldr	r5, [pc, #140]	; (8004d10 <HAL_ADC_ConfigChannel+0x394>)
 8004c82:	42aa      	cmp	r2, r5
 8004c84:	f47f aee8 	bne.w	8004a58 <HAL_ADC_ConfigChannel+0xdc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c88:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8004c8c:	f47f aee4 	bne.w	8004a58 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_VREFINT_INSTANCE(hadc))
 8004c90:	4a1c      	ldr	r2, [pc, #112]	; (8004d04 <HAL_ADC_ConfigChannel+0x388>)
 8004c92:	4294      	cmp	r4, r2
 8004c94:	f43f aee0 	beq.w	8004a58 <HAL_ADC_ConfigChannel+0xdc>
 8004c98:	688a      	ldr	r2, [r1, #8]
 8004c9a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004c9e:	4332      	orrs	r2, r6
 8004ca0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004ca4:	608a      	str	r2, [r1, #8]
}
 8004ca6:	e6cc      	b.n	8004a42 <HAL_ADC_ConfigChannel+0xc6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004ca8:	0df5      	lsrs	r5, r6, #23
 8004caa:	f104 0014 	add.w	r0, r4, #20
 8004cae:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8004cb2:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8004cb6:	582f      	ldr	r7, [r5, r0]
 8004cb8:	f04f 0c07 	mov.w	ip, #7
 8004cbc:	fa0c f606 	lsl.w	r6, ip, r6
 8004cc0:	ea27 0606 	bic.w	r6, r7, r6
 8004cc4:	502e      	str	r6, [r5, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004cc6:	6960      	ldr	r0, [r4, #20]
 8004cc8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004ccc:	6160      	str	r0, [r4, #20]
}
 8004cce:	e6e8      	b.n	8004aa2 <HAL_ADC_ConfigChannel+0x126>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cd0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8004cd4:	0685      	lsls	r5, r0, #26
 8004cd6:	3a1e      	subs	r2, #30
 8004cd8:	2001      	movs	r0, #1
 8004cda:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004cde:	0512      	lsls	r2, r2, #20
 8004ce0:	fa00 f606 	lsl.w	r6, r0, r6
 8004ce4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004ce8:	4335      	orrs	r5, r6
 8004cea:	e781      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0x274>
 8004cec:	407f0000 	.word	0x407f0000
 8004cf0:	80080000 	.word	0x80080000
 8004cf4:	50000300 	.word	0x50000300
 8004cf8:	c3210000 	.word	0xc3210000
 8004cfc:	90c00010 	.word	0x90c00010
 8004d00:	c7520000 	.word	0xc7520000
 8004d04:	50000100 	.word	0x50000100
 8004d08:	20000680 	.word	0x20000680
 8004d0c:	053e2d63 	.word	0x053e2d63
 8004d10:	cb840000 	.word	0xcb840000
 8004d14:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d18:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004d1c:	b11d      	cbz	r5, 8004d26 <HAL_ADC_ConfigChannel+0x3aa>
  return __builtin_clz(value);
 8004d1e:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d22:	42aa      	cmp	r2, r5
 8004d24:	d071      	beq.n	8004e0a <HAL_ADC_ConfigChannel+0x48e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d28:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d2a:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d2e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004d32:	f104 0764 	add.w	r7, r4, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d36:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004d3a:	b11d      	cbz	r5, 8004d44 <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 8004d3c:	fab5 f585 	clz	r5, r5
 8004d40:	42ae      	cmp	r6, r5
 8004d42:	d050      	beq.n	8004de6 <HAL_ADC_ConfigChannel+0x46a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d44:	6895      	ldr	r5, [r2, #8]
 8004d46:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d48:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d4c:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d50:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004d54:	b11d      	cbz	r5, 8004d5e <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 8004d56:	fab5 f585 	clz	r5, r5
 8004d5a:	42ae      	cmp	r6, r5
 8004d5c:	d031      	beq.n	8004dc2 <HAL_ADC_ConfigChannel+0x446>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d5e:	68d5      	ldr	r5, [r2, #12]
 8004d60:	68d5      	ldr	r5, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d62:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d66:	f3c5 6284 	ubfx	r2, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004d6e:	2d00      	cmp	r5, #0
 8004d70:	f43f ae32 	beq.w	80049d8 <HAL_ADC_ConfigChannel+0x5c>
  return __builtin_clz(value);
 8004d74:	fab5 f585 	clz	r5, r5
 8004d78:	e6f0      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8004d7e:	2a00      	cmp	r2, #0
 8004d80:	d059      	beq.n	8004e36 <HAL_ADC_ConfigChannel+0x4ba>
  return __builtin_clz(value);
 8004d82:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d86:	3201      	adds	r2, #1
 8004d88:	0692      	lsls	r2, r2, #26
 8004d8a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004d92:	2d00      	cmp	r5, #0
 8004d94:	d04d      	beq.n	8004e32 <HAL_ADC_ConfigChannel+0x4b6>
  return __builtin_clz(value);
 8004d96:	fab5 f585 	clz	r5, r5
 8004d9a:	3501      	adds	r5, #1
 8004d9c:	f005 051f 	and.w	r5, r5, #31
 8004da0:	2601      	movs	r6, #1
 8004da2:	fa06 f505 	lsl.w	r5, r6, r5
 8004da6:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da8:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004dac:	2800      	cmp	r0, #0
 8004dae:	d045      	beq.n	8004e3c <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 8004db0:	fab0 f080 	clz	r0, r0
 8004db4:	3001      	adds	r0, #1
 8004db6:	f000 001f 	and.w	r0, r0, #31
 8004dba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004dbe:	0502      	lsls	r2, r0, #20
 8004dc0:	e716      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0x274>
  MODIFY_REG(*preg,
 8004dc2:	6838      	ldr	r0, [r7, #0]
 8004dc4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004dc8:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004dca:	68d0      	ldr	r0, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004dcc:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dce:	f102 070c 	add.w	r7, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004dd2:	68d2      	ldr	r2, [r2, #12]
 8004dd4:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004dd8:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ddc:	2d00      	cmp	r5, #0
 8004dde:	d1c4      	bne.n	8004d6a <HAL_ADC_ConfigChannel+0x3ee>
 8004de0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004de4:	e6ba      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x1e0>
  MODIFY_REG(*preg,
 8004de6:	6838      	ldr	r0, [r7, #0]
 8004de8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004dec:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004dee:	6890      	ldr	r0, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004df0:	6808      	ldr	r0, [r1, #0]
 8004df2:	6896      	ldr	r6, [r2, #8]
 8004df4:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004df8:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004dfc:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e00:	2d00      	cmp	r5, #0
 8004e02:	d1a5      	bne.n	8004d50 <HAL_ADC_ConfigChannel+0x3d4>
 8004e04:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004e08:	e69f      	b.n	8004b4a <HAL_ADC_ConfigChannel+0x1ce>
  MODIFY_REG(*preg,
 8004e0a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004e0c:	4622      	mov	r2, r4
 8004e0e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004e12:	f842 0f60 	str.w	r0, [r2, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e16:	6e60      	ldr	r0, [r4, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e18:	6808      	ldr	r0, [r1, #0]
 8004e1a:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8004e1c:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e20:	f104 0764 	add.w	r7, r4, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e24:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e28:	2d00      	cmp	r5, #0
 8004e2a:	d184      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x3ba>
 8004e2c:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004e30:	e682      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x1bc>
 8004e32:	2502      	movs	r5, #2
 8004e34:	e7b7      	b.n	8004da6 <HAL_ADC_ConfigChannel+0x42a>
 8004e36:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004e3a:	e7a8      	b.n	8004d8e <HAL_ADC_ConfigChannel+0x412>
 8004e3c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004e40:	e6d6      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0x274>
 8004e42:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004e46:	e6b3      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0x234>
 8004e48:	4a01      	ldr	r2, [pc, #4]	; (8004e50 <HAL_ADC_ConfigChannel+0x4d4>)
 8004e4a:	e6d1      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0x274>
 8004e4c:	2502      	movs	r5, #2
 8004e4e:	e6bc      	b.n	8004bca <HAL_ADC_ConfigChannel+0x24e>
 8004e50:	fe500000 	.word	0xfe500000

08004e54 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e58:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8004e5c:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8004e5e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004e60:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8004e62:	9201      	str	r2, [sp, #4]
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004e64:	6942      	ldr	r2, [r0, #20]
  __HAL_LOCK(hadc);
 8004e66:	f000 8166 	beq.w	8005136 <HAL_ADCEx_InjectedConfigChannel+0x2e2>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004e70:	b1e2      	cbz	r2, 8004eac <HAL_ADCEx_InjectedConfigChannel+0x58>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8004e72:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d019      	beq.n	8004eac <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004e78:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8004e7a:	2c00      	cmp	r4, #0
 8004e7c:	f040 8119 	bne.w	80050b2 <HAL_ADCEx_InjectedConfigChannel+0x25e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004e80:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004e82:	2a00      	cmp	r2, #0
 8004e84:	f000 8222 	beq.w	80052cc <HAL_ADCEx_InjectedConfigChannel+0x478>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004e88:	1e5d      	subs	r5, r3, #1
 8004e8a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004e8c:	f002 037c 	and.w	r3, r2, #124	; 0x7c
 8004e90:	432b      	orrs	r3, r5
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004e92:	4323      	orrs	r3, r4
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004e94:	e9d1 2400 	ldrd	r2, r4, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004e98:	6685      	str	r5, [r0, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004e9a:	f004 051f 	and.w	r5, r4, #31
 8004e9e:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8004ea2:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004ea4:	431c      	orrs	r4, r3
 8004ea6:	6644      	str	r4, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004ea8:	6803      	ldr	r3, [r0, #0]
 8004eaa:	e005      	b.n	8004eb8 <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004eac:	684b      	ldr	r3, [r1, #4]
 8004eae:	2b09      	cmp	r3, #9
 8004eb0:	f000 80eb 	beq.w	800508a <HAL_ADCEx_InjectedConfigChannel+0x236>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004eb4:	680a      	ldr	r2, [r1, #0]
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004eb6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004eb8:	689c      	ldr	r4, [r3, #8]
 8004eba:	0727      	lsls	r7, r4, #28
 8004ebc:	d410      	bmi.n	8004ee0 <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004ebe:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8004ec2:	2c00      	cmp	r4, #0
 8004ec4:	f040 80d8 	bne.w	8005078 <HAL_ADCEx_InjectedConfigChannel+0x224>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004ec8:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8004ecc:	68dd      	ldr	r5, [r3, #12]
 8004ece:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8004ed2:	0524      	lsls	r4, r4, #20
 8004ed4:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8004ed8:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8004edc:	432c      	orrs	r4, r5
 8004ede:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ee0:	689c      	ldr	r4, [r3, #8]
 8004ee2:	f014 0404 	ands.w	r4, r4, #4
 8004ee6:	d058      	beq.n	8004f9a <HAL_ADCEx_InjectedConfigChannel+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ee8:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004eea:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004eec:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004eee:	07ee      	lsls	r6, r5, #31
 8004ef0:	d40c      	bmi.n	8004f0c <HAL_ADCEx_InjectedConfigChannel+0xb8>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004ef2:	4dac      	ldr	r5, [pc, #688]	; (80051a4 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8004ef4:	68ce      	ldr	r6, [r1, #12]
 8004ef6:	42ae      	cmp	r6, r5
 8004ef8:	f000 8100 	beq.w	80050fc <HAL_ADCEx_InjectedConfigChannel+0x2a8>
    CLEAR_BIT(ADCx->DIFSEL,
 8004efc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004f00:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8004f04:	ea21 0105 	bic.w	r1, r1, r5
 8004f08:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004f0c:	49a6      	ldr	r1, [pc, #664]	; (80051a8 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8004f0e:	420a      	tst	r2, r1
 8004f10:	d019      	beq.n	8004f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004f12:	4ea6      	ldr	r6, [pc, #664]	; (80051ac <HAL_ADCEx_InjectedConfigChannel+0x358>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004f14:	4da6      	ldr	r5, [pc, #664]	; (80051b0 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8004f16:	68b1      	ldr	r1, [r6, #8]
 8004f18:	42aa      	cmp	r2, r5
 8004f1a:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8004f1e:	d019      	beq.n	8004f54 <HAL_ADCEx_InjectedConfigChannel+0x100>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004f20:	4da4      	ldr	r5, [pc, #656]	; (80051b4 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8004f22:	42aa      	cmp	r2, r5
 8004f24:	d016      	beq.n	8004f54 <HAL_ADCEx_InjectedConfigChannel+0x100>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004f26:	4da4      	ldr	r5, [pc, #656]	; (80051b8 <HAL_ADCEx_InjectedConfigChannel+0x364>)
 8004f28:	42aa      	cmp	r2, r5
 8004f2a:	f040 810d 	bne.w	8005148 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f2e:	01cd      	lsls	r5, r1, #7
 8004f30:	d409      	bmi.n	8004f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f32:	4aa2      	ldr	r2, [pc, #648]	; (80051bc <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d006      	beq.n	8004f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004f38:	68b3      	ldr	r3, [r6, #8]
 8004f3a:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004f3e:	431f      	orrs	r7, r3
 8004f40:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8004f44:	60b7      	str	r7, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f46:	2300      	movs	r3, #0
 8004f48:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	b002      	add	sp, #8
 8004f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f54:	020a      	lsls	r2, r1, #8
 8004f56:	d4f6      	bmi.n	8004f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f5c:	d1f3      	bne.n	8004f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
 8004f5e:	4a93      	ldr	r2, [pc, #588]	; (80051ac <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8004f60:	6893      	ldr	r3, [r2, #8]
 8004f62:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004f66:	431f      	orrs	r7, r3
 8004f68:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004f6c:	4b94      	ldr	r3, [pc, #592]	; (80051c0 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8004f6e:	6097      	str	r7, [r2, #8]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a94      	ldr	r2, [pc, #592]	; (80051c4 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8004f74:	099b      	lsrs	r3, r3, #6
 8004f76:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7a:	099b      	lsrs	r3, r3, #6
 8004f7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	3318      	adds	r3, #24
 8004f84:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004f86:	9b01      	ldr	r3, [sp, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0dc      	beq.n	8004f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
          wait_loop_index--;
 8004f8c:	9b01      	ldr	r3, [sp, #4]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004f92:	9b01      	ldr	r3, [sp, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f9      	bne.n	8004f8c <HAL_ADCEx_InjectedConfigChannel+0x138>
 8004f98:	e7d5      	b.n	8004f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004f9a:	689d      	ldr	r5, [r3, #8]
 8004f9c:	f015 0508 	ands.w	r5, r5, #8
 8004fa0:	d1a4      	bne.n	8004eec <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004fa2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8004fa4:	2c00      	cmp	r4, #0
 8004fa6:	f040 809a 	bne.w	80050de <HAL_ADCEx_InjectedConfigChannel+0x28a>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004faa:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8004fae:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004fb0:	68dc      	ldr	r4, [r3, #12]
 8004fb2:	bf0c      	ite	eq
 8004fb4:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004fb8:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 8004fbc:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fbe:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004fc0:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 8004fc4:	2e01      	cmp	r6, #1
      MODIFY_REG(hadc->Instance->CFGR2,
 8004fc6:	691e      	ldr	r6, [r3, #16]
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004fc8:	f000 80e0 	beq.w	800518c <HAL_ADCEx_InjectedConfigChannel+0x338>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004fcc:	f026 0602 	bic.w	r6, r6, #2
 8004fd0:	611e      	str	r6, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004fd2:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004fd4:	0dd7      	lsrs	r7, r2, #23
 8004fd6:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8004fda:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8004fde:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004fe2:	f000 80c4 	beq.w	800516e <HAL_ADCEx_InjectedConfigChannel+0x31a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004fe6:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8004fea:	f04f 0e07 	mov.w	lr, #7
 8004fee:	4096      	lsls	r6, r2
 8004ff0:	fa0e fe02 	lsl.w	lr, lr, r2
 8004ff4:	f857 200c 	ldr.w	r2, [r7, ip]
 8004ff8:	ea22 020e 	bic.w	r2, r2, lr
 8004ffc:	4316      	orrs	r6, r2
 8004ffe:	f847 600c 	str.w	r6, [r7, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005002:	695a      	ldr	r2, [r3, #20]
 8005004:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005008:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800500a:	690f      	ldr	r7, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800500c:	68de      	ldr	r6, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800500e:	2f04      	cmp	r7, #4
 8005010:	f000 80e0 	beq.w	80051d4 <HAL_ADCEx_InjectedConfigChannel+0x380>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005014:	f3c6 06c1 	ubfx	r6, r6, #3, #2
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005018:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800501c:	ea4f 0e46 	mov.w	lr, r6, lsl #1
  MODIFY_REG(*preg,
 8005020:	680e      	ldr	r6, [r1, #0]
 8005022:	f852 8027 	ldr.w	r8, [r2, r7, lsl #2]
 8005026:	f006 4cf8 	and.w	ip, r6, #2080374784	; 0x7c000000
 800502a:	4e67      	ldr	r6, [pc, #412]	; (80051c8 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 800502c:	ea08 0606 	and.w	r6, r8, r6
 8005030:	ea4c 0c06 	orr.w	ip, ip, r6
 8005034:	694e      	ldr	r6, [r1, #20]
 8005036:	fa06 f60e 	lsl.w	r6, r6, lr
 800503a:	ea46 060c 	orr.w	r6, r6, ip
 800503e:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8005042:	f842 6027 	str.w	r6, [r2, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005046:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 800504a:	698f      	ldr	r7, [r1, #24]
 800504c:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 8005050:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 8005054:	433e      	orrs	r6, r7
 8005056:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 800505a:	7f0e      	ldrb	r6, [r1, #28]
 800505c:	690f      	ldr	r7, [r1, #16]
 800505e:	2e01      	cmp	r6, #1
  MODIFY_REG(*preg,
 8005060:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8005064:	bf08      	it	eq
 8005066:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 800506a:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 800506e:	4335      	orrs	r5, r6
 8005070:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8005074:	680a      	ldr	r2, [r1, #0]
}
 8005076:	e739      	b.n	8004eec <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 8005078:	68dc      	ldr	r4, [r3, #12]
 800507a:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 800507e:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8005082:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8005086:	60dc      	str	r4, [r3, #12]
 8005088:	e72a      	b.n	8004ee0 <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800508a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800508c:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800508e:	2b00      	cmp	r3, #0
 8005090:	d056      	beq.n	8005140 <HAL_ADCEx_InjectedConfigChannel+0x2ec>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005092:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005094:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005098:	0c55      	lsrs	r5, r2, #17
 800509a:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 800509e:	4323      	orrs	r3, r4
 80050a0:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 80050a2:	6803      	ldr	r3, [r0, #0]
 80050a4:	4e49      	ldr	r6, [pc, #292]	; (80051cc <HAL_ADCEx_InjectedConfigChannel+0x378>)
 80050a6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80050a8:	4034      	ands	r4, r6
 80050aa:	432c      	orrs	r4, r5
 80050ac:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80050ae:	6645      	str	r5, [r0, #100]	; 0x64
 80050b0:	e702      	b.n	8004eb8 <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80050b2:	680a      	ldr	r2, [r1, #0]
 80050b4:	684b      	ldr	r3, [r1, #4]
 80050b6:	f3c2 6584 	ubfx	r5, r2, #26, #5
 80050ba:	f003 031f 	and.w	r3, r3, #31
 80050be:	409d      	lsls	r5, r3
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80050c0:	6e43      	ldr	r3, [r0, #100]	; 0x64
    hadc->InjectionConfig.ChannelCount--;
 80050c2:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80050c4:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 80050c6:	6684      	str	r4, [r0, #104]	; 0x68
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80050c8:	6803      	ldr	r3, [r0, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80050ca:	6645      	str	r5, [r0, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80050cc:	2c00      	cmp	r4, #0
 80050ce:	f47f aef3 	bne.w	8004eb8 <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80050d2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80050d4:	4e3d      	ldr	r6, [pc, #244]	; (80051cc <HAL_ADCEx_InjectedConfigChannel+0x378>)
 80050d6:	4034      	ands	r4, r6
 80050d8:	4325      	orrs	r5, r4
 80050da:	64dd      	str	r5, [r3, #76]	; 0x4c
 80050dc:	e6ec      	b.n	8004eb8 <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80050de:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80050e0:	2c00      	cmp	r4, #0
 80050e2:	f43f af62 	beq.w	8004faa <HAL_ADCEx_InjectedConfigChannel+0x156>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80050e6:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 80050ea:	2c01      	cmp	r4, #1
 80050ec:	f000 8158 	beq.w	80053a0 <HAL_ADCEx_InjectedConfigChannel+0x54c>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80050f0:	68dc      	ldr	r4, [r3, #12]
 80050f2:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 80050f6:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050f8:	462c      	mov	r4, r5
 80050fa:	e761      	b.n	8004fc0 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    SET_BIT(ADCx->DIFSEL,
 80050fc:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8005100:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8005104:	4335      	orrs	r5, r6
 8005106:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800510a:	2e00      	cmp	r6, #0
 800510c:	f040 80a7 	bne.w	800525e <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8005110:	0e92      	lsrs	r2, r2, #26
 8005112:	1c55      	adds	r5, r2, #1
 8005114:	f005 0c1f 	and.w	ip, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005118:	f1bc 0f09 	cmp.w	ip, #9
 800511c:	f200 80d9 	bhi.w	80052d2 <HAL_ADCEx_InjectedConfigChannel+0x47e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005120:	06ad      	lsls	r5, r5, #26
 8005122:	2201      	movs	r2, #1
 8005124:	fa02 f20c 	lsl.w	r2, r2, ip
 8005128:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800512c:	4315      	orrs	r5, r2
 800512e:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8005132:	0512      	lsls	r2, r2, #20
 8005134:	e0db      	b.n	80052ee <HAL_ADCEx_InjectedConfigChannel+0x49a>
  __HAL_LOCK(hadc);
 8005136:	2402      	movs	r4, #2
}
 8005138:	4620      	mov	r0, r4
 800513a:	b002      	add	sp, #8
 800513c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8005140:	0c55      	lsrs	r5, r2, #17
 8005142:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8005146:	e7ac      	b.n	80050a2 <HAL_ADCEx_InjectedConfigChannel+0x24e>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8005148:	4d21      	ldr	r5, [pc, #132]	; (80051d0 <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 800514a:	42aa      	cmp	r2, r5
 800514c:	f47f aefb 	bne.w	8004f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005150:	0249      	lsls	r1, r1, #9
 8005152:	f53f aef8 	bmi.w	8004f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_VREFINT_INSTANCE(hadc))
 8005156:	4a19      	ldr	r2, [pc, #100]	; (80051bc <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8005158:	4293      	cmp	r3, r2
 800515a:	f43f aef4 	beq.w	8004f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800515e:	68b3      	ldr	r3, [r6, #8]
 8005160:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005164:	431f      	orrs	r7, r3
 8005166:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 800516a:	60b7      	str	r7, [r6, #8]
}
 800516c:	e6eb      	b.n	8004f46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800516e:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8005172:	f04f 0c07 	mov.w	ip, #7
 8005176:	fa0c fc02 	lsl.w	ip, ip, r2
 800517a:	59ba      	ldr	r2, [r7, r6]
 800517c:	ea22 020c 	bic.w	r2, r2, ip
 8005180:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005182:	695a      	ldr	r2, [r3, #20]
 8005184:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005188:	615a      	str	r2, [r3, #20]
}
 800518a:	e73e      	b.n	800500a <HAL_ADCEx_InjectedConfigChannel+0x1b6>
      MODIFY_REG(hadc->Instance->CFGR2,
 800518c:	f426 7cff 	bic.w	ip, r6, #510	; 0x1fe
 8005190:	e9d1 670d 	ldrd	r6, r7, [r1, #52]	; 0x34
 8005194:	433e      	orrs	r6, r7
 8005196:	ea46 060c 	orr.w	r6, r6, ip
 800519a:	f046 0602 	orr.w	r6, r6, #2
 800519e:	611e      	str	r6, [r3, #16]
 80051a0:	e717      	b.n	8004fd2 <HAL_ADCEx_InjectedConfigChannel+0x17e>
 80051a2:	bf00      	nop
 80051a4:	407f0000 	.word	0x407f0000
 80051a8:	80080000 	.word	0x80080000
 80051ac:	50000300 	.word	0x50000300
 80051b0:	c3210000 	.word	0xc3210000
 80051b4:	90c00010 	.word	0x90c00010
 80051b8:	c7520000 	.word	0xc7520000
 80051bc:	50000100 	.word	0x50000100
 80051c0:	20000680 	.word	0x20000680
 80051c4:	053e2d63 	.word	0x053e2d63
 80051c8:	03fff000 	.word	0x03fff000
 80051cc:	04104000 	.word	0x04104000
 80051d0:	cb840000 	.word	0xcb840000
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80051d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80051d6:	680a      	ldr	r2, [r1, #0]
 80051d8:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80051da:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80051de:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80051e2:	2e00      	cmp	r6, #0
 80051e4:	f000 809a 	beq.w	800531c <HAL_ADCEx_InjectedConfigChannel+0x4c8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e8:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80051ec:	b126      	cbz	r6, 80051f8 <HAL_ADCEx_InjectedConfigChannel+0x3a4>
  return __builtin_clz(value);
 80051ee:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80051f2:	42b5      	cmp	r5, r6
 80051f4:	f000 80d9 	beq.w	80053aa <HAL_ADCEx_InjectedConfigChannel+0x556>
 80051f8:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80051fa:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051fc:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005200:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8005204:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005208:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800520c:	b126      	cbz	r6, 8005218 <HAL_ADCEx_InjectedConfigChannel+0x3c4>
  return __builtin_clz(value);
 800520e:	fab6 f686 	clz	r6, r6
 8005212:	42b7      	cmp	r7, r6
 8005214:	f000 80de 	beq.w	80053d4 <HAL_ADCEx_InjectedConfigChannel+0x580>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005218:	68ae      	ldr	r6, [r5, #8]
 800521a:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800521c:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005220:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005224:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005228:	b126      	cbz	r6, 8005234 <HAL_ADCEx_InjectedConfigChannel+0x3e0>
  return __builtin_clz(value);
 800522a:	fab6 f686 	clz	r6, r6
 800522e:	42b7      	cmp	r7, r6
 8005230:	f000 80e5 	beq.w	80053fe <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005234:	68ee      	ldr	r6, [r5, #12]
 8005236:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005238:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800523a:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800523e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005242:	2e00      	cmp	r6, #0
 8005244:	f43f ae52 	beq.w	8004eec <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 8005248:	fab6 f686 	clz	r6, r6
 800524c:	42be      	cmp	r6, r7
 800524e:	f47f ae4d 	bne.w	8004eec <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 8005252:	682a      	ldr	r2, [r5, #0]
 8005254:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005258:	602a      	str	r2, [r5, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 800525a:	680a      	ldr	r2, [r1, #0]
}
 800525c:	e646      	b.n	8004eec <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525e:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8005262:	2d00      	cmp	r5, #0
 8005264:	d076      	beq.n	8005354 <HAL_ADCEx_InjectedConfigChannel+0x500>
  return __builtin_clz(value);
 8005266:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800526a:	3501      	adds	r5, #1
 800526c:	f005 051f 	and.w	r5, r5, #31
 8005270:	2d09      	cmp	r5, #9
 8005272:	d96f      	bls.n	8005354 <HAL_ADCEx_InjectedConfigChannel+0x500>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005274:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8005278:	2d00      	cmp	r5, #0
 800527a:	f000 80e0 	beq.w	800543e <HAL_ADCEx_InjectedConfigChannel+0x5ea>
  return __builtin_clz(value);
 800527e:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005282:	3501      	adds	r5, #1
 8005284:	06ad      	lsls	r5, r5, #26
 8005286:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800528e:	2e00      	cmp	r6, #0
 8005290:	f000 80d3 	beq.w	800543a <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 8005294:	fab6 f686 	clz	r6, r6
 8005298:	3601      	adds	r6, #1
 800529a:	f006 061f 	and.w	r6, r6, #31
 800529e:	2701      	movs	r7, #1
 80052a0:	fa07 f606 	lsl.w	r6, r7, r6
 80052a4:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80052aa:	2a00      	cmp	r2, #0
 80052ac:	f000 80c3 	beq.w	8005436 <HAL_ADCEx_InjectedConfigChannel+0x5e2>
  return __builtin_clz(value);
 80052b0:	fab2 f282 	clz	r2, r2
 80052b4:	3201      	adds	r2, #1
 80052b6:	f002 061f 	and.w	r6, r2, #31
 80052ba:	f06f 071d 	mvn.w	r7, #29
 80052be:	2203      	movs	r2, #3
 80052c0:	fb12 7206 	smlabb	r2, r2, r6, r7
 80052c4:	0512      	lsls	r2, r2, #20
 80052c6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80052ca:	e010      	b.n	80052ee <HAL_ADCEx_InjectedConfigChannel+0x49a>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80052cc:	3b01      	subs	r3, #1
 80052ce:	461d      	mov	r5, r3
 80052d0:	e5e0      	b.n	8004e94 <HAL_ADCEx_InjectedConfigChannel+0x40>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80052d2:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 80052d6:	06ad      	lsls	r5, r5, #26
 80052d8:	3a1e      	subs	r2, #30
 80052da:	2601      	movs	r6, #1
 80052dc:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80052e0:	0512      	lsls	r2, r2, #20
 80052e2:	fa06 fc0c 	lsl.w	ip, r6, ip
 80052e6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80052ea:	ea45 050c 	orr.w	r5, r5, ip
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052ee:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80052f0:	0dd7      	lsrs	r7, r2, #23
  MODIFY_REG(*preg,
 80052f2:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80052f4:	f007 0704 	and.w	r7, r7, #4
 80052f8:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 80052fc:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8005300:	fa05 fc02 	lsl.w	ip, r5, r2
 8005304:	f04f 0e07 	mov.w	lr, #7
 8005308:	59bd      	ldr	r5, [r7, r6]
 800530a:	fa0e f202 	lsl.w	r2, lr, r2
 800530e:	ea25 0202 	bic.w	r2, r5, r2
 8005312:	ea42 020c 	orr.w	r2, r2, ip
 8005316:	51ba      	str	r2, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8005318:	680a      	ldr	r2, [r1, #0]
}
 800531a:	e5f7      	b.n	8004f0c <HAL_ADCEx_InjectedConfigChannel+0xb8>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800531c:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005320:	42b5      	cmp	r5, r6
 8005322:	d042      	beq.n	80053aa <HAL_ADCEx_InjectedConfigChannel+0x556>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005324:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8005326:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005328:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800532c:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8005330:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 8005334:	42b7      	cmp	r7, r6
 8005336:	d04d      	beq.n	80053d4 <HAL_ADCEx_InjectedConfigChannel+0x580>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005338:	68af      	ldr	r7, [r5, #8]
 800533a:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800533c:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005340:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8005344:	42b7      	cmp	r7, r6
 8005346:	d05a      	beq.n	80053fe <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005348:	68ef      	ldr	r7, [r5, #12]
 800534a:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800534c:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800534e:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8005352:	e77b      	b.n	800524c <HAL_ADCEx_InjectedConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005354:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8005358:	2d00      	cmp	r5, #0
 800535a:	d066      	beq.n	800542a <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 800535c:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005360:	3501      	adds	r5, #1
 8005362:	06ad      	lsls	r5, r5, #26
 8005364:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005368:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800536c:	2e00      	cmp	r6, #0
 800536e:	d05a      	beq.n	8005426 <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return __builtin_clz(value);
 8005370:	fab6 f686 	clz	r6, r6
 8005374:	3601      	adds	r6, #1
 8005376:	f006 061f 	and.w	r6, r6, #31
 800537a:	2701      	movs	r7, #1
 800537c:	fa07 f606 	lsl.w	r6, r7, r6
 8005380:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005382:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005386:	2a00      	cmp	r2, #0
 8005388:	d052      	beq.n	8005430 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
  return __builtin_clz(value);
 800538a:	fab2 fc82 	clz	ip, r2
 800538e:	f10c 0c01 	add.w	ip, ip, #1
 8005392:	f00c 0c1f 	and.w	ip, ip, #31
 8005396:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800539a:	ea4f 520c 	mov.w	r2, ip, lsl #20
 800539e:	e7a6      	b.n	80052ee <HAL_ADCEx_InjectedConfigChannel+0x49a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053a0:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 80053a2:	f046 0620 	orr.w	r6, r6, #32
 80053a6:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 80053a8:	e60a      	b.n	8004fc0 <HAL_ADCEx_InjectedConfigChannel+0x16c>
  MODIFY_REG(*preg,
 80053aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053ac:	461d      	mov	r5, r3
 80053ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80053b2:	f845 2f60 	str.w	r2, [r5, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80053b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80053b8:	680a      	ldr	r2, [r1, #0]
 80053ba:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 80053bc:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80053c0:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053c4:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80053c8:	2e00      	cmp	r6, #0
 80053ca:	f47f af1d 	bne.w	8005208 <HAL_ADCEx_InjectedConfigChannel+0x3b4>
 80053ce:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80053d2:	e7af      	b.n	8005334 <HAL_ADCEx_InjectedConfigChannel+0x4e0>
  MODIFY_REG(*preg,
 80053d4:	f8dc 2000 	ldr.w	r2, [ip]
 80053d8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80053dc:	f8cc 2000 	str.w	r2, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80053e0:	68aa      	ldr	r2, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80053e2:	680a      	ldr	r2, [r1, #0]
 80053e4:	68af      	ldr	r7, [r5, #8]
 80053e6:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80053ea:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053ee:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80053f2:	2e00      	cmp	r6, #0
 80053f4:	f47f af16 	bne.w	8005224 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
 80053f8:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80053fc:	e7a2      	b.n	8005344 <HAL_ADCEx_InjectedConfigChannel+0x4f0>
  MODIFY_REG(*preg,
 80053fe:	f8dc 2000 	ldr.w	r2, [ip]
 8005402:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005406:	f8cc 2000 	str.w	r2, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800540a:	68ea      	ldr	r2, [r5, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800540c:	680a      	ldr	r2, [r1, #0]
 800540e:	68ef      	ldr	r7, [r5, #12]
 8005410:	f3c2 0612 	ubfx	r6, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005414:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005416:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800541a:	2e00      	cmp	r6, #0
 800541c:	f47f af0f 	bne.w	800523e <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 8005420:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8005424:	e712      	b.n	800524c <HAL_ADCEx_InjectedConfigChannel+0x3f8>
 8005426:	2602      	movs	r6, #2
 8005428:	e7aa      	b.n	8005380 <HAL_ADCEx_InjectedConfigChannel+0x52c>
 800542a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800542e:	e79b      	b.n	8005368 <HAL_ADCEx_InjectedConfigChannel+0x514>
 8005430:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8005434:	e75b      	b.n	80052ee <HAL_ADCEx_InjectedConfigChannel+0x49a>
 8005436:	4a03      	ldr	r2, [pc, #12]	; (8005444 <HAL_ADCEx_InjectedConfigChannel+0x5f0>)
 8005438:	e759      	b.n	80052ee <HAL_ADCEx_InjectedConfigChannel+0x49a>
 800543a:	2602      	movs	r6, #2
 800543c:	e732      	b.n	80052a4 <HAL_ADCEx_InjectedConfigChannel+0x450>
 800543e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8005442:	e722      	b.n	800528a <HAL_ADCEx_InjectedConfigChannel+0x436>
 8005444:	fe500000 	.word	0xfe500000

08005448 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005448:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800544a:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800544e:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8005450:	2a01      	cmp	r2, #1
{
 8005452:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8005454:	d04f      	beq.n	80054f6 <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005456:	6804      	ldr	r4, [r0, #0]
 8005458:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800545a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800545c:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800545e:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005462:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8005464:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005468:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800546a:	d008      	beq.n	800547e <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800546c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800546e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005472:	f041 0120 	orr.w	r1, r1, #32
 8005476:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8005478:	b01c      	add	sp, #112	; 0x70
 800547a:	bcf0      	pop	{r4, r5, r6, r7}
 800547c:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800547e:	4a23      	ldr	r2, [pc, #140]	; (800550c <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8005480:	6890      	ldr	r0, [r2, #8]
 8005482:	0740      	lsls	r0, r0, #29
 8005484:	d50b      	bpl.n	800549e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005486:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005488:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800548a:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 800548e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005490:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8005498:	b01c      	add	sp, #112	; 0x70
 800549a:	bcf0      	pop	{r4, r5, r6, r7}
 800549c:	4770      	bx	lr
 800549e:	68a0      	ldr	r0, [r4, #8]
 80054a0:	0746      	lsls	r6, r0, #29
 80054a2:	d4f1      	bmi.n	8005488 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054a4:	b1d5      	cbz	r5, 80054dc <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80054a6:	4e1a      	ldr	r6, [pc, #104]	; (8005510 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80054a8:	684f      	ldr	r7, [r1, #4]
 80054aa:	68b0      	ldr	r0, [r6, #8]
 80054ac:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 80054b0:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80054b4:	4338      	orrs	r0, r7
 80054b6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 80054ba:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054bc:	68a4      	ldr	r4, [r4, #8]
 80054be:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054c0:	4320      	orrs	r0, r4
 80054c2:	f010 0001 	ands.w	r0, r0, #1
 80054c6:	d114      	bne.n	80054f2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 80054c8:	688a      	ldr	r2, [r1, #8]
 80054ca:	4315      	orrs	r5, r2
 80054cc:	68b2      	ldr	r2, [r6, #8]
 80054ce:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80054d2:	f022 020f 	bic.w	r2, r2, #15
 80054d6:	4315      	orrs	r5, r2
 80054d8:	60b5      	str	r5, [r6, #8]
 80054da:	e7da      	b.n	8005492 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80054dc:	4d0c      	ldr	r5, [pc, #48]	; (8005510 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80054de:	68a9      	ldr	r1, [r5, #8]
 80054e0:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80054e4:	60a9      	str	r1, [r5, #8]
 80054e6:	68a1      	ldr	r1, [r4, #8]
 80054e8:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054ea:	4308      	orrs	r0, r1
 80054ec:	f010 0001 	ands.w	r0, r0, #1
 80054f0:	d005      	beq.n	80054fe <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054f2:	2000      	movs	r0, #0
 80054f4:	e7cd      	b.n	8005492 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80054f6:	2002      	movs	r0, #2
}
 80054f8:	b01c      	add	sp, #112	; 0x70
 80054fa:	bcf0      	pop	{r4, r5, r6, r7}
 80054fc:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80054fe:	68aa      	ldr	r2, [r5, #8]
 8005500:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8005504:	f022 020f 	bic.w	r2, r2, #15
 8005508:	60aa      	str	r2, [r5, #8]
 800550a:	e7c2      	b.n	8005492 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800550c:	50000100 	.word	0x50000100
 8005510:	50000300 	.word	0x50000300

08005514 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005514:	b1b0      	cbz	r0, 8005544 <HAL_CORDIC_Init+0x30>
{
 8005516:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005518:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800551c:	4604      	mov	r4, r0
 800551e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005522:	b153      	cbz	r3, 800553a <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005524:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005526:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005528:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 800552a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 800552e:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8005532:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005536:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8005538:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800553a:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 800553e:	f7fe f941 	bl	80037c4 <HAL_CORDIC_MspInit>
 8005542:	e7ef      	b.n	8005524 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8005544:	2001      	movs	r0, #1
}
 8005546:	4770      	bx	lr

08005548 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005548:	4907      	ldr	r1, [pc, #28]	; (8005568 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800554a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800554c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800554e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005552:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005556:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005558:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800555a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800555e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005562:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	e000ed00 	.word	0xe000ed00

0800556c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800556c:	4b1c      	ldr	r3, [pc, #112]	; (80055e0 <HAL_NVIC_SetPriority+0x74>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005574:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005576:	f1c3 0e07 	rsb	lr, r3, #7
 800557a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800557e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005582:	bf28      	it	cs
 8005584:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005588:	f1bc 0f06 	cmp.w	ip, #6
 800558c:	d91b      	bls.n	80055c6 <HAL_NVIC_SetPriority+0x5a>
 800558e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005590:	f04f 3cff 	mov.w	ip, #4294967295
 8005594:	fa0c fc03 	lsl.w	ip, ip, r3
 8005598:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800559c:	f04f 3cff 	mov.w	ip, #4294967295
 80055a0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80055a4:	ea21 010c 	bic.w	r1, r1, ip
 80055a8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80055aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055ac:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80055b0:	db0c      	blt.n	80055cc <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055b2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80055b6:	0109      	lsls	r1, r1, #4
 80055b8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80055bc:	b2c9      	uxtb	r1, r1
 80055be:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80055c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80055c6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055c8:	4613      	mov	r3, r2
 80055ca:	e7e7      	b.n	800559c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055cc:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <HAL_NVIC_SetPriority+0x78>)
 80055ce:	f000 000f 	and.w	r0, r0, #15
 80055d2:	0109      	lsls	r1, r1, #4
 80055d4:	4403      	add	r3, r0
 80055d6:	b2c9      	uxtb	r1, r1
 80055d8:	7619      	strb	r1, [r3, #24]
 80055da:	f85d fb04 	ldr.w	pc, [sp], #4
 80055de:	bf00      	nop
 80055e0:	e000ed00 	.word	0xe000ed00
 80055e4:	e000ecfc 	.word	0xe000ecfc

080055e8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80055e8:	2800      	cmp	r0, #0
 80055ea:	db08      	blt.n	80055fe <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055ec:	4a04      	ldr	r2, [pc, #16]	; (8005600 <HAL_NVIC_EnableIRQ+0x18>)
 80055ee:	0941      	lsrs	r1, r0, #5
 80055f0:	2301      	movs	r3, #1
 80055f2:	f000 001f 	and.w	r0, r0, #31
 80055f6:	fa03 f000 	lsl.w	r0, r3, r0
 80055fa:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80055fe:	4770      	bx	lr
 8005600:	e000e100 	.word	0xe000e100

08005604 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005604:	3801      	subs	r0, #1
 8005606:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800560a:	d210      	bcs.n	800562e <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800560c:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800560e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005612:	4c08      	ldr	r4, [pc, #32]	; (8005634 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005614:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005616:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800561a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800561e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005620:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005622:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005624:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8005626:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800562a:	6119      	str	r1, [r3, #16]
 800562c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800562e:	2001      	movs	r0, #1
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	e000ed00 	.word	0xe000ed00

08005638 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop

0800563c <HAL_SYSTICK_IRQHandler>:
{
 800563c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800563e:	f7ff fffb 	bl	8005638 <HAL_SYSTICK_Callback>
}
 8005642:	bd08      	pop	{r3, pc}

08005644 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8005644:	b188      	cbz	r0, 800566a <HAL_DAC_Init+0x26>
{
 8005646:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005648:	7903      	ldrb	r3, [r0, #4]
 800564a:	4604      	mov	r4, r0
 800564c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005650:	b13b      	cbz	r3, 8005662 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005652:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8005654:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005656:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8005658:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800565a:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800565c:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800565e:	4618      	mov	r0, r3
}
 8005660:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8005662:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005664:	f7fe f8c8 	bl	80037f8 <HAL_DAC_MspInit>
 8005668:	e7f3      	b.n	8005652 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800566a:	2001      	movs	r0, #1
}
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop

08005670 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005674:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8005676:	688f      	ldr	r7, [r1, #8]
  __HAL_LOCK(hdac);
 8005678:	2b01      	cmp	r3, #1
 800567a:	f000 80c6 	beq.w	800580a <HAL_DAC_ConfigChannel+0x19a>
 800567e:	2301      	movs	r3, #1
 8005680:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005682:	2f04      	cmp	r7, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 8005684:	f04f 0302 	mov.w	r3, #2
 8005688:	4606      	mov	r6, r0
 800568a:	460d      	mov	r5, r1
 800568c:	4614      	mov	r4, r2
 800568e:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005690:	d077      	beq.n	8005782 <HAL_DAC_ConfigChannel+0x112>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005692:	6803      	ldr	r3, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005694:	f002 0410 	and.w	r4, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005698:	69ea      	ldr	r2, [r5, #28]
 800569a:	2a01      	cmp	r2, #1
 800569c:	d108      	bne.n	80056b0 <HAL_DAC_ConfigChannel+0x40>
    tmpreg1 = hdac->Instance->CCR;
 800569e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80056a0:	6a2a      	ldr	r2, [r5, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80056a2:	201f      	movs	r0, #31
 80056a4:	40a0      	lsls	r0, r4
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80056a6:	40a2      	lsls	r2, r4
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80056a8:	ea21 0100 	bic.w	r1, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80056ac:	430a      	orrs	r2, r1
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80056b0:	69a9      	ldr	r1, [r5, #24]
  tmpreg1 = hdac->Instance->MCR;
 80056b2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80056b4:	2207      	movs	r2, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80056b6:	2901      	cmp	r1, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80056b8:	fa02 fc04 	lsl.w	ip, r2, r4
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80056bc:	696a      	ldr	r2, [r5, #20]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80056be:	d05e      	beq.n	800577e <HAL_DAC_ConfigChannel+0x10e>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80056c0:	2902      	cmp	r1, #2
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80056c2:	bf16      	itet	ne
 80056c4:	fab2 f182 	clzne	r1, r2
    connectOnChip = DAC_MCR_MODE1_0;
 80056c8:	2101      	moveq	r1, #1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80056ca:	0949      	lsrne	r1, r1, #5
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80056cc:	4311      	orrs	r1, r2
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80056ce:	792a      	ldrb	r2, [r5, #4]
 80056d0:	2a01      	cmp	r2, #1
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80056d2:	f44f 7200 	mov.w	r2, #512	; 0x200
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80056d6:	f44f 7880 	mov.w	r8, #256	; 0x100
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80056da:	fa02 f204 	lsl.w	r2, r2, r4
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80056de:	fa08 f804 	lsl.w	r8, r8, r4
 80056e2:	ea42 020c 	orr.w	r2, r2, ip
 80056e6:	ea20 0202 	bic.w	r2, r0, r2
 80056ea:	ea6f 0808 	mvn.w	r8, r8
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80056ee:	ea08 0802 	and.w	r8, r8, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80056f2:	796a      	ldrb	r2, [r5, #5]
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80056f4:	ea47 0701 	orr.w	r7, r7, r1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80056f8:	bf08      	it	eq
 80056fa:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80056fe:	2a01      	cmp	r2, #1
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005700:	682a      	ldr	r2, [r5, #0]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005702:	bf08      	it	eq
 8005704:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005708:	2a02      	cmp	r2, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800570a:	f428 4840 	bic.w	r8, r8, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800570e:	d073      	beq.n	80057f8 <HAL_DAC_ConfigChannel+0x188>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005710:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005714:	40a7      	lsls	r7, r4
 8005716:	ea47 0708 	orr.w	r7, r7, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800571a:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005722:	40a1      	lsls	r1, r4
 8005724:	ea22 0201 	bic.w	r2, r2, r1
 8005728:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800572a:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
  tmpreg1 = hdac->Instance->CR;
 800572e:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005730:	f640 75fe 	movw	r5, #4094	; 0xffe
 8005734:	40a5      	lsls	r5, r4
 8005736:	ea20 0505 	bic.w	r5, r0, r5
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800573a:	0192      	lsls	r2, r2, #6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800573c:	fa01 f004 	lsl.w	r0, r1, r4
 8005740:	4328      	orrs	r0, r5
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005742:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005746:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  hdac->Instance->CR = tmpreg1;
 800574a:	6018      	str	r0, [r3, #0]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800574c:	430a      	orrs	r2, r1
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800574e:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005752:	fa01 f004 	lsl.w	r0, r1, r4
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005756:	25c0      	movs	r5, #192	; 0xc0
 8005758:	6819      	ldr	r1, [r3, #0]
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800575a:	40a2      	lsls	r2, r4
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800575c:	fa05 f404 	lsl.w	r4, r5, r4
 8005760:	ea21 0404 	bic.w	r4, r1, r4
 8005764:	601c      	str	r4, [r3, #0]
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005766:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8005768:	ea21 0100 	bic.w	r1, r1, r0
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800576c:	2400      	movs	r4, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800576e:	430a      	orrs	r2, r1
  hdac->State = HAL_DAC_STATE_READY;
 8005770:	2101      	movs	r1, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005772:	661a      	str	r2, [r3, #96]	; 0x60

  /* Return function status */
  return HAL_OK;
 8005774:	4620      	mov	r0, r4
  hdac->State = HAL_DAC_STATE_READY;
 8005776:	7131      	strb	r1, [r6, #4]
  __HAL_UNLOCK(hdac);
 8005778:	7174      	strb	r4, [r6, #5]
}
 800577a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 800577e:	2100      	movs	r1, #0
 8005780:	e7a4      	b.n	80056cc <HAL_DAC_ConfigChannel+0x5c>
    tickstart = HAL_GetTick();
 8005782:	f7fe ffdf 	bl	8004744 <HAL_GetTick>
 8005786:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8005788:	b12c      	cbz	r4, 8005796 <HAL_DAC_ConfigChannel+0x126>
 800578a:	e014      	b.n	80057b6 <HAL_DAC_ConfigChannel+0x146>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800578c:	f7fe ffda 	bl	8004744 <HAL_GetTick>
 8005790:	1bc3      	subs	r3, r0, r7
 8005792:	2b01      	cmp	r3, #1
 8005794:	d83c      	bhi.n	8005810 <HAL_DAC_ConfigChannel+0x1a0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005796:	6833      	ldr	r3, [r6, #0]
 8005798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579a:	041b      	lsls	r3, r3, #16
 800579c:	d4f6      	bmi.n	800578c <HAL_DAC_ConfigChannel+0x11c>
      HAL_Delay(1);
 800579e:	2001      	movs	r0, #1
 80057a0:	f7fe ffd6 	bl	8004750 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80057a4:	6833      	ldr	r3, [r6, #0]
 80057a6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40
 80057aa:	e00e      	b.n	80057ca <HAL_DAC_ConfigChannel+0x15a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80057ac:	f7fe ffca 	bl	8004744 <HAL_GetTick>
 80057b0:	1bc3      	subs	r3, r0, r7
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d82c      	bhi.n	8005810 <HAL_DAC_ConfigChannel+0x1a0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80057b6:	6833      	ldr	r3, [r6, #0]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	dbf6      	blt.n	80057ac <HAL_DAC_ConfigChannel+0x13c>
      HAL_Delay(1U);
 80057be:	2001      	movs	r0, #1
 80057c0:	f7fe ffc6 	bl	8004750 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80057c4:	6833      	ldr	r3, [r6, #0]
 80057c6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80057c8:	645a      	str	r2, [r3, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80057ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057cc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80057ce:	68af      	ldr	r7, [r5, #8]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80057d0:	f004 0410 	and.w	r4, r4, #16
 80057d4:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80057d8:	40a0      	lsls	r0, r4
 80057da:	40a1      	lsls	r1, r4
 80057dc:	ea22 0200 	bic.w	r2, r2, r0
 80057e0:	430a      	orrs	r2, r1
 80057e2:	649a      	str	r2, [r3, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80057e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057e6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80057e8:	20ff      	movs	r0, #255	; 0xff
 80057ea:	40a0      	lsls	r0, r4
 80057ec:	40a1      	lsls	r1, r4
 80057ee:	ea22 0200 	bic.w	r2, r2, r0
 80057f2:	430a      	orrs	r2, r1
 80057f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80057f6:	e74f      	b.n	8005698 <HAL_DAC_ConfigChannel+0x28>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80057f8:	f000 fd30 	bl	800625c <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80057fc:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <HAL_DAC_ConfigChannel+0x1c0>)
 80057fe:	4298      	cmp	r0, r3
 8005800:	d90e      	bls.n	8005820 <HAL_DAC_ConfigChannel+0x1b0>
  hdac->Instance->MCR = tmpreg1;
 8005802:	6833      	ldr	r3, [r6, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005804:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 8005808:	e784      	b.n	8005714 <HAL_DAC_ConfigChannel+0xa4>
  __HAL_LOCK(hdac);
 800580a:	2002      	movs	r0, #2
}
 800580c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005810:	6933      	ldr	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005812:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005814:	f043 0308 	orr.w	r3, r3, #8
 8005818:	6133      	str	r3, [r6, #16]
          return HAL_TIMEOUT;
 800581a:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800581c:	7132      	strb	r2, [r6, #4]
          return HAL_TIMEOUT;
 800581e:	e7ac      	b.n	800577a <HAL_DAC_ConfigChannel+0x10a>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005820:	4b04      	ldr	r3, [pc, #16]	; (8005834 <HAL_DAC_ConfigChannel+0x1c4>)
 8005822:	4298      	cmp	r0, r3
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005824:	bf88      	it	hi
 8005826:	f448 4880 	orrhi.w	r8, r8, #16384	; 0x4000
  hdac->Instance->MCR = tmpreg1;
 800582a:	6833      	ldr	r3, [r6, #0]
 800582c:	e772      	b.n	8005714 <HAL_DAC_ConfigChannel+0xa4>
 800582e:	bf00      	nop
 8005830:	09896800 	.word	0x09896800
 8005834:	04c4b400 	.word	0x04c4b400

08005838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800583c:	680c      	ldr	r4, [r1, #0]
{
 800583e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005840:	2c00      	cmp	r4, #0
 8005842:	f000 8083 	beq.w	800594c <HAL_GPIO_Init+0x114>
 8005846:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800584a:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8005a24 <HAL_GPIO_Init+0x1ec>
  uint32_t position = 0x00U;
 800584e:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005850:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005854:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005856:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 800585a:	ea15 0804 	ands.w	r8, r5, r4
 800585e:	d06f      	beq.n	8005940 <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005860:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8005864:	f007 0203 	and.w	r2, r7, #3
 8005868:	1e51      	subs	r1, r2, #1
 800586a:	2901      	cmp	r1, #1
 800586c:	d971      	bls.n	8005952 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800586e:	2a03      	cmp	r2, #3
 8005870:	f040 80b0 	bne.w	80059d4 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005874:	fa02 f20c 	lsl.w	r2, r2, ip
 8005878:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 800587a:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800587c:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800587e:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005880:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 8005884:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005886:	d05b      	beq.n	8005940 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005888:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 800588c:	f042 0201 	orr.w	r2, r2, #1
 8005890:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
 8005894:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8005898:	f002 0201 	and.w	r2, r2, #1
 800589c:	9203      	str	r2, [sp, #12]
 800589e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80058a0:	f023 0203 	bic.w	r2, r3, #3
 80058a4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80058a8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058ac:	f003 0503 	and.w	r5, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80058b0:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058b2:	00ad      	lsls	r5, r5, #2
 80058b4:	260f      	movs	r6, #15
 80058b6:	fa06 fe05 	lsl.w	lr, r6, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058ba:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058be:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058c2:	d019      	beq.n	80058f8 <HAL_GPIO_Init+0xc0>
 80058c4:	4e51      	ldr	r6, [pc, #324]	; (8005a0c <HAL_GPIO_Init+0x1d4>)
 80058c6:	42b0      	cmp	r0, r6
 80058c8:	f000 808f 	beq.w	80059ea <HAL_GPIO_Init+0x1b2>
 80058cc:	4e50      	ldr	r6, [pc, #320]	; (8005a10 <HAL_GPIO_Init+0x1d8>)
 80058ce:	42b0      	cmp	r0, r6
 80058d0:	f000 808f 	beq.w	80059f2 <HAL_GPIO_Init+0x1ba>
 80058d4:	4e4f      	ldr	r6, [pc, #316]	; (8005a14 <HAL_GPIO_Init+0x1dc>)
 80058d6:	42b0      	cmp	r0, r6
 80058d8:	f000 8081 	beq.w	80059de <HAL_GPIO_Init+0x1a6>
 80058dc:	4e4e      	ldr	r6, [pc, #312]	; (8005a18 <HAL_GPIO_Init+0x1e0>)
 80058de:	42b0      	cmp	r0, r6
 80058e0:	f000 808d 	beq.w	80059fe <HAL_GPIO_Init+0x1c6>
 80058e4:	4e4d      	ldr	r6, [pc, #308]	; (8005a1c <HAL_GPIO_Init+0x1e4>)
 80058e6:	42b0      	cmp	r0, r6
 80058e8:	bf0c      	ite	eq
 80058ea:	f04f 0e05 	moveq.w	lr, #5
 80058ee:	f04f 0e06 	movne.w	lr, #6
 80058f2:	fa0e f505 	lsl.w	r5, lr, r5
 80058f6:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058f8:	6091      	str	r1, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058fa:	4a49      	ldr	r2, [pc, #292]	; (8005a20 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80058fc:	4948      	ldr	r1, [pc, #288]	; (8005a20 <HAL_GPIO_Init+0x1e8>)
        temp = EXTI->RTSR1;
 80058fe:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 8005900:	ea6f 0508 	mvn.w	r5, r8
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005904:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 8005906:	bf54      	ite	pl
 8005908:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800590a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR1 = temp;
 800590e:	608a      	str	r2, [r1, #8]

        temp = EXTI->FTSR1;
 8005910:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005912:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8005914:	4942      	ldr	r1, [pc, #264]	; (8005a20 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8005916:	bf54      	ite	pl
 8005918:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800591a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 800591e:	60ca      	str	r2, [r1, #12]

        temp = EXTI->EMR1;
 8005920:	6849      	ldr	r1, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8005922:	4a3f      	ldr	r2, [pc, #252]	; (8005a20 <HAL_GPIO_Init+0x1e8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005924:	03be      	lsls	r6, r7, #14
        temp &= ~(iocurrent);
 8005926:	bf54      	ite	pl
 8005928:	4029      	andpl	r1, r5
          temp |= iocurrent;
 800592a:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR1 = temp;
 800592e:	6051      	str	r1, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005930:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005932:	03f9      	lsls	r1, r7, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8005934:	493a      	ldr	r1, [pc, #232]	; (8005a20 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8005936:	bf54      	ite	pl
 8005938:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800593a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR1 = temp;
 800593e:	600a      	str	r2, [r1, #0]
      }
    }

    position++;
 8005940:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005942:	fa34 f203 	lsrs.w	r2, r4, r3
 8005946:	f10c 0c02 	add.w	ip, ip, #2
 800594a:	d184      	bne.n	8005856 <HAL_GPIO_Init+0x1e>
  }
}
 800594c:	b005      	add	sp, #20
 800594e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8005952:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005954:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005958:	f04f 0e03 	mov.w	lr, #3
 800595c:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005960:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005964:	fa06 f60c 	lsl.w	r6, r6, ip
 8005968:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 800596a:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800596c:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 8005970:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005974:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005978:	f3c7 1500 	ubfx	r5, r7, #4, #1
 800597c:	409d      	lsls	r5, r3
 800597e:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 8005982:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8005984:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005986:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800598a:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800598e:	fa05 f50c 	lsl.w	r5, r5, ip
 8005992:	ea45 050e 	orr.w	r5, r5, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005996:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8005998:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800599a:	fa02 f20c 	lsl.w	r2, r2, ip
 800599e:	f47f af6c 	bne.w	800587a <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 80059a2:	08dd      	lsrs	r5, r3, #3
 80059a4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80059a8:	9501      	str	r5, [sp, #4]
 80059aa:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059ac:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 80059b0:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059b2:	f003 0e07 	and.w	lr, r3, #7
 80059b6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80059ba:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059bc:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059c0:	fa06 fe0e 	lsl.w	lr, r6, lr
 80059c4:	9e00      	ldr	r6, [sp, #0]
 80059c6:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 80059ca:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059cc:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80059d0:	6235      	str	r5, [r6, #32]
 80059d2:	e752      	b.n	800587a <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059d4:	2103      	movs	r1, #3
 80059d6:	fa01 f10c 	lsl.w	r1, r1, ip
 80059da:	43c9      	mvns	r1, r1
 80059dc:	e7d2      	b.n	8005984 <HAL_GPIO_Init+0x14c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80059de:	f04f 0e03 	mov.w	lr, #3
 80059e2:	fa0e f505 	lsl.w	r5, lr, r5
 80059e6:	4329      	orrs	r1, r5
 80059e8:	e786      	b.n	80058f8 <HAL_GPIO_Init+0xc0>
 80059ea:	fa0b f505 	lsl.w	r5, fp, r5
 80059ee:	4329      	orrs	r1, r5
 80059f0:	e782      	b.n	80058f8 <HAL_GPIO_Init+0xc0>
 80059f2:	f04f 0e02 	mov.w	lr, #2
 80059f6:	fa0e f505 	lsl.w	r5, lr, r5
 80059fa:	4329      	orrs	r1, r5
 80059fc:	e77c      	b.n	80058f8 <HAL_GPIO_Init+0xc0>
 80059fe:	f04f 0e04 	mov.w	lr, #4
 8005a02:	fa0e f505 	lsl.w	r5, lr, r5
 8005a06:	4329      	orrs	r1, r5
 8005a08:	e776      	b.n	80058f8 <HAL_GPIO_Init+0xc0>
 8005a0a:	bf00      	nop
 8005a0c:	48000400 	.word	0x48000400
 8005a10:	48000800 	.word	0x48000800
 8005a14:	48000c00 	.word	0x48000c00
 8005a18:	48001000 	.word	0x48001000
 8005a1c:	48001400 	.word	0x48001400
 8005a20:	40010400 	.word	0x40010400
 8005a24:	40021000 	.word	0x40021000

08005a28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a28:	b10a      	cbz	r2, 8005a2e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a2a:	6181      	str	r1, [r0, #24]
 8005a2c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a2e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop

08005a34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a34:	b410      	push	{r4}
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a36:	4a3b      	ldr	r2, [pc, #236]	; (8005b24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005a38:	b970      	cbnz	r0, 8005a58 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a3a:	6813      	ldr	r3, [r2, #0]
 8005a3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a44:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a48:	d023      	beq.n	8005a92 <HAL_PWREx_ControlVoltageScaling+0x5e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8005a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8005a56:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a58:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005a5c:	d009      	beq.n	8005a72 <HAL_PWREx_ControlVoltageScaling+0x3e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a5e:	6813      	ldr	r3, [r2, #0]
}
 8005a60:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 8005a6c:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a6e:	6013      	str	r3, [r2, #0]
}
 8005a70:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a72:	6813      	ldr	r3, [r2, #0]
 8005a74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a7c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a80:	d02f      	beq.n	8005ae2 <HAL_PWREx_ControlVoltageScaling+0xae>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8005a86:	2000      	movs	r0, #0
}
 8005a88:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8005a90:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a96:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a9a:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a9c:	4c22      	ldr	r4, [pc, #136]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005a9e:	4823      	ldr	r0, [pc, #140]	; (8005b2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005aa0:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8005aa4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005aa8:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	2132      	movs	r1, #50	; 0x32
 8005aae:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ab2:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ab4:	fba0 0303 	umull	r0, r3, r0, r3
 8005ab8:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005aba:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005abc:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ac0:	d506      	bpl.n	8005ad0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005ac2:	e000      	b.n	8005ac6 <HAL_PWREx_ControlVoltageScaling+0x92>
 8005ac4:	b123      	cbz	r3, 8005ad0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005ac6:	6951      	ldr	r1, [r2, #20]
 8005ac8:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005aca:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ace:	d4f9      	bmi.n	8005ac4 <HAL_PWREx_ControlVoltageScaling+0x90>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ad0:	4b14      	ldr	r3, [pc, #80]	; (8005b24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	055c      	lsls	r4, r3, #21
  return HAL_OK;
 8005ad6:	bf54      	ite	pl
 8005ad8:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8005ada:	2003      	movmi	r0, #3
}
 8005adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ae0:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005aea:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005aec:	4c0e      	ldr	r4, [pc, #56]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005aee:	480f      	ldr	r0, [pc, #60]	; (8005b2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005af0:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8005af4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005af8:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	2132      	movs	r1, #50	; 0x32
 8005afe:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b02:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b04:	fba0 0303 	umull	r0, r3, r0, r3
 8005b08:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b0a:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b0c:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b10:	d5de      	bpl.n	8005ad0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005b12:	e001      	b.n	8005b18 <HAL_PWREx_ControlVoltageScaling+0xe4>
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0db      	beq.n	8005ad0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005b18:	6951      	ldr	r1, [r2, #20]
 8005b1a:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005b1c:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b20:	d5d6      	bpl.n	8005ad0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005b22:	e7f7      	b.n	8005b14 <HAL_PWREx_ControlVoltageScaling+0xe0>
 8005b24:	40007000 	.word	0x40007000
 8005b28:	20000680 	.word	0x20000680
 8005b2c:	431bde83 	.word	0x431bde83

08005b30 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b30:	2800      	cmp	r0, #0
 8005b32:	f000 81c3 	beq.w	8005ebc <HAL_RCC_OscConfig+0x38c>
{
 8005b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b3a:	6803      	ldr	r3, [r0, #0]
 8005b3c:	07d9      	lsls	r1, r3, #31
{
 8005b3e:	b082      	sub	sp, #8
 8005b40:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b42:	d52d      	bpl.n	8005ba0 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b44:	49a6      	ldr	r1, [pc, #664]	; (8005de0 <HAL_RCC_OscConfig+0x2b0>)
 8005b46:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b48:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b4a:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005b4e:	2a0c      	cmp	r2, #12
 8005b50:	f000 810a 	beq.w	8005d68 <HAL_RCC_OscConfig+0x238>
 8005b54:	2a08      	cmp	r2, #8
 8005b56:	f000 810c 	beq.w	8005d72 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b5a:	6863      	ldr	r3, [r4, #4]
 8005b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b60:	f000 8133 	beq.w	8005dca <HAL_RCC_OscConfig+0x29a>
 8005b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b68:	f000 819b 	beq.w	8005ea2 <HAL_RCC_OscConfig+0x372>
 8005b6c:	4d9c      	ldr	r5, [pc, #624]	; (8005de0 <HAL_RCC_OscConfig+0x2b0>)
 8005b6e:	682a      	ldr	r2, [r5, #0]
 8005b70:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b74:	602a      	str	r2, [r5, #0]
 8005b76:	682a      	ldr	r2, [r5, #0]
 8005b78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b7c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f040 8128 	bne.w	8005dd4 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b84:	f7fe fdde 	bl	8004744 <HAL_GetTick>
 8005b88:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b8a:	e005      	b.n	8005b98 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b8c:	f7fe fdda 	bl	8004744 <HAL_GetTick>
 8005b90:	1b80      	subs	r0, r0, r6
 8005b92:	2864      	cmp	r0, #100	; 0x64
 8005b94:	f200 8142 	bhi.w	8005e1c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	039f      	lsls	r7, r3, #14
 8005b9c:	d4f6      	bmi.n	8005b8c <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	079e      	lsls	r6, r3, #30
 8005ba2:	d528      	bpl.n	8005bf6 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ba4:	4a8e      	ldr	r2, [pc, #568]	; (8005de0 <HAL_RCC_OscConfig+0x2b0>)
 8005ba6:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ba8:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005baa:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005bae:	2b0c      	cmp	r3, #12
 8005bb0:	f000 80ec 	beq.w	8005d8c <HAL_RCC_OscConfig+0x25c>
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	f000 80ee 	beq.w	8005d96 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bba:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bbc:	4d88      	ldr	r5, [pc, #544]	; (8005de0 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 811d 	beq.w	8005dfe <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bca:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bcc:	f7fe fdba 	bl	8004744 <HAL_GetTick>
 8005bd0:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bd2:	e005      	b.n	8005be0 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bd4:	f7fe fdb6 	bl	8004744 <HAL_GetTick>
 8005bd8:	1b80      	subs	r0, r0, r6
 8005bda:	2802      	cmp	r0, #2
 8005bdc:	f200 811e 	bhi.w	8005e1c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	0558      	lsls	r0, r3, #21
 8005be4:	d5f6      	bpl.n	8005bd4 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be6:	686b      	ldr	r3, [r5, #4]
 8005be8:	6922      	ldr	r2, [r4, #16]
 8005bea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005bee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005bf2:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	071a      	lsls	r2, r3, #28
 8005bf8:	d519      	bpl.n	8005c2e <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bfa:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bfc:	4d78      	ldr	r5, [pc, #480]	; (8005de0 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 809e 	beq.w	8005d40 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8005c04:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c10:	f7fe fd98 	bl	8004744 <HAL_GetTick>
 8005c14:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c16:	e005      	b.n	8005c24 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c18:	f7fe fd94 	bl	8004744 <HAL_GetTick>
 8005c1c:	1b80      	subs	r0, r0, r6
 8005c1e:	2802      	cmp	r0, #2
 8005c20:	f200 80fc 	bhi.w	8005e1c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c24:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005c28:	079f      	lsls	r7, r3, #30
 8005c2a:	d5f5      	bpl.n	8005c18 <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	0759      	lsls	r1, r3, #29
 8005c30:	d541      	bpl.n	8005cb6 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c32:	4b6b      	ldr	r3, [pc, #428]	; (8005de0 <HAL_RCC_OscConfig+0x2b0>)
 8005c34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c36:	00d2      	lsls	r2, r2, #3
 8005c38:	f100 80f4 	bmi.w	8005e24 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c42:	659a      	str	r2, [r3, #88]	; 0x58
 8005c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c4a:	9301      	str	r3, [sp, #4]
 8005c4c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005c4e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c50:	4e64      	ldr	r6, [pc, #400]	; (8005de4 <HAL_RCC_OscConfig+0x2b4>)
 8005c52:	6833      	ldr	r3, [r6, #0]
 8005c54:	05df      	lsls	r7, r3, #23
 8005c56:	f140 8113 	bpl.w	8005e80 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c5a:	68a3      	ldr	r3, [r4, #8]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	f000 80e3 	beq.w	8005e28 <HAL_RCC_OscConfig+0x2f8>
 8005c62:	2b05      	cmp	r3, #5
 8005c64:	f000 8169 	beq.w	8005f3a <HAL_RCC_OscConfig+0x40a>
 8005c68:	4e5d      	ldr	r6, [pc, #372]	; (8005de0 <HAL_RCC_OscConfig+0x2b0>)
 8005c6a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8005c6e:	f022 0201 	bic.w	r2, r2, #1
 8005c72:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8005c76:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8005c7a:	f022 0204 	bic.w	r2, r2, #4
 8005c7e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f040 80d7 	bne.w	8005e36 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c88:	f7fe fd5c 	bl	8004744 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c8c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005c90:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c92:	e005      	b.n	8005ca0 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c94:	f7fe fd56 	bl	8004744 <HAL_GetTick>
 8005c98:	1bc0      	subs	r0, r0, r7
 8005c9a:	4540      	cmp	r0, r8
 8005c9c:	f200 80be 	bhi.w	8005e1c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ca0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8005ca4:	079a      	lsls	r2, r3, #30
 8005ca6:	d4f5      	bmi.n	8005c94 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ca8:	b125      	cbz	r5, 8005cb4 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005caa:	4a4d      	ldr	r2, [pc, #308]	; (8005de0 <HAL_RCC_OscConfig+0x2b0>)
 8005cac:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cb2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	069b      	lsls	r3, r3, #26
 8005cb8:	d518      	bpl.n	8005cec <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005cba:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cbc:	4d48      	ldr	r5, [pc, #288]	; (8005de0 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 80ca 	beq.w	8005e58 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8005cc4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005cc8:	f043 0301 	orr.w	r3, r3, #1
 8005ccc:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd0:	f7fe fd38 	bl	8004744 <HAL_GetTick>
 8005cd4:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cd6:	e005      	b.n	8005ce4 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cd8:	f7fe fd34 	bl	8004744 <HAL_GetTick>
 8005cdc:	1b80      	subs	r0, r0, r6
 8005cde:	2802      	cmp	r0, #2
 8005ce0:	f200 809c 	bhi.w	8005e1c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ce4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005ce8:	079f      	lsls	r7, r3, #30
 8005cea:	d5f5      	bpl.n	8005cd8 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005cec:	69e0      	ldr	r0, [r4, #28]
 8005cee:	b318      	cbz	r0, 8005d38 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cf0:	4d3b      	ldr	r5, [pc, #236]	; (8005de0 <HAL_RCC_OscConfig+0x2b0>)
 8005cf2:	68ab      	ldr	r3, [r5, #8]
 8005cf4:	f003 030c 	and.w	r3, r3, #12
 8005cf8:	2b0c      	cmp	r3, #12
 8005cfa:	f000 812c 	beq.w	8005f56 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cfe:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d00:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d06:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d08:	f000 80da 	beq.w	8005ec0 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005d0c:	68eb      	ldr	r3, [r5, #12]
 8005d0e:	f023 0303 	bic.w	r3, r3, #3
 8005d12:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005d14:	68eb      	ldr	r3, [r5, #12]
 8005d16:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d1e:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d20:	f7fe fd10 	bl	8004744 <HAL_GetTick>
 8005d24:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d26:	e004      	b.n	8005d32 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d28:	f7fe fd0c 	bl	8004744 <HAL_GetTick>
 8005d2c:	1b00      	subs	r0, r0, r4
 8005d2e:	2802      	cmp	r0, #2
 8005d30:	d874      	bhi.n	8005e1c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d32:	682b      	ldr	r3, [r5, #0]
 8005d34:	019b      	lsls	r3, r3, #6
 8005d36:	d4f7      	bmi.n	8005d28 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8005d38:	2000      	movs	r0, #0
}
 8005d3a:	b002      	add	sp, #8
 8005d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8005d40:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005d44:	f023 0301 	bic.w	r3, r3, #1
 8005d48:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005d4c:	f7fe fcfa 	bl	8004744 <HAL_GetTick>
 8005d50:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d52:	e004      	b.n	8005d5e <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d54:	f7fe fcf6 	bl	8004744 <HAL_GetTick>
 8005d58:	1b80      	subs	r0, r0, r6
 8005d5a:	2802      	cmp	r0, #2
 8005d5c:	d85e      	bhi.n	8005e1c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d5e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005d62:	0798      	lsls	r0, r3, #30
 8005d64:	d4f6      	bmi.n	8005d54 <HAL_RCC_OscConfig+0x224>
 8005d66:	e761      	b.n	8005c2c <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d68:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005d6c:	2903      	cmp	r1, #3
 8005d6e:	f47f aef4 	bne.w	8005b5a <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d72:	4a1b      	ldr	r2, [pc, #108]	; (8005de0 <HAL_RCC_OscConfig+0x2b0>)
 8005d74:	6812      	ldr	r2, [r2, #0]
 8005d76:	0392      	lsls	r2, r2, #14
 8005d78:	f57f af12 	bpl.w	8005ba0 <HAL_RCC_OscConfig+0x70>
 8005d7c:	6862      	ldr	r2, [r4, #4]
 8005d7e:	2a00      	cmp	r2, #0
 8005d80:	f47f af0e 	bne.w	8005ba0 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8005d84:	2001      	movs	r0, #1
}
 8005d86:	b002      	add	sp, #8
 8005d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d8c:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005d90:	2a02      	cmp	r2, #2
 8005d92:	f47f af12 	bne.w	8005bba <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d96:	4b12      	ldr	r3, [pc, #72]	; (8005de0 <HAL_RCC_OscConfig+0x2b0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	055d      	lsls	r5, r3, #21
 8005d9c:	d502      	bpl.n	8005da4 <HAL_RCC_OscConfig+0x274>
 8005d9e:	68e3      	ldr	r3, [r4, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0ef      	beq.n	8005d84 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005da4:	4a0e      	ldr	r2, [pc, #56]	; (8005de0 <HAL_RCC_OscConfig+0x2b0>)
 8005da6:	6920      	ldr	r0, [r4, #16]
 8005da8:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005daa:	490f      	ldr	r1, [pc, #60]	; (8005de8 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005db0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005db4:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005db6:	6808      	ldr	r0, [r1, #0]
 8005db8:	f7fe fc82 	bl	80046c0 <HAL_InitTick>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	d1e1      	bne.n	8005d84 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	071a      	lsls	r2, r3, #28
 8005dc4:	f57f af33 	bpl.w	8005c2e <HAL_RCC_OscConfig+0xfe>
 8005dc8:	e717      	b.n	8005bfa <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dca:	4a05      	ldr	r2, [pc, #20]	; (8005de0 <HAL_RCC_OscConfig+0x2b0>)
 8005dcc:	6813      	ldr	r3, [r2, #0]
 8005dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005dd4:	f7fe fcb6 	bl	8004744 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dd8:	4e01      	ldr	r6, [pc, #4]	; (8005de0 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8005dda:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ddc:	e00b      	b.n	8005df6 <HAL_RCC_OscConfig+0x2c6>
 8005dde:	bf00      	nop
 8005de0:	40021000 	.word	0x40021000
 8005de4:	40007000 	.word	0x40007000
 8005de8:	20000688 	.word	0x20000688
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dec:	f7fe fcaa 	bl	8004744 <HAL_GetTick>
 8005df0:	1b40      	subs	r0, r0, r5
 8005df2:	2864      	cmp	r0, #100	; 0x64
 8005df4:	d812      	bhi.n	8005e1c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005df6:	6833      	ldr	r3, [r6, #0]
 8005df8:	039b      	lsls	r3, r3, #14
 8005dfa:	d5f7      	bpl.n	8005dec <HAL_RCC_OscConfig+0x2bc>
 8005dfc:	e6cf      	b.n	8005b9e <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8005dfe:	682b      	ldr	r3, [r5, #0]
 8005e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e04:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005e06:	f7fe fc9d 	bl	8004744 <HAL_GetTick>
 8005e0a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	0559      	lsls	r1, r3, #21
 8005e10:	d5d6      	bpl.n	8005dc0 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e12:	f7fe fc97 	bl	8004744 <HAL_GetTick>
 8005e16:	1b80      	subs	r0, r0, r6
 8005e18:	2802      	cmp	r0, #2
 8005e1a:	d9f7      	bls.n	8005e0c <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8005e1c:	2003      	movs	r0, #3
}
 8005e1e:	b002      	add	sp, #8
 8005e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8005e24:	2500      	movs	r5, #0
 8005e26:	e713      	b.n	8005c50 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e28:	4a65      	ldr	r2, [pc, #404]	; (8005fc0 <HAL_RCC_OscConfig+0x490>)
 8005e2a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005e2e:	f043 0301 	orr.w	r3, r3, #1
 8005e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005e36:	f7fe fc85 	bl	8004744 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e3a:	4f61      	ldr	r7, [pc, #388]	; (8005fc0 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8005e3c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e3e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e42:	e004      	b.n	8005e4e <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e44:	f7fe fc7e 	bl	8004744 <HAL_GetTick>
 8005e48:	1b80      	subs	r0, r0, r6
 8005e4a:	4540      	cmp	r0, r8
 8005e4c:	d8e6      	bhi.n	8005e1c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e52:	0799      	lsls	r1, r3, #30
 8005e54:	d5f6      	bpl.n	8005e44 <HAL_RCC_OscConfig+0x314>
 8005e56:	e727      	b.n	8005ca8 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8005e58:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005e5c:	f023 0301 	bic.w	r3, r3, #1
 8005e60:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005e64:	f7fe fc6e 	bl	8004744 <HAL_GetTick>
 8005e68:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e6a:	e004      	b.n	8005e76 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e6c:	f7fe fc6a 	bl	8004744 <HAL_GetTick>
 8005e70:	1b80      	subs	r0, r0, r6
 8005e72:	2802      	cmp	r0, #2
 8005e74:	d8d2      	bhi.n	8005e1c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e76:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005e7a:	0798      	lsls	r0, r3, #30
 8005e7c:	d4f6      	bmi.n	8005e6c <HAL_RCC_OscConfig+0x33c>
 8005e7e:	e735      	b.n	8005cec <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e80:	6833      	ldr	r3, [r6, #0]
 8005e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e86:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005e88:	f7fe fc5c 	bl	8004744 <HAL_GetTick>
 8005e8c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e8e:	6833      	ldr	r3, [r6, #0]
 8005e90:	05d8      	lsls	r0, r3, #23
 8005e92:	f53f aee2 	bmi.w	8005c5a <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e96:	f7fe fc55 	bl	8004744 <HAL_GetTick>
 8005e9a:	1bc0      	subs	r0, r0, r7
 8005e9c:	2802      	cmp	r0, #2
 8005e9e:	d9f6      	bls.n	8005e8e <HAL_RCC_OscConfig+0x35e>
 8005ea0:	e7bc      	b.n	8005e1c <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ea2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ea6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005eb8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005eba:	e78b      	b.n	8005dd4 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8005ebc:	2001      	movs	r0, #1
}
 8005ebe:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8005ec0:	f7fe fc40 	bl	8004744 <HAL_GetTick>
 8005ec4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ec6:	e004      	b.n	8005ed2 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec8:	f7fe fc3c 	bl	8004744 <HAL_GetTick>
 8005ecc:	1b80      	subs	r0, r0, r6
 8005ece:	2802      	cmp	r0, #2
 8005ed0:	d8a4      	bhi.n	8005e1c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ed2:	682b      	ldr	r3, [r5, #0]
 8005ed4:	0199      	lsls	r1, r3, #6
 8005ed6:	d4f7      	bmi.n	8005ec8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ed8:	68e9      	ldr	r1, [r5, #12]
 8005eda:	4b3a      	ldr	r3, [pc, #232]	; (8005fc4 <HAL_RCC_OscConfig+0x494>)
 8005edc:	6a22      	ldr	r2, [r4, #32]
 8005ede:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ee0:	4e37      	ldr	r6, [pc, #220]	; (8005fc0 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ee2:	400b      	ands	r3, r1
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8005eea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005eee:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8005ef2:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8005ef6:	3801      	subs	r0, #1
 8005ef8:	0849      	lsrs	r1, r1, #1
 8005efa:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005efe:	3901      	subs	r1, #1
 8005f00:	0852      	lsrs	r2, r2, #1
 8005f02:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8005f06:	3a01      	subs	r2, #1
 8005f08:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005f0c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005f0e:	682b      	ldr	r3, [r5, #0]
 8005f10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f14:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f16:	68eb      	ldr	r3, [r5, #12]
 8005f18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f1c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005f1e:	f7fe fc11 	bl	8004744 <HAL_GetTick>
 8005f22:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f24:	e005      	b.n	8005f32 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f26:	f7fe fc0d 	bl	8004744 <HAL_GetTick>
 8005f2a:	1b00      	subs	r0, r0, r4
 8005f2c:	2802      	cmp	r0, #2
 8005f2e:	f63f af75 	bhi.w	8005e1c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f32:	6833      	ldr	r3, [r6, #0]
 8005f34:	019a      	lsls	r2, r3, #6
 8005f36:	d5f6      	bpl.n	8005f26 <HAL_RCC_OscConfig+0x3f6>
 8005f38:	e6fe      	b.n	8005d38 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f3a:	4b21      	ldr	r3, [pc, #132]	; (8005fc0 <HAL_RCC_OscConfig+0x490>)
 8005f3c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005f40:	f042 0204 	orr.w	r2, r2, #4
 8005f44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005f48:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005f4c:	f042 0201 	orr.w	r2, r2, #1
 8005f50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f54:	e76f      	b.n	8005e36 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f56:	2801      	cmp	r0, #1
 8005f58:	f43f aeef 	beq.w	8005d3a <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8005f5c:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f5e:	6a22      	ldr	r2, [r4, #32]
 8005f60:	f003 0103 	and.w	r1, r3, #3
 8005f64:	4291      	cmp	r1, r2
 8005f66:	f47f af0d 	bne.w	8005d84 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f70:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f72:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005f76:	f47f af05 	bne.w	8005d84 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f7a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005f7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f80:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005f84:	f47f aefe 	bne.w	8005d84 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f88:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005f8a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f8e:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8005f92:	f47f aef7 	bne.w	8005d84 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f96:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005f98:	0852      	lsrs	r2, r2, #1
 8005f9a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8005f9e:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005fa0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005fa4:	f47f aeee 	bne.w	8005d84 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005fa8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005faa:	0852      	lsrs	r2, r2, #1
 8005fac:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005fb0:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fb2:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 8005fb6:	bf14      	ite	ne
 8005fb8:	2001      	movne	r0, #1
 8005fba:	2000      	moveq	r0, #0
 8005fbc:	e6bd      	b.n	8005d3a <HAL_RCC_OscConfig+0x20a>
 8005fbe:	bf00      	nop
 8005fc0:	40021000 	.word	0x40021000
 8005fc4:	019f800c 	.word	0x019f800c

08005fc8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005fc8:	4b18      	ldr	r3, [pc, #96]	; (800602c <HAL_RCC_GetSysClockFreq+0x64>)
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	f002 020c 	and.w	r2, r2, #12
 8005fd0:	2a04      	cmp	r2, #4
 8005fd2:	d027      	beq.n	8006024 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	f002 020c 	and.w	r2, r2, #12
 8005fda:	2a08      	cmp	r2, #8
 8005fdc:	d024      	beq.n	8006028 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	f002 020c 	and.w	r2, r2, #12
 8005fe4:	2a0c      	cmp	r2, #12
 8005fe6:	d001      	beq.n	8005fec <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8005fe8:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8005fea:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fec:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fee:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ff0:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8005ff4:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ff6:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005ffa:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ffe:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006000:	bf0c      	ite	eq
 8006002:	4b0b      	ldreq	r3, [pc, #44]	; (8006030 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006004:	4b0b      	ldrne	r3, [pc, #44]	; (8006034 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006006:	fbb3 f2f2 	udiv	r2, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800600a:	4b08      	ldr	r3, [pc, #32]	; (800602c <HAL_RCC_GetSysClockFreq+0x64>)
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006012:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006016:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006018:	fb02 f000 	mul.w	r0, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800601c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800601e:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8006022:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8006024:	4803      	ldr	r0, [pc, #12]	; (8006034 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006026:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8006028:	4801      	ldr	r0, [pc, #4]	; (8006030 <HAL_RCC_GetSysClockFreq+0x68>)
 800602a:	4770      	bx	lr
 800602c:	40021000 	.word	0x40021000
 8006030:	016e3600 	.word	0x016e3600
 8006034:	00f42400 	.word	0x00f42400

08006038 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006038:	2800      	cmp	r0, #0
 800603a:	f000 80ee 	beq.w	800621a <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800603e:	4a7f      	ldr	r2, [pc, #508]	; (800623c <HAL_RCC_ClockConfig+0x204>)
{
 8006040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006044:	6813      	ldr	r3, [r2, #0]
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	428b      	cmp	r3, r1
 800604c:	460d      	mov	r5, r1
 800604e:	4604      	mov	r4, r0
 8006050:	d20c      	bcs.n	800606c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006052:	6813      	ldr	r3, [r2, #0]
 8006054:	f023 030f 	bic.w	r3, r3, #15
 8006058:	430b      	orrs	r3, r1
 800605a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800605c:	6813      	ldr	r3, [r2, #0]
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	428b      	cmp	r3, r1
 8006064:	d002      	beq.n	800606c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8006066:	2001      	movs	r0, #1
}
 8006068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	07df      	lsls	r7, r3, #31
 8006070:	d563      	bpl.n	800613a <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006072:	6862      	ldr	r2, [r4, #4]
 8006074:	2a03      	cmp	r2, #3
 8006076:	f000 809a 	beq.w	80061ae <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800607a:	4b71      	ldr	r3, [pc, #452]	; (8006240 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800607c:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800607e:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006080:	f000 8091 	beq.w	80061a6 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006084:	055b      	lsls	r3, r3, #21
 8006086:	d5ee      	bpl.n	8006066 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006088:	f7ff ff9e 	bl	8005fc8 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800608c:	4b6d      	ldr	r3, [pc, #436]	; (8006244 <HAL_RCC_ClockConfig+0x20c>)
 800608e:	4298      	cmp	r0, r3
 8006090:	f200 80c5 	bhi.w	800621e <HAL_RCC_ClockConfig+0x1e6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006094:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006096:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800609a:	4e69      	ldr	r6, [pc, #420]	; (8006240 <HAL_RCC_ClockConfig+0x208>)
 800609c:	68b3      	ldr	r3, [r6, #8]
 800609e:	f023 0303 	bic.w	r3, r3, #3
 80060a2:	431a      	orrs	r2, r3
 80060a4:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 80060a6:	f7fe fb4d 	bl	8004744 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060aa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80060ae:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b0:	e004      	b.n	80060bc <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b2:	f7fe fb47 	bl	8004744 <HAL_GetTick>
 80060b6:	1bc0      	subs	r0, r0, r7
 80060b8:	4540      	cmp	r0, r8
 80060ba:	d871      	bhi.n	80061a0 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060bc:	68b3      	ldr	r3, [r6, #8]
 80060be:	6862      	ldr	r2, [r4, #4]
 80060c0:	f003 030c 	and.w	r3, r3, #12
 80060c4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80060c8:	d1f3      	bne.n	80060b2 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	079f      	lsls	r7, r3, #30
 80060ce:	d436      	bmi.n	800613e <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 80060d0:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 80060d4:	d103      	bne.n	80060de <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80060d6:	68b3      	ldr	r3, [r6, #8]
 80060d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060dc:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060de:	4e57      	ldr	r6, [pc, #348]	; (800623c <HAL_RCC_ClockConfig+0x204>)
 80060e0:	6833      	ldr	r3, [r6, #0]
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	42ab      	cmp	r3, r5
 80060e8:	d846      	bhi.n	8006178 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	075a      	lsls	r2, r3, #29
 80060ee:	d506      	bpl.n	80060fe <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060f0:	4953      	ldr	r1, [pc, #332]	; (8006240 <HAL_RCC_ClockConfig+0x208>)
 80060f2:	68e0      	ldr	r0, [r4, #12]
 80060f4:	688a      	ldr	r2, [r1, #8]
 80060f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060fa:	4302      	orrs	r2, r0
 80060fc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060fe:	071b      	lsls	r3, r3, #28
 8006100:	d507      	bpl.n	8006112 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006102:	4a4f      	ldr	r2, [pc, #316]	; (8006240 <HAL_RCC_ClockConfig+0x208>)
 8006104:	6921      	ldr	r1, [r4, #16]
 8006106:	6893      	ldr	r3, [r2, #8]
 8006108:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800610c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006110:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006112:	f7ff ff59 	bl	8005fc8 <HAL_RCC_GetSysClockFreq>
 8006116:	4a4a      	ldr	r2, [pc, #296]	; (8006240 <HAL_RCC_ClockConfig+0x208>)
 8006118:	4c4b      	ldr	r4, [pc, #300]	; (8006248 <HAL_RCC_ClockConfig+0x210>)
 800611a:	6892      	ldr	r2, [r2, #8]
 800611c:	494b      	ldr	r1, [pc, #300]	; (800624c <HAL_RCC_ClockConfig+0x214>)
 800611e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006122:	4603      	mov	r3, r0
 8006124:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8006126:	484a      	ldr	r0, [pc, #296]	; (8006250 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006128:	f002 021f 	and.w	r2, r2, #31
 800612c:	40d3      	lsrs	r3, r2
 800612e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8006130:	6800      	ldr	r0, [r0, #0]
}
 8006132:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8006136:	f7fe bac3 	b.w	80046c0 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800613a:	079e      	lsls	r6, r3, #30
 800613c:	d5cf      	bpl.n	80060de <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800613e:	0758      	lsls	r0, r3, #29
 8006140:	d504      	bpl.n	800614c <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006142:	493f      	ldr	r1, [pc, #252]	; (8006240 <HAL_RCC_ClockConfig+0x208>)
 8006144:	688a      	ldr	r2, [r1, #8]
 8006146:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800614a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800614c:	0719      	lsls	r1, r3, #28
 800614e:	d506      	bpl.n	800615e <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006150:	4a3b      	ldr	r2, [pc, #236]	; (8006240 <HAL_RCC_ClockConfig+0x208>)
 8006152:	6893      	ldr	r3, [r2, #8]
 8006154:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006158:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800615c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800615e:	4a38      	ldr	r2, [pc, #224]	; (8006240 <HAL_RCC_ClockConfig+0x208>)
 8006160:	68a1      	ldr	r1, [r4, #8]
 8006162:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006164:	4e35      	ldr	r6, [pc, #212]	; (800623c <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800616a:	430b      	orrs	r3, r1
 800616c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800616e:	6833      	ldr	r3, [r6, #0]
 8006170:	f003 030f 	and.w	r3, r3, #15
 8006174:	42ab      	cmp	r3, r5
 8006176:	d9b8      	bls.n	80060ea <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006178:	6833      	ldr	r3, [r6, #0]
 800617a:	f023 030f 	bic.w	r3, r3, #15
 800617e:	432b      	orrs	r3, r5
 8006180:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006182:	f7fe fadf 	bl	8004744 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006186:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800618a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800618c:	6833      	ldr	r3, [r6, #0]
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	42ab      	cmp	r3, r5
 8006194:	d0a9      	beq.n	80060ea <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006196:	f7fe fad5 	bl	8004744 <HAL_GetTick>
 800619a:	1bc0      	subs	r0, r0, r7
 800619c:	4540      	cmp	r0, r8
 800619e:	d9f5      	bls.n	800618c <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 80061a0:	2003      	movs	r0, #3
}
 80061a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061a6:	039a      	lsls	r2, r3, #14
 80061a8:	f53f af6e 	bmi.w	8006088 <HAL_RCC_ClockConfig+0x50>
 80061ac:	e75b      	b.n	8006066 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061ae:	4924      	ldr	r1, [pc, #144]	; (8006240 <HAL_RCC_ClockConfig+0x208>)
 80061b0:	6808      	ldr	r0, [r1, #0]
 80061b2:	0180      	lsls	r0, r0, #6
 80061b4:	f57f af57 	bpl.w	8006066 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061b8:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061ba:	68c8      	ldr	r0, [r1, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061bc:	68c9      	ldr	r1, [r1, #12]
      if(pllfreq > 80000000U)
 80061be:	4f21      	ldr	r7, [pc, #132]	; (8006244 <HAL_RCC_ClockConfig+0x20c>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061c0:	f006 0603 	and.w	r6, r6, #3
  switch (pllsource)
 80061c4:	2e03      	cmp	r6, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061c6:	f3c0 1003 	ubfx	r0, r0, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061ca:	bf0c      	ite	eq
 80061cc:	4e21      	ldreq	r6, [pc, #132]	; (8006254 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061ce:	4e22      	ldrne	r6, [pc, #136]	; (8006258 <HAL_RCC_ClockConfig+0x220>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061d0:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061d2:	fbb6 f0f0 	udiv	r0, r6, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061d6:	4e1a      	ldr	r6, [pc, #104]	; (8006240 <HAL_RCC_ClockConfig+0x208>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061d8:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80061dc:	fb00 f101 	mul.w	r1, r0, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061e0:	68f0      	ldr	r0, [r6, #12]
 80061e2:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80061e6:	3001      	adds	r0, #1
 80061e8:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 80061ea:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 80061ee:	42b9      	cmp	r1, r7
 80061f0:	d920      	bls.n	8006234 <HAL_RCC_ClockConfig+0x1fc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80061f2:	68b1      	ldr	r1, [r6, #8]
 80061f4:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 80061f8:	d005      	beq.n	8006206 <HAL_RCC_ClockConfig+0x1ce>
 80061fa:	f013 0902 	ands.w	r9, r3, #2
 80061fe:	f43f af4c 	beq.w	800609a <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006202:	68a3      	ldr	r3, [r4, #8]
 8006204:	b9b3      	cbnz	r3, 8006234 <HAL_RCC_ClockConfig+0x1fc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006206:	490e      	ldr	r1, [pc, #56]	; (8006240 <HAL_RCC_ClockConfig+0x208>)
 8006208:	688b      	ldr	r3, [r1, #8]
 800620a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800620e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006212:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006214:	f04f 0980 	mov.w	r9, #128	; 0x80
 8006218:	e73f      	b.n	800609a <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 800621a:	2001      	movs	r0, #1
}
 800621c:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800621e:	4a08      	ldr	r2, [pc, #32]	; (8006240 <HAL_RCC_ClockConfig+0x208>)
 8006220:	6893      	ldr	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006222:	f04f 0980 	mov.w	r9, #128	; 0x80
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800622a:	ea43 0309 	orr.w	r3, r3, r9
 800622e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006230:	6862      	ldr	r2, [r4, #4]
 8006232:	e732      	b.n	800609a <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006234:	f04f 0900 	mov.w	r9, #0
 8006238:	e72f      	b.n	800609a <HAL_RCC_ClockConfig+0x62>
 800623a:	bf00      	nop
 800623c:	40022000 	.word	0x40022000
 8006240:	40021000 	.word	0x40021000
 8006244:	04c4b400 	.word	0x04c4b400
 8006248:	0800ccc0 	.word	0x0800ccc0
 800624c:	20000680 	.word	0x20000680
 8006250:	20000688 	.word	0x20000688
 8006254:	016e3600 	.word	0x016e3600
 8006258:	00f42400 	.word	0x00f42400

0800625c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 800625c:	4b01      	ldr	r3, [pc, #4]	; (8006264 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800625e:	6818      	ldr	r0, [r3, #0]
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20000680 	.word	0x20000680

08006268 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006268:	4b05      	ldr	r3, [pc, #20]	; (8006280 <HAL_RCC_GetPCLK1Freq+0x18>)
 800626a:	4a06      	ldr	r2, [pc, #24]	; (8006284 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800626c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800626e:	4906      	ldr	r1, [pc, #24]	; (8006288 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006270:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006274:	6808      	ldr	r0, [r1, #0]
 8006276:	5cd3      	ldrb	r3, [r2, r3]
 8006278:	f003 031f 	and.w	r3, r3, #31
}
 800627c:	40d8      	lsrs	r0, r3
 800627e:	4770      	bx	lr
 8006280:	40021000 	.word	0x40021000
 8006284:	0800ccd0 	.word	0x0800ccd0
 8006288:	20000680 	.word	0x20000680

0800628c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800628c:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <HAL_RCC_GetPCLK2Freq+0x18>)
 800628e:	4a06      	ldr	r2, [pc, #24]	; (80062a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006290:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006292:	4906      	ldr	r1, [pc, #24]	; (80062ac <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006294:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006298:	6808      	ldr	r0, [r1, #0]
 800629a:	5cd3      	ldrb	r3, [r2, r3]
 800629c:	f003 031f 	and.w	r3, r3, #31
}
 80062a0:	40d8      	lsrs	r0, r3
 80062a2:	4770      	bx	lr
 80062a4:	40021000 	.word	0x40021000
 80062a8:	0800ccd0 	.word	0x0800ccd0
 80062ac:	20000680 	.word	0x20000680

080062b0 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80062b0:	4a02      	ldr	r2, [pc, #8]	; (80062bc <HAL_RCC_EnableCSS+0xc>)
 80062b2:	6813      	ldr	r3, [r2, #0]
 80062b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062b8:	6013      	str	r3, [r2, #0]
}
 80062ba:	4770      	bx	lr
 80062bc:	40021000 	.word	0x40021000

080062c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062c4:	6803      	ldr	r3, [r0, #0]
{
 80062c6:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062c8:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 80062cc:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062ce:	d056      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062d0:	4b9f      	ldr	r3, [pc, #636]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80062d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80062d4:	00d5      	lsls	r5, r2, #3
 80062d6:	f140 810c 	bpl.w	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 80062da:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062dc:	4d9d      	ldr	r5, [pc, #628]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80062de:	682b      	ldr	r3, [r5, #0]
 80062e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e4:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062e6:	f7fe fa2d 	bl	8004744 <HAL_GetTick>
 80062ea:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062ec:	e005      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ee:	f7fe fa29 	bl	8004744 <HAL_GetTick>
 80062f2:	1b83      	subs	r3, r0, r6
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	f200 8107 	bhi.w	8006508 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062fa:	682b      	ldr	r3, [r5, #0]
 80062fc:	05d8      	lsls	r0, r3, #23
 80062fe:	d5f6      	bpl.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006300:	4d93      	ldr	r5, [pc, #588]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006302:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006306:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800630a:	d027      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800630c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800630e:	429a      	cmp	r2, r3
 8006310:	d025      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006312:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006316:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800631a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800631e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006322:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800632a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800632e:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006332:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8006334:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006338:	f140 8108 	bpl.w	800654c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633c:	f7fe fa02 	bl	8004744 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006340:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006344:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006346:	e005      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006348:	f7fe f9fc 	bl	8004744 <HAL_GetTick>
 800634c:	1b80      	subs	r0, r0, r6
 800634e:	4540      	cmp	r0, r8
 8006350:	f200 80da 	bhi.w	8006508 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006354:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006358:	079b      	lsls	r3, r3, #30
 800635a:	d5f5      	bpl.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x88>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800635c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800635e:	497c      	ldr	r1, [pc, #496]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006360:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006364:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006368:	4313      	orrs	r3, r2
 800636a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800636e:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006370:	b127      	cbz	r7, 800637c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006372:	4a77      	ldr	r2, [pc, #476]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006374:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800637a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	07de      	lsls	r6, r3, #31
 8006380:	d508      	bpl.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006382:	4973      	ldr	r1, [pc, #460]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006384:	6865      	ldr	r5, [r4, #4]
 8006386:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800638a:	f022 0203 	bic.w	r2, r2, #3
 800638e:	432a      	orrs	r2, r5
 8006390:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006394:	079d      	lsls	r5, r3, #30
 8006396:	d508      	bpl.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006398:	496d      	ldr	r1, [pc, #436]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800639a:	68a5      	ldr	r5, [r4, #8]
 800639c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80063a0:	f022 020c 	bic.w	r2, r2, #12
 80063a4:	432a      	orrs	r2, r5
 80063a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063aa:	0759      	lsls	r1, r3, #29
 80063ac:	d508      	bpl.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063ae:	4968      	ldr	r1, [pc, #416]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80063b0:	68e5      	ldr	r5, [r4, #12]
 80063b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80063b6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80063ba:	432a      	orrs	r2, r5
 80063bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063c0:	071a      	lsls	r2, r3, #28
 80063c2:	d508      	bpl.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063c4:	4962      	ldr	r1, [pc, #392]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80063c6:	6925      	ldr	r5, [r4, #16]
 80063c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80063cc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80063d0:	432a      	orrs	r2, r5
 80063d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063d6:	069f      	lsls	r7, r3, #26
 80063d8:	d508      	bpl.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063da:	495d      	ldr	r1, [pc, #372]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80063dc:	6965      	ldr	r5, [r4, #20]
 80063de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80063e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80063e6:	432a      	orrs	r2, r5
 80063e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063ec:	065e      	lsls	r6, r3, #25
 80063ee:	d508      	bpl.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063f0:	4957      	ldr	r1, [pc, #348]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80063f2:	69a5      	ldr	r5, [r4, #24]
 80063f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80063f8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80063fc:	432a      	orrs	r2, r5
 80063fe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006402:	061d      	lsls	r5, r3, #24
 8006404:	d508      	bpl.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006406:	4952      	ldr	r1, [pc, #328]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006408:	69e5      	ldr	r5, [r4, #28]
 800640a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800640e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006412:	432a      	orrs	r2, r5
 8006414:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006418:	05d9      	lsls	r1, r3, #23
 800641a:	d508      	bpl.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800641c:	494c      	ldr	r1, [pc, #304]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800641e:	6a25      	ldr	r5, [r4, #32]
 8006420:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006424:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006428:	432a      	orrs	r2, r5
 800642a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800642e:	059a      	lsls	r2, r3, #22
 8006430:	d508      	bpl.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006432:	4947      	ldr	r1, [pc, #284]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006434:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006436:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800643a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800643e:	432a      	orrs	r2, r5
 8006440:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006444:	055f      	lsls	r7, r3, #21
 8006446:	d50b      	bpl.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006448:	4941      	ldr	r1, [pc, #260]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800644a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800644c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006450:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006454:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006456:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800645a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800645e:	d055      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006460:	051e      	lsls	r6, r3, #20
 8006462:	d50b      	bpl.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006464:	493a      	ldr	r1, [pc, #232]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006466:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006468:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800646c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006470:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006472:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006476:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800647a:	d04c      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800647c:	04dd      	lsls	r5, r3, #19
 800647e:	d50b      	bpl.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006480:	4933      	ldr	r1, [pc, #204]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006482:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8006484:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006488:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800648c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800648e:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006492:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006496:	d043      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006498:	0499      	lsls	r1, r3, #18
 800649a:	d50b      	bpl.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800649c:	492c      	ldr	r1, [pc, #176]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800649e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80064a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80064a4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80064a8:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064aa:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064b2:	d03a      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064b4:	045a      	lsls	r2, r3, #17
 80064b6:	d50b      	bpl.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064b8:	4925      	ldr	r1, [pc, #148]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80064ba:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80064bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80064c0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80064c4:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064c6:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064ce:	d031      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80064d0:	041b      	lsls	r3, r3, #16
 80064d2:	d50b      	bpl.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80064d4:	4a1e      	ldr	r2, [pc, #120]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80064d6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80064d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80064dc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80064e0:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80064e2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80064e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80064ea:	d028      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 80064ec:	b002      	add	sp, #8
 80064ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80064f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80064f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80064f8:	659a      	str	r2, [r3, #88]	; 0x58
 80064fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006500:	9301      	str	r3, [sp, #4]
 8006502:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006504:	2701      	movs	r7, #1
 8006506:	e6e9      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8006508:	2003      	movs	r0, #3
 800650a:	e731      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800650c:	68ca      	ldr	r2, [r1, #12]
 800650e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006512:	60ca      	str	r2, [r1, #12]
 8006514:	e7a4      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006516:	68ca      	ldr	r2, [r1, #12]
 8006518:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800651c:	60ca      	str	r2, [r1, #12]
 800651e:	e7ad      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006520:	68ca      	ldr	r2, [r1, #12]
 8006522:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006526:	60ca      	str	r2, [r1, #12]
 8006528:	e7b6      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800652a:	68ca      	ldr	r2, [r1, #12]
 800652c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006530:	60ca      	str	r2, [r1, #12]
 8006532:	e7bf      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006534:	68ca      	ldr	r2, [r1, #12]
 8006536:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800653a:	60ca      	str	r2, [r1, #12]
 800653c:	e7c8      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800653e:	68d3      	ldr	r3, [r2, #12]
 8006540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006544:	60d3      	str	r3, [r2, #12]
}
 8006546:	b002      	add	sp, #8
 8006548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800654c:	4613      	mov	r3, r2
 800654e:	e706      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8006550:	40021000 	.word	0x40021000
 8006554:	40007000 	.word	0x40007000

08006558 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006558:	6a03      	ldr	r3, [r0, #32]
 800655a:	f023 0301 	bic.w	r3, r3, #1
 800655e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006560:	6a03      	ldr	r3, [r0, #32]
{
 8006562:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006564:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006566:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006568:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800656a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800656e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006572:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006574:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8006576:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800657a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800657c:	4d13      	ldr	r5, [pc, #76]	; (80065cc <TIM_OC1_SetConfig+0x74>)
 800657e:	42a8      	cmp	r0, r5
 8006580:	d00f      	beq.n	80065a2 <TIM_OC1_SetConfig+0x4a>
 8006582:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006586:	42a8      	cmp	r0, r5
 8006588:	d00b      	beq.n	80065a2 <TIM_OC1_SetConfig+0x4a>
 800658a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800658e:	42a8      	cmp	r0, r5
 8006590:	d007      	beq.n	80065a2 <TIM_OC1_SetConfig+0x4a>
 8006592:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006596:	42a8      	cmp	r0, r5
 8006598:	d003      	beq.n	80065a2 <TIM_OC1_SetConfig+0x4a>
 800659a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800659e:	42a8      	cmp	r0, r5
 80065a0:	d10d      	bne.n	80065be <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065a2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80065a4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80065a8:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065aa:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065ae:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80065b2:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80065b6:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80065ba:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065be:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80065c0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80065c2:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80065c4:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 80065c6:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80065c8:	6203      	str	r3, [r0, #32]
}
 80065ca:	4770      	bx	lr
 80065cc:	40012c00 	.word	0x40012c00

080065d0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065d0:	6a03      	ldr	r3, [r0, #32]
 80065d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065d6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065d8:	6a03      	ldr	r3, [r0, #32]
{
 80065da:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065dc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065de:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80065e6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80065ea:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065ec:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80065ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065f6:	4d15      	ldr	r5, [pc, #84]	; (800664c <TIM_OC3_SetConfig+0x7c>)
 80065f8:	42a8      	cmp	r0, r5
 80065fa:	d010      	beq.n	800661e <TIM_OC3_SetConfig+0x4e>
 80065fc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006600:	42a8      	cmp	r0, r5
 8006602:	d00c      	beq.n	800661e <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006604:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006608:	42a8      	cmp	r0, r5
 800660a:	d00f      	beq.n	800662c <TIM_OC3_SetConfig+0x5c>
 800660c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006610:	42a8      	cmp	r0, r5
 8006612:	d00b      	beq.n	800662c <TIM_OC3_SetConfig+0x5c>
 8006614:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006618:	42a8      	cmp	r0, r5
 800661a:	d10f      	bne.n	800663c <TIM_OC3_SetConfig+0x6c>
 800661c:	e006      	b.n	800662c <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800661e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006624:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800662c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006630:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006634:	ea46 0c05 	orr.w	ip, r6, r5
 8006638:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800663c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800663e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006640:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006642:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8006644:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8006646:	6203      	str	r3, [r0, #32]
}
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	40012c00 	.word	0x40012c00

08006650 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006650:	6a03      	ldr	r3, [r0, #32]
 8006652:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006656:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006658:	6a03      	ldr	r3, [r0, #32]
{
 800665a:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800665c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800665e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006660:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006662:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006666:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800666a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800666e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8006670:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006674:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006678:	4d14      	ldr	r5, [pc, #80]	; (80066cc <TIM_OC4_SetConfig+0x7c>)
 800667a:	42a8      	cmp	r0, r5
 800667c:	d010      	beq.n	80066a0 <TIM_OC4_SetConfig+0x50>
 800667e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006682:	42a8      	cmp	r0, r5
 8006684:	d00c      	beq.n	80066a0 <TIM_OC4_SetConfig+0x50>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006686:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800668a:	42a8      	cmp	r0, r5
 800668c:	d00f      	beq.n	80066ae <TIM_OC4_SetConfig+0x5e>
 800668e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006692:	42a8      	cmp	r0, r5
 8006694:	d00b      	beq.n	80066ae <TIM_OC4_SetConfig+0x5e>
 8006696:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800669a:	42a8      	cmp	r0, r5
 800669c:	d10f      	bne.n	80066be <TIM_OC4_SetConfig+0x6e>
 800669e:	e006      	b.n	80066ae <TIM_OC4_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80066a0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80066a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80066a6:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80066aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80066ae:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80066b2:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80066b6:	ea46 0c05 	orr.w	ip, r6, r5
 80066ba:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066be:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80066c0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80066c2:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80066c4:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 80066c6:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80066c8:	6203      	str	r3, [r0, #32]
}
 80066ca:	4770      	bx	lr
 80066cc:	40012c00 	.word	0x40012c00

080066d0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80066d0:	2800      	cmp	r0, #0
 80066d2:	f000 8081 	beq.w	80067d8 <HAL_TIM_Base_Init+0x108>
{
 80066d6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80066d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80066dc:	4604      	mov	r4, r0
 80066de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d06d      	beq.n	80067c2 <HAL_TIM_Base_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066e8:	493c      	ldr	r1, [pc, #240]	; (80067dc <HAL_TIM_Base_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80066ea:	2302      	movs	r3, #2
 80066ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066f0:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80066f2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066f4:	d051      	beq.n	800679a <HAL_TIM_Base_Init+0xca>
 80066f6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80066fa:	d021      	beq.n	8006740 <HAL_TIM_Base_Init+0x70>
 80066fc:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8006700:	428a      	cmp	r2, r1
 8006702:	d01d      	beq.n	8006740 <HAL_TIM_Base_Init+0x70>
 8006704:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006708:	428a      	cmp	r2, r1
 800670a:	d019      	beq.n	8006740 <HAL_TIM_Base_Init+0x70>
 800670c:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8006710:	428a      	cmp	r2, r1
 8006712:	d042      	beq.n	800679a <HAL_TIM_Base_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006714:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8006718:	428a      	cmp	r2, r1
 800671a:	d057      	beq.n	80067cc <HAL_TIM_Base_Init+0xfc>
 800671c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006720:	428a      	cmp	r2, r1
 8006722:	d053      	beq.n	80067cc <HAL_TIM_Base_Init+0xfc>
 8006724:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006728:	428a      	cmp	r2, r1
 800672a:	d04f      	beq.n	80067cc <HAL_TIM_Base_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800672c:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800672e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006734:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8006736:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8006738:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800673a:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800673c:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800673e:	e010      	b.n	8006762 <HAL_TIM_Base_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8006740:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006742:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006748:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800674a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800674e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006750:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006756:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006758:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800675a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800675c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800675e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006760:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006762:	2301      	movs	r3, #1
 8006764:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006766:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800676a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800676e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006772:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006776:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800677a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800677e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006782:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006786:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800678a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800678e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006792:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006796:	2000      	movs	r0, #0
}
 8006798:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800679a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800679c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800679e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80067a2:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80067a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067a8:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067aa:	69a1      	ldr	r1, [r4, #24]
 80067ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b0:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80067b2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067b4:	68e3      	ldr	r3, [r4, #12]
 80067b6:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80067b8:	6863      	ldr	r3, [r4, #4]
 80067ba:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80067bc:	6963      	ldr	r3, [r4, #20]
 80067be:	6313      	str	r3, [r2, #48]	; 0x30
 80067c0:	e7cf      	b.n	8006762 <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 80067c2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80067c6:	f7fd f853 	bl	8003870 <HAL_TIM_Base_MspInit>
 80067ca:	e78c      	b.n	80066e6 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067cc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ce:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80067d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067d4:	4303      	orrs	r3, r0
 80067d6:	e7e9      	b.n	80067ac <HAL_TIM_Base_Init+0xdc>
    return HAL_ERROR;
 80067d8:	2001      	movs	r0, #1
}
 80067da:	4770      	bx	lr
 80067dc:	40012c00 	.word	0x40012c00

080067e0 <HAL_TIM_PWM_MspInit>:
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop

080067e4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80067e4:	2800      	cmp	r0, #0
 80067e6:	f000 8081 	beq.w	80068ec <HAL_TIM_PWM_Init+0x108>
{
 80067ea:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80067ec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80067f0:	4604      	mov	r4, r0
 80067f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d06d      	beq.n	80068d6 <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067fa:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067fc:	493c      	ldr	r1, [pc, #240]	; (80068f0 <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80067fe:	2302      	movs	r3, #2
 8006800:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006804:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8006806:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006808:	d051      	beq.n	80068ae <HAL_TIM_PWM_Init+0xca>
 800680a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800680e:	d021      	beq.n	8006854 <HAL_TIM_PWM_Init+0x70>
 8006810:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8006814:	428a      	cmp	r2, r1
 8006816:	d01d      	beq.n	8006854 <HAL_TIM_PWM_Init+0x70>
 8006818:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800681c:	428a      	cmp	r2, r1
 800681e:	d019      	beq.n	8006854 <HAL_TIM_PWM_Init+0x70>
 8006820:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8006824:	428a      	cmp	r2, r1
 8006826:	d042      	beq.n	80068ae <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006828:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800682c:	428a      	cmp	r2, r1
 800682e:	d057      	beq.n	80068e0 <HAL_TIM_PWM_Init+0xfc>
 8006830:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006834:	428a      	cmp	r2, r1
 8006836:	d053      	beq.n	80068e0 <HAL_TIM_PWM_Init+0xfc>
 8006838:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800683c:	428a      	cmp	r2, r1
 800683e:	d04f      	beq.n	80068e0 <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006840:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006842:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006848:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800684a:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800684c:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800684e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006850:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006852:	e010      	b.n	8006876 <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8006854:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006856:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800685c:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800685e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006862:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006864:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800686a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800686c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800686e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006870:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006872:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006874:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006876:	2301      	movs	r3, #1
 8006878:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800687a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800687e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006882:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006886:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800688a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800688e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006896:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800689a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800689e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80068a2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80068a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80068aa:	2000      	movs	r0, #0
}
 80068ac:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 80068ae:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068b0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80068b6:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80068b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068bc:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068be:	69a1      	ldr	r1, [r4, #24]
 80068c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068c4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80068c6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068c8:	68e3      	ldr	r3, [r4, #12]
 80068ca:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80068cc:	6863      	ldr	r3, [r4, #4]
 80068ce:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80068d0:	6963      	ldr	r3, [r4, #20]
 80068d2:	6313      	str	r3, [r2, #48]	; 0x30
 80068d4:	e7cf      	b.n	8006876 <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 80068d6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80068da:	f7ff ff81 	bl	80067e0 <HAL_TIM_PWM_MspInit>
 80068de:	e78c      	b.n	80067fa <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068e0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068e2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80068e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068e8:	4303      	orrs	r3, r0
 80068ea:	e7e9      	b.n	80068c0 <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 80068ec:	2001      	movs	r0, #1
}
 80068ee:	4770      	bx	lr
 80068f0:	40012c00 	.word	0x40012c00

080068f4 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 80068f4:	2800      	cmp	r0, #0
 80068f6:	f000 8096 	beq.w	8006a26 <HAL_TIM_Encoder_Init+0x132>
{
 80068fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80068fc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006900:	460d      	mov	r5, r1
 8006902:	4604      	mov	r4, r0
 8006904:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 8087 	beq.w	8006a1c <HAL_TIM_Encoder_Init+0x128>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800690e:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006910:	4946      	ldr	r1, [pc, #280]	; (8006a2c <HAL_TIM_Encoder_Init+0x138>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006912:	2202      	movs	r2, #2
 8006914:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006918:	689a      	ldr	r2, [r3, #8]
 800691a:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 800691e:	f022 0207 	bic.w	r2, r2, #7
 8006922:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006924:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8006926:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006928:	d064      	beq.n	80069f4 <HAL_TIM_Encoder_Init+0x100>
 800692a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692e:	d018      	beq.n	8006962 <HAL_TIM_Encoder_Init+0x6e>
 8006930:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8006934:	428b      	cmp	r3, r1
 8006936:	d014      	beq.n	8006962 <HAL_TIM_Encoder_Init+0x6e>
 8006938:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800693c:	428b      	cmp	r3, r1
 800693e:	d010      	beq.n	8006962 <HAL_TIM_Encoder_Init+0x6e>
 8006940:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8006944:	428b      	cmp	r3, r1
 8006946:	d055      	beq.n	80069f4 <HAL_TIM_Encoder_Init+0x100>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006948:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800694c:	428b      	cmp	r3, r1
 800694e:	d055      	beq.n	80069fc <HAL_TIM_Encoder_Init+0x108>
 8006950:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006954:	428b      	cmp	r3, r1
 8006956:	d051      	beq.n	80069fc <HAL_TIM_Encoder_Init+0x108>
 8006958:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800695c:	428b      	cmp	r3, r1
 800695e:	d108      	bne.n	8006972 <HAL_TIM_Encoder_Init+0x7e>
 8006960:	e04c      	b.n	80069fc <HAL_TIM_Encoder_Init+0x108>
    tmpcr1 |= Structure->CounterMode;
 8006962:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006964:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006968:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800696a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800696c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006970:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006972:	69a1      	ldr	r1, [r4, #24]
 8006974:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006978:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800697a:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800697c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800697e:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006980:	6862      	ldr	r2, [r4, #4]
 8006982:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006984:	2601      	movs	r6, #1
 8006986:	615e      	str	r6, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 8006988:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800698a:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800698c:	68af      	ldr	r7, [r5, #8]
 800698e:	69aa      	ldr	r2, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006990:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8006994:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006998:	ea47 2202 	orr.w	r2, r7, r2, lsl #8
 800699c:	430a      	orrs	r2, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800699e:	f422 417c 	bic.w	r1, r2, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80069a2:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80069a4:	69ef      	ldr	r7, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80069a6:	0112      	lsls	r2, r2, #4
 80069a8:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80069ac:	68ef      	ldr	r7, [r5, #12]
 80069ae:	433a      	orrs	r2, r7
  tmpccer = htim->Instance->CCER;
 80069b0:	6a1f      	ldr	r7, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80069b2:	f027 0caa 	bic.w	ip, r7, #170	; 0xaa
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80069b6:	6a2f      	ldr	r7, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80069b8:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80069bc:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
 80069c0:	430a      	orrs	r2, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80069c2:	696f      	ldr	r7, [r5, #20]
 80069c4:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 80069c6:	682d      	ldr	r5, [r5, #0]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80069c8:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 80069cc:	4328      	orrs	r0, r5
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80069ce:	ea41 010c 	orr.w	r1, r1, ip
  htim->Instance->SMCR = tmpsmcr;
 80069d2:	6098      	str	r0, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 80069d4:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 80069d6:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069d8:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069dc:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069e0:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069e4:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069e8:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80069ec:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  return HAL_OK;
 80069f0:	2000      	movs	r0, #0
}
 80069f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 80069f4:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80069fa:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069fc:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80069fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a02:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a04:	69a1      	ldr	r1, [r4, #24]
 8006a06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a0a:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8006a0c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a0e:	68e2      	ldr	r2, [r4, #12]
 8006a10:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006a12:	6862      	ldr	r2, [r4, #4]
 8006a14:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006a16:	6962      	ldr	r2, [r4, #20]
 8006a18:	631a      	str	r2, [r3, #48]	; 0x30
 8006a1a:	e7b3      	b.n	8006984 <HAL_TIM_Encoder_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 8006a1c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8006a20:	f7fc ff60 	bl	80038e4 <HAL_TIM_Encoder_MspInit>
 8006a24:	e773      	b.n	800690e <HAL_TIM_Encoder_Init+0x1a>
    return HAL_ERROR;
 8006a26:	2001      	movs	r0, #1
}
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40012c00 	.word	0x40012c00

08006a30 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8006a30:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d069      	beq.n	8006b0c <HAL_TIM_SlaveConfigSynchro+0xdc>
 8006a38:	4684      	mov	ip, r0
 8006a3a:	2201      	movs	r2, #1
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a3c:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006a3e:	2302      	movs	r3, #2
{
 8006a40:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8006a42:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006a46:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006a4a:	6882      	ldr	r2, [r0, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006a4c:	684b      	ldr	r3, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006a4e:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a50:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006a54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006a58:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006a5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a5e:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006a62:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006a64:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8006a66:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8006a68:	d05e      	beq.n	8006b28 <HAL_TIM_SlaveConfigSynchro+0xf8>
 8006a6a:	d816      	bhi.n	8006a9a <HAL_TIM_SlaveConfigSynchro+0x6a>
 8006a6c:	2b40      	cmp	r3, #64	; 0x40
 8006a6e:	d06e      	beq.n	8006b4e <HAL_TIM_SlaveConfigSynchro+0x11e>
 8006a70:	d933      	bls.n	8006ada <HAL_TIM_SlaveConfigSynchro+0xaa>
 8006a72:	2b50      	cmp	r3, #80	; 0x50
 8006a74:	d141      	bne.n	8006afa <HAL_TIM_SlaveConfigSynchro+0xca>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a76:	688a      	ldr	r2, [r1, #8]
 8006a78:	690c      	ldr	r4, [r1, #16]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a7a:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a7c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006a80:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a82:	6a01      	ldr	r1, [r0, #32]
 8006a84:	f021 0101 	bic.w	r1, r1, #1
 8006a88:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a8a:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a90:	ea43 1304 	orr.w	r3, r3, r4, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a94:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006a96:	6202      	str	r2, [r0, #32]
 8006a98:	e00d      	b.n	8006ab6 <HAL_TIM_SlaveConfigSynchro+0x86>
  switch (sSlaveConfig->InputTrigger)
 8006a9a:	2b70      	cmp	r3, #112	; 0x70
 8006a9c:	d038      	beq.n	8006b10 <HAL_TIM_SlaveConfigSynchro+0xe0>
 8006a9e:	2b6f      	cmp	r3, #111	; 0x6f
 8006aa0:	d92b      	bls.n	8006afa <HAL_TIM_SlaveConfigSynchro+0xca>
 8006aa2:	4a34      	ldr	r2, [pc, #208]	; (8006b74 <HAL_TIM_SlaveConfigSynchro+0x144>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d006      	beq.n	8006ab6 <HAL_TIM_SlaveConfigSynchro+0x86>
 8006aa8:	d91d      	bls.n	8006ae6 <HAL_TIM_SlaveConfigSynchro+0xb6>
 8006aaa:	4a33      	ldr	r2, [pc, #204]	; (8006b78 <HAL_TIM_SlaveConfigSynchro+0x148>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d002      	beq.n	8006ab6 <HAL_TIM_SlaveConfigSynchro+0x86>
 8006ab0:	3230      	adds	r2, #48	; 0x30
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d121      	bne.n	8006afa <HAL_TIM_SlaveConfigSynchro+0xca>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006ab6:	68c3      	ldr	r3, [r0, #12]
 8006ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006abc:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006abe:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 8006ac0:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8006ac2:	2101      	movs	r1, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ac8:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8006aca:	f88c 103d 	strb.w	r1, [ip, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006ace:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  return HAL_OK;
 8006ad2:	4610      	mov	r0, r2
}
 8006ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ad8:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	d0eb      	beq.n	8006ab6 <HAL_TIM_SlaveConfigSynchro+0x86>
 8006ade:	d909      	bls.n	8006af4 <HAL_TIM_SlaveConfigSynchro+0xc4>
 8006ae0:	2b30      	cmp	r3, #48	; 0x30
 8006ae2:	d10a      	bne.n	8006afa <HAL_TIM_SlaveConfigSynchro+0xca>
 8006ae4:	e7e7      	b.n	8006ab6 <HAL_TIM_SlaveConfigSynchro+0x86>
 8006ae6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006aea:	d0e4      	beq.n	8006ab6 <HAL_TIM_SlaveConfigSynchro+0x86>
 8006aec:	3a10      	subs	r2, #16
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d0e1      	beq.n	8006ab6 <HAL_TIM_SlaveConfigSynchro+0x86>
 8006af2:	e002      	b.n	8006afa <HAL_TIM_SlaveConfigSynchro+0xca>
 8006af4:	f033 0310 	bics.w	r3, r3, #16
 8006af8:	d0dd      	beq.n	8006ab6 <HAL_TIM_SlaveConfigSynchro+0x86>
    htim->State = HAL_TIM_STATE_READY;
 8006afa:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8006afc:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8006afe:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006b02:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 8006b06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b0a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006b0c:	2002      	movs	r0, #2
}
 8006b0e:	4770      	bx	lr

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b10:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8006b14:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b16:	6909      	ldr	r1, [r1, #16]
 8006b18:	4323      	orrs	r3, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b1a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006b22:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b24:	6083      	str	r3, [r0, #8]
 8006b26:	e7c6      	b.n	8006ab6 <HAL_TIM_SlaveConfigSynchro+0x86>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b28:	690b      	ldr	r3, [r1, #16]
 8006b2a:	688c      	ldr	r4, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b2c:	6a01      	ldr	r1, [r0, #32]
 8006b2e:	f021 0110 	bic.w	r1, r1, #16
 8006b32:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b34:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b36:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b3a:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccer = TIMx->CCER;
 8006b3e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8006b40:	6182      	str	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b46:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCER = tmpccer;
 8006b4a:	6203      	str	r3, [r0, #32]
 8006b4c:	e7b3      	b.n	8006ab6 <HAL_TIM_SlaveConfigSynchro+0x86>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006b4e:	2c05      	cmp	r4, #5
 8006b50:	d0d3      	beq.n	8006afa <HAL_TIM_SlaveConfigSynchro+0xca>
 8006b52:	f1b4 1f01 	cmp.w	r4, #65537	; 0x10001
 8006b56:	d0d0      	beq.n	8006afa <HAL_TIM_SlaveConfigSynchro+0xca>
      tmpccer = htim->Instance->CCER;
 8006b58:	6a04      	ldr	r4, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006b5a:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006b5c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006b5e:	f022 0201 	bic.w	r2, r2, #1
 8006b62:	6202      	str	r2, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006b64:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006b6a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8006b6e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8006b70:	6204      	str	r4, [r0, #32]
      break;
 8006b72:	e7a0      	b.n	8006ab6 <HAL_TIM_SlaveConfigSynchro+0x86>
 8006b74:	00100030 	.word	0x00100030
 8006b78:	00100040 	.word	0x00100040

08006b7c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b7c:	6a03      	ldr	r3, [r0, #32]
 8006b7e:	f023 0310 	bic.w	r3, r3, #16
 8006b82:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006b84:	6a03      	ldr	r3, [r0, #32]
{
 8006b86:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8006b88:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006b8a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b8c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b8e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006b92:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b96:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b9a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8006b9c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ba0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ba4:	4d14      	ldr	r5, [pc, #80]	; (8006bf8 <TIM_OC2_SetConfig+0x7c>)
 8006ba6:	42a8      	cmp	r0, r5
 8006ba8:	d010      	beq.n	8006bcc <TIM_OC2_SetConfig+0x50>
 8006baa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006bae:	42a8      	cmp	r0, r5
 8006bb0:	d00c      	beq.n	8006bcc <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006bb6:	42a8      	cmp	r0, r5
 8006bb8:	d00f      	beq.n	8006bda <TIM_OC2_SetConfig+0x5e>
 8006bba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006bbe:	42a8      	cmp	r0, r5
 8006bc0:	d00b      	beq.n	8006bda <TIM_OC2_SetConfig+0x5e>
 8006bc2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006bc6:	42a8      	cmp	r0, r5
 8006bc8:	d10f      	bne.n	8006bea <TIM_OC2_SetConfig+0x6e>
 8006bca:	e006      	b.n	8006bda <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bcc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bd2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bda:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bde:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006be2:	ea46 0c05 	orr.w	ip, r6, r5
 8006be6:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8006bea:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006bec:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006bee:	6182      	str	r2, [r0, #24]
}
 8006bf0:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8006bf2:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006bf4:	6203      	str	r3, [r0, #32]
}
 8006bf6:	4770      	bx	lr
 8006bf8:	40012c00 	.word	0x40012c00

08006bfc <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8006bfc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	f000 80f4 	beq.w	8006dee <HAL_TIM_PWM_ConfigChannel+0x1f2>
 8006c06:	2301      	movs	r3, #1
{
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8006c0e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006c12:	2a14      	cmp	r2, #20
 8006c14:	d80c      	bhi.n	8006c30 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006c16:	e8df f002 	tbb	[pc, r2]
 8006c1a:	0b53      	.short	0x0b53
 8006c1c:	0b680b0b 	.word	0x0b680b0b
 8006c20:	0b7e0b0b 	.word	0x0b7e0b0b
 8006c24:	0b930b0b 	.word	0x0b930b0b
 8006c28:	0ba90b0b 	.word	0x0ba90b0b
 8006c2c:	0b0b      	.short	0x0b0b
 8006c2e:	10          	.byte	0x10
 8006c2f:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8006c30:	2300      	movs	r3, #0
 8006c32:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8006c36:	2001      	movs	r0, #1
}
 8006c38:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c3a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c3c:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c3e:	6a1a      	ldr	r2, [r3, #32]
 8006c40:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006c44:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006c46:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006c48:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006c4a:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c4c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8006c50:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c54:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c58:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c5a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c5e:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c62:	4e64      	ldr	r6, [pc, #400]	; (8006df4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006c64:	42b3      	cmp	r3, r6
 8006c66:	d00f      	beq.n	8006c88 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8006c68:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006c6c:	42b3      	cmp	r3, r6
 8006c6e:	d00b      	beq.n	8006c88 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8006c70:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006c74:	42b3      	cmp	r3, r6
 8006c76:	d007      	beq.n	8006c88 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8006c78:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006c7c:	42b3      	cmp	r3, r6
 8006c7e:	d003      	beq.n	8006c88 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8006c80:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006c84:	42b3      	cmp	r3, r6
 8006c86:	d104      	bne.n	8006c92 <HAL_TIM_PWM_ConfigChannel+0x96>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c88:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c8a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c8e:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 8006c92:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006c94:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8006c96:	6869      	ldr	r1, [r5, #4]
 8006c98:	64d9      	str	r1, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8006c9a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c9c:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c9e:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ca0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006ca4:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ca6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006ca8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006cac:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006cae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006cb0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006cb4:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006cbc:	2000      	movs	r0, #0
}
 8006cbe:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cc0:	6800      	ldr	r0, [r0, #0]
 8006cc2:	f7ff fc49 	bl	8006558 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cc6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cc8:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cca:	6999      	ldr	r1, [r3, #24]
 8006ccc:	f041 0108 	orr.w	r1, r1, #8
 8006cd0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cd2:	6999      	ldr	r1, [r3, #24]
 8006cd4:	f021 0104 	bic.w	r1, r1, #4
 8006cd8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cda:	699a      	ldr	r2, [r3, #24]
 8006cdc:	4302      	orrs	r2, r0
 8006cde:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006ce6:	2000      	movs	r0, #0
}
 8006ce8:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cea:	6800      	ldr	r0, [r0, #0]
 8006cec:	f7ff ff46 	bl	8006b7c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cf0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cf2:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cf4:	6999      	ldr	r1, [r3, #24]
 8006cf6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006cfa:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cfc:	6999      	ldr	r1, [r3, #24]
 8006cfe:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006d02:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006d0a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006d12:	2000      	movs	r0, #0
}
 8006d14:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d16:	6800      	ldr	r0, [r0, #0]
 8006d18:	f7ff fc5a 	bl	80065d0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d1c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d1e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d20:	69d9      	ldr	r1, [r3, #28]
 8006d22:	f041 0108 	orr.w	r1, r1, #8
 8006d26:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d28:	69d9      	ldr	r1, [r3, #28]
 8006d2a:	f021 0104 	bic.w	r1, r1, #4
 8006d2e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d30:	69da      	ldr	r2, [r3, #28]
 8006d32:	4302      	orrs	r2, r0
 8006d34:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8006d36:	2300      	movs	r3, #0
 8006d38:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006d3c:	2000      	movs	r0, #0
}
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d40:	6800      	ldr	r0, [r0, #0]
 8006d42:	f7ff fc85 	bl	8006650 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d46:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d48:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d4a:	69d9      	ldr	r1, [r3, #28]
 8006d4c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006d50:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d52:	69d9      	ldr	r1, [r3, #28]
 8006d54:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006d58:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d5a:	69da      	ldr	r2, [r3, #28]
 8006d5c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006d60:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8006d62:	2300      	movs	r3, #0
 8006d64:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006d68:	2000      	movs	r0, #0
}
 8006d6a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d6c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8006d6e:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d70:	6a1a      	ldr	r2, [r3, #32]
 8006d72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006d76:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006d78:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006d7a:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006d7c:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d7e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006d82:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8006d86:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d88:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8006d8a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d8e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d92:	4e18      	ldr	r6, [pc, #96]	; (8006df4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006d94:	42b3      	cmp	r3, r6
 8006d96:	d00f      	beq.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8006d98:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006d9c:	42b3      	cmp	r3, r6
 8006d9e:	d00b      	beq.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8006da0:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006da4:	42b3      	cmp	r3, r6
 8006da6:	d007      	beq.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8006da8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006dac:	42b3      	cmp	r3, r6
 8006dae:	d003      	beq.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8006db0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006db4:	42b3      	cmp	r3, r6
 8006db6:	d104      	bne.n	8006dc2 <HAL_TIM_PWM_ConfigChannel+0x1c6>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006db8:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006dba:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006dbe:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8006dc2:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006dc4:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8006dc6:	6869      	ldr	r1, [r5, #4]
 8006dc8:	6499      	str	r1, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8006dca:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006dcc:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006dce:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006dd0:	f041 0108 	orr.w	r1, r1, #8
 8006dd4:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006dd6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006dd8:	f021 0104 	bic.w	r1, r1, #4
 8006ddc:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006dde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006de0:	432a      	orrs	r2, r5
 8006de2:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8006de4:	2300      	movs	r3, #0
 8006de6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006dea:	2000      	movs	r0, #0
}
 8006dec:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8006dee:	2002      	movs	r0, #2
}
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	40012c00 	.word	0x40012c00

08006df8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006df8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d03e      	beq.n	8006e7e <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8006e00:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e02:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e04:	4d1f      	ldr	r5, [pc, #124]	; (8006e84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006e06:	2302      	movs	r3, #2
 8006e08:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e0c:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8006e0e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006e10:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e12:	d028      	beq.n	8006e66 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006e14:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006e18:	42aa      	cmp	r2, r5
 8006e1a:	d024      	beq.n	8006e66 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e1c:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e1e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e26:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e28:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006e2c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e2e:	d00c      	beq.n	8006e4a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006e30:	4b15      	ldr	r3, [pc, #84]	; (8006e88 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d009      	beq.n	8006e4a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006e36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d005      	beq.n	8006e4a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006e3e:	42aa      	cmp	r2, r5
 8006e40:	d003      	beq.n	8006e4a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006e42:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d104      	bne.n	8006e54 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e4a:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e4c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e50:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e52:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006e54:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006e56:	2201      	movs	r2, #1
 8006e58:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006e5c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006e60:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8006e62:	4618      	mov	r0, r3
}
 8006e64:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e66:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e68:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e6c:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e6e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e72:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e78:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8006e7a:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e7c:	e7e5      	b.n	8006e4a <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 8006e7e:	2002      	movs	r0, #2
}
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	40012c00 	.word	0x40012c00
 8006e88:	40000400 	.word	0x40000400

08006e8c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e8c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d045      	beq.n	8006f20 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8006e94:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e96:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8006e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ea2:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ea4:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eaa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006eac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006eb0:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006eb2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006eb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006eb8:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006eba:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ebc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ec0:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ec2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ec4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ec8:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006eca:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ecc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ed0:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ed2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ed6:	4c13      	ldr	r4, [pc, #76]	; (8006f24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8006ed8:	42a0      	cmp	r0, r4
 8006eda:	d00b      	beq.n	8006ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8006edc:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006ee0:	42a0      	cmp	r0, r4
 8006ee2:	d007      	beq.n	8006ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8006ee4:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8006ee6:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8006ee8:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8006eec:	4608      	mov	r0, r1
}
 8006eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ef2:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006ef4:	69cc      	ldr	r4, [r1, #28]
 8006ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006efa:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006efc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8006efe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f02:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f06:	6a0c      	ldr	r4, [r1, #32]
 8006f08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f0c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f0e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f10:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f12:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f16:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f1c:	430b      	orrs	r3, r1
 8006f1e:	e7e1      	b.n	8006ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8006f20:	2002      	movs	r0, #2
}
 8006f22:	4770      	bx	lr
 8006f24:	40012c00 	.word	0x40012c00

08006f28 <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f28:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d04b      	beq.n	8006fc8 <HAL_TIMEx_ConfigBreakInput+0xa0>

  switch (sBreakInputConfig->Source)
 8006f30:	6813      	ldr	r3, [r2, #0]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	2b0f      	cmp	r3, #15
{
 8006f36:	b4f0      	push	{r4, r5, r6, r7}
 8006f38:	d824      	bhi.n	8006f84 <HAL_TIMEx_ConfigBreakInput+0x5c>
 8006f3a:	4c25      	ldr	r4, [pc, #148]	; (8006fd0 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8006f3c:	4e25      	ldr	r6, [pc, #148]	; (8006fd4 <HAL_TIMEx_ConfigBreakInput+0xac>)
 8006f3e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006f42:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
 8006f46:	4c24      	ldr	r4, [pc, #144]	; (8006fd8 <HAL_TIMEx_ConfigBreakInput+0xb0>)
 8006f48:	4e24      	ldr	r6, [pc, #144]	; (8006fdc <HAL_TIMEx_ConfigBreakInput+0xb4>)
 8006f4a:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8006f4e:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8006f52:	2901      	cmp	r1, #1
 8006f54:	d01c      	beq.n	8006f90 <HAL_TIMEx_ConfigBreakInput+0x68>
 8006f56:	2902      	cmp	r1, #2
 8006f58:	d12f      	bne.n	8006fba <HAL_TIMEx_ConfigBreakInput+0x92>
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006f5a:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF2;
 8006f5c:	6806      	ldr	r6, [r0, #0]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006f5e:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006f60:	fa01 f30c 	lsl.w	r3, r1, ip
      tmporx = htim->Instance->AF2;
 8006f64:	6e71      	ldr	r1, [r6, #100]	; 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006f66:	404b      	eors	r3, r1
 8006f68:	402b      	ands	r3, r5
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006f6a:	40ba      	lsls	r2, r7
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006f6c:	404b      	eors	r3, r1
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006f6e:	405a      	eors	r2, r3
 8006f70:	4014      	ands	r4, r2
 8006f72:	4063      	eors	r3, r4
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8006f74:	2200      	movs	r2, #0
      htim->Instance->AF2 = tmporx;
 8006f76:	6673      	str	r3, [r6, #100]	; 0x64
  __HAL_UNLOCK(htim);
 8006f78:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006f7c:	2300      	movs	r3, #0

  return status;
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	bcf0      	pop	{r4, r5, r6, r7}
 8006f82:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8006f84:	2700      	movs	r7, #0
  switch (BreakInput)
 8006f86:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8006f88:	46bc      	mov	ip, r7
 8006f8a:	463c      	mov	r4, r7
 8006f8c:	463d      	mov	r5, r7
  switch (BreakInput)
 8006f8e:	d1e2      	bne.n	8006f56 <HAL_TIMEx_ConfigBreakInput+0x2e>
      tmporx = htim->Instance->AF1;
 8006f90:	6806      	ldr	r6, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006f92:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF1;
 8006f94:	6e31      	ldr	r1, [r6, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006f96:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006f98:	fa03 f30c 	lsl.w	r3, r3, ip
 8006f9c:	404b      	eors	r3, r1
 8006f9e:	402b      	ands	r3, r5
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006fa0:	40ba      	lsls	r2, r7
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006fa2:	404b      	eors	r3, r1
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006fa4:	405a      	eors	r2, r3
 8006fa6:	4014      	ands	r4, r2
 8006fa8:	4063      	eors	r3, r4
  __HAL_UNLOCK(htim);
 8006faa:	2200      	movs	r2, #0
      htim->Instance->AF1 = tmporx;
 8006fac:	6633      	str	r3, [r6, #96]	; 0x60
  __HAL_UNLOCK(htim);
 8006fae:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	bcf0      	pop	{r4, r5, r6, r7}
 8006fb8:	4770      	bx	lr
  __HAL_UNLOCK(htim);
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (BreakInput)
 8006fc0:	2301      	movs	r3, #1
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	bcf0      	pop	{r4, r5, r6, r7}
 8006fc6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006fc8:	2302      	movs	r3, #2
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	0800ccd8 	.word	0x0800ccd8
 8006fd4:	0800cd58 	.word	0x0800cd58
 8006fd8:	0800cd18 	.word	0x0800cd18
 8006fdc:	0800cd98 	.word	0x0800cd98

08006fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fe4:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fe6:	6882      	ldr	r2, [r0, #8]
 8006fe8:	6900      	ldr	r0, [r0, #16]
 8006fea:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fec:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fee:	4302      	orrs	r2, r0
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ff4:	49a6      	ldr	r1, [pc, #664]	; (8007290 <UART_SetConfig+0x2b0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ff6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ff8:	4029      	ands	r1, r5
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	68e1      	ldr	r1, [r4, #12]
 8007002:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007006:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007008:	49a2      	ldr	r1, [pc, #648]	; (8007294 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800700a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800700c:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800700e:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007010:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007012:	d06b      	beq.n	80070ec <UART_SetConfig+0x10c>
    tmpreg |= huart->Init.OneBitSampling;
 8007014:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007016:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800701a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800701e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007020:	430a      	orrs	r2, r1
 8007022:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007026:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007028:	f022 020f 	bic.w	r2, r2, #15
 800702c:	430a      	orrs	r2, r1
 800702e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007030:	4a99      	ldr	r2, [pc, #612]	; (8007298 <UART_SetConfig+0x2b8>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d012      	beq.n	800705c <UART_SetConfig+0x7c>
 8007036:	4a99      	ldr	r2, [pc, #612]	; (800729c <UART_SetConfig+0x2bc>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d036      	beq.n	80070aa <UART_SetConfig+0xca>
 800703c:	4a98      	ldr	r2, [pc, #608]	; (80072a0 <UART_SetConfig+0x2c0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	f000 80fa 	beq.w	8007238 <UART_SetConfig+0x258>
 8007044:	4a97      	ldr	r2, [pc, #604]	; (80072a4 <UART_SetConfig+0x2c4>)
 8007046:	4293      	cmp	r3, r2
 8007048:	f000 80a5 	beq.w	8007196 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 800704c:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800704e:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8007050:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8007054:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8007058:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 800705a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800705c:	4b92      	ldr	r3, [pc, #584]	; (80072a8 <UART_SetConfig+0x2c8>)
 800705e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007062:	f003 0303 	and.w	r3, r3, #3
 8007066:	3b01      	subs	r3, #1
 8007068:	2b02      	cmp	r3, #2
 800706a:	f240 808e 	bls.w	800718a <UART_SetConfig+0x1aa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800706e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007072:	f000 80fe 	beq.w	8007272 <UART_SetConfig+0x292>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007076:	f7ff f909 	bl	800628c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800707a:	2800      	cmp	r0, #0
 800707c:	f000 80da 	beq.w	8007234 <UART_SetConfig+0x254>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007080:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007082:	6862      	ldr	r2, [r4, #4]
 8007084:	4b89      	ldr	r3, [pc, #548]	; (80072ac <UART_SetConfig+0x2cc>)
 8007086:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800708a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800708e:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007092:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8007096:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800709a:	f1a3 0210 	sub.w	r2, r3, #16
 800709e:	428a      	cmp	r2, r1
 80070a0:	d8d4      	bhi.n	800704c <UART_SetConfig+0x6c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070a2:	6822      	ldr	r2, [r4, #0]
 80070a4:	2000      	movs	r0, #0
 80070a6:	60d3      	str	r3, [r2, #12]
 80070a8:	e7d1      	b.n	800704e <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070aa:	4b7f      	ldr	r3, [pc, #508]	; (80072a8 <UART_SetConfig+0x2c8>)
 80070ac:	4a80      	ldr	r2, [pc, #512]	; (80072b0 <UART_SetConfig+0x2d0>)
 80070ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b2:	f003 030c 	and.w	r3, r3, #12
 80070b6:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80070bc:	d07d      	beq.n	80071ba <UART_SetConfig+0x1da>
    switch (clocksource)
 80070be:	2b08      	cmp	r3, #8
 80070c0:	d8c4      	bhi.n	800704c <UART_SetConfig+0x6c>
 80070c2:	a201      	add	r2, pc, #4	; (adr r2, 80070c8 <UART_SetConfig+0xe8>)
 80070c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c8:	080071f3 	.word	0x080071f3
 80070cc:	08007077 	.word	0x08007077
 80070d0:	0800726f 	.word	0x0800726f
 80070d4:	0800704d 	.word	0x0800704d
 80070d8:	080071b5 	.word	0x080071b5
 80070dc:	0800704d 	.word	0x0800704d
 80070e0:	0800704d 	.word	0x0800704d
 80070e4:	0800704d 	.word	0x0800704d
 80070e8:	0800725f 	.word	0x0800725f
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070ec:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80070f0:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80070f4:	430a      	orrs	r2, r1
 80070f6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070fc:	486a      	ldr	r0, [pc, #424]	; (80072a8 <UART_SetConfig+0x2c8>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070fe:	f022 020f 	bic.w	r2, r2, #15
 8007102:	430a      	orrs	r2, r1
 8007104:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007106:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800710a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800710e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007112:	f000 80aa 	beq.w	800726a <UART_SetConfig+0x28a>
 8007116:	d80b      	bhi.n	8007130 <UART_SetConfig+0x150>
 8007118:	2b00      	cmp	r3, #0
 800711a:	d039      	beq.n	8007190 <UART_SetConfig+0x1b0>
 800711c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007120:	d194      	bne.n	800704c <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8007122:	f7fe ff51 	bl	8005fc8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007126:	2800      	cmp	r0, #0
 8007128:	f000 8084 	beq.w	8007234 <UART_SetConfig+0x254>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800712c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800712e:	e004      	b.n	800713a <UART_SetConfig+0x15a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007130:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007134:	d18a      	bne.n	800704c <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 8007136:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800713a:	4b5c      	ldr	r3, [pc, #368]	; (80072ac <UART_SetConfig+0x2cc>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800713c:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800713e:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8007142:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007146:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800714a:	4299      	cmp	r1, r3
 800714c:	f63f af7e 	bhi.w	800704c <UART_SetConfig+0x6c>
 8007150:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007154:	f63f af7a 	bhi.w	800704c <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007158:	2300      	movs	r3, #0
 800715a:	4619      	mov	r1, r3
 800715c:	f7f9 fd9c 	bl	8000c98 <__aeabi_uldivmod>
 8007160:	0209      	lsls	r1, r1, #8
 8007162:	0203      	lsls	r3, r0, #8
 8007164:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007168:	0868      	lsrs	r0, r5, #1
 800716a:	1818      	adds	r0, r3, r0
 800716c:	462a      	mov	r2, r5
 800716e:	f04f 0300 	mov.w	r3, #0
 8007172:	f141 0100 	adc.w	r1, r1, #0
 8007176:	f7f9 fd8f 	bl	8000c98 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800717a:	4a4e      	ldr	r2, [pc, #312]	; (80072b4 <UART_SetConfig+0x2d4>)
 800717c:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8007180:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007182:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007184:	f63f af62 	bhi.w	800704c <UART_SetConfig+0x6c>
 8007188:	e78b      	b.n	80070a2 <UART_SetConfig+0xc2>
 800718a:	4a4b      	ldr	r2, [pc, #300]	; (80072b8 <UART_SetConfig+0x2d8>)
 800718c:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800718e:	e793      	b.n	80070b8 <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007190:	f7ff f86a 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
        break;
 8007194:	e7c7      	b.n	8007126 <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007196:	4b44      	ldr	r3, [pc, #272]	; (80072a8 <UART_SetConfig+0x2c8>)
 8007198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800719c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80071a0:	2b80      	cmp	r3, #128	; 0x80
 80071a2:	d06e      	beq.n	8007282 <UART_SetConfig+0x2a2>
 80071a4:	d85e      	bhi.n	8007264 <UART_SetConfig+0x284>
 80071a6:	b30b      	cbz	r3, 80071ec <UART_SetConfig+0x20c>
 80071a8:	2b40      	cmp	r3, #64	; 0x40
 80071aa:	f47f af4f 	bne.w	800704c <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80071b2:	d021      	beq.n	80071f8 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 80071b4:	f7fe ff08 	bl	8005fc8 <HAL_RCC_GetSysClockFreq>
        break;
 80071b8:	e75f      	b.n	800707a <UART_SetConfig+0x9a>
    switch (clocksource)
 80071ba:	2b08      	cmp	r3, #8
 80071bc:	f63f af46 	bhi.w	800704c <UART_SetConfig+0x6c>
 80071c0:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <UART_SetConfig+0x1e8>)
 80071c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c6:	bf00      	nop
 80071c8:	08007279 	.word	0x08007279
 80071cc:	08007273 	.word	0x08007273
 80071d0:	0800727f 	.word	0x0800727f
 80071d4:	0800704d 	.word	0x0800704d
 80071d8:	080071f9 	.word	0x080071f9
 80071dc:	0800704d 	.word	0x0800704d
 80071e0:	0800704d 	.word	0x0800704d
 80071e4:	0800704d 	.word	0x0800704d
 80071e8:	08007201 	.word	0x08007201
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80071f0:	d042      	beq.n	8007278 <UART_SetConfig+0x298>
        pclk = HAL_RCC_GetPCLK1Freq();
 80071f2:	f7ff f839 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
        break;
 80071f6:	e740      	b.n	800707a <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetSysClockFreq();
 80071f8:	f7fe fee6 	bl	8005fc8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80071fc:	b1d0      	cbz	r0, 8007234 <UART_SetConfig+0x254>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007200:	6862      	ldr	r2, [r4, #4]
 8007202:	4b2a      	ldr	r3, [pc, #168]	; (80072ac <UART_SetConfig+0x2cc>)
 8007204:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8007208:	fbb0 f0f1 	udiv	r0, r0, r1
 800720c:	0853      	lsrs	r3, r2, #1
 800720e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007212:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007216:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800721a:	f1a0 0210 	sub.w	r2, r0, #16
 800721e:	429a      	cmp	r2, r3
 8007220:	f63f af14 	bhi.w	800704c <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007224:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8007228:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800722a:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800722c:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8007230:	4318      	orrs	r0, r3
 8007232:	60d0      	str	r0, [r2, #12]
 8007234:	2000      	movs	r0, #0
 8007236:	e70a      	b.n	800704e <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007238:	4b1b      	ldr	r3, [pc, #108]	; (80072a8 <UART_SetConfig+0x2c8>)
 800723a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800723e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007242:	2b20      	cmp	r3, #32
 8007244:	d01d      	beq.n	8007282 <UART_SetConfig+0x2a2>
 8007246:	d804      	bhi.n	8007252 <UART_SetConfig+0x272>
 8007248:	2b00      	cmp	r3, #0
 800724a:	d0cf      	beq.n	80071ec <UART_SetConfig+0x20c>
 800724c:	2b10      	cmp	r3, #16
 800724e:	d0ae      	beq.n	80071ae <UART_SetConfig+0x1ce>
 8007250:	e6fc      	b.n	800704c <UART_SetConfig+0x6c>
 8007252:	2b30      	cmp	r3, #48	; 0x30
 8007254:	f47f aefa 	bne.w	800704c <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007258:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800725c:	d0d0      	beq.n	8007200 <UART_SetConfig+0x220>
    switch (clocksource)
 800725e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007262:	e70e      	b.n	8007082 <UART_SetConfig+0xa2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007264:	2bc0      	cmp	r3, #192	; 0xc0
 8007266:	d0f7      	beq.n	8007258 <UART_SetConfig+0x278>
 8007268:	e6f0      	b.n	800704c <UART_SetConfig+0x6c>
 800726a:	4814      	ldr	r0, [pc, #80]	; (80072bc <UART_SetConfig+0x2dc>)
 800726c:	e765      	b.n	800713a <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 800726e:	4813      	ldr	r0, [pc, #76]	; (80072bc <UART_SetConfig+0x2dc>)
 8007270:	e707      	b.n	8007082 <UART_SetConfig+0xa2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007272:	f7ff f80b 	bl	800628c <HAL_RCC_GetPCLK2Freq>
        break;
 8007276:	e7c1      	b.n	80071fc <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007278:	f7fe fff6 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
        break;
 800727c:	e7be      	b.n	80071fc <UART_SetConfig+0x21c>
        pclk = (uint32_t) HSI_VALUE;
 800727e:	480f      	ldr	r0, [pc, #60]	; (80072bc <UART_SetConfig+0x2dc>)
 8007280:	e7be      	b.n	8007200 <UART_SetConfig+0x220>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007282:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8007286:	480d      	ldr	r0, [pc, #52]	; (80072bc <UART_SetConfig+0x2dc>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007288:	f47f aefb 	bne.w	8007082 <UART_SetConfig+0xa2>
 800728c:	e7b8      	b.n	8007200 <UART_SetConfig+0x220>
 800728e:	bf00      	nop
 8007290:	cfff69f3 	.word	0xcfff69f3
 8007294:	40008000 	.word	0x40008000
 8007298:	40013800 	.word	0x40013800
 800729c:	40004400 	.word	0x40004400
 80072a0:	40004800 	.word	0x40004800
 80072a4:	40004c00 	.word	0x40004c00
 80072a8:	40021000 	.word	0x40021000
 80072ac:	0800cdec 	.word	0x0800cdec
 80072b0:	0800cddc 	.word	0x0800cddc
 80072b4:	000ffcff 	.word	0x000ffcff
 80072b8:	0800cdd8 	.word	0x0800cdd8
 80072bc:	00f42400 	.word	0x00f42400

080072c0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80072c2:	07da      	lsls	r2, r3, #31
{
 80072c4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072c6:	d506      	bpl.n	80072d6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072c8:	6801      	ldr	r1, [r0, #0]
 80072ca:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80072cc:	684a      	ldr	r2, [r1, #4]
 80072ce:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80072d2:	4322      	orrs	r2, r4
 80072d4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072d6:	079c      	lsls	r4, r3, #30
 80072d8:	d506      	bpl.n	80072e8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072da:	6801      	ldr	r1, [r0, #0]
 80072dc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80072de:	684a      	ldr	r2, [r1, #4]
 80072e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80072e4:	4322      	orrs	r2, r4
 80072e6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072e8:	0759      	lsls	r1, r3, #29
 80072ea:	d506      	bpl.n	80072fa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072ec:	6801      	ldr	r1, [r0, #0]
 80072ee:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80072f0:	684a      	ldr	r2, [r1, #4]
 80072f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072f6:	4322      	orrs	r2, r4
 80072f8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072fa:	071a      	lsls	r2, r3, #28
 80072fc:	d506      	bpl.n	800730c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072fe:	6801      	ldr	r1, [r0, #0]
 8007300:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007302:	684a      	ldr	r2, [r1, #4]
 8007304:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007308:	4322      	orrs	r2, r4
 800730a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800730c:	06dc      	lsls	r4, r3, #27
 800730e:	d506      	bpl.n	800731e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007310:	6801      	ldr	r1, [r0, #0]
 8007312:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007314:	688a      	ldr	r2, [r1, #8]
 8007316:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800731a:	4322      	orrs	r2, r4
 800731c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800731e:	0699      	lsls	r1, r3, #26
 8007320:	d506      	bpl.n	8007330 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007322:	6801      	ldr	r1, [r0, #0]
 8007324:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007326:	688a      	ldr	r2, [r1, #8]
 8007328:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800732c:	4322      	orrs	r2, r4
 800732e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007330:	065a      	lsls	r2, r3, #25
 8007332:	d509      	bpl.n	8007348 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007334:	6801      	ldr	r1, [r0, #0]
 8007336:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007338:	684a      	ldr	r2, [r1, #4]
 800733a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800733e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007340:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007344:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007346:	d00b      	beq.n	8007360 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007348:	061b      	lsls	r3, r3, #24
 800734a:	d506      	bpl.n	800735a <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800734c:	6802      	ldr	r2, [r0, #0]
 800734e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007350:	6853      	ldr	r3, [r2, #4]
 8007352:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007356:	430b      	orrs	r3, r1
 8007358:	6053      	str	r3, [r2, #4]
  }
}
 800735a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800735e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007360:	684a      	ldr	r2, [r1, #4]
 8007362:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8007364:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007368:	4322      	orrs	r2, r4
 800736a:	604a      	str	r2, [r1, #4]
 800736c:	e7ec      	b.n	8007348 <UART_AdvFeatureConfig+0x88>
 800736e:	bf00      	nop

08007370 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007374:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007378:	6804      	ldr	r4, [r0, #0]
{
 800737a:	4607      	mov	r7, r0
 800737c:	460e      	mov	r6, r1
 800737e:	4615      	mov	r5, r2
 8007380:	4699      	mov	r9, r3
 8007382:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007386:	d10a      	bne.n	800739e <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007388:	69e3      	ldr	r3, [r4, #28]
 800738a:	ea36 0303 	bics.w	r3, r6, r3
 800738e:	bf0c      	ite	eq
 8007390:	2301      	moveq	r3, #1
 8007392:	2300      	movne	r3, #0
 8007394:	429d      	cmp	r5, r3
 8007396:	d0f7      	beq.n	8007388 <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8007398:	2000      	movs	r0, #0
}
 800739a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800739e:	69e3      	ldr	r3, [r4, #28]
 80073a0:	ea36 0303 	bics.w	r3, r6, r3
 80073a4:	bf0c      	ite	eq
 80073a6:	2301      	moveq	r3, #1
 80073a8:	2300      	movne	r3, #0
 80073aa:	42ab      	cmp	r3, r5
 80073ac:	d1f4      	bne.n	8007398 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ae:	f7fd f9c9 	bl	8004744 <HAL_GetTick>
 80073b2:	eba0 0009 	sub.w	r0, r0, r9
 80073b6:	4540      	cmp	r0, r8
 80073b8:	d833      	bhi.n	8007422 <UART_WaitOnFlagUntilTimeout+0xb2>
 80073ba:	f1b8 0f00 	cmp.w	r8, #0
 80073be:	d030      	beq.n	8007422 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073c0:	683c      	ldr	r4, [r7, #0]
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	0759      	lsls	r1, r3, #29
 80073c6:	4622      	mov	r2, r4
 80073c8:	d5db      	bpl.n	8007382 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073ca:	69e3      	ldr	r3, [r4, #28]
 80073cc:	051b      	lsls	r3, r3, #20
 80073ce:	d5d8      	bpl.n	8007382 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073d4:	6223      	str	r3, [r4, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d6:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	e844 3100 	strex	r1, r3, [r4]
 80073e2:	b139      	cbz	r1, 80073f4 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	e852 3f00 	ldrex	r3, [r2]
 80073e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ec:	e842 3100 	strex	r1, r3, [r2]
 80073f0:	2900      	cmp	r1, #0
 80073f2:	d1f7      	bne.n	80073e4 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	f102 0308 	add.w	r3, r2, #8
 80073f8:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	f102 0008 	add.w	r0, r2, #8
 8007404:	e840 3100 	strex	r1, r3, [r0]
 8007408:	2900      	cmp	r1, #0
 800740a:	d1f3      	bne.n	80073f4 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800740c:	2320      	movs	r3, #32
 800740e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8007412:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007416:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 800741a:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800741c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8007420:	e7bb      	b.n	800739a <UART_WaitOnFlagUntilTimeout+0x2a>
 8007422:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007428:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	e842 3100 	strex	r1, r3, [r2]
 8007430:	2900      	cmp	r1, #0
 8007432:	d1f7      	bne.n	8007424 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007434:	f102 0308 	add.w	r3, r2, #8
 8007438:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007440:	f102 0008 	add.w	r0, r2, #8
 8007444:	e840 3100 	strex	r1, r3, [r0]
 8007448:	2900      	cmp	r1, #0
 800744a:	d1f3      	bne.n	8007434 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800744c:	2320      	movs	r3, #32
 800744e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8007452:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007456:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800745a:	2003      	movs	r0, #3
 800745c:	e79d      	b.n	800739a <UART_WaitOnFlagUntilTimeout+0x2a>
 800745e:	bf00      	nop

08007460 <HAL_UART_Transmit>:
{
 8007460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007464:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8007466:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800746a:	2820      	cmp	r0, #32
{
 800746c:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800746e:	f040 8090 	bne.w	8007592 <HAL_UART_Transmit+0x132>
    if ((pData == NULL) || (Size == 0U))
 8007472:	4689      	mov	r9, r1
 8007474:	2900      	cmp	r1, #0
 8007476:	d048      	beq.n	800750a <HAL_UART_Transmit+0xaa>
 8007478:	4614      	mov	r4, r2
 800747a:	2a00      	cmp	r2, #0
 800747c:	d045      	beq.n	800750a <HAL_UART_Transmit+0xaa>
 800747e:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8007480:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8007484:	2b01      	cmp	r3, #1
 8007486:	f000 8084 	beq.w	8007592 <HAL_UART_Transmit+0x132>
 800748a:	2301      	movs	r3, #1
 800748c:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007490:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007494:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007496:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800749a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tickstart = HAL_GetTick();
 800749e:	f7fd f951 	bl	8004744 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074a2:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 80074a4:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80074ac:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    tickstart = HAL_GetTick();
 80074b0:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074b2:	d072      	beq.n	800759a <HAL_UART_Transmit+0x13a>
    while (huart->TxXferCount > 0U)
 80074b4:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 80074b8:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80074ba:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80074bc:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 80074c0:	b1b3      	cbz	r3, 80074f0 <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074c2:	682c      	ldr	r4, [r5, #0]
 80074c4:	1c71      	adds	r1, r6, #1
 80074c6:	d124      	bne.n	8007512 <HAL_UART_Transmit+0xb2>
 80074c8:	69e2      	ldr	r2, [r4, #28]
 80074ca:	0612      	lsls	r2, r2, #24
 80074cc:	d5fc      	bpl.n	80074c8 <HAL_UART_Transmit+0x68>
      if (pdata8bits == NULL)
 80074ce:	f1b9 0f00 	cmp.w	r9, #0
 80074d2:	d059      	beq.n	8007588 <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074d4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80074d8:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 80074da:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 80074de:	3b01      	subs	r3, #1
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80074e6:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1e9      	bne.n	80074c4 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074f0:	9600      	str	r6, [sp, #0]
 80074f2:	463b      	mov	r3, r7
 80074f4:	2200      	movs	r2, #0
 80074f6:	2140      	movs	r1, #64	; 0x40
 80074f8:	4628      	mov	r0, r5
 80074fa:	f7ff ff39 	bl	8007370 <UART_WaitOnFlagUntilTimeout>
 80074fe:	2800      	cmp	r0, #0
 8007500:	d171      	bne.n	80075e6 <HAL_UART_Transmit+0x186>
    huart->gState = HAL_UART_STATE_READY;
 8007502:	2320      	movs	r3, #32
 8007504:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    return HAL_OK;
 8007508:	e000      	b.n	800750c <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 800750a:	2001      	movs	r0, #1
}
 800750c:	b003      	add	sp, #12
 800750e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007512:	69e3      	ldr	r3, [r4, #28]
 8007514:	061b      	lsls	r3, r3, #24
 8007516:	d4da      	bmi.n	80074ce <HAL_UART_Transmit+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007518:	f7fd f914 	bl	8004744 <HAL_GetTick>
 800751c:	1bc0      	subs	r0, r0, r7
 800751e:	4286      	cmp	r6, r0
 8007520:	d341      	bcc.n	80075a6 <HAL_UART_Transmit+0x146>
 8007522:	2e00      	cmp	r6, #0
 8007524:	d03f      	beq.n	80075a6 <HAL_UART_Transmit+0x146>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007526:	682c      	ldr	r4, [r5, #0]
 8007528:	6822      	ldr	r2, [r4, #0]
 800752a:	0752      	lsls	r2, r2, #29
 800752c:	4623      	mov	r3, r4
 800752e:	d5c9      	bpl.n	80074c4 <HAL_UART_Transmit+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007530:	69e2      	ldr	r2, [r4, #28]
 8007532:	0510      	lsls	r0, r2, #20
 8007534:	d5c6      	bpl.n	80074c4 <HAL_UART_Transmit+0x64>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007536:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800753a:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007540:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007544:	e844 2100 	strex	r1, r2, [r4]
 8007548:	b139      	cbz	r1, 800755a <HAL_UART_Transmit+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	e853 2f00 	ldrex	r2, [r3]
 800754e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	e843 2100 	strex	r1, r2, [r3]
 8007556:	2900      	cmp	r1, #0
 8007558:	d1f7      	bne.n	800754a <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755a:	f103 0208 	add.w	r2, r3, #8
 800755e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007562:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	f103 0008 	add.w	r0, r3, #8
 800756a:	e840 2100 	strex	r1, r2, [r0]
 800756e:	2900      	cmp	r1, #0
 8007570:	d1f3      	bne.n	800755a <HAL_UART_Transmit+0xfa>
          huart->gState = HAL_UART_STATE_READY;
 8007572:	2320      	movs	r3, #32
 8007574:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8007578:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800757c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        return HAL_TIMEOUT;
 8007580:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007582:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 8007586:	e7c1      	b.n	800750c <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007588:	f838 3b02 	ldrh.w	r3, [r8], #2
 800758c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007590:	e7a2      	b.n	80074d8 <HAL_UART_Transmit+0x78>
    return HAL_BUSY;
 8007592:	2002      	movs	r0, #2
}
 8007594:	b003      	add	sp, #12
 8007596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800759a:	692b      	ldr	r3, [r5, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d189      	bne.n	80074b4 <HAL_UART_Transmit+0x54>
 80075a0:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 80075a2:	4699      	mov	r9, r3
 80075a4:	e786      	b.n	80074b4 <HAL_UART_Transmit+0x54>
 80075a6:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80075ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	e843 2100 	strex	r1, r2, [r3]
 80075b4:	2900      	cmp	r1, #0
 80075b6:	d1f7      	bne.n	80075a8 <HAL_UART_Transmit+0x148>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b8:	f103 0208 	add.w	r2, r3, #8
 80075bc:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c4:	f103 0008 	add.w	r0, r3, #8
 80075c8:	e840 2100 	strex	r1, r2, [r0]
 80075cc:	2900      	cmp	r1, #0
 80075ce:	d1f3      	bne.n	80075b8 <HAL_UART_Transmit+0x158>
        huart->gState = HAL_UART_STATE_READY;
 80075d0:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80075d2:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80075d4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80075d8:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80075dc:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 80075e0:	b003      	add	sp, #12
 80075e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 80075e6:	2003      	movs	r0, #3
 80075e8:	e790      	b.n	800750c <HAL_UART_Transmit+0xac>
 80075ea:	bf00      	nop

080075ec <HAL_UART_Init>:
  if (huart == NULL)
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d066      	beq.n	80076be <HAL_UART_Init+0xd2>
{
 80075f0:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80075f2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 80075f6:	b082      	sub	sp, #8
 80075f8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d04c      	beq.n	8007698 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 80075fe:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007600:	2324      	movs	r3, #36	; 0x24
 8007602:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8007606:	6813      	ldr	r3, [r2, #0]
 8007608:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800760c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800760e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007610:	f7ff fce6 	bl	8006fe0 <UART_SetConfig>
 8007614:	2801      	cmp	r0, #1
 8007616:	d03c      	beq.n	8007692 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007618:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800761a:	2b00      	cmp	r3, #0
 800761c:	d135      	bne.n	800768a <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800761e:	6823      	ldr	r3, [r4, #0]
 8007620:	6859      	ldr	r1, [r3, #4]
 8007622:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8007626:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007628:	6899      	ldr	r1, [r3, #8]
 800762a:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800762e:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007630:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007632:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8007634:	f041 0101 	orr.w	r1, r1, #1
 8007638:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800763a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800763e:	f7fd f881 	bl	8004744 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8007648:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800764a:	d40e      	bmi.n	800766a <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	075b      	lsls	r3, r3, #29
 8007650:	d427      	bmi.n	80076a2 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007652:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007654:	2220      	movs	r2, #32
 8007656:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800765a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800765e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 8007662:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007664:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8007666:	b002      	add	sp, #8
 8007668:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800766a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	462a      	mov	r2, r5
 8007672:	4603      	mov	r3, r0
 8007674:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007678:	4620      	mov	r0, r4
 800767a:	f7ff fe79 	bl	8007370 <UART_WaitOnFlagUntilTimeout>
 800767e:	b9e0      	cbnz	r0, 80076ba <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	075b      	lsls	r3, r3, #29
 8007686:	d40c      	bmi.n	80076a2 <HAL_UART_Init+0xb6>
 8007688:	e7e3      	b.n	8007652 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800768a:	4620      	mov	r0, r4
 800768c:	f7ff fe18 	bl	80072c0 <UART_AdvFeatureConfig>
 8007690:	e7c5      	b.n	800761e <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8007692:	2001      	movs	r0, #1
}
 8007694:	b002      	add	sp, #8
 8007696:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8007698:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800769c:	f7fc f9a4 	bl	80039e8 <HAL_UART_MspInit>
 80076a0:	e7ad      	b.n	80075fe <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	2200      	movs	r2, #0
 80076aa:	4633      	mov	r3, r6
 80076ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076b0:	4620      	mov	r0, r4
 80076b2:	f7ff fe5d 	bl	8007370 <UART_WaitOnFlagUntilTimeout>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d0cb      	beq.n	8007652 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 80076ba:	2003      	movs	r0, #3
 80076bc:	e7d3      	b.n	8007666 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 80076be:	2001      	movs	r0, #1
}
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop

080076c4 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076c4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d017      	beq.n	80076fc <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076cc:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80076ce:	2324      	movs	r3, #36	; 0x24
{
 80076d0:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 80076d2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076d6:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076d8:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80076da:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 80076dc:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80076e0:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80076e4:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80076e6:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076e8:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076ea:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80076ee:	2220      	movs	r2, #32
 80076f0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 80076f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80076f8:	4618      	mov	r0, r3
}
 80076fa:	4770      	bx	lr
  __HAL_LOCK(huart);
 80076fc:	2002      	movs	r0, #2
}
 80076fe:	4770      	bx	lr

08007700 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007700:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8007704:	2a01      	cmp	r2, #1
 8007706:	d037      	beq.n	8007778 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8007708:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800770a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800770c:	2024      	movs	r0, #36	; 0x24
{
 800770e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007710:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007714:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007716:	6810      	ldr	r0, [r2, #0]
 8007718:	f020 0001 	bic.w	r0, r0, #1
 800771c:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800771e:	6890      	ldr	r0, [r2, #8]
 8007720:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8007724:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007726:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007728:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800772a:	b310      	cbz	r0, 8007772 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800772c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800772e:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8007730:	4d12      	ldr	r5, [pc, #72]	; (800777c <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007732:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007736:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800773a:	4911      	ldr	r1, [pc, #68]	; (8007780 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 800773c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007740:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007744:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007748:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800774c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800774e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007750:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007754:	fbb1 f1f5 	udiv	r1, r1, r5
 8007758:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800775c:	2100      	movs	r1, #0
 800775e:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8007762:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007764:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8007766:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800776a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800776c:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8007770:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007772:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007774:	4608      	mov	r0, r1
 8007776:	e7ef      	b.n	8007758 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007778:	2002      	movs	r0, #2
}
 800777a:	4770      	bx	lr
 800777c:	0800ce04 	.word	0x0800ce04
 8007780:	0800ce0c 	.word	0x0800ce0c

08007784 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8007784:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8007788:	2a01      	cmp	r2, #1
 800778a:	d037      	beq.n	80077fc <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800778c:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800778e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007790:	2024      	movs	r0, #36	; 0x24
{
 8007792:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007794:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007798:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800779a:	6810      	ldr	r0, [r2, #0]
 800779c:	f020 0001 	bic.w	r0, r0, #1
 80077a0:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077a2:	6890      	ldr	r0, [r2, #8]
 80077a4:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 80077a8:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077aa:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077ac:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077ae:	b310      	cbz	r0, 80077f6 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077b0:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077b2:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80077b4:	4d12      	ldr	r5, [pc, #72]	; (8007800 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077b6:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077ba:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077be:	4911      	ldr	r1, [pc, #68]	; (8007804 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80077c0:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077c4:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80077c8:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80077cc:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077d0:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077d2:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077d4:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077d8:	fbb1 f1f5 	udiv	r1, r1, r5
 80077dc:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80077e0:	2100      	movs	r1, #0
 80077e2:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80077e6:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077e8:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80077ea:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80077ee:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80077f0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80077f4:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80077f6:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80077f8:	4608      	mov	r0, r1
 80077fa:	e7ef      	b.n	80077dc <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80077fc:	2002      	movs	r0, #2
}
 80077fe:	4770      	bx	lr
 8007800:	0800ce04 	.word	0x0800ce04
 8007804:	0800ce0c 	.word	0x0800ce0c

08007808 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8007808:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 800780a:	8840      	ldrh	r0, [r0, #2]
 800780c:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8007810:	0c00      	lsrs	r0, r0, #16
 8007812:	4770      	bx	lr

08007814 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8007814:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8007816:	8802      	ldrh	r2, [r0, #0]
 8007818:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 800781a:	fb03 fc03 	mul.w	ip, r3, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800781e:	fb01 cc01 	mla	ip, r1, r1, ip
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8007822:	fb02 f202 	mul.w	r2, r2, r2
 8007826:	4562      	cmp	r2, ip
{
 8007828:	b084      	sub	sp, #16
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800782a:	d21a      	bcs.n	8007862 <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 800782c:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 8007830:	ebc2 6c1c 	rsb	ip, r2, ip, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8007834:	fa5f fc8c 	uxtb.w	ip, ip
 8007838:	eb00 004c 	add.w	r0, r0, ip, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 800783c:	8882      	ldrh	r2, [r0, #4]
 800783e:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8007842:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8007844:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8007848:	bfbc      	itt	lt
 800784a:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 800784e:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8007850:	2b00      	cmp	r3, #0
 8007852:	bfbc      	itt	lt
 8007854:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8007858:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800785a:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800785e:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8007862:	b289      	uxth	r1, r1
 8007864:	2000      	movs	r0, #0
 8007866:	f361 000f 	bfi	r0, r1, #0, #16
 800786a:	b29b      	uxth	r3, r3
 800786c:	f363 401f 	bfi	r0, r3, #16, #16
}
 8007870:	b004      	add	sp, #16
 8007872:	4770      	bx	lr

08007874 <DAC_SetChannelConfig>:
  */
__weak void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                              MC_Protocol_REG_t bVariable)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->bChannel_variable[bChannel] = bVariable;
 8007874:	4401      	add	r1, r0
 8007876:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
}
 800787a:	4770      	bx	lr

0800787c <DAC_GetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->bChannel_variable[bChannel]);
 800787c:	4401      	add	r1, r0
}
 800787e:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8007882:	4770      	bx	lr

08007884 <DAC_SetUserChannelValue>:
  */
__weak void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
                              int16_t hValue)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->hUserValue[bUserChNumber] = hValue;
 8007884:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8007888:	864a      	strh	r2, [r1, #50]	; 0x32
}
 800788a:	4770      	bx	lr

0800788c <DAC_GetUserChannelValue>:
  * @retval none.
  */
__weak int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->hUserValue[bUserChNumber]);
 800788c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
}
 8007890:	f9b1 0032 	ldrsh.w	r0, [r1, #50]	; 0x32
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop

08007898 <EAC_Init>:
               ENCODER_Handle_t * pENC )
{
  pHandle->pSTC = pSTC;
  pHandle->pVSS = pVSS;
  pHandle->pENC = pENC;
  pHandle->EncAligned = false;
 8007898:	f04f 0c00 	mov.w	ip, #0
  pHandle->pVSS = pVSS;
 800789c:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pENC = pENC;
 80078a0:	6083      	str	r3, [r0, #8]
  pHandle->EncAligned = false;
 80078a2:	f8a0 c00e 	strh.w	ip, [r0, #14]
  pHandle->EncRestart = false;
}
 80078a6:	4770      	bx	lr

080078a8 <EAC_StartAlignment>:
  *         execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval none.
  */
__weak void EAC_StartAlignment( EncAlign_Handle_t * pHandle )
{
 80078a8:	b510      	push	{r4, lr}
  uint32_t wAux;

  /* Set pVSS mechanical speed to zero.*/
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 80078aa:	2200      	movs	r2, #0
{
 80078ac:	4604      	mov	r4, r0
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 80078ae:	4611      	mov	r1, r2
 80078b0:	6840      	ldr	r0, [r0, #4]
 80078b2:	f002 fa13 	bl	8009cdc <VSS_SetMecAcceleration>

  /* Set pVSS mechanical angle.*/
  VSS_SetMecAngle( pHandle->pVSS, pHandle->hElAngle );
 80078b6:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80078ba:	6860      	ldr	r0, [r4, #4]
 80078bc:	f002 fa06 	bl	8009ccc <VSS_SetMecAngle>

  /* Set pSTC in STC_TORQUE_MODE.*/
  STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 80078c0:	6820      	ldr	r0, [r4, #0]
 80078c2:	2100      	movs	r1, #0
 80078c4:	f001 fcea 	bl	800929c <STC_SetControlMode>

  /* Set starting torque to Zero */
  STC_ExecRamp( pHandle->pSTC, 0, 0u );
 80078c8:	2200      	movs	r2, #0
 80078ca:	4611      	mov	r1, r2
 80078cc:	6820      	ldr	r0, [r4, #0]
 80078ce:	f001 fce9 	bl	80092a4 <STC_ExecRamp>

  /* Execute the torque ramp.*/
  STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, ( uint32_t )( pHandle->hDurationms ) );
 80078d2:	8ae2      	ldrh	r2, [r4, #22]
 80078d4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80078d8:	6820      	ldr	r0, [r4, #0]
 80078da:	f001 fce3 	bl	80092a4 <STC_ExecRamp>

  /* Compute hRemainingTicks, the number of thick of alignment phase.*/
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 80078de:	8ae3      	ldrh	r3, [r4, #22]
 80078e0:	8a21      	ldrh	r1, [r4, #16]
  wAux /= 1000u;
 80078e2:	4a04      	ldr	r2, [pc, #16]	; (80078f4 <EAC_StartAlignment+0x4c>)
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 80078e4:	fb01 f303 	mul.w	r3, r1, r3
  wAux /= 1000u;
 80078e8:	fba2 2303 	umull	r2, r3, r2, r3
 80078ec:	099b      	lsrs	r3, r3, #6
  pHandle->hRemainingTicks = ( uint16_t )( wAux );
  pHandle->hRemainingTicks++;
 80078ee:	3301      	adds	r3, #1
 80078f0:	81a3      	strh	r3, [r4, #12]
}
 80078f2:	bd10      	pop	{r4, pc}
 80078f4:	10624dd3 	.word	0x10624dd3

080078f8 <EAC_Exec>:
  */
__weak bool EAC_Exec( EncAlign_Handle_t * pHandle )
{
  bool retVal = true;

  if ( pHandle->hRemainingTicks > 0u )
 80078f8:	8983      	ldrh	r3, [r0, #12]
 80078fa:	b13b      	cbz	r3, 800790c <EAC_Exec+0x14>
  {
    pHandle->hRemainingTicks--;
 80078fc:	3b01      	subs	r3, #1
 80078fe:	b29b      	uxth	r3, r3
{
 8007900:	b510      	push	{r4, lr}
 8007902:	4604      	mov	r4, r0
    pHandle->hRemainingTicks--;
 8007904:	8183      	strh	r3, [r0, #12]

    if ( pHandle->hRemainingTicks == 0u )
 8007906:	b11b      	cbz	r3, 8007910 <EAC_Exec+0x18>
      pHandle->EncAligned = true;
      retVal = true;
    }
    else
    {
      retVal = false;
 8007908:	2000      	movs	r0, #0
    }
  }

  return retVal;
}
 800790a:	bd10      	pop	{r4, pc}
  bool retVal = true;
 800790c:	2001      	movs	r0, #1
}
 800790e:	4770      	bx	lr
      ENC_SetMecAngle ( pHandle->pENC, pHandle->hElAngle / ( int16_t )( pHandle->bElToMecRatio ) );
 8007910:	7e03      	ldrb	r3, [r0, #24]
 8007912:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 8007916:	6880      	ldr	r0, [r0, #8]
 8007918:	fb91 f1f3 	sdiv	r1, r1, r3
 800791c:	f000 f938 	bl	8007b90 <ENC_SetMecAngle>
      pHandle->EncAligned = true;
 8007920:	2001      	movs	r0, #1
 8007922:	73a0      	strb	r0, [r4, #14]
}
 8007924:	bd10      	pop	{r4, pc}
 8007926:	bf00      	nop

08007928 <EAC_IsAligned>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_IsAligned( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncAligned;
}
 8007928:	7b80      	ldrb	r0, [r0, #14]
 800792a:	4770      	bx	lr

0800792c <EAC_SetRestartState>:
  * @param  restart: Set to true if a restart is programmed else false
  * @retval none.
  */
__weak void EAC_SetRestartState( EncAlign_Handle_t * pHandle, bool restart )
{
  pHandle->EncRestart = restart;
 800792c:	73c1      	strb	r1, [r0, #15]
}
 800792e:	4770      	bx	lr

08007930 <EAC_GetRestartState>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_GetRestartState( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncRestart;
}
 8007930:	7bc0      	ldrb	r0, [r0, #15]
 8007932:	4770      	bx	lr

08007934 <ENC_Init>:
  * @retval none
  */
__weak void ENC_Init( ENCODER_Handle_t * pHandle )
{

  TIM_TypeDef * TIMx = pHandle->TIMx;
 8007934:	6a03      	ldr	r3, [r0, #32]
#endif
  /* Reset counter */
  LL_TIM_SetCounter ( TIMx, 0 );

  /*Calculations of convenience*/
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8007936:	f8b0 c06e 	ldrh.w	ip, [r0, #110]	; 0x6e
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
{
 8007940:	b410      	push	{r4}
 8007942:	601a      	str	r2, [r3, #0]
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 8007944:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
 8007948:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800794c:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 800794e:	2100      	movs	r1, #0
 8007950:	6259      	str	r1, [r3, #36]	; 0x24
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8007952:	f04f 34ff 	mov.w	r4, #4294967295
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 8007956:	6242      	str	r2, [r0, #36]	; 0x24
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8007958:	fbb4 f4fc 	udiv	r4, r4, ip
 800795c:	6684      	str	r4, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800795e:	699a      	ldr	r2, [r3, #24]

  /* Set IC filter for both channel 1 & 2*/
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter << 20));
 8007960:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 8007964:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007968:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 800796c:	619a      	str	r2, [r3, #24]
 800796e:	699a      	ldr	r2, [r3, #24]
 8007970:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8007974:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007978:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800797c:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800797e:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007980:	68da      	ldr	r2, [r3, #12]
 8007982:	f042 0201 	orr.w	r2, r2, #1
 8007986:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	f042 0201 	orr.w	r2, r2, #1
 800798e:	601a      	str	r2, [r3, #0]

  /* Enable the counting timer*/
  LL_TIM_EnableCounter ( TIMx );

  /* Erase speed buffer */
  BufferSize = pHandle->SpeedBufferSize;
 8007990:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75

  for ( Index = 0u; Index < BufferSize; Index++ )
 8007994:	b12a      	cbz	r2, 80079a2 <ENC_Init+0x6e>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
  }
}
 8007996:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->DeltaCapturesBuffer[Index] = 0;
 800799a:	0092      	lsls	r2, r2, #2
 800799c:	3028      	adds	r0, #40	; 0x28
 800799e:	f002 ba07 	b.w	8009db0 <memset>
}
 80079a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <ENC_Clear>:
*         the speed measurement process.
* @param  pHandle: handler of the current instance of the encoder component
* @retval none
*/
__weak void ENC_Clear( ENCODER_Handle_t * pHandle )
{
 80079a8:	b510      	push	{r4, lr}
  uint8_t Index;
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 80079aa:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
{
 80079ae:	4604      	mov	r4, r0
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 80079b0:	b122      	cbz	r2, 80079bc <ENC_Clear+0x14>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 80079b2:	0092      	lsls	r2, r2, #2
 80079b4:	2100      	movs	r1, #0
 80079b6:	3028      	adds	r0, #40	; 0x28
 80079b8:	f002 f9fa 	bl	8009db0 <memset>
  }
  pHandle->SensorIsReliable = true;
 80079bc:	2301      	movs	r3, #1
 80079be:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
}
 80079c2:	bd10      	pop	{r4, pc}

080079c4 <ENC_CalcAngle>:
*         of the instantaneous value of the timer counter.
* @param  pHandle: handler of the current instance of the encoder component
* @retval int16_t Measured electrical angle in s16degree format.
*/
__weak int16_t ENC_CalcAngle( ENCODER_Handle_t * pHandle )
{
 80079c4:	b410      	push	{r4}
  // /*Computes and stores the rotor mechanical angle*/
  // mecAngle = ( int16_t )( wtemp1 / 65536 );

  int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;

  pHandle->_Super.hMecAngle = man_mecAngle;
 80079c6:	4b0a      	ldr	r3, [pc, #40]	; (80079f0 <ENC_CalcAngle+0x2c>)
  int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 80079c8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
  pHandle->_Super.hMecAngle = man_mecAngle;
 80079cc:	f9b3 1000 	ldrsh.w	r1, [r3]
  
  /*Computes and stores the rotor electrical angle*/
  elAngle = man_mecAngle * pHandle->_Super.bElToMecRatio;
 80079d0:	7843      	ldrb	r3, [r0, #1]

  pHandle->_Super.hElAngle = elAngle;
  
  int16_t hMecSpeedDpp = man_mecAngle - hMecAnglePrev;
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 80079d2:	6884      	ldr	r4, [r0, #8]
  pHandle->_Super.hMecAngle = man_mecAngle;
 80079d4:	80c1      	strh	r1, [r0, #6]
  elAngle = man_mecAngle * pHandle->_Super.bElToMecRatio;
 80079d6:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hMecSpeedDpp = man_mecAngle - hMecAnglePrev;
 80079da:	1a8a      	subs	r2, r1, r2
  elAngle = man_mecAngle * pHandle->_Super.bElToMecRatio;
 80079dc:	b21b      	sxth	r3, r3
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 80079de:	fa04 f282 	sxtah	r2, r4, r2
  pHandle->_Super.hElAngle = elAngle;
 80079e2:	8083      	strh	r3, [r0, #4]
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 80079e4:	6082      	str	r2, [r0, #8]

  /*Returns rotor electrical angle*/
  return ( elAngle );
}
 80079e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ea:	4618      	mov	r0, r3
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	20000af0 	.word	0x20000af0

080079f4 <ENC_CalcAvrgMecSpeedUnit>:
  *         (expressed in the unit defined by #SPEED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit( ENCODER_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 80079f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80079f6:	6a03      	ldr	r3, [r0, #32]
  int32_t wOverallAngleVariation = 0;
  int32_t wtemp1;
  int32_t wtemp2;
  uint8_t bBufferIndex = 0u;
  bool bReliability = true;
  uint8_t bBufferSize = pHandle->SpeedBufferSize;
 80079f8:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80079fc:	68dc      	ldr	r4, [r3, #12]
 80079fe:	f024 0401 	bic.w	r4, r4, #1
 8007a02:	60dc      	str	r4, [r3, #12]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8007a04:	6a5c      	ldr	r4, [r3, #36]	; 0x24
#ifdef TIM_CNT_UIFCPY
  /* disable Interrupt generation */
  LL_TIM_DisableIT_UPDATE ( TIMx );
#endif
  CntCapture =  LL_TIM_GetCounter ( TIMx );
  OverflowCntSample = pHandle->TimerOverflowNb;
 8007a06:	f8b0 5070 	ldrh.w	r5, [r0, #112]	; 0x70
  pHandle->TimerOverflowNb = 0;
  directionSample =  LL_TIM_GetDirection( TIMx );
#ifdef TIM_CNT_UIFCPY
  OFbit = __LL_TIM_GETFLAG_UIFCPY( CntCapture );
  if ( OFbit )
 8007a0a:	ea5f 7cd4 	movs.w	ip, r4, lsr #31
  pHandle->TimerOverflowNb = 0;
 8007a0e:	f04f 0600 	mov.w	r6, #0
 8007a12:	f8a0 6070 	strh.w	r6, [r0, #112]	; 0x70
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007a16:	bf18      	it	ne
 8007a18:	f06f 0701 	mvnne.w	r7, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8007a1c:	681e      	ldr	r6, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007a1e:	bf18      	it	ne
 8007a20:	611f      	strne	r7, [r3, #16]
  OverflowCntSample = pHandle->TimerOverflowNb;
 8007a22:	b2ad      	uxth	r5, r5
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
#endif
  /* If UIFCPY is not present, OverflowCntSample can not be used safely for
  speed computation, but we still use it to check that we do not exceed one overflow
  (sample frequency not less than mechanical motor speed */
  if ( ( OverflowCntSample + OFbit ) > ENC_MAX_OVERFLOW_NB )
 8007a24:	4465      	add	r5, ip
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
 8007a26:	f024 4c00 	bic.w	ip, r4, #2147483648	; 0x80000000
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007a2a:	68dc      	ldr	r4, [r3, #12]
  if ( ( OverflowCntSample + OFbit ) > ENC_MAX_OVERFLOW_NB )
 8007a2c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8007a30:	f044 0401 	orr.w	r4, r4, #1
 8007a34:	60dc      	str	r4, [r3, #12]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8007a36:	f006 0610 	and.w	r6, r6, #16
  {
    pHandle->TimerOverflowError = true;
 8007a3a:	bf8a      	itet	hi
 8007a3c:	2401      	movhi	r4, #1
  {
    pHandle->DeltaCapturesIndex = 0u;
  }

  /*Checks the reliability status, then stores and returns it*/
  if ( pHandle->TimerOverflowError )
 8007a3e:	f890 4079 	ldrbls.w	r4, [r0, #121]	; 0x79
    pHandle->TimerOverflowError = true;
 8007a42:	f880 4079 	strbhi.w	r4, [r0, #121]	; 0x79
  if ( directionSample == LL_TIM_COUNTERDIRECTION_DOWN )
 8007a46:	2e00      	cmp	r6, #0
 8007a48:	f000 808c 	beq.w	8007b64 <ENC_CalcAvrgMecSpeedUnit+0x170>
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007a4c:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8007a50:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 8007a54:	f8b0 e06e 	ldrh.w	lr, [r0, #110]	; 0x6e
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007a58:	360a      	adds	r6, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8007a5a:	ebac 0303 	sub.w	r3, ip, r3
 8007a5e:	fb0e 3515 	mls	r5, lr, r5, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007a62:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007a66:	2a00      	cmp	r2, #0
 8007a68:	f000 808c 	beq.w	8007b84 <ENC_CalcAvrgMecSpeedUnit+0x190>
 8007a6c:	2a01      	cmp	r2, #1
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007a6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007a70:	d039      	beq.n	8007ae6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007a72:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007a74:	2a02      	cmp	r2, #2
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007a76:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007a78:	d035      	beq.n	8007ae6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007a7a:	6b05      	ldr	r5, [r0, #48]	; 0x30
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007a7c:	2a03      	cmp	r2, #3
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007a7e:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007a80:	d031      	beq.n	8007ae6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007a82:	6b45      	ldr	r5, [r0, #52]	; 0x34
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007a84:	2a04      	cmp	r2, #4
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007a86:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007a88:	d02d      	beq.n	8007ae6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007a8a:	6b85      	ldr	r5, [r0, #56]	; 0x38
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007a8c:	2a05      	cmp	r2, #5
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007a8e:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007a90:	d029      	beq.n	8007ae6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007a92:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007a94:	2a06      	cmp	r2, #6
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007a96:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007a98:	d025      	beq.n	8007ae6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007a9a:	6c05      	ldr	r5, [r0, #64]	; 0x40
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007a9c:	2a07      	cmp	r2, #7
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007a9e:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007aa0:	d021      	beq.n	8007ae6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007aa2:	6c45      	ldr	r5, [r0, #68]	; 0x44
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007aa4:	2a08      	cmp	r2, #8
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007aa6:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007aa8:	d01d      	beq.n	8007ae6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007aaa:	6c85      	ldr	r5, [r0, #72]	; 0x48
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007aac:	2a09      	cmp	r2, #9
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007aae:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007ab0:	d019      	beq.n	8007ae6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007ab2:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007ab4:	2a0a      	cmp	r2, #10
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007ab6:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007ab8:	d015      	beq.n	8007ae6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007aba:	6d05      	ldr	r5, [r0, #80]	; 0x50
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007abc:	2a0b      	cmp	r2, #11
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007abe:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007ac0:	d011      	beq.n	8007ae6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007ac2:	6d45      	ldr	r5, [r0, #84]	; 0x54
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007ac4:	2a0c      	cmp	r2, #12
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007ac6:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007ac8:	d00d      	beq.n	8007ae6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007aca:	6d85      	ldr	r5, [r0, #88]	; 0x58
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007acc:	2a0d      	cmp	r2, #13
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007ace:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007ad0:	d009      	beq.n	8007ae6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007ad2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007ad4:	2a0e      	cmp	r2, #14
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007ad6:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007ad8:	d005      	beq.n	8007ae6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007ada:	6e05      	ldr	r5, [r0, #96]	; 0x60
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007adc:	2a0f      	cmp	r2, #15
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007ade:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007ae0:	d001      	beq.n	8007ae6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007ae2:	6e45      	ldr	r5, [r0, #100]	; 0x64
 8007ae4:	442b      	add	r3, r5
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 8007ae6:	6a45      	ldr	r5, [r0, #36]	; 0x24
  wtemp2 = ( int32_t )( pHandle->PulseNumber ) *
 8007ae8:	fb0e fe02 	mul.w	lr, lr, r2
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 8007aec:	fb05 f303 	mul.w	r3, r5, r3
  wtemp1 /= wtemp2;
 8007af0:	fb93 f3fe 	sdiv	r3, r3, lr
  *pMecSpeedUnit = ( int16_t )( wtemp1 );
 8007af4:	b21e      	sxth	r6, r3
 8007af6:	800e      	strh	r6, [r1, #0]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8007af8:	f890 5078 	ldrb.w	r5, [r0, #120]	; 0x78
 8007afc:	350a      	adds	r5, #10
 8007afe:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
  pHandle->PreviousCapture = CntCapture;
 8007b02:	f8a0 c072 	strh.w	ip, [r0, #114]	; 0x72
  pHandle->DeltaCapturesIndex++;
 8007b06:	f890 c078 	ldrb.w	ip, [r0, #120]	; 0x78
 8007b0a:	f10c 0c01 	add.w	ip, ip, #1
 8007b0e:	fa5f fc8c 	uxtb.w	ip, ip
 8007b12:	f880 c078 	strb.w	ip, [r0, #120]	; 0x78
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8007b16:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;
 8007b1a:	8186      	strh	r6, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8007b1c:	eba3 030c 	sub.w	r3, r3, ip
 8007b20:	8243      	strh	r3, [r0, #18]
           ( int32_t )( pHandle->SpeedSamplingFreqHz ) *
 8007b22:	f8b0 306c 	ldrh.w	r3, [r0, #108]	; 0x6c
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 8007b26:	69c6      	ldr	r6, [r0, #28]
  wtemp1 /= ( int32_t )( pHandle->PulseNumber );
 8007b28:	f8b0 c06e 	ldrh.w	ip, [r0, #110]	; 0x6e
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8007b2c:	fb05 f303 	mul.w	r3, r5, r3
           ( int32_t )pHandle->_Super.bElToMecRatio;
 8007b30:	7845      	ldrb	r5, [r0, #1]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8007b32:	fb05 f303 	mul.w	r3, r5, r3
  if ( pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize )
 8007b36:	f890 5078 	ldrb.w	r5, [r0, #120]	; 0x78
  wtemp1 /= ( int32_t )( pHandle->PulseNumber );
 8007b3a:	fb93 f3fc 	sdiv	r3, r3, ip
  if ( pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize )
 8007b3e:	4295      	cmp	r5, r2
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 8007b40:	fb06 f303 	mul.w	r3, r6, r3
  wtemp1 /= ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 8007b44:	8b46      	ldrh	r6, [r0, #26]
 8007b46:	fb93 f3f6 	sdiv	r3, r3, r6
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;
 8007b4a:	81c3      	strh	r3, [r0, #14]
    pHandle->DeltaCapturesIndex = 0u;
 8007b4c:	bf24      	itt	cs
 8007b4e:	2300      	movcs	r3, #0
 8007b50:	f880 3078 	strbcs.w	r3, [r0, #120]	; 0x78
  if ( pHandle->TimerOverflowError )
 8007b54:	b1c4      	cbz	r4, 8007b88 <ENC_CalcAvrgMecSpeedUnit+0x194>
  {
    bReliability = false;
    pHandle->SensorIsReliable = false;
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007b56:	78c2      	ldrb	r2, [r0, #3]
 8007b58:	7002      	strb	r2, [r0, #0]
    pHandle->SensorIsReliable = false;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
  {
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
  }

  return ( bReliability );
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007b64:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8007b68:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 8007b6c:	f8b0 e06e 	ldrh.w	lr, [r0, #110]	; 0x6e
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007b70:	360a      	adds	r6, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8007b72:	ebac 0303 	sub.w	r3, ip, r3
 8007b76:	fb0e 3505 	mla	r5, lr, r5, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007b7a:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007b7e:	2a00      	cmp	r2, #0
 8007b80:	f47f af74 	bne.w	8007a6c <ENC_CalcAvrgMecSpeedUnit+0x78>
  int32_t wOverallAngleVariation = 0;
 8007b84:	4613      	mov	r3, r2
 8007b86:	e7ae      	b.n	8007ae6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
}
 8007b88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
 8007b8c:	f001 bb14 	b.w	80091b8 <SPD_IsMecSpeedReliable>

08007b90 <ENC_SetMecAngle>:
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  hMecAngle new value of rotor mechanical angle (s16degrees)
  * @retval none
  */
__weak void ENC_SetMecAngle( ENCODER_Handle_t * pHandle, int16_t hMecAngle )
{
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	4604      	mov	r4, r0
  printf("set mec angle ?\r\n");
 8007b94:	480c      	ldr	r0, [pc, #48]	; (8007bc8 <ENC_SetMecAngle+0x38>)
{
 8007b96:	460d      	mov	r5, r1
  printf("set mec angle ?\r\n");
 8007b98:	f002 fe02 	bl	800a7a0 <puts>

  uint16_t hAngleCounts;
  uint16_t hMecAngleuint;

  pHandle->_Super.hMecAngle = hMecAngle;
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8007b9c:	7863      	ldrb	r3, [r4, #1]
  {
    hMecAngleuint = ( uint16_t )hMecAngle;
  }

  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8007b9e:	480b      	ldr	r0, [pc, #44]	; (8007bcc <ENC_SetMecAngle+0x3c>)
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8007ba0:	6a21      	ldr	r1, [r4, #32]
  pHandle->_Super.hMecAngle = hMecAngle;
 8007ba2:	80e5      	strh	r5, [r4, #6]
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8007ba4:	fb05 f303 	mul.w	r3, r5, r3
 8007ba8:	b2aa      	uxth	r2, r5
  if ( hMecAngle < 0 )
 8007baa:	2d00      	cmp	r5, #0
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8007bac:	80a3      	strh	r3, [r4, #4]
 8007bae:	bfbc      	itt	lt
 8007bb0:	f102 33ff 	addlt.w	r3, r2, #4294967295
 8007bb4:	b29a      	uxthlt	r2, r3
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8007bb6:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
 8007bba:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8007bbe:	fba0 2303 	umull	r2, r3, r0, r3
 8007bc2:	0bdb      	lsrs	r3, r3, #15

  TIMx->CNT = ( uint16_t )( hAngleCounts );
 8007bc4:	624b      	str	r3, [r1, #36]	; 0x24
  
}
 8007bc6:	bd38      	pop	{r3, r4, r5, pc}
 8007bc8:	0800ce14 	.word	0x0800ce14
 8007bcc:	80008001 	.word	0x80008001

08007bd0 <ENC_IRQHandler>:
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  flag used to distinguish between various IRQ sources
  * @retval none
  */
__weak void * ENC_IRQHandler( void * pHandleVoid )
{
 8007bd0:	4602      	mov	r2, r0
  /*Updates the number of overflows occurred*/
  /* the handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1u;

  return MC_NULL;
}
 8007bd2:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1u;
 8007bd4:	f8b2 3070 	ldrh.w	r3, [r2, #112]	; 0x70
 8007bd8:	3301      	adds	r3, #1
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop

08007be4 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8007be8:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8007bea:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8007bee:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8007bf2:	f8a0 311b 	strh.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
  pHandle->RxFrameLevel = 0;
 8007bf6:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
}
 8007bfa:	4770      	bx	lr

08007bfc <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8007bfc:	b120      	cbz	r0, 8007c08 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8007bfe:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8007c02:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8007c04:	9b00      	ldr	r3, [sp, #0]
 8007c06:	60c3      	str	r3, [r0, #12]
  }
}
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop

08007c0c <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8007c0c:	b190      	cbz	r0, 8007c34 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8007c0e:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8007c10:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 8007c12:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8007c14:	b151      	cbz	r1, 8007c2c <FCP_CalcCRC+0x20>
 8007c16:	1c82      	adds	r2, r0, #2
 8007c18:	3901      	subs	r1, #1
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	fa52 f181 	uxtab	r1, r2, r1
    {
      nSum += pFrame->Buffer[idx];
 8007c20:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007c24:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8007c26:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8007c28:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8007c2a:	d1f9      	bne.n	8007c20 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8007c2c:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 8007c30:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop

08007c38 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8007c38:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 8007c3a:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 8007c3e:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 8007c40:	2100      	movs	r1, #0
 8007c42:	f002 f8b5 	bl	8009db0 <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8007c46:	2300      	movs	r3, #0
 8007c48:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8007c4c:	bd10      	pop	{r4, pc}
 8007c4e:	bf00      	nop

08007c50 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8007c50:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8007c54:	1c53      	adds	r3, r2, #1
 8007c56:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8007c58:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8007c5a:	bf88      	it	hi
 8007c5c:	2300      	movhi	r3, #0
{
 8007c5e:	b500      	push	{lr}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8007c60:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8007c64:	f100 0efe 	add.w	lr, r0, #254	; 0xfe
 8007c68:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8007c6c:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 8007c70:	2200      	movs	r2, #0
 8007c72:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8007c74:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8007c78:	4573      	cmp	r3, lr
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8007c7a:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8007c7c:	d1fa      	bne.n	8007c74 <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8007c7e:	2a00      	cmp	r2, #0
 8007c80:	bfb8      	it	lt
 8007c82:	327f      	addlt	r2, #127	; 0x7f
 8007c84:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8007c86:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8007c8a:	4608      	mov	r0, r1
 8007c8c:	f85d fb04 	ldr.w	pc, [sp], #4

08007c90 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8007c90:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop

08007c98 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8007c98:	8a03      	ldrh	r3, [r0, #16]
 8007c9a:	8b42      	ldrh	r2, [r0, #26]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d306      	bcc.n	8007cae <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8007ca0:	8b82      	ldrh	r2, [r0, #28]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d901      	bls.n	8007caa <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8007ca6:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8007ca8:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8007caa:	8ac0      	ldrh	r0, [r0, #22]
 8007cac:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8007cae:	2008      	movs	r0, #8
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop

08007cb4 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	8203      	strh	r3, [r0, #16]
}
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop

08007cbc <NTC_Init>:
{
 8007cbc:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8007cbe:	7803      	ldrb	r3, [r0, #0]
{
 8007cc0:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8007cc2:	b123      	cbz	r3, 8007cce <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8007cc4:	8a43      	ldrh	r3, [r0, #18]
 8007cc6:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8007cc8:	2200      	movs	r2, #0
 8007cca:	82c2      	strh	r2, [r0, #22]
}
 8007ccc:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8007cce:	3004      	adds	r0, #4
 8007cd0:	f7fb fa4c 	bl	800316c <RCM_RegisterRegConv>
 8007cd4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f7ff ffeb 	bl	8007cb4 <NTC_Clear>
}
 8007cde:	bd10      	pop	{r4, pc}

08007ce0 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8007ce0:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8007ce2:	7803      	ldrb	r3, [r0, #0]
{
 8007ce4:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8007ce6:	b113      	cbz	r3, 8007cee <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8007ce8:	2000      	movs	r0, #0
 8007cea:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8007cec:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8007cee:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8007cf2:	f7fb fb23 	bl	800333c <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8007cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007cfa:	4298      	cmp	r0, r3
 8007cfc:	d007      	beq.n	8007d0e <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8007cfe:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8007d00:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8007d02:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 8007d04:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8007d08:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8007d0c:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f7ff ffc2 	bl	8007c98 <NTC_SetFaultState>
 8007d14:	82e0      	strh	r0, [r4, #22]
}
 8007d16:	bd10      	pop	{r4, pc}

08007d18 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8007d18:	7803      	ldrb	r3, [r0, #0]
 8007d1a:	b983      	cbnz	r3, 8007d3e <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8007d1c:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8007d1e:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8007d20:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8007d24:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8007d26:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 8007d28:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	bfbc      	itt	lt
 8007d30:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8007d34:	33ff      	addlt	r3, #255	; 0xff
 8007d36:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8007d3a:	b200      	sxth	r0, r0
 8007d3c:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8007d3e:	8a80      	ldrh	r0, [r0, #20]
}
 8007d40:	b200      	sxth	r0, r0
 8007d42:	4770      	bx	lr

08007d44 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8007d44:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8007d46:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8007d48:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8007d4a:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8007d4c:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8007d4e:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8007d50:	6283      	str	r3, [r0, #40]	; 0x28
}
 8007d52:	4770      	bx	lr

08007d54 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8007d54:	8081      	strh	r1, [r0, #4]
}
 8007d56:	4770      	bx	lr

08007d58 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8007d58:	80c1      	strh	r1, [r0, #6]
}
 8007d5a:	4770      	bx	lr

08007d5c <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8007d5c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop

08007d64 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8007d64:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop

08007d6c <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8007d6c:	6081      	str	r1, [r0, #8]

  return;
}
 8007d6e:	4770      	bx	lr

08007d70 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8007d70:	8b00      	ldrh	r0, [r0, #24]
 8007d72:	4770      	bx	lr

08007d74 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8007d74:	8b40      	ldrh	r0, [r0, #26]
 8007d76:	4770      	bx	lr

08007d78 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8007d78:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8007d7a:	4770      	bx	lr

08007d7c <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8007d7c:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop

08007d84 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007d84:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8007d88:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8007d8c:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
{
 8007d90:	b510      	push	{r4, lr}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007d92:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8007d96:	f9b0 e016 	ldrsh.w	lr, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8007d9a:	b162      	cbz	r2, 8007db6 <PI_Controller+0x32>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8007d9c:	fb01 f202 	mul.w	r2, r1, r2
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8007da0:	6881      	ldr	r1, [r0, #8]

    if ( wIntegral_sum_temp < 0 )
 8007da2:	188c      	adds	r4, r1, r2
 8007da4:	d420      	bmi.n	8007de8 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8007da6:	2900      	cmp	r1, #0
 8007da8:	db2a      	blt.n	8007e00 <PI_Controller+0x7c>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8007daa:	68c2      	ldr	r2, [r0, #12]
 8007dac:	42a2      	cmp	r2, r4
 8007dae:	db02      	blt.n	8007db6 <PI_Controller+0x32>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8007db0:	6902      	ldr	r2, [r0, #16]
 8007db2:	42a2      	cmp	r2, r4
 8007db4:	dd22      	ble.n	8007dfc <PI_Controller+0x78>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8007db6:	8b81      	ldrh	r1, [r0, #28]
 8007db8:	410b      	asrs	r3, r1
 8007dba:	8bc1      	ldrh	r1, [r0, #30]
 8007dbc:	fa42 f101 	asr.w	r1, r2, r1
 8007dc0:	440b      	add	r3, r1
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8007dc2:	459c      	cmp	ip, r3
 8007dc4:	da05      	bge.n	8007dd2 <PI_Controller+0x4e>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8007dc6:	ebac 0303 	sub.w	r3, ip, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8007dca:	441a      	add	r2, r3
 8007dcc:	6082      	str	r2, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8007dce:	4660      	mov	r0, ip
 8007dd0:	bd10      	pop	{r4, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 8007dd2:	459e      	cmp	lr, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8007dd4:	bfc9      	itett	gt
 8007dd6:	ebae 0303 	subgt.w	r3, lr, r3
  return ( ( int16_t )( wOutput_32 ) );
 8007dda:	fa0f fc83 	sxthle.w	ip, r3
  pHandle->wIntegralTerm += wDischarge;
 8007dde:	18d2      	addgt	r2, r2, r3
 8007de0:	46f4      	movgt	ip, lr
 8007de2:	6082      	str	r2, [r0, #8]
}
 8007de4:	4660      	mov	r0, ip
 8007de6:	bd10      	pop	{r4, pc}
      if ( pHandle->wIntegralTerm > 0 )
 8007de8:	2900      	cmp	r1, #0
 8007dea:	ddde      	ble.n	8007daa <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8007dec:	2a00      	cmp	r2, #0
 8007dee:	dddc      	ble.n	8007daa <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8007df0:	68c2      	ldr	r2, [r0, #12]
 8007df2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007df6:	428a      	cmp	r2, r1
 8007df8:	d1dd      	bne.n	8007db6 <PI_Controller+0x32>
          wIntegral_sum_temp = INT32_MAX;
 8007dfa:	4614      	mov	r4, r2
 8007dfc:	4622      	mov	r2, r4
 8007dfe:	e7da      	b.n	8007db6 <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8007e00:	4902      	ldr	r1, [pc, #8]	; (8007e0c <PI_Controller+0x88>)
 8007e02:	ea34 0422 	bics.w	r4, r4, r2, asr #32
 8007e06:	bf28      	it	cs
 8007e08:	460c      	movcs	r4, r1
 8007e0a:	e7ce      	b.n	8007daa <PI_Controller+0x26>
 8007e0c:	80000001 	.word	0x80000001

08007e10 <PID_Controller>:
{
  int32_t wDifferential_Term;
  int32_t wDeltaError;
  int32_t wTemp_output;

  if ( pHandle->hKdGain != 0 ) /* derivative terms not used */
 8007e10:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
{
 8007e14:	b538      	push	{r3, r4, r5, lr}
  if ( pHandle->hKdGain != 0 ) /* derivative terms not used */
 8007e16:	b182      	cbz	r2, 8007e3a <PID_Controller+0x2a>
  {
    wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 8007e18:	6a84      	ldr	r4, [r0, #40]	; 0x28
#else
    /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right)
    is used by the compiler to perform the shifts (instead of LSR
    logical shift right)*/
    wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 8007e1a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
#endif

    pHandle->wPrevProcessVarError = wProcessVarError;
 8007e1c:	6281      	str	r1, [r0, #40]	; 0x28
    wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 8007e1e:	1b0c      	subs	r4, r1, r4
    wDifferential_Term = pHandle->hKdGain * wDeltaError;
 8007e20:	fb02 f404 	mul.w	r4, r2, r4
    wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 8007e24:	4605      	mov	r5, r0
 8007e26:	411c      	asrs	r4, r3

    wTemp_output = PI_Controller( pHandle, wProcessVarError ) + wDifferential_Term;
 8007e28:	f7ff ffac 	bl	8007d84 <PI_Controller>

    if ( wTemp_output > pHandle->hUpperOutputLimit )
 8007e2c:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
    wTemp_output = PI_Controller( pHandle, wProcessVarError ) + wDifferential_Term;
 8007e30:	4404      	add	r4, r0
    if ( wTemp_output > pHandle->hUpperOutputLimit )
 8007e32:	42a2      	cmp	r2, r4
 8007e34:	da06      	bge.n	8007e44 <PID_Controller+0x34>
  else
  {
    wTemp_output = PI_Controller( pHandle, wProcessVarError );
  }
  return ( ( int16_t ) wTemp_output );
}
 8007e36:	4610      	mov	r0, r2
 8007e38:	bd38      	pop	{r3, r4, r5, pc}
    wTemp_output = PI_Controller( pHandle, wProcessVarError );
 8007e3a:	f7ff ffa3 	bl	8007d84 <PI_Controller>
 8007e3e:	4602      	mov	r2, r0
}
 8007e40:	4610      	mov	r0, r2
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
    else if ( wTemp_output < pHandle->hLowerOutputLimit )
 8007e44:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
  return ( ( int16_t ) wTemp_output );
 8007e48:	4294      	cmp	r4, r2
 8007e4a:	bfb8      	it	lt
 8007e4c:	4614      	movlt	r4, r2
 8007e4e:	b222      	sxth	r2, r4
}
 8007e50:	4610      	mov	r0, r2
 8007e52:	bd38      	pop	{r3, r4, r5, pc}

08007e54 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8007e54:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
{
 8007e58:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8007e5a:	8b11      	ldrh	r1, [r2, #24]
 8007e5c:	89d4      	ldrh	r4, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8007e5e:	8993      	ldrh	r3, [r2, #12]
 8007e60:	8ad2      	ldrh	r2, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007e62:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
{
 8007e66:	4605      	mov	r5, r0
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8007e68:	fb14 f401 	smulbb	r4, r4, r1
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007e6c:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8007e70:	fb13 4402 	smlabb	r4, r3, r2, r4
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007e74:	f7ff fcc8 	bl	8007808 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8007e78:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007e7a:	490f      	ldr	r1, [pc, #60]	; (8007eb8 <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007e7c:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 8007e80:	bfb8      	it	lt
 8007e82:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007e86:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 8007e8a:	bfb8      	it	lt
 8007e8c:	33ff      	addlt	r3, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007e8e:	fb81 1000 	smull	r1, r0, r1, r0
 8007e92:	ebc2 10a0 	rsb	r0, r2, r0, asr #6
  wAux /= 65536;
 8007e96:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 8007e98:	fb00 f303 	mul.w	r3, r0, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8007e9c:	4907      	ldr	r1, [pc, #28]	; (8007ebc <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8007e9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007ea2:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8007ea4:	fb81 2103 	smull	r2, r1, r1, r3
 8007ea8:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8007eaa:	4628      	mov	r0, r5
 8007eac:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8007eb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8007eb4:	f7ff becc 	b.w	8007c50 <MPM_CalcElMotorPower>
 8007eb8:	1b4e81b5 	.word	0x1b4e81b5
 8007ebc:	66666667 	.word	0x66666667

08007ec0 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 8007ec0:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8007ec2:	4b18      	ldr	r3, [pc, #96]	; (8007f24 <startTimers+0x64>)
 8007ec4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ec6:	07d2      	lsls	r2, r2, #31
 8007ec8:	b082      	sub	sp, #8
 8007eca:	d415      	bmi.n	8007ef8 <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007ecc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ece:	f042 0201 	orr.w	r2, r2, #1
 8007ed2:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007ed4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007ed6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007eda:	f002 0201 	and.w	r2, r2, #1
 8007ede:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8007ee0:	9a01      	ldr	r2, [sp, #4]
 8007ee2:	694a      	ldr	r2, [r1, #20]
 8007ee4:	f042 0201 	orr.w	r2, r2, #1
 8007ee8:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8007eea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007eec:	f022 0201 	bic.w	r2, r2, #1
 8007ef0:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8007ef2:	b002      	add	sp, #8
 8007ef4:	bc30      	pop	{r4, r5}
 8007ef6:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8007ef8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007efc:	4c0a      	ldr	r4, [pc, #40]	; (8007f28 <startTimers+0x68>)
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	6859      	ldr	r1, [r3, #4]
 8007f02:	4d0a      	ldr	r5, [pc, #40]	; (8007f2c <startTimers+0x6c>)
 8007f04:	4021      	ands	r1, r4
 8007f06:	f041 0120 	orr.w	r1, r1, #32
 8007f0a:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007f0c:	6958      	ldr	r0, [r3, #20]
 8007f0e:	f040 0001 	orr.w	r0, r0, #1
 8007f12:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007f14:	6859      	ldr	r1, [r3, #4]
 8007f16:	402a      	ands	r2, r5
 8007f18:	4021      	ands	r1, r4
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	605a      	str	r2, [r3, #4]
}
 8007f1e:	b002      	add	sp, #8
 8007f20:	bc30      	pop	{r4, r5}
 8007f22:	4770      	bx	lr
 8007f24:	40021000 	.word	0x40021000
 8007f28:	fdffff8f 	.word	0xfdffff8f
 8007f2c:	02000070 	.word	0x02000070

08007f30 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8007f30:	b570      	push	{r4, r5, r6, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8007f32:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 8007f34:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 8007f38:	d11c      	bne.n	8007f74 <waitForPolarizationEnd+0x44>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8007f3a:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8007f3c:	3201      	adds	r2, #1
 8007f3e:	0855      	lsrs	r5, r2, #1
 8007f40:	016d      	lsls	r5, r5, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007f42:	f06f 0602 	mvn.w	r6, #2
 8007f46:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8007f48:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8007f4a:	f893 c000 	ldrb.w	ip, [r3]
 8007f4e:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8007f52:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8007f56:	d80c      	bhi.n	8007f72 <waitForPolarizationEnd+0x42>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8007f58:	6904      	ldr	r4, [r0, #16]
 8007f5a:	07a4      	lsls	r4, r4, #30
 8007f5c:	d5f5      	bpl.n	8007f4a <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 8007f5e:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8007f62:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007f64:	6106      	str	r6, [r0, #16]
 8007f66:	d8f0      	bhi.n	8007f4a <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 8007f68:	781c      	ldrb	r4, [r3, #0]
 8007f6a:	2c0f      	cmp	r4, #15
 8007f6c:	d8ed      	bhi.n	8007f4a <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8007f72:	bd70      	pop	{r4, r5, r6, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8007f74:	2c60      	cmp	r4, #96	; 0x60
 8007f76:	d1e1      	bne.n	8007f3c <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8007f78:	3201      	adds	r2, #1
 8007f7a:	0155      	lsls	r5, r2, #5
 8007f7c:	e7e1      	b.n	8007f42 <waitForPolarizationEnd+0x12>
 8007f7e:	bf00      	nop

08007f80 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8007f80:	6843      	ldr	r3, [r0, #4]
 8007f82:	4718      	bx	r3

08007f84 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8007f84:	b510      	push	{r4, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007f86:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8007f8a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8007f8c:	b082      	sub	sp, #8
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007f8e:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 8007f92:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007f94:	fb04 fc0c 	mul.w	ip, r4, ip
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8007f98:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007f9a:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8007f9e:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8007fa2:	eb01 034c 	add.w	r3, r1, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8007fa6:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8007faa:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8007fae:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8007fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007fb6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8007fba:	ea4f 0e6e 	mov.w	lr, lr, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8007fbe:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8007fc2:	db7d      	blt.n	80080c0 <PWMC_SetPhaseVoltage+0x13c>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8007fc4:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007fc8:	db51      	blt.n	800806e <PWMC_SetPhaseVoltage+0xea>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8007fca:	ebbe 0e02 	subs.w	lr, lr, r2
 8007fce:	bf44      	itt	mi
 8007fd0:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8007fd4:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8007fd8:	2900      	cmp	r1, #0
 8007fda:	bfbc      	itt	lt
 8007fdc:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8007fe0:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bfb8      	it	lt
 8007fe8:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8007fec:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8007ff0:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8007ff4:	bfb8      	it	lt
 8007ff6:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8007ffa:	f04f 0c01 	mov.w	ip, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8007ffe:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8008002:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8008006:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
 800800a:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800800c:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 800800e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8008012:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8008016:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800801a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800801e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008022:	b292      	uxth	r2, r2
 8008024:	b289      	uxth	r1, r1
 8008026:	b29b      	uxth	r3, r3
 8008028:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 800802a:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 800802c:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 800802e:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8008030:	d118      	bne.n	8008064 <PWMC_SetPhaseVoltage+0xe0>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8008032:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
 8008036:	2c00      	cmp	r4, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8008038:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 800803c:	bfcc      	ite	gt
 800803e:	1912      	addgt	r2, r2, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8008040:	1b12      	suble	r2, r2, r4
 8008042:	b292      	uxth	r2, r2
 8008044:	8642      	strh	r2, [r0, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 8008046:	f9b0 204a 	ldrsh.w	r2, [r0, #74]	; 0x4a
 800804a:	2a00      	cmp	r2, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 800804c:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 8008050:	bfcc      	ite	gt
 8008052:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8008054:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8008056:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8008058:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 800805a:	bfcc      	ite	gt
 800805c:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 800805e:	1b1b      	suble	r3, r3, r4
 8008060:	8681      	strh	r1, [r0, #52]	; 0x34
 8008062:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8008064:	6983      	ldr	r3, [r0, #24]
}
 8008066:	b002      	add	sp, #8
 8008068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800806c:	4718      	bx	r3
      if ( wX <= 0 )
 800806e:	f1bc 0f00 	cmp.w	ip, #0
 8008072:	dd4b      	ble.n	800810c <PWMC_SetPhaseVoltage+0x188>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8008074:	ebbc 0e02 	subs.w	lr, ip, r2
 8008078:	bf44      	itt	mi
 800807a:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 800807e:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8008082:	2900      	cmp	r1, #0
 8008084:	bfb8      	it	lt
 8008086:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 800808a:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 800808e:	bfb8      	it	lt
 8008090:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8008094:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8008098:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 800809a:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800809e:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80080a2:	bfb8      	it	lt
 80080a4:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 80080a8:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80080ac:	bfb8      	it	lt
 80080ae:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80080b2:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 80080b6:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 80080b8:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 80080ba:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80080be:	e7a8      	b.n	8008012 <PWMC_SetPhaseVoltage+0x8e>
    if ( wZ < 0 )
 80080c0:	f1b1 3fff 	cmp.w	r1, #4294967295
 80080c4:	db6f      	blt.n	80081a6 <PWMC_SetPhaseVoltage+0x222>
      if ( wX <= 0 )
 80080c6:	f1bc 0f00 	cmp.w	ip, #0
 80080ca:	dd46      	ble.n	800815a <PWMC_SetPhaseVoltage+0x1d6>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80080cc:	ebbe 0e0c 	subs.w	lr, lr, ip
 80080d0:	bf48      	it	mi
 80080d2:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 80080d6:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80080da:	bf48      	it	mi
 80080dc:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	bfb8      	it	lt
 80080e4:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 80080e8:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80080ec:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80080f0:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 80080f4:	bfb8      	it	lt
 80080f6:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 80080fa:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80080fe:	eb03 416c 	add.w	r1, r3, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 8008102:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8008104:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8008106:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800810a:	e782      	b.n	8008012 <PWMC_SetPhaseVoltage+0x8e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800810c:	ebbe 0e0c 	subs.w	lr, lr, ip
 8008110:	bf44      	itt	mi
 8008112:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8008116:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 800811a:	2b00      	cmp	r3, #0
 800811c:	bfb8      	it	lt
 800811e:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8008122:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8008126:	bfb8      	it	lt
 8008128:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 800812c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8008130:	f1bc 0100 	subs.w	r1, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8008134:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8008138:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 800813c:	bfb8      	it	lt
 800813e:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8008142:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8008146:	bfb8      	it	lt
 8008148:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 800814c:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->lowDuty = wTimePhA;
 8008150:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8008152:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 8008154:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8008158:	e75b      	b.n	8008012 <PWMC_SetPhaseVoltage+0x8e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800815a:	ebbc 0e02 	subs.w	lr, ip, r2
 800815e:	bf44      	itt	mi
 8008160:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8008164:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8008168:	2900      	cmp	r1, #0
 800816a:	bfb8      	it	lt
 800816c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8008170:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8008174:	bfb8      	it	lt
 8008176:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 800817a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800817e:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 8008180:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8008184:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8008188:	bfb8      	it	lt
 800818a:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 800818e:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8008192:	bfb8      	it	lt
 8008194:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8008198:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 800819c:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800819e:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 80081a0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80081a4:	e735      	b.n	8008012 <PWMC_SetPhaseVoltage+0x8e>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80081a6:	ebbe 0e02 	subs.w	lr, lr, r2
 80081aa:	bf44      	itt	mi
 80081ac:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 80081b0:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80081b4:	2900      	cmp	r1, #0
 80081b6:	bfbc      	itt	lt
 80081b8:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 80081bc:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	bfb8      	it	lt
 80081c4:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80081c8:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80081cc:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80081d0:	bfb8      	it	lt
 80081d2:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 80081d6:	f04f 0c04 	mov.w	ip, #4
      wTimePhB = wTimePhA + wZ / 131072;
 80081da:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80081de:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 80081e2:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 80081e6:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 80081e8:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 80081ea:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80081ee:	e710      	b.n	8008012 <PWMC_SetPhaseVoltage+0x8e>

080081f0 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 80081f0:	6883      	ldr	r3, [r0, #8]
 80081f2:	4718      	bx	r3

080081f4 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 80081f4:	b510      	push	{r4, lr}
 80081f6:	4604      	mov	r4, r0
 80081f8:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 80081fa:	b199      	cbz	r1, 8008224 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 80081fc:	2901      	cmp	r1, #1
 80081fe:	d002      	beq.n	8008206 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8008200:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8008202:	b002      	add	sp, #8
 8008204:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8008206:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800820a:	b1cb      	cbz	r3, 8008240 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 800820c:	3b01      	subs	r3, #1
 800820e:	b29b      	uxth	r3, r3
 8008210:	9101      	str	r1, [sp, #4]
 8008212:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1f2      	bne.n	8008200 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 800821a:	6903      	ldr	r3, [r0, #16]
 800821c:	4798      	blx	r3
        retVal = true;
 800821e:	9901      	ldr	r1, [sp, #4]
 8008220:	4608      	mov	r0, r1
 8008222:	e7ee      	b.n	8008202 <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8008224:	f7ff ffe4 	bl	80081f0 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8008228:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800822c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1e5      	bne.n	8008200 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8008234:	4620      	mov	r0, r4
 8008236:	6923      	ldr	r3, [r4, #16]
 8008238:	4798      	blx	r3
      retVal = true;
 800823a:	2001      	movs	r0, #1
}
 800823c:	b002      	add	sp, #8
 800823e:	bd10      	pop	{r4, pc}
      retVal = true;
 8008240:	4608      	mov	r0, r1
}
 8008242:	b002      	add	sp, #8
 8008244:	bd10      	pop	{r4, pc}
 8008246:	bf00      	nop

08008248 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8008248:	69c3      	ldr	r3, [r0, #28]
 800824a:	4718      	bx	r3

0800824c <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800824c:	6883      	ldr	r3, [r0, #8]
 800824e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008252:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008256:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008258:	6883      	ldr	r3, [r0, #8]
 800825a:	00d9      	lsls	r1, r3, #3
    R3_2_TIMxInit( TIMx, &pHandle->_Super );
  }
}

static void R3_2_ADCxInit( ADC_TypeDef * ADCx )
{
 800825c:	b082      	sub	sp, #8
 800825e:	d418      	bmi.n	8008292 <R3_2_ADCxInit+0x46>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 8008260:	4b24      	ldr	r3, [pc, #144]	; (80082f4 <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 8008262:	6882      	ldr	r2, [r0, #8]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4924      	ldr	r1, [pc, #144]	; (80082f8 <R3_2_ADCxInit+0xac>)
 8008268:	099b      	lsrs	r3, r3, #6
 800826a:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 800826e:	fba1 1303 	umull	r1, r3, r1, r3
 8008272:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008276:	099b      	lsrs	r3, r3, #6
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800827e:	6082      	str	r2, [r0, #8]
 8008280:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8008282:	9b01      	ldr	r3, [sp, #4]
 8008284:	b12b      	cbz	r3, 8008292 <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8008286:	9b01      	ldr	r3, [sp, #4]
 8008288:	3b01      	subs	r3, #1
 800828a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800828c:	9b01      	ldr	r3, [sp, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1f9      	bne.n	8008286 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 8008292:	6883      	ldr	r3, [r0, #8]
 8008294:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008298:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800829c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082a0:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80082a2:	6883      	ldr	r3, [r0, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	dbfc      	blt.n	80082a2 <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80082a8:	6803      	ldr	r3, [r0, #0]
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 80082aa:	07da      	lsls	r2, r3, #31
 80082ac:	d408      	bmi.n	80082c0 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 80082ae:	4a13      	ldr	r2, [pc, #76]	; (80082fc <R3_2_ADCxInit+0xb0>)
 80082b0:	6883      	ldr	r3, [r0, #8]
 80082b2:	4013      	ands	r3, r2
 80082b4:	f043 0301 	orr.w	r3, r3, #1
 80082b8:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80082ba:	6803      	ldr	r3, [r0, #0]
 80082bc:	07db      	lsls	r3, r3, #31
 80082be:	d5f7      	bpl.n	80082b0 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 80082c0:	6882      	ldr	r2, [r0, #8]
 80082c2:	490e      	ldr	r1, [pc, #56]	; (80082fc <R3_2_ADCxInit+0xb0>)
 80082c4:	400a      	ands	r2, r1
 80082c6:	f042 0208 	orr.w	r2, r2, #8
 80082ca:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 80082cc:	6882      	ldr	r2, [r0, #8]
 80082ce:	400a      	ands	r2, r1
 80082d0:	f042 0220 	orr.w	r2, r2, #32
 80082d4:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 80082d6:	68c3      	ldr	r3, [r0, #12]
 80082d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082e4:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 80082e6:	6883      	ldr	r3, [r0, #8]
 80082e8:	400b      	ands	r3, r1
 80082ea:	f043 0304 	orr.w	r3, r3, #4
 80082ee:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
 }
 80082f0:	b002      	add	sp, #8
 80082f2:	4770      	bx	lr
 80082f4:	20000680 	.word	0x20000680
 80082f8:	053e2d63 	.word	0x053e2d63
 80082fc:	7fffffc0 	.word	0x7fffffc0

08008300 <R3_2_GetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008300:	6f43      	ldr	r3, [r0, #116]	; 0x74
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 8008302:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8008306:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008308:	689c      	ldr	r4, [r3, #8]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 800830a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800830e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8008310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8008312:	682d      	ldr	r5, [r5, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8008314:	681e      	ldr	r6, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008316:	6863      	ldr	r3, [r4, #4]
 8008318:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800831c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008320:	6063      	str	r3, [r4, #4]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  switch ( Sector )
 8008322:	2a05      	cmp	r2, #5
 8008324:	f200 809f 	bhi.w	8008466 <R3_2_GetPhaseCurrents+0x166>
 8008328:	e8df f002 	tbb	[pc, r2]
 800832c:	031f1f38 	.word	0x031f1f38
 8008330:	3803      	.short	0x3803
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8008332:	6dc4      	ldr	r4, [r0, #92]	; 0x5c

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 8008334:	4b4f      	ldr	r3, [pc, #316]	; (8008474 <R3_2_GetPhaseCurrents+0x174>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8008336:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8008338:	429c      	cmp	r4, r3
 800833a:	da54      	bge.n	80083e6 <R3_2_GetPhaseCurrents+0xe6>
      {
        Iab->a = -INT16_MAX;
      }
      else  if ( Aux > INT16_MAX )
      {
        Iab->a = INT16_MAX;
 800833c:	800b      	strh	r3, [r1, #0]
      {
        Iab->a = ( int16_t )Aux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 800833e:	6e02      	ldr	r2, [r0, #96]	; 0x60

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 8008340:	4d4c      	ldr	r5, [pc, #304]	; (8008474 <R3_2_GetPhaseCurrents+0x174>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8008342:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 8008344:	42aa      	cmp	r2, r5
 8008346:	da54      	bge.n	80083f2 <R3_2_GetPhaseCurrents+0xf2>

    default:
      break;
  }

  pHandle->_Super.Ia = Iab->a;
 8008348:	f9b1 c000 	ldrsh.w	ip, [r1]
        Iab->b = -INT16_MAX;
 800834c:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800834e:	fa1f f38c 	uxth.w	r3, ip
 8008352:	f248 0201 	movw	r2, #32769	; 0x8001
 8008356:	4413      	add	r3, r2
 8008358:	425b      	negs	r3, r3
  pHandle->_Super.Ib = Iab->b;
 800835a:	f8a0 504a 	strh.w	r5, [r0, #74]	; 0x4a
  pHandle->_Super.Ia = Iab->a;
 800835e:	f8a0 c048 	strh.w	ip, [r0, #72]	; 0x48
}
 8008362:	bc70      	pop	{r4, r5, r6}
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008364:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8008368:	4770      	bx	lr
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800836a:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 800836c:	4b41      	ldr	r3, [pc, #260]	; (8008474 <R3_2_GetPhaseCurrents+0x174>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800836e:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8008370:	429c      	cmp	r4, r3
 8008372:	db32      	blt.n	80083da <R3_2_GetPhaseCurrents+0xda>
      else  if ( Aux > INT16_MAX )
 8008374:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008378:	db69      	blt.n	800844e <R3_2_GetPhaseCurrents+0x14e>
        Iab->a = INT16_MAX;
 800837a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800837e:	4613      	mov	r3, r2
 8008380:	800a      	strh	r2, [r1, #0]
 8008382:	4614      	mov	r4, r2
 8008384:	4694      	mov	ip, r2
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8008386:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8008388:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 800838a:	1b12      	subs	r2, r2, r4
      if ( Aux > INT16_MAX )
 800838c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008390:	db44      	blt.n	800841c <R3_2_GetPhaseCurrents+0x11c>
        Iab->b = INT16_MAX;
 8008392:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008396:	804a      	strh	r2, [r1, #2]
 8008398:	4615      	mov	r5, r2
 800839a:	e7dc      	b.n	8008356 <R3_2_GetPhaseCurrents+0x56>
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 800839c:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 800839e:	4b35      	ldr	r3, [pc, #212]	; (8008474 <R3_2_GetPhaseCurrents+0x174>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 80083a0:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 80083a2:	429c      	cmp	r4, r3
 80083a4:	db13      	blt.n	80083ce <R3_2_GetPhaseCurrents+0xce>
      else  if ( Aux > INT16_MAX )
 80083a6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80083aa:	db44      	blt.n	8008436 <R3_2_GetPhaseCurrents+0x136>
        Iab->b = INT16_MAX;
 80083ac:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80083b0:	461a      	mov	r2, r3
 80083b2:	804b      	strh	r3, [r1, #2]
 80083b4:	461c      	mov	r4, r3
 80083b6:	461d      	mov	r5, r3
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 80083b8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80083ba:	1af3      	subs	r3, r6, r3
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 80083bc:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 80083be:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80083c2:	db23      	blt.n	800840c <R3_2_GetPhaseCurrents+0x10c>
        Iab->a = INT16_MAX;
 80083c4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80083c8:	800b      	strh	r3, [r1, #0]
 80083ca:	469c      	mov	ip, r3
 80083cc:	e7c3      	b.n	8008356 <R3_2_GetPhaseCurrents+0x56>
        Iab->b = -INT16_MAX;
 80083ce:	804b      	strh	r3, [r1, #2]
 80083d0:	461c      	mov	r4, r3
 80083d2:	f248 0201 	movw	r2, #32769	; 0x8001
 80083d6:	461d      	mov	r5, r3
 80083d8:	e7ee      	b.n	80083b8 <R3_2_GetPhaseCurrents+0xb8>
        Iab->a = -INT16_MAX;
 80083da:	461c      	mov	r4, r3
 80083dc:	800b      	strh	r3, [r1, #0]
 80083de:	46a4      	mov	ip, r4
 80083e0:	f248 0301 	movw	r3, #32769	; 0x8001
 80083e4:	e7cf      	b.n	8008386 <R3_2_GetPhaseCurrents+0x86>
      else  if ( Aux > INT16_MAX )
 80083e6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80083ea:	db1e      	blt.n	800842a <R3_2_GetPhaseCurrents+0x12a>
        Iab->a = INT16_MAX;
 80083ec:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80083f0:	e7a4      	b.n	800833c <R3_2_GetPhaseCurrents+0x3c>
      else  if ( Aux > INT16_MAX )
 80083f2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80083f6:	db22      	blt.n	800843e <R3_2_GetPhaseCurrents+0x13e>
        Iab->b = INT16_MAX;
 80083f8:	f647 73ff 	movw	r3, #32767	; 0x7fff
  pHandle->_Super.Ia = Iab->a;
 80083fc:	f9b1 c000 	ldrsh.w	ip, [r1]
        Iab->b = INT16_MAX;
 8008400:	804b      	strh	r3, [r1, #2]
 8008402:	461a      	mov	r2, r3
 8008404:	4615      	mov	r5, r2
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008406:	fa1f f38c 	uxth.w	r3, ip
 800840a:	e7a4      	b.n	8008356 <R3_2_GetPhaseCurrents+0x56>
      else  if ( Aux < -INT16_MAX )
 800840c:	4e19      	ldr	r6, [pc, #100]	; (8008474 <R3_2_GetPhaseCurrents+0x174>)
 800840e:	42b4      	cmp	r4, r6
 8008410:	da23      	bge.n	800845a <R3_2_GetPhaseCurrents+0x15a>
        Iab->a = -INT16_MAX;
 8008412:	800e      	strh	r6, [r1, #0]
 8008414:	f248 0301 	movw	r3, #32769	; 0x8001
 8008418:	46b4      	mov	ip, r6
 800841a:	e79c      	b.n	8008356 <R3_2_GetPhaseCurrents+0x56>
      else  if ( Aux < -INT16_MAX )
 800841c:	4d15      	ldr	r5, [pc, #84]	; (8008474 <R3_2_GetPhaseCurrents+0x174>)
 800841e:	42aa      	cmp	r2, r5
 8008420:	da05      	bge.n	800842e <R3_2_GetPhaseCurrents+0x12e>
        Iab->b = -INT16_MAX;
 8008422:	804d      	strh	r5, [r1, #2]
 8008424:	f248 0201 	movw	r2, #32769	; 0x8001
 8008428:	e795      	b.n	8008356 <R3_2_GetPhaseCurrents+0x56>
        Iab->a = ( int16_t )Aux;
 800842a:	800c      	strh	r4, [r1, #0]
 800842c:	e787      	b.n	800833e <R3_2_GetPhaseCurrents+0x3e>
        Iab->b = ( int16_t )Aux;
 800842e:	b215      	sxth	r5, r2
 8008430:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008432:	b292      	uxth	r2, r2
 8008434:	e78f      	b.n	8008356 <R3_2_GetPhaseCurrents+0x56>
        Iab->b = ( int16_t )Aux;
 8008436:	b225      	sxth	r5, r4
 8008438:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800843a:	b2a2      	uxth	r2, r4
 800843c:	e7bc      	b.n	80083b8 <R3_2_GetPhaseCurrents+0xb8>
  pHandle->_Super.Ia = Iab->a;
 800843e:	f9b1 c000 	ldrsh.w	ip, [r1]
        Iab->b = ( int16_t )Aux;
 8008442:	b215      	sxth	r5, r2
 8008444:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008446:	fa1f f38c 	uxth.w	r3, ip
 800844a:	b292      	uxth	r2, r2
 800844c:	e783      	b.n	8008356 <R3_2_GetPhaseCurrents+0x56>
        Iab->a = ( int16_t )Aux;
 800844e:	fa0f fc84 	sxth.w	ip, r4
 8008452:	f8a1 c000 	strh.w	ip, [r1]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008456:	b2a3      	uxth	r3, r4
 8008458:	e795      	b.n	8008386 <R3_2_GetPhaseCurrents+0x86>
        Iab->a = ( int16_t )Aux;
 800845a:	fa0f fc84 	sxth.w	ip, r4
 800845e:	f8a1 c000 	strh.w	ip, [r1]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008462:	b2a3      	uxth	r3, r4
 8008464:	e777      	b.n	8008356 <R3_2_GetPhaseCurrents+0x56>
  pHandle->_Super.Ia = Iab->a;
 8008466:	f9b1 c000 	ldrsh.w	ip, [r1]
  pHandle->_Super.Ib = Iab->b;
 800846a:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800846e:	880b      	ldrh	r3, [r1, #0]
 8008470:	884a      	ldrh	r2, [r1, #2]
 8008472:	e770      	b.n	8008356 <R3_2_GetPhaseCurrents+0x56>
 8008474:	ffff8001 	.word	0xffff8001

08008478 <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 8008478:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800847a:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800847c:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 8008480:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8008484:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008488:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 800848a:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 800848c:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800848e:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8008490:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8008492:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008494:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8008496:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008498:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800849a:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800849c:	4904      	ldr	r1, [pc, #16]	; (80084b0 <R3_2_SetADCSampPointPolarization+0x38>)
 800849e:	685b      	ldr	r3, [r3, #4]
}
 80084a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 80084a4:	420b      	tst	r3, r1
}
 80084a6:	bf14      	ite	ne
 80084a8:	2001      	movne	r0, #1
 80084aa:	2000      	moveq	r0, #0
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	02000070 	.word	0x02000070

080084b4 <R3_2_SetADCSampPointSectX>:
{
 80084b4:	b530      	push	{r4, r5, lr}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 80084b6:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 80084b8:	f8b0 e068 	ldrh.w	lr, [r0, #104]	; 0x68
 80084bc:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80084be:	ebae 0203 	sub.w	r2, lr, r3
 80084c2:	f8b1 40b2 	ldrh.w	r4, [r1, #178]	; 0xb2
 80084c6:	b292      	uxth	r2, r2
 80084c8:	42a2      	cmp	r2, r4
 80084ca:	d914      	bls.n	80084f6 <R3_2_SetADCSampPointSectX+0x42>
    pHandle->_Super.Sector = SECTOR_5;
 80084cc:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 80084ce:	f10e 33ff 	add.w	r3, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 80084d2:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 80084d6:	b29b      	uxth	r3, r3
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80084d8:	688a      	ldr	r2, [r1, #8]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 80084da:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 80084dc:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 80084de:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 80084e0:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80084e2:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80084e4:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80084e6:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 80084e8:	6852      	ldr	r2, [r2, #4]
 80084ea:	4b10      	ldr	r3, [pc, #64]	; (800852c <R3_2_SetADCSampPointSectX+0x78>)
 80084ec:	421a      	tst	r2, r3
}
 80084ee:	bf14      	ite	ne
 80084f0:	2001      	movne	r0, #1
 80084f2:	2000      	moveq	r0, #0
 80084f4:	bd30      	pop	{r4, r5, pc}
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 80084f6:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 80084fa:	eba3 0c0c 	sub.w	ip, r3, ip
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 80084fe:	fa1f fc8c 	uxth.w	ip, ip
 8008502:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8008506:	d904      	bls.n	8008512 <R3_2_SetADCSampPointSectX+0x5e>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8008508:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	; 0xb4
 800850c:	1a9b      	subs	r3, r3, r2
 800850e:	b29b      	uxth	r3, r3
 8008510:	e7e2      	b.n	80084d8 <R3_2_SetADCSampPointSectX+0x24>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8008512:	4423      	add	r3, r4
 8008514:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 8008516:	459e      	cmp	lr, r3
 8008518:	d8de      	bhi.n	80084d8 <R3_2_SetADCSampPointSectX+0x24>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 800851a:	43db      	mvns	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 800851c:	f44f 7280 	mov.w	r2, #256	; 0x100
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8008520:	eb03 034e 	add.w	r3, r3, lr, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8008524:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8008528:	b29b      	uxth	r3, r3
 800852a:	e7d5      	b.n	80084d8 <R3_2_SetADCSampPointSectX+0x24>
 800852c:	02000070 	.word	0x02000070

08008530 <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 8008530:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008532:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8008534:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 8008538:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 800853a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800853e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8008540:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8008542:	6824      	ldr	r4, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8008544:	682d      	ldr	r5, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008546:	6853      	ldr	r3, [r2, #4]
 8008548:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800854c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008550:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8008552:	f890 c06c 	ldrb.w	ip, [r0, #108]	; 0x6c
 8008556:	f1bc 0f0f 	cmp.w	ip, #15
 800855a:	d80b      	bhi.n	8008574 <R3_2_HFCurrentsPolarizationAB+0x44>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
 800855c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    pHandle-> PhaseBOffset += ADCDataReg2;
 800855e:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle-> PhaseAOffset += ADCDataReg1;
 8008560:	441c      	add	r4, r3
    pHandle->PolarizationCounter++;
 8008562:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseBOffset += ADCDataReg2;
 8008566:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 8008568:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 800856a:	e9c0 4217 	strd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 800856e:	b2db      	uxtb	r3, r3
 8008570:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8008574:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8008576:	bc30      	pop	{r4, r5}
  Iab->a = 0;
 8008578:	600b      	str	r3, [r1, #0]
}
 800857a:	4770      	bx	lr

0800857c <R3_2_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800857c:	6f43      	ldr	r3, [r0, #116]	; 0x74
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800857e:	f890 c06d 	ldrb.w	ip, [r0, #109]	; 0x6d
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008582:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8008584:	eb03 038c 	add.w	r3, r3, ip, lsl #2
{
 8008588:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800858a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800858c:	681c      	ldr	r4, [r3, #0]
 800858e:	6853      	ldr	r3, [r2, #4]
 8008590:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008598:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800859a:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 800859e:	2b0f      	cmp	r3, #15
 80085a0:	d808      	bhi.n	80085b4 <R3_2_HFCurrentsPolarizationC+0x38>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 80085a2:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 80085a6:	6e42      	ldr	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 80085a8:	3301      	adds	r3, #1
    pHandle-> PhaseCOffset += ADCDataReg2;    
 80085aa:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 80085ac:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 80085ae:	6642      	str	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 80085b0:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 80085b4:	2300      	movs	r3, #0
  Iab->b = 0;
}
 80085b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 80085ba:	600b      	str	r3, [r1, #0]
}
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop

080085c0 <R3_2_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80085c0:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = true;
 80085c2:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80085c6:	688a      	ldr	r2, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 80085c8:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 80085cc:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80085ce:	f06f 0001 	mvn.w	r0, #1
 80085d2:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80085d4:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80085d6:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80085d8:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80085da:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 80085dc:	07db      	lsls	r3, r3, #31
 80085de:	d5fc      	bpl.n	80085da <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80085e0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80085e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085e6:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80085e8:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d000      	beq.n	80085f2 <R3_2_TurnOnLowSides+0x32>
 80085f0:	4770      	bx	lr
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80085f2:	e9d1 2008 	ldrd	r2, r0, [r1, #32]
{
 80085f6:	b410      	push	{r4}
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80085f8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80085fa:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80085fe:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008600:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008604:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 8008608:	6184      	str	r4, [r0, #24]
  }
  return;
}
 800860a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800860e:	619a      	str	r2, [r3, #24]
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop

08008614 <R3_2_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008614:	6f41      	ldr	r1, [r0, #116]	; 0x74
  pHandle->ADCRegularLocked=true; 

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8008616:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800861a:	688b      	ldr	r3, [r1, #8]
  pHandle->ADCRegularLocked=true; 
 800861c:	f04f 0c01 	mov.w	ip, #1
{
 8008620:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked=true; 
 8008622:	f880 c078 	strb.w	ip, [r0, #120]	; 0x78
  pHandle->_Super.TurnOnLowSidesAction = false;
 8008626:	f04f 0c00 	mov.w	ip, #0
 800862a:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800862e:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008630:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 8008632:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008634:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008636:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008638:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 800863c:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800863e:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008640:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8008642:	07d2      	lsls	r2, r2, #31
 8008644:	d5fc      	bpl.n	8008640 <R3_2_SwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008646:	f06f 0201 	mvn.w	r2, #1
 800864a:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800864c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800864e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008652:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800865a:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800865c:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 8008660:	2a02      	cmp	r2, #2
 8008662:	d008      	beq.n	8008676 <R3_2_SwitchOnPWM+0x62>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008664:	f06f 0201 	mvn.w	r2, #1
 8008668:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800866a:	68da      	ldr	r2, [r3, #12]
 800866c:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 8008670:	bc30      	pop	{r4, r5}
 8008672:	60da      	str	r2, [r3, #12]
 8008674:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8008676:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008678:	6a0c      	ldr	r4, [r1, #32]
 800867a:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800867e:	f240 5255 	movw	r2, #1365	; 0x555
 8008682:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008684:	e9d1 0209 	ldrd	r0, r2, [r1, #36]	; 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8008688:	d007      	beq.n	800869a <R3_2_SwitchOnPWM+0x86>
 800868a:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800868c:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008690:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8008694:	6184      	str	r4, [r0, #24]
 8008696:	6191      	str	r1, [r2, #24]
}
 8008698:	e7e4      	b.n	8008664 <R3_2_SwitchOnPWM+0x50>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800869a:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800869c:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80086a0:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 80086a4:	6284      	str	r4, [r0, #40]	; 0x28
 80086a6:	6291      	str	r1, [r2, #40]	; 0x28
}
 80086a8:	e7dc      	b.n	8008664 <R3_2_SwitchOnPWM+0x50>
 80086aa:	bf00      	nop

080086ac <R3_2_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80086ac:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80086ae:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80086b0:	68d3      	ldr	r3, [r2, #12]
 80086b2:	f023 0301 	bic.w	r3, r3, #1
 80086b6:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80086b8:	6c53      	ldr	r3, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 80086ba:	f04f 0c00 	mov.w	ip, #0
 80086be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086c2:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
 80086c6:	6453      	str	r3, [r2, #68]	; 0x44
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 80086c8:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80086cc:	b91b      	cbnz	r3, 80086d6 <R3_2_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80086ce:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d00c      	beq.n	80086f0 <R3_2_SwitchOffPWM+0x44>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80086d6:	f06f 0301 	mvn.w	r3, #1
 80086da:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80086dc:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 80086de:	07db      	lsls	r3, r3, #31
 80086e0:	d5fc      	bpl.n	80086dc <R3_2_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80086e2:	f06f 0101 	mvn.w	r1, #1
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 80086e6:	2300      	movs	r3, #0
 80086e8:	6111      	str	r1, [r2, #16]
 80086ea:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
 80086ee:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80086f0:	6a0b      	ldr	r3, [r1, #32]
{
 80086f2:	b410      	push	{r4}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80086f4:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 80086f8:	629c      	str	r4, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80086fa:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80086fc:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
 8008700:	629c      	str	r4, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008702:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8008704:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8008708:	6299      	str	r1, [r3, #40]	; 0x28
 800870a:	f06f 0301 	mvn.w	r3, #1
 800870e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008710:	6913      	ldr	r3, [r2, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8008712:	07d9      	lsls	r1, r3, #31
 8008714:	d5fc      	bpl.n	8008710 <R3_2_SwitchOffPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008716:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked=false; 
 800871a:	2300      	movs	r3, #0
 800871c:	6111      	str	r1, [r2, #16]
}
 800871e:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->ADCRegularLocked=false; 
 8008722:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
}
 8008726:	4770      	bx	lr

08008728 <R3_2_RLGetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008728:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 800872a:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800872c:	6894      	ldr	r4, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800872e:	6863      	ldr	r3, [r4, #4]
 8008730:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008738:	6063      	str	r3, [r4, #4]
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 800873a:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 800873e:	6e03      	ldr	r3, [r0, #96]	; 0x60
  
  /* Check saturation */
  if ( wAux > -INT16_MAX )
 8008740:	480d      	ldr	r0, [pc, #52]	; (8008778 <R3_2_RLGetPhaseCurrents+0x50>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8008742:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8008746:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008748:	6812      	ldr	r2, [r2, #0]
 800874a:	1a9b      	subs	r3, r3, r2
  if ( wAux > -INT16_MAX )
 800874c:	4283      	cmp	r3, r0
 800874e:	db05      	blt.n	800875c <R3_2_RLGetPhaseCurrents+0x34>
  {
    if ( wAux < INT16_MAX )
 8008750:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008754:	4293      	cmp	r3, r2
 8008756:	dc0b      	bgt.n	8008770 <R3_2_RLGetPhaseCurrents+0x48>
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 8008758:	b21b      	sxth	r3, r3
 800875a:	e000      	b.n	800875e <R3_2_RLGetPhaseCurrents+0x36>
 800875c:	4b07      	ldr	r3, [pc, #28]	; (800877c <R3_2_RLGetPhaseCurrents+0x54>)
  pStator_Currents->b = (int16_t)wAux;
}
 800875e:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = (int16_t)wAux;
 8008762:	2200      	movs	r2, #0
 8008764:	f363 020f 	bfi	r2, r3, #0, #16
 8008768:	f363 421f 	bfi	r2, r3, #16, #16
 800876c:	600a      	str	r2, [r1, #0]
}
 800876e:	4770      	bx	lr
 8008770:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8008774:	e7f3      	b.n	800875e <R3_2_RLGetPhaseCurrents+0x36>
 8008776:	bf00      	nop
 8008778:	ffff8002 	.word	0xffff8002
 800877c:	ffff8001 	.word	0xffff8001

08008780 <R3_2_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008780:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->ADCRegularLocked=true;
 8008782:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008784:	688a      	ldr	r2, [r1, #8]
{
 8008786:	b410      	push	{r4}
  pHandle->ADCRegularLocked=true;
 8008788:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
  WRITE_REG(TIMx->CCR1, CompareValue);
 800878c:	2400      	movs	r4, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800878e:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008792:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008794:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008796:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8008798:	07db      	lsls	r3, r3, #31
 800879a:	d5fc      	bpl.n	8008796 <R3_2_RLTurnOnLowSides+0x16>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800879c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800879e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087a2:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80087a4:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d10b      	bne.n	80087c4 <R3_2_RLTurnOnLowSides+0x44>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80087ac:	e9d1 2008 	ldrd	r2, r0, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80087b0:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80087b4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80087b6:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80087b8:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80087bc:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 80087c0:	6284      	str	r4, [r0, #40]	; 0x28
 80087c2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  return;
}
 80087c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop

080087cc <R3_2_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80087cc:	6f41      	ldr	r1, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;

  pHandle->ADCRegularLocked=true;
 80087ce:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80087d0:	688b      	ldr	r3, [r1, #8]
{
 80087d2:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80087d4:	e9d1 5400 	ldrd	r5, r4, [r1]
  pHandle->ADCRegularLocked=true;
 80087d8:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80087dc:	f06f 0201 	mvn.w	r2, #1
 80087e0:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80087e2:	691a      	ldr	r2, [r3, #16]
  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80087e4:	07d6      	lsls	r6, r2, #31
 80087e6:	d5fc      	bpl.n	80087e2 <R3_2_RLSwitchOnPWM+0x16>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 80087e8:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80087ec:	f06f 0601 	mvn.w	r6, #1
 80087f0:	611e      	str	r6, [r3, #16]
 80087f2:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80087f4:	2601      	movs	r6, #1
 80087f6:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 80087f8:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80087fa:	691a      	ldr	r2, [r3, #16]

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80087fc:	07d2      	lsls	r2, r2, #31
 80087fe:	d5fc      	bpl.n	80087fa <R3_2_RLSwitchOnPWM+0x2e>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008800:	68da      	ldr	r2, [r3, #12]
 8008802:	f042 0201 	orr.w	r2, r2, #1
 8008806:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8008808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800880a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800880e:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008812:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008816:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008818:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 800881c:	2a02      	cmp	r2, #2
 800881e:	d00f      	beq.n	8008840 <R3_2_RLSwitchOnPWM+0x74>
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 8008820:	2303      	movs	r3, #3
 8008822:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  MODIFY_REG(ADCx->CR,
 8008826:	68aa      	ldr	r2, [r5, #8]
 8008828:	4912      	ldr	r1, [pc, #72]	; (8008874 <R3_2_RLSwitchOnPWM+0xa8>)
 800882a:	400a      	ands	r2, r1
 800882c:	f042 0208 	orr.w	r2, r2, #8
 8008830:	60aa      	str	r2, [r5, #8]
 8008832:	68a3      	ldr	r3, [r4, #8]
 8008834:	400b      	ands	r3, r1
 8008836:	f043 0308 	orr.w	r3, r3, #8
 800883a:	60a3      	str	r3, [r4, #8]

  LL_ADC_INJ_StartConversion( ADCx_1 );
  LL_ADC_INJ_StartConversion( ADCx_2 );

  return;
}
 800883c:	bcf0      	pop	{r4, r5, r6, r7}
 800883e:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8008840:	6a1a      	ldr	r2, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008842:	6a0e      	ldr	r6, [r1, #32]
 8008844:	f8b1 70ac 	ldrh.w	r7, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8008848:	f240 5355 	movw	r3, #1365	; 0x555
 800884c:	421a      	tst	r2, r3
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800884e:	e9d1 2309 	ldrd	r2, r3, [r1, #36]	; 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8008852:	d007      	beq.n	8008864 <R3_2_RLSwitchOnPWM+0x98>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008854:	61b7      	str	r7, [r6, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008856:	f8b1 60ae 	ldrh.w	r6, [r1, #174]	; 0xae
 800885a:	6196      	str	r6, [r2, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800885c:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 8008860:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008862:	e7dd      	b.n	8008820 <R3_2_RLSwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 8008864:	62b7      	str	r7, [r6, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008866:	f8b1 60ae 	ldrh.w	r6, [r1, #174]	; 0xae
 800886a:	6296      	str	r6, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800886c:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 8008870:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008872:	e7d5      	b.n	8008820 <R3_2_RLSwitchOnPWM+0x54>
 8008874:	7fffffc0 	.word	0x7fffffc0

08008878 <R3_2_SetAOReferenceVoltage>:
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8008878:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 800887c:	b510      	push	{r4, lr}
 800887e:	f00c 0c3c 	and.w	ip, ip, #60	; 0x3c
 8008882:	f101 0e08 	add.w	lr, r1, #8
 8008886:	b082      	sub	sp, #8
  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8008888:	f85c 300e 	ldr.w	r3, [ip, lr]
 800888c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008890:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008894:	431a      	orrs	r2, r3
 8008896:	f84c 200e 	str.w	r2, [ip, lr]
  SET_BIT(DACx->SWTRIGR,
 800889a:	684a      	ldr	r2, [r1, #4]
 800889c:	f000 0303 	and.w	r3, r0, #3
 80088a0:	4313      	orrs	r3, r2
 80088a2:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 80088a4:	680a      	ldr	r2, [r1, #0]
 80088a6:	2301      	movs	r3, #1
 80088a8:	f000 0010 	and.w	r0, r0, #16
 80088ac:	fa03 f000 	lsl.w	r0, r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 80088b0:	ea30 0302 	bics.w	r3, r0, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80088b4:	4b14      	ldr	r3, [pc, #80]	; (8008908 <R3_2_SetAOReferenceVoltage+0x90>)
 80088b6:	d013      	beq.n	80088e0 <R3_2_SetAOReferenceVoltage+0x68>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4c14      	ldr	r4, [pc, #80]	; (800890c <R3_2_SetAOReferenceVoltage+0x94>)
  SET_BIT(DACx->CR,
 80088bc:	680a      	ldr	r2, [r1, #0]
 80088be:	fba4 4303 	umull	r4, r3, r4, r3
 80088c2:	0cdb      	lsrs	r3, r3, #19
 80088c4:	00db      	lsls	r3, r3, #3
 80088c6:	4310      	orrs	r0, r2
 80088c8:	6008      	str	r0, [r1, #0]
 80088ca:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 80088cc:	9b00      	ldr	r3, [sp, #0]
 80088ce:	b12b      	cbz	r3, 80088dc <R3_2_SetAOReferenceVoltage+0x64>
      wait_loop_index--;
 80088d0:	9b00      	ldr	r3, [sp, #0]
 80088d2:	3b01      	subs	r3, #1
 80088d4:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 80088d6:	9b00      	ldr	r3, [sp, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1f9      	bne.n	80088d0 <R3_2_SetAOReferenceVoltage+0x58>
}
 80088dc:	b002      	add	sp, #8
 80088de:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80088e0:	4a0a      	ldr	r2, [pc, #40]	; (800890c <R3_2_SetAOReferenceVoltage+0x94>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	fba2 2303 	umull	r2, r3, r2, r3
 80088e8:	0cdb      	lsrs	r3, r3, #19
 80088ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80088ee:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 80088f0:	9b01      	ldr	r3, [sp, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d0f2      	beq.n	80088dc <R3_2_SetAOReferenceVoltage+0x64>
      wait_loop_index--;
 80088f6:	9b01      	ldr	r3, [sp, #4]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 80088fc:	9b01      	ldr	r3, [sp, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1f9      	bne.n	80088f6 <R3_2_SetAOReferenceVoltage+0x7e>
}
 8008902:	b002      	add	sp, #8
 8008904:	bd10      	pop	{r4, pc}
 8008906:	bf00      	nop
 8008908:	20000680 	.word	0x20000680
 800890c:	431bde83 	.word	0x431bde83

08008910 <R3_2_Init>:
{
 8008910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8008914:	6f43      	ldr	r3, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 8008916:	681e      	ldr	r6, [r3, #0]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008918:	685d      	ldr	r5, [r3, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800891a:	6872      	ldr	r2, [r6, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800891c:	689c      	ldr	r4, [r3, #8]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800891e:	f8d3 a014 	ldr.w	sl, [r3, #20]
{
 8008922:	4607      	mov	r7, r0
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8008924:	e9d3 e00b 	ldrd	lr, r0, [r3, #44]	; 0x2c
{
 8008928:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800892a:	2104      	movs	r1, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800892c:	f022 0204 	bic.w	r2, r2, #4
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8008930:	9001      	str	r0, [sp, #4]
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8008932:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008934:	9002      	str	r0, [sp, #8]
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 8008936:	e9d3 cb03 	ldrd	ip, fp, [r3, #12]
  DAC_TypeDef * DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 800893a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800893c:	9003      	str	r0, [sp, #12]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800893e:	e9d3 9806 	ldrd	r9, r8, [r3, #24]
 8008942:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008944:	6031      	str	r1, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008946:	6872      	ldr	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008948:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800894a:	f022 0220 	bic.w	r2, r2, #32
 800894e:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008950:	6030      	str	r0, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008952:	686a      	ldr	r2, [r5, #4]
 8008954:	f022 0204 	bic.w	r2, r2, #4
 8008958:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800895a:	6029      	str	r1, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800895c:	686a      	ldr	r2, [r5, #4]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800895e:	498f      	ldr	r1, [pc, #572]	; (8008b9c <R3_2_Init+0x28c>)
 8008960:	f022 0220 	bic.w	r2, r2, #32
 8008964:	606a      	str	r2, [r5, #4]
    if ( TIMx == TIM1 )
 8008966:	4a8e      	ldr	r2, [pc, #568]	; (8008ba0 <R3_2_Init+0x290>)
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008968:	6028      	str	r0, [r5, #0]
 800896a:	4294      	cmp	r4, r2
 800896c:	690a      	ldr	r2, [r1, #16]
 800896e:	bf0c      	ite	eq
 8008970:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8008974:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 8008978:	610a      	str	r2, [r1, #16]
    if ( OPAMPParams != NULL )
 800897a:	f1bc 0f00 	cmp.w	ip, #0
 800897e:	d014      	beq.n	80089aa <R3_2_Init+0x9a>
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 8008980:	f8dc 2000 	ldr.w	r2, [ip]
 8008984:	b11a      	cbz	r2, 800898e <R3_2_Init+0x7e>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8008986:	6811      	ldr	r1, [r2, #0]
 8008988:	f041 0101 	orr.w	r1, r1, #1
 800898c:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 800898e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8008992:	b11a      	cbz	r2, 800899c <R3_2_Init+0x8c>
 8008994:	6811      	ldr	r1, [r2, #0]
 8008996:	f041 0101 	orr.w	r1, r1, #1
 800899a:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 800899c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80089a0:	b11a      	cbz	r2, 80089aa <R3_2_Init+0x9a>
 80089a2:	6811      	ldr	r1, [r2, #0]
 80089a4:	f041 0101 	orr.w	r1, r1, #1
 80089a8:	6011      	str	r1, [r2, #0]
    if ( COMP_OCPAx != NULL )
 80089aa:	f1bb 0f00 	cmp.w	fp, #0
 80089ae:	d018      	beq.n	80089e2 <R3_2_Init+0xd2>
      if (( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE ) && (DAC_OCPAx != MC_NULL))
 80089b0:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
 80089b4:	2a01      	cmp	r2, #1
 80089b6:	d008      	beq.n	80089ca <R3_2_Init+0xba>
 80089b8:	f1be 0f00 	cmp.w	lr, #0
 80089bc:	d005      	beq.n	80089ca <R3_2_Init+0xba>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 80089be:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 80089c2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80089c4:	4671      	mov	r1, lr
 80089c6:	f7ff ff57 	bl	8008878 <R3_2_SetAOReferenceVoltage>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80089ca:	f8db 3000 	ldr.w	r3, [fp]
 80089ce:	f043 0301 	orr.w	r3, r3, #1
 80089d2:	f8cb 3000 	str.w	r3, [fp]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80089d6:	f8db 3000 	ldr.w	r3, [fp]
 80089da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089de:	f8cb 3000 	str.w	r3, [fp]
    if ( COMP_OCPBx != NULL )
 80089e2:	f1ba 0f00 	cmp.w	sl, #0
 80089e6:	d018      	beq.n	8008a1a <R3_2_Init+0x10a>
      if (( pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE ) && (DAC_OCPBx != MC_NULL))
 80089e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089ea:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 80089ee:	2a01      	cmp	r2, #1
 80089f0:	d007      	beq.n	8008a02 <R3_2_Init+0xf2>
 80089f2:	9a01      	ldr	r2, [sp, #4]
 80089f4:	b12a      	cbz	r2, 8008a02 <R3_2_Init+0xf2>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 80089f6:	4611      	mov	r1, r2
 80089f8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80089fa:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 80089fe:	f7ff ff3b 	bl	8008878 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008a02:	f8da 3000 	ldr.w	r3, [sl]
 8008a06:	f043 0301 	orr.w	r3, r3, #1
 8008a0a:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008a0e:	f8da 3000 	ldr.w	r3, [sl]
 8008a12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a16:	f8ca 3000 	str.w	r3, [sl]
    if ( COMP_OCPCx != NULL )
 8008a1a:	f1b9 0f00 	cmp.w	r9, #0
 8008a1e:	d018      	beq.n	8008a52 <R3_2_Init+0x142>
      if (( pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE )  && (DAC_OCPCx != MC_NULL))
 8008a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a22:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 8008a26:	2a01      	cmp	r2, #1
 8008a28:	d007      	beq.n	8008a3a <R3_2_Init+0x12a>
 8008a2a:	9a02      	ldr	r2, [sp, #8]
 8008a2c:	b12a      	cbz	r2, 8008a3a <R3_2_Init+0x12a>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8008a2e:	4611      	mov	r1, r2
 8008a30:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8008a32:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 8008a36:	f7ff ff1f 	bl	8008878 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008a3a:	f8d9 3000 	ldr.w	r3, [r9]
 8008a3e:	f043 0301 	orr.w	r3, r3, #1
 8008a42:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008a46:	f8d9 3000 	ldr.w	r3, [r9]
 8008a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a4e:	f8c9 3000 	str.w	r3, [r9]
    if ( COMP_OVPx != NULL )
 8008a52:	f1b8 0f00 	cmp.w	r8, #0
 8008a56:	d018      	beq.n	8008a8a <R3_2_Init+0x17a>
      if (( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE ) && (DAC_OVPx != MC_NULL))
 8008a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a5a:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 8008a5e:	2a01      	cmp	r2, #1
 8008a60:	d007      	beq.n	8008a72 <R3_2_Init+0x162>
 8008a62:	9a03      	ldr	r2, [sp, #12]
 8008a64:	b12a      	cbz	r2, 8008a72 <R3_2_Init+0x162>
          R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 8008a66:	4611      	mov	r1, r2
 8008a68:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008a6a:	f8b3 20b8 	ldrh.w	r2, [r3, #184]	; 0xb8
 8008a6e:	f7ff ff03 	bl	8008878 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008a72:	f8d8 3000 	ldr.w	r3, [r8]
 8008a76:	f043 0301 	orr.w	r3, r3, #1
 8008a7a:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a86:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008a8a:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_1) == 0)
 8008a8c:	07d8      	lsls	r0, r3, #31
 8008a8e:	d562      	bpl.n	8008b56 <R3_2_Init+0x246>
 8008a90:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 8008a92:	07d9      	lsls	r1, r3, #31
 8008a94:	d56b      	bpl.n	8008b6e <R3_2_Init+0x25e>
  volatile uint32_t Brk2Timeout = 1000;
 8008a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a9a:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008a9c:	6823      	ldr	r3, [r4, #0]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 8008a9e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008aa0:	f023 0301 	bic.w	r3, r3, #1
 8008aa4:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008aa6:	6863      	ldr	r3, [r4, #4]
 8008aa8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab0:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008ab2:	69a3      	ldr	r3, [r4, #24]
 8008ab4:	f043 0308 	orr.w	r3, r3, #8
 8008ab8:	61a3      	str	r3, [r4, #24]
 8008aba:	69a3      	ldr	r3, [r4, #24]
 8008abc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008ac0:	61a3      	str	r3, [r4, #24]
 8008ac2:	69e3      	ldr	r3, [r4, #28]
 8008ac4:	f043 0308 	orr.w	r3, r3, #8
 8008ac8:	61e3      	str	r3, [r4, #28]
 8008aca:	69e3      	ldr	r3, [r4, #28]
 8008acc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008ad0:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008ad2:	6963      	ldr	r3, [r4, #20]
 8008ad4:	f043 0301 	orr.w	r3, r3, #1
 8008ad8:	6163      	str	r3, [r4, #20]
 8008ada:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d029      	beq.n	8008b36 <R3_2_Init+0x226>
    if ( pHandle->_Super.Motor == M1 )
 8008ae2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008ae6:	b92b      	cbnz	r3, 8008af4 <R3_2_Init+0x1e4>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 8008ae8:	f892 30bb 	ldrb.w	r3, [r2, #187]	; 0xbb
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d026      	beq.n	8008b3e <R3_2_Init+0x22e>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8008af0:	2b03      	cmp	r3, #3
 8008af2:	d04b      	beq.n	8008b8c <R3_2_Init+0x27c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8008af4:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8008af8:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8008afa:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 8008afe:	b16b      	cbz	r3, 8008b1c <R3_2_Init+0x20c>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8008b00:	6923      	ldr	r3, [r4, #16]
 8008b02:	05da      	lsls	r2, r3, #23
 8008b04:	d50a      	bpl.n	8008b1c <R3_2_Init+0x20c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8008b06:	f46f 7280 	mvn.w	r2, #256	; 0x100
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 8008b0a:	9b05      	ldr	r3, [sp, #20]
 8008b0c:	b133      	cbz	r3, 8008b1c <R3_2_Init+0x20c>
 8008b0e:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 8008b10:	9b05      	ldr	r3, [sp, #20]
 8008b12:	3b01      	subs	r3, #1
 8008b14:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8008b16:	6923      	ldr	r3, [r4, #16]
 8008b18:	05db      	lsls	r3, r3, #23
 8008b1a:	d4f6      	bmi.n	8008b0a <R3_2_Init+0x1fa>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8008b1c:	68e3      	ldr	r3, [r4, #12]
 8008b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b22:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 8008b24:	6a23      	ldr	r3, [r4, #32]
 8008b26:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8008b2a:	f043 0305 	orr.w	r3, r3, #5
 8008b2e:	6223      	str	r3, [r4, #32]
}
 8008b30:	b007      	add	sp, #28
 8008b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8008b36:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d01b      	beq.n	8008b76 <R3_2_Init+0x266>
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8008b3e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8008b42:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8008b44:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8008b46:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8008b4a:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8008b4c:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1d5      	bne.n	8008b00 <R3_2_Init+0x1f0>
 8008b54:	e7e2      	b.n	8008b1c <R3_2_Init+0x20c>
      R3_2_ADCxInit (ADCx_1);
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7ff fb78 	bl	800824c <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8008b5c:	2340      	movs	r3, #64	; 0x40
 8008b5e:	6033      	str	r3, [r6, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8008b60:	6873      	ldr	r3, [r6, #4]
 8008b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b66:	6073      	str	r3, [r6, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008b68:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 8008b6a:	07d9      	lsls	r1, r3, #31
 8008b6c:	d493      	bmi.n	8008a96 <R3_2_Init+0x186>
      R3_2_ADCxInit (ADCx_2);
 8008b6e:	4628      	mov	r0, r5
 8008b70:	f7ff fb6c 	bl	800824c <R3_2_ADCxInit>
 8008b74:	e78f      	b.n	8008a96 <R3_2_Init+0x186>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8008b76:	f892 10bb 	ldrb.w	r1, [r2, #187]	; 0xbb
 8008b7a:	2903      	cmp	r1, #3
 8008b7c:	d1df      	bne.n	8008b3e <R3_2_Init+0x22e>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008b7e:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008b80:	6963      	ldr	r3, [r4, #20]
 8008b82:	f043 0301 	orr.w	r3, r3, #1
 8008b86:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008b88:	6321      	str	r1, [r4, #48]	; 0x30
}
 8008b8a:	e7d8      	b.n	8008b3e <R3_2_Init+0x22e>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008b90:	6961      	ldr	r1, [r4, #20]
 8008b92:	f041 0101 	orr.w	r1, r1, #1
 8008b96:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008b98:	6323      	str	r3, [r4, #48]	; 0x30
}
 8008b9a:	e7ab      	b.n	8008af4 <R3_2_Init+0x1e4>
 8008b9c:	e0042000 	.word	0xe0042000
 8008ba0:	40012c00 	.word	0x40012c00

08008ba4 <R3_2_CurrentReadingPolarization>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008ba4:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8008ba6:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008ba8:	689d      	ldr	r5, [r3, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008baa:	e9d3 7600 	ldrd	r7, r6, [r3]
  pHandle->PhaseAOffset = 0u;
 8008bae:	2300      	movs	r3, #0
  pHandle->PolarizationCounter = 0u;
 8008bb0:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  pHandle->PhaseBOffset = 0u;
 8008bb4:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  pHandle->PhaseCOffset = 0u;
 8008bb8:	6643      	str	r3, [r0, #100]	; 0x64
  CLEAR_BIT(TIMx->CCER, Channels);
 8008bba:	6a2b      	ldr	r3, [r5, #32]
 8008bbc:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8008bc0:	f023 0305 	bic.w	r3, r3, #5
 8008bc4:	622b      	str	r3, [r5, #32]
  pHandle->PolarizationSector=SECTOR_5;
 8008bc6:	2304      	movs	r3, #4
 8008bc8:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_5;   
 8008bcc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8008bd0:	4b3b      	ldr	r3, [pc, #236]	; (8008cc0 <R3_2_CurrentReadingPolarization+0x11c>)
 8008bd2:	6043      	str	r3, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8008bd4:	4b3b      	ldr	r3, [pc, #236]	; (8008cc4 <R3_2_CurrentReadingPolarization+0x120>)
 8008bd6:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8008bd8:	2380      	movs	r3, #128	; 0x80
{
 8008bda:	b083      	sub	sp, #12
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8008bdc:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
{
 8008be0:	4604      	mov	r4, r0
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8008be2:	f7ff fd17 	bl	8008614 <R3_2_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 8008be6:	4a38      	ldr	r2, [pc, #224]	; (8008cc8 <R3_2_CurrentReadingPolarization+0x124>)
 8008be8:	686b      	ldr	r3, [r5, #4]
 8008bea:	4013      	ands	r3, r2
 8008bec:	2b70      	cmp	r3, #112	; 0x70
 8008bee:	d1fb      	bne.n	8008be8 <R3_2_CurrentReadingPolarization+0x44>
  MODIFY_REG(ADCx->CR,
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	4936      	ldr	r1, [pc, #216]	; (8008ccc <R3_2_CurrentReadingPolarization+0x128>)
 8008bf4:	400a      	ands	r2, r1
 8008bf6:	f042 0208 	orr.w	r2, r2, #8
 8008bfa:	60ba      	str	r2, [r7, #8]
 8008bfc:	68b3      	ldr	r3, [r6, #8]
  waitForPolarizationEnd( TIMx,
 8008bfe:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8008c00:	400b      	ands	r3, r1
 8008c02:	f043 0308 	orr.w	r3, r3, #8
 8008c06:	60b3      	str	r3, [r6, #8]
 8008c08:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8008c0c:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8008c10:	f892 20bb 	ldrb.w	r2, [r2, #187]	; 0xbb
 8008c14:	4628      	mov	r0, r5
 8008c16:	e9cd 1300 	strd	r1, r3, [sp]
 8008c1a:	f7ff f989 	bl	8007f30 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f7ff fd44 	bl	80086ac <R3_2_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 8008c24:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8008c26:	4a2a      	ldr	r2, [pc, #168]	; (8008cd0 <R3_2_CurrentReadingPolarization+0x12c>)
 8008c28:	6062      	str	r2, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8008c2a:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 8008c2c:	f884 606c 	strb.w	r6, [r4, #108]	; 0x6c
  pHandle->PolarizationSector=SECTOR_1;
 8008c30:	f884 606d 	strb.w	r6, [r4, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_1;   
 8008c34:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8008c38:	f7ff fcec 	bl	8008614 <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8008c3c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8008c3e:	e9dd 1300 	ldrd	r1, r3, [sp]
 8008c42:	f892 20bb 	ldrb.w	r2, [r2, #187]	; 0xbb
 8008c46:	4628      	mov	r0, r5
 8008c48:	f7ff f972 	bl	8007f30 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f7ff fd2d 	bl	80086ac <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008c52:	e9d4 2317 	ldrd	r2, r3, [r4, #92]	; 0x5c
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8008c56:	0912      	lsrs	r2, r2, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008c58:	091b      	lsrs	r3, r3, #4
 8008c5a:	e9c4 2317 	strd	r2, r3, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008c5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8008c60:	4a1c      	ldr	r2, [pc, #112]	; (8008cd4 <R3_2_CurrentReadingPolarization+0x130>)
 8008c62:	6062      	str	r2, [r4, #4]
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008c64:	091b      	lsrs	r3, r3, #4
 8008c66:	6663      	str	r3, [r4, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008c68:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 8008c6a:	4a1b      	ldr	r2, [pc, #108]	; (8008cd8 <R3_2_CurrentReadingPolarization+0x134>)
 8008c6c:	61a2      	str	r2, [r4, #24]
 8008c6e:	f023 0308 	bic.w	r3, r3, #8
 8008c72:	61ab      	str	r3, [r5, #24]
 8008c74:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 8008c76:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8008c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c7e:	61aa      	str	r2, [r5, #24]
 8008c80:	69ea      	ldr	r2, [r5, #28]
 8008c82:	f022 0208 	bic.w	r2, r2, #8
 8008c86:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008c88:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008c8a:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008c8c:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008c8e:	69ab      	ldr	r3, [r5, #24]
 8008c90:	f043 0308 	orr.w	r3, r3, #8
 8008c94:	61ab      	str	r3, [r5, #24]
 8008c96:	69ab      	ldr	r3, [r5, #24]
 8008c98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008c9c:	61ab      	str	r3, [r5, #24]
 8008c9e:	69eb      	ldr	r3, [r5, #28]
 8008ca0:	f043 0308 	orr.w	r3, r3, #8
 8008ca4:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008ca6:	6a2b      	ldr	r3, [r5, #32]
 8008ca8:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
  pHandle->_Super.Sector=SECTOR_5;
 8008cac:	2204      	movs	r2, #4
 8008cae:	f043 0305 	orr.w	r3, r3, #5
 8008cb2:	622b      	str	r3, [r5, #32]
 8008cb4:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
  pHandle->BrakeActionLock = false;
 8008cb8:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
}
 8008cbc:	b003      	add	sp, #12
 8008cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cc0:	08008531 	.word	0x08008531
 8008cc4:	08008479 	.word	0x08008479
 8008cc8:	02000070 	.word	0x02000070
 8008ccc:	7fffffc0 	.word	0x7fffffc0
 8008cd0:	0800857d 	.word	0x0800857d
 8008cd4:	08008301 	.word	0x08008301
 8008cd8:	080084b5 	.word	0x080084b5

08008cdc <R3_2_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008cdc:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 8008cde:	4684      	mov	ip, r0
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8008ce0:	68d0      	ldr	r0, [r2, #12]
{
 8008ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008ce4:	e9d2 1500 	ldrd	r1, r5, [r2]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008ce8:	6894      	ldr	r4, [r2, #8]
  if ( OPAMPParams != NULL )
 8008cea:	b378      	cbz	r0, 8008d4c <R3_2_TIMx_UP_IRQHandler+0x70>
    while (ADCx_1->JSQR != 0x0u)
 8008cec:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1fc      	bne.n	8008cec <R3_2_TIMx_UP_IRQHandler+0x10>
    Opamp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8008cf2:	f89c e03a 	ldrb.w	lr, [ip, #58]	; 0x3a
 8008cf6:	eb00 038e 	add.w	r3, r0, lr, lsl #2
 8008cfa:	68de      	ldr	r6, [r3, #12]
    if (Opamp != NULL )
 8008cfc:	b12e      	cbz	r6, 8008d0a <R3_2_TIMx_UP_IRQHandler+0x2e>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8008cfe:	6830      	ldr	r0, [r6, #0]
 8008d00:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8008d02:	f420 7086 	bic.w	r0, r0, #268	; 0x10c
 8008d06:	4338      	orrs	r0, r7
 8008d08:	6030      	str	r0, [r6, #0]
     Opamp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8008d0a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    if (Opamp != NULL )
 8008d0c:	b128      	cbz	r0, 8008d1a <R3_2_TIMx_UP_IRQHandler+0x3e>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8008d0e:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 8008d10:	6803      	ldr	r3, [r0, #0]
 8008d12:	f423 7386 	bic.w	r3, r3, #268	; 0x10c
 8008d16:	4333      	orrs	r3, r6
 8008d18:	6003      	str	r3, [r0, #0]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008d1a:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 8008d1e:	f8bc 306a 	ldrh.w	r3, [ip, #106]	; 0x6a
 8008d22:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008d24:	f8d2 6094 	ldr.w	r6, [r2, #148]	; 0x94
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008d28:	4318      	orrs	r0, r3
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008d2a:	4333      	orrs	r3, r6
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008d2c:	64c8      	str	r0, [r1, #76]	; 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008d2e:	64eb      	str	r3, [r5, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008d30:	6863      	ldr	r3, [r4, #4]
 8008d32:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008d3a:	2280      	movs	r2, #128	; 0x80
 8008d3c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8008d40:	6063      	str	r3, [r4, #4]
}
 8008d42:	f10c 0046 	add.w	r0, ip, #70	; 0x46
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008d46:	f8ac 206a 	strh.w	r2, [ip, #106]	; 0x6a
}
 8008d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008d4c:	f89c e03a 	ldrb.w	lr, [ip, #58]	; 0x3a
 8008d50:	e7e3      	b.n	8008d1a <R3_2_TIMx_UP_IRQHandler+0x3e>
 8008d52:	bf00      	nop

08008d54 <R3_2_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8008d54:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8008d58:	b923      	cbnz	r3, 8008d64 <R3_2_BRK2_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008d5a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8008d5c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
 8008d60:	2a02      	cmp	r2, #2
 8008d62:	d004      	beq.n	8008d6e <R3_2_BRK2_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 8008d64:	2301      	movs	r3, #1
 8008d66:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8008d6a:	3046      	adds	r0, #70	; 0x46
 8008d6c:	4770      	bx	lr
{
 8008d6e:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008d70:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008d74:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 8008d7a:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008d7c:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008d80:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8008d84:	628c      	str	r4, [r1, #40]	; 0x28
 8008d86:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8008d8e:	bc30      	pop	{r4, r5}
 8008d90:	3046      	adds	r0, #70	; 0x46
 8008d92:	4770      	bx	lr

08008d94 <R3_2_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008d94:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8008d96:	6891      	ldr	r1, [r2, #8]
 8008d98:	6c4a      	ldr	r2, [r1, #68]	; 0x44
{
 8008d9a:	4603      	mov	r3, r0
  pHandle->OverVoltageFlag = true;
 8008d9c:	f240 1c01 	movw	ip, #257	; 0x101
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008da0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008da4:	644a      	str	r2, [r1, #68]	; 0x44
}
 8008da6:	3046      	adds	r0, #70	; 0x46
  pHandle->OverVoltageFlag = true;
 8008da8:	f8a3 c06f 	strh.w	ip, [r3, #111]	; 0x6f
}
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop

08008db0 <R3_2_IsOverCurrentOccurred>:
  if ( pHandle->OverVoltageFlag == true )
 8008db0:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8008db4:	b16b      	cbz	r3, 8008dd2 <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8008db6:	2300      	movs	r3, #0
 8008db8:	f880 306f 	strb.w	r3, [r0, #111]	; 0x6f
 8008dbc:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8008dbe:	2302      	movs	r3, #2
  if ( pHandle->OverCurrentFlag == true )
 8008dc0:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
 8008dc4:	b11a      	cbz	r2, 8008dce <R3_2_IsOverCurrentOccurred+0x1e>
    pHandle->OverCurrentFlag = false;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
    retVal |= MC_BREAK_IN;
 8008dcc:	460b      	mov	r3, r1
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	4770      	bx	lr
 8008dd2:	2140      	movs	r1, #64	; 0x40
 8008dd4:	e7f4      	b.n	8008dc0 <R3_2_IsOverCurrentOccurred+0x10>
 8008dd6:	bf00      	nop

08008dd8 <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8008dd8:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 8008ddc:	b430      	push	{r4, r5}
  if ( pHandle->_Super.RLDetectionMode == false )
 8008dde:	2900      	cmp	r1, #0
 8008de0:	d13c      	bne.n	8008e5c <R3_2_RLDetectionModeEnable+0x84>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008de2:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8008de4:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008de6:	699a      	ldr	r2, [r3, #24]
 8008de8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008dec:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008df0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008df4:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008df6:	6a1a      	ldr	r2, [r3, #32]
 8008df8:	f042 0201 	orr.w	r2, r2, #1
 8008dfc:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008dfe:	6a1a      	ldr	r2, [r3, #32]
 8008e00:	f022 0204 	bic.w	r2, r2, #4
 8008e04:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008e06:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8008e08:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
 8008e0c:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8008e0e:	f103 0418 	add.w	r4, r3, #24
 8008e12:	d030      	beq.n	8008e76 <R3_2_RLDetectionModeEnable+0x9e>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008e14:	2a02      	cmp	r2, #2
 8008e16:	d10f      	bne.n	8008e38 <R3_2_RLDetectionModeEnable+0x60>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008e18:	699a      	ldr	r2, [r3, #24]
 8008e1a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008e1e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008e22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e26:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008e28:	6a1a      	ldr	r2, [r3, #32]
 8008e2a:	f042 0210 	orr.w	r2, r2, #16
 8008e2e:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008e30:	6a1a      	ldr	r2, [r3, #32]
 8008e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e36:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008e38:	6862      	ldr	r2, [r4, #4]
 8008e3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e3e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008e42:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8008e46:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008e48:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8008e4a:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8008e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e50:	621a      	str	r2, [r3, #32]
 8008e52:	6a1a      	ldr	r2, [r3, #32]
 8008e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e58:	621a      	str	r2, [r3, #32]
 8008e5a:	65c1      	str	r1, [r0, #92]	; 0x5c
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8008e5c:	4b0e      	ldr	r3, [pc, #56]	; (8008e98 <R3_2_RLDetectionModeEnable+0xc0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8008e5e:	490f      	ldr	r1, [pc, #60]	; (8008e9c <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008e60:	4a0f      	ldr	r2, [pc, #60]	; (8008ea0 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8008e62:	4c10      	ldr	r4, [pc, #64]	; (8008ea4 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8008e64:	6143      	str	r3, [r0, #20]
  pHandle->_Super.RLDetectionMode = true;
 8008e66:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8008e68:	6044      	str	r4, [r0, #4]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008e6a:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8008e6e:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 8008e70:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8008e74:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008e76:	699a      	ldr	r2, [r3, #24]
 8008e78:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008e7c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008e80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e84:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008e86:	6a1a      	ldr	r2, [r3, #32]
 8008e88:	f022 0210 	bic.w	r2, r2, #16
 8008e8c:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8008e8e:	6a1a      	ldr	r2, [r3, #32]
 8008e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e94:	621a      	str	r2, [r3, #32]
}
 8008e96:	e7cf      	b.n	8008e38 <R3_2_RLDetectionModeEnable+0x60>
 8008e98:	08008781 	.word	0x08008781
 8008e9c:	080087cd 	.word	0x080087cd
 8008ea0:	080086ad 	.word	0x080086ad
 8008ea4:	08008729 	.word	0x08008729

08008ea8 <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8008ea8:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d03b      	beq.n	8008f28 <R3_2_RLDetectionModeDisable+0x80>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008eb0:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8008eb2:	688b      	ldr	r3, [r1, #8]
{
 8008eb4:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008eb6:	699a      	ldr	r2, [r3, #24]
 8008eb8:	4c43      	ldr	r4, [pc, #268]	; (8008fc8 <R3_2_RLDetectionModeDisable+0x120>)
 8008eba:	4022      	ands	r2, r4
 8008ebc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008ec0:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008ec2:	6a1a      	ldr	r2, [r3, #32]
 8008ec4:	f042 0201 	orr.w	r2, r2, #1
 8008ec8:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8008eca:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 8008ece:	2a01      	cmp	r2, #1
 8008ed0:	d02b      	beq.n	8008f2a <R3_2_RLDetectionModeDisable+0x82>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008ed2:	2a02      	cmp	r2, #2
 8008ed4:	d050      	beq.n	8008f78 <R3_2_RLDetectionModeDisable+0xd0>
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8008ed6:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8008eda:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008edc:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008ede:	6999      	ldr	r1, [r3, #24]
 8008ee0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008ee4:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8008ee8:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8008eec:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008eee:	6a19      	ldr	r1, [r3, #32]
 8008ef0:	f041 0110 	orr.w	r1, r1, #16
 8008ef4:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008ef6:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008ef8:	69d9      	ldr	r1, [r3, #28]
 8008efa:	400c      	ands	r4, r1
 8008efc:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8008f00:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008f02:	6a19      	ldr	r1, [r3, #32]
 8008f04:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008f08:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8008f0a:	4930      	ldr	r1, [pc, #192]	; (8008fcc <R3_2_RLDetectionModeDisable+0x124>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008f0c:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008f0e:	4a30      	ldr	r2, [pc, #192]	; (8008fd0 <R3_2_RLDetectionModeDisable+0x128>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8008f10:	6041      	str	r1, [r0, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8008f12:	4930      	ldr	r1, [pc, #192]	; (8008fd4 <R3_2_RLDetectionModeDisable+0x12c>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8008f14:	4c30      	ldr	r4, [pc, #192]	; (8008fd8 <R3_2_RLDetectionModeDisable+0x130>)
 8008f16:	6144      	str	r4, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 8008f18:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008f1a:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8008f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8008f22:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8008f26:	4770      	bx	lr
 8008f28:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8008f2a:	6a19      	ldr	r1, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8008f2c:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8008f30:	f041 0104 	orr.w	r1, r1, #4
 8008f34:	0852      	lsrs	r2, r2, #1
 8008f36:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008f38:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008f3a:	6999      	ldr	r1, [r3, #24]
 8008f3c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008f40:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8008f44:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8008f48:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008f4a:	6a19      	ldr	r1, [r3, #32]
 8008f4c:	f041 0110 	orr.w	r1, r1, #16
 8008f50:	6219      	str	r1, [r3, #32]
 8008f52:	6a19      	ldr	r1, [r3, #32]
 8008f54:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008f58:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008f5a:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008f5c:	69d9      	ldr	r1, [r3, #28]
 8008f5e:	400c      	ands	r4, r1
 8008f60:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8008f64:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008f66:	6a19      	ldr	r1, [r3, #32]
 8008f68:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008f6c:	6219      	str	r1, [r3, #32]
 8008f6e:	6a19      	ldr	r1, [r3, #32]
 8008f70:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8008f74:	6219      	str	r1, [r3, #32]
}
 8008f76:	e7c8      	b.n	8008f0a <R3_2_RLDetectionModeDisable+0x62>
  CLEAR_BIT(TIMx->CCER, Channels);
 8008f78:	6a19      	ldr	r1, [r3, #32]
 8008f7a:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8008f7e:	f021 0104 	bic.w	r1, r1, #4
 8008f82:	0852      	lsrs	r2, r2, #1
 8008f84:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008f86:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008f88:	6999      	ldr	r1, [r3, #24]
 8008f8a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008f8e:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8008f92:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8008f96:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008f98:	6a19      	ldr	r1, [r3, #32]
 8008f9a:	f041 0110 	orr.w	r1, r1, #16
 8008f9e:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008fa0:	6a19      	ldr	r1, [r3, #32]
 8008fa2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8008fa6:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008fa8:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008faa:	69d9      	ldr	r1, [r3, #28]
 8008fac:	400c      	ands	r4, r1
 8008fae:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8008fb2:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008fb4:	6a19      	ldr	r1, [r3, #32]
 8008fb6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008fba:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008fbc:	6a19      	ldr	r1, [r3, #32]
 8008fbe:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008fc2:	6219      	str	r1, [r3, #32]
}
 8008fc4:	e7a1      	b.n	8008f0a <R3_2_RLDetectionModeDisable+0x62>
 8008fc6:	bf00      	nop
 8008fc8:	fffeff8c 	.word	0xfffeff8c
 8008fcc:	08008301 	.word	0x08008301
 8008fd0:	080086ad 	.word	0x080086ad
 8008fd4:	08008615 	.word	0x08008615
 8008fd8:	080085c1 	.word	0x080085c1

08008fdc <R3_2_RLDetectionModeSetDuty>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008fdc:	6f43      	ldr	r3, [r0, #116]	; 0x74
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8008fde:	f8b0 c068 	ldrh.w	ip, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008fe2:	689b      	ldr	r3, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008fe4:	69da      	ldr	r2, [r3, #28]
 8008fe6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8008fea:	fb01 f10c 	mul.w	r1, r1, ip
 8008fee:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
{
 8008ff2:	b410      	push	{r4}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8008ff4:	0c09      	lsrs	r1, r1, #16
  pHandle->ADCRegularLocked=true;
 8008ff6:	2401      	movs	r4, #1
 8008ff8:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8008ffc:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8009000:	8641      	strh	r1, [r0, #50]	; 0x32
 8009002:	61da      	str	r2, [r3, #28]
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8009004:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 8009008:	f8b0 4058 	ldrh.w	r4, [r0, #88]	; 0x58
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 800900c:	ebac 0202 	sub.w	r2, ip, r2
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009010:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009012:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009014:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009016:	685a      	ldr	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8009018:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 800901a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800901e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  pHdl->Sector = SECTOR_4;
 8009022:	f04f 0c03 	mov.w	ip, #3
 8009026:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800902a:	605a      	str	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800902c:	2901      	cmp	r1, #1
  pHdl->Sector = SECTOR_4;
 800902e:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8009032:	685b      	ldr	r3, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8009034:	d008      	beq.n	8009048 <R3_2_RLDetectionModeSetDuty+0x6c>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8009036:	4a07      	ldr	r2, [pc, #28]	; (8009054 <R3_2_RLDetectionModeSetDuty+0x78>)
}
 8009038:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800903c:	4213      	tst	r3, r2
    hAux = MC_FOC_DURATION;
 800903e:	bf14      	ite	ne
 8009040:	2101      	movne	r1, #1
 8009042:	2100      	moveq	r1, #0
}
 8009044:	4608      	mov	r0, r1
 8009046:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8009048:	2300      	movs	r3, #0
 800904a:	8703      	strh	r3, [r0, #56]	; 0x38
}
 800904c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009050:	4608      	mov	r0, r1
 8009052:	4770      	bx	lr
 8009054:	02000070 	.word	0x02000070

08009058 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8009058:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 800905c:	8b82      	ldrh	r2, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800905e:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8009060:	4494      	add	ip, r2
{
 8009062:	b410      	push	{r4}
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8009064:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8009068:	b14b      	cbz	r3, 800907e <RVBS_Clear+0x26>
  {
    pHandle->aBuffer[index] = aux;
 800906a:	6a04      	ldr	r4, [r0, #32]
 800906c:	2300      	movs	r3, #0
 800906e:	b29a      	uxth	r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8009070:	3301      	adds	r3, #1
    pHandle->aBuffer[index] = aux;
 8009072:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8009076:	8b01      	ldrh	r1, [r0, #24]
 8009078:	b29a      	uxth	r2, r3
 800907a:	4291      	cmp	r1, r2
 800907c:	d8f7      	bhi.n	800906e <RVBS_Clear+0x16>
  }
  pHandle->_Super.LatestConv = aux;
 800907e:	2300      	movs	r3, #0
 8009080:	f36c 030f 	bfi	r3, ip, #0, #16
 8009084:	f36c 431f 	bfi	r3, ip, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8009088:	2200      	movs	r2, #0
}
 800908a:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.LatestConv = aux;
 800908e:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 8009090:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop

08009098 <RVBS_Init>:
{
 8009098:	b510      	push	{r4, lr}
 800909a:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 800909c:	300c      	adds	r0, #12
 800909e:	f7fa f865 	bl	800316c <RCM_RegisterRegConv>
 80090a2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 80090a6:	4620      	mov	r0, r4
 80090a8:	f7ff ffd6 	bl	8009058 <RVBS_Clear>
}
 80090ac:	bd10      	pop	{r4, pc}
 80090ae:	bf00      	nop

080090b0 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 80090b0:	88c3      	ldrh	r3, [r0, #6]
 80090b2:	8b42      	ldrh	r2, [r0, #26]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d305      	bcc.n	80090c4 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 80090b8:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 80090ba:	4298      	cmp	r0, r3
 80090bc:	bf8c      	ite	hi
 80090be:	2004      	movhi	r0, #4
 80090c0:	2000      	movls	r0, #0
 80090c2:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 80090c4:	2002      	movs	r0, #2
  }
  return fault;
}
 80090c6:	4770      	bx	lr

080090c8 <RVBS_CalcAvVbus>:
{
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80090cc:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80090d0:	f7fa f934 	bl	800333c <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 80090d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090d8:	4298      	cmp	r0, r3
 80090da:	d01b      	beq.n	8009114 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 80090dc:	6a26      	ldr	r6, [r4, #32]
 80090de:	f894 e025 	ldrb.w	lr, [r4, #37]	; 0x25
 80090e2:	f826 001e 	strh.w	r0, [r6, lr, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80090e6:	8b25      	ldrh	r5, [r4, #24]
 80090e8:	b1cd      	cbz	r5, 800911e <RVBS_CalcAvVbus+0x56>
 80090ea:	2300      	movs	r3, #0
    wtemp = 0;
 80090ec:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 80090ee:	f836 c013 	ldrh.w	ip, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80090f2:	3301      	adds	r3, #1
 80090f4:	b2d9      	uxtb	r1, r3
 80090f6:	42a9      	cmp	r1, r5
      wtemp += pHandle->aBuffer[i];
 80090f8:	4462      	add	r2, ip
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80090fa:	460b      	mov	r3, r1
 80090fc:	d3f7      	bcc.n	80090ee <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 80090fe:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8009102:	1e6b      	subs	r3, r5, #1
 8009104:	459e      	cmp	lr, r3
    pHandle->_Super.LatestConv = hAux;
 8009106:	80a0      	strh	r0, [r4, #4]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8009108:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800910a:	da0a      	bge.n	8009122 <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 800910c:	f10e 0e01 	add.w	lr, lr, #1
 8009110:	f884 e025 	strb.w	lr, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8009114:	4620      	mov	r0, r4
 8009116:	f7ff ffcb 	bl	80090b0 <RVBS_CheckFaultState>
 800911a:	8120      	strh	r0, [r4, #8]
}
 800911c:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800911e:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8009120:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8009128:	4620      	mov	r0, r4
 800912a:	f7ff ffc1 	bl	80090b0 <RVBS_CheckFaultState>
 800912e:	8120      	strh	r0, [r4, #8]
}
 8009130:	bd70      	pop	{r4, r5, r6, pc}
 8009132:	bf00      	nop

08009134 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8009134:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8009136:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8009138:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 800913c:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8009140:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8009142:	4770      	bx	lr

08009144 <RUC_SetPhaseDurationms>:
  *         This parameter must be set in millisecond.
  *  @retval none
  */
__weak void RUC_SetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, uint16_t hDurationms )
{
  pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 8009144:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009148:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800914c:	818a      	strh	r2, [r1, #12]
}
 800914e:	4770      	bx	lr

08009150 <RUC_SetPhaseFinalMecSpeedUnit>:
  *  @retval none
  */
__weak void RUC_SetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase,
                                    int16_t hFinalMecSpeedUnit )
{
  pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8009150:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009154:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009158:	81ca      	strh	r2, [r1, #14]
}
 800915a:	4770      	bx	lr

0800915c <RUC_SetPhaseFinalTorque>:
  * @param  hFinalTorque: new targetted motor torque.
  *  @retval none
  */
__weak void RUC_SetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, int16_t hFinalTorque )
{
  pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 800915c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009160:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009164:	820a      	strh	r2, [r1, #16]
}
 8009166:	4770      	bx	lr

08009168 <RUC_GetPhaseDurationms>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns duration used in selected phase.
  */
__weak uint16_t RUC_GetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( uint16_t )pHandle->ParamsData[bPhase].hDurationms );
 8009168:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800916c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8009170:	8988      	ldrh	r0, [r1, #12]
 8009172:	4770      	bx	lr

08009174 <RUC_GetPhaseFinalMecSpeedUnit>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted rotor speed set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalMecSpeedUnit );
 8009174:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009178:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800917c:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop

08009184 <RUC_GetPhaseFinalTorque>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted motor torque set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalTorque );
 8009184:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009188:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800918c:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop

08009194 <RUC_GetNumberOfPhases>:
  *  @retval Returns number of phases relative to the programmed revup.
  */
__weak uint8_t RUC_GetNumberOfPhases( RevUpCtrl_Handle_t * pHandle )
{
  return ( ( uint8_t )pHandle->bPhaseNbr );
}
 8009194:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop

0800919c <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 800919c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop

080091a4 <SPD_GetMecAngle>:
  */
__weak int32_t SPD_GetMecAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  //printf("getting mec angle?\r\n");
  return ( pHandle->wMecAngle );
}
 80091a4:	6880      	ldr	r0, [r0, #8]
 80091a6:	4770      	bx	lr

080091a8 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 80091a8:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop

080091b0 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 80091b0:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop

080091b8 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 80091b8:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 80091bc:	8a81      	ldrh	r1, [r0, #20]
{
 80091be:	b500      	push	{lr}
  if ( *pMecSpeedUnit < 0 )
 80091c0:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 80091c2:	bfb8      	it	lt
 80091c4:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 80091c6:	f8b0 e016 	ldrh.w	lr, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 80091ca:	f890 c003 	ldrb.w	ip, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 80091ce:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 80091d0:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 80091d2:	459e      	cmp	lr, r3
 80091d4:	d819      	bhi.n	800920a <SPD_IsMecSpeedReliable+0x52>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 80091d6:	4299      	cmp	r1, r3
 80091d8:	bf2c      	ite	cs
 80091da:	2300      	movcs	r3, #0
 80091dc:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 80091de:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80091e2:	f8b0 e018 	ldrh.w	lr, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 80091e6:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 80091e8:	bfb8      	it	lt
 80091ea:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 80091ec:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80091ee:	458e      	cmp	lr, r1
 80091f0:	d300      	bcc.n	80091f4 <SPD_IsMecSpeedReliable+0x3c>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 80091f2:	b163      	cbz	r3, 800920e <SPD_IsMecSpeedReliable+0x56>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 80091f4:	4594      	cmp	ip, r2
 80091f6:	d901      	bls.n	80091fc <SPD_IsMecSpeedReliable+0x44>
    {
      bSpeedErrorNumber++;
 80091f8:	3201      	adds	r2, #1
 80091fa:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80091fc:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 80091fe:	ebb2 000c 	subs.w	r0, r2, ip
 8009202:	bf18      	it	ne
 8009204:	2001      	movne	r0, #1
 8009206:	f85d fb04 	ldr.w	pc, [sp], #4
    SpeedError = true;
 800920a:	2301      	movs	r3, #1
 800920c:	e7e7      	b.n	80091de <SPD_IsMecSpeedReliable+0x26>
      bSpeedErrorNumber = 0u;
 800920e:	4594      	cmp	ip, r2
 8009210:	bf88      	it	hi
 8009212:	2200      	movhi	r2, #0
  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8009214:	7002      	strb	r2, [r0, #0]
}
 8009216:	ebb2 000c 	subs.w	r0, r2, ip
 800921a:	bf18      	it	ne
 800921c:	2001      	movne	r0, #1
 800921e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009222:	bf00      	nop

08009224 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8009224:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8009228:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 800922c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8009230:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8009234:	b200      	sxth	r0, r0
 8009236:	4770      	bx	lr

08009238 <STC_Init>:
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8009238:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
  pHandle->PISpeed = pPI;
 800923c:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800923e:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
  pHandle->SPD = SPD_Handle;
 8009242:	6142      	str	r2, [r0, #20]
{
 8009244:	b410      	push	{r4}
  pHandle->Mode = pHandle->ModeDefault;
 8009246:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 800924a:	7004      	strb	r4, [r0, #0]
  pHandle->TargetFinal = 0;
 800924c:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800924e:	ea4f 440c 	mov.w	r4, ip, lsl #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8009252:	0409      	lsls	r1, r1, #16
 8009254:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->TargetFinal = 0;
 8009258:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 800925a:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->RampRemainingStep = 0u;
 800925e:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8009260:	6183      	str	r3, [r0, #24]
}
 8009262:	4770      	bx	lr

08009264 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8009264:	6141      	str	r1, [r0, #20]
}
 8009266:	4770      	bx	lr

08009268 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8009268:	6940      	ldr	r0, [r0, #20]
 800926a:	4770      	bx	lr

0800926c <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 800926c:	7803      	ldrb	r3, [r0, #0]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d000      	beq.n	8009274 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8009272:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8009274:	6900      	ldr	r0, [r0, #16]
 8009276:	2100      	movs	r1, #0
 8009278:	f7fe bd78 	b.w	8007d6c <PID_SetIntegralTerm>

0800927c <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800927c:	6840      	ldr	r0, [r0, #4]
 800927e:	2800      	cmp	r0, #0
 8009280:	bfbc      	itt	lt
 8009282:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8009286:	30ff      	addlt	r0, #255	; 0xff
}
 8009288:	1400      	asrs	r0, r0, #16
 800928a:	4770      	bx	lr

0800928c <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800928c:	6880      	ldr	r0, [r0, #8]
 800928e:	2800      	cmp	r0, #0
 8009290:	bfbc      	itt	lt
 8009292:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8009296:	30ff      	addlt	r0, #255	; 0xff
}
 8009298:	1400      	asrs	r0, r0, #16
 800929a:	4770      	bx	lr

0800929c <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800929c:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800929e:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80092a0:	60c3      	str	r3, [r0, #12]
}
 80092a2:	4770      	bx	lr

080092a4 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 80092a4:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80092a6:	7803      	ldrb	r3, [r0, #0]
{
 80092a8:	4604      	mov	r4, r0
 80092aa:	460d      	mov	r5, r1
 80092ac:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80092ae:	b323      	cbz	r3, 80092fa <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 80092b0:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 80092b2:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 80092b4:	2800      	cmp	r0, #0
 80092b6:	bfbc      	itt	lt
 80092b8:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80092bc:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 80092be:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 80092c0:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 80092c4:	dd01      	ble.n	80092ca <STC_ExecRamp+0x26>
      AllowedRange = false;
 80092c6:	2000      	movs	r0, #0
  }

  //printf("Allowed range is = %d\r\n", AllowedRange);

  return AllowedRange;
}
 80092c8:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 80092ca:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 80092ce:	428b      	cmp	r3, r1
 80092d0:	dcf9      	bgt.n	80092c6 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 80092d2:	8c23      	ldrh	r3, [r4, #32]
 80092d4:	4299      	cmp	r1, r3
 80092d6:	da03      	bge.n	80092e0 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 80092d8:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 80092dc:	428b      	cmp	r3, r1
 80092de:	dbf2      	blt.n	80092c6 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 80092e0:	b9ae      	cbnz	r6, 800930e <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 80092e2:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80092e4:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 80092e6:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 80092e8:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80092ec:	bf0c      	ite	eq
 80092ee:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 80092f0:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 80092f2:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 80092f4:	61a3      	str	r3, [r4, #24]
 80092f6:	2001      	movs	r0, #1
}
 80092f8:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 80092fa:	f7ff ffc7 	bl	800928c <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 80092fe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8009300:	429d      	cmp	r5, r3
 8009302:	dce0      	bgt.n	80092c6 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8009304:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8009308:	42ab      	cmp	r3, r5
 800930a:	dcdc      	bgt.n	80092c6 <STC_ExecRamp+0x22>
 800930c:	e7e8      	b.n	80092e0 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800930e:	8ba3      	ldrh	r3, [r4, #28]
      pHandle->TargetFinal = hTargetFinal;
 8009310:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8009312:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8009316:	4e06      	ldr	r6, [pc, #24]	; (8009330 <STC_ExecRamp+0x8c>)
 8009318:	fba6 2303 	umull	r2, r3, r6, r3
 800931c:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800931e:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8009320:	1a28      	subs	r0, r5, r0
 8009322:	0400      	lsls	r0, r0, #16
      pHandle->RampRemainingStep++;
 8009324:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8009326:	fb90 f0f3 	sdiv	r0, r0, r3
      pHandle->IncDecAmount = wAux1;
 800932a:	61a0      	str	r0, [r4, #24]
 800932c:	2001      	movs	r0, #1
}
 800932e:	bd70      	pop	{r4, r5, r6, pc}
 8009330:	10624dd3 	.word	0x10624dd3

08009334 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8009334:	2300      	movs	r3, #0
 8009336:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8009338:	6183      	str	r3, [r0, #24]
}
 800933a:	4770      	bx	lr

0800933c <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800933c:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 800933e:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8009342:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8009344:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8009346:	2a00      	cmp	r2, #0
 8009348:	bf08      	it	eq
 800934a:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 800934c:	2b01      	cmp	r3, #1
{
 800934e:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 8009350:	d90c      	bls.n	800936c <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8009352:	6981      	ldr	r1, [r0, #24]
 8009354:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8009356:	3b01      	subs	r3, #1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8009358:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 800935a:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 800935c:	4630      	mov	r0, r6
 800935e:	db09      	blt.n	8009374 <STC_CalcTorqueReference+0x38>
 8009360:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8009362:	2a01      	cmp	r2, #1
 8009364:	d00a      	beq.n	800937c <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8009366:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8009368:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 800936a:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 800936c:	d012      	beq.n	8009394 <STC_CalcTorqueReference+0x58>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 800936e:	2e00      	cmp	r6, #0
 8009370:	4630      	mov	r0, r6
 8009372:	daf5      	bge.n	8009360 <STC_CalcTorqueReference+0x24>
 8009374:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8009378:	30ff      	adds	r0, #255	; 0xff
 800937a:	e7f1      	b.n	8009360 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 800937c:	6960      	ldr	r0, [r4, #20]
 800937e:	f7ff ff13 	bl	80091a8 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8009382:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8009384:	b209      	sxth	r1, r1
 8009386:	6920      	ldr	r0, [r4, #16]
 8009388:	f7fe fcfc 	bl	8007d84 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800938c:	0403      	lsls	r3, r0, #16
 800938e:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 8009392:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8009394:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8009398:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800939a:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 800939c:	60c3      	str	r3, [r0, #12]
 800939e:	e7e0      	b.n	8009362 <STC_CalcTorqueReference+0x26>

080093a0 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 80093a0:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop

080093a8 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 80093a8:	8bc0      	ldrh	r0, [r0, #30]
 80093aa:	4770      	bx	lr

080093ac <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 80093ac:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop

080093b4 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 80093b4:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 80093b8:	2200      	movs	r2, #0
 80093ba:	b299      	uxth	r1, r3
 80093bc:	f361 020f 	bfi	r2, r1, #0, #16
 80093c0:	0c1b      	lsrs	r3, r3, #16
 80093c2:	f363 421f 	bfi	r2, r3, #16, #16
{
 80093c6:	b082      	sub	sp, #8
}
 80093c8:	4610      	mov	r0, r2
 80093ca:	b002      	add	sp, #8
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop

080093d0 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 80093d0:	b510      	push	{r4, lr}
 80093d2:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 80093d4:	6940      	ldr	r0, [r0, #20]
 80093d6:	f7ff fee7 	bl	80091a8 <SPD_GetAvrgMecSpeedUnit>
 80093da:	0400      	lsls	r0, r0, #16
 80093dc:	6060      	str	r0, [r4, #4]
}
 80093de:	bd10      	pop	{r4, pc}

080093e0 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 80093e0:	2300      	movs	r3, #0
 80093e2:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 80093e4:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop

080093ec <STM_FaultProcessing>:
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80093ec:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80093ee:	f8b0 c004 	ldrh.w	ip, [r0, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80093f2:	430b      	orrs	r3, r1
 80093f4:	ea23 0202 	bic.w	r2, r3, r2
  State_t LocalState =  pHandle->bState;
 80093f8:	7803      	ldrb	r3, [r0, #0]
  pHandle->hFaultOccurred |= hSetErrors;
 80093fa:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80093fe:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 8009400:	2b0a      	cmp	r3, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8009402:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8009404:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 8009406:	d006      	beq.n	8009416 <STM_FaultProcessing+0x2a>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8009408:	b90a      	cbnz	r2, 800940e <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 800940a:	4618      	mov	r0, r3
 800940c:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 800940e:	230a      	movs	r3, #10
 8009410:	7003      	strb	r3, [r0, #0]
}
 8009412:	4618      	mov	r0, r3
 8009414:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8009416:	2a00      	cmp	r2, #0
 8009418:	d1f7      	bne.n	800940a <STM_FaultProcessing+0x1e>
      pHandle->bState = FAULT_OVER;
 800941a:	230b      	movs	r3, #11
 800941c:	7003      	strb	r3, [r0, #0]
}
 800941e:	4618      	mov	r0, r3
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop

08009424 <STM_NextState>:
{
 8009424:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 8009426:	7803      	ldrb	r3, [r0, #0]
 8009428:	2b14      	cmp	r3, #20
 800942a:	d810      	bhi.n	800944e <STM_NextState+0x2a>
 800942c:	e8df f003 	tbb	[pc, r3]
 8009430:	200d3457 	.word	0x200d3457
 8009434:	500d532a 	.word	0x500d532a
 8009438:	0f0f484d 	.word	0x0f0f484d
 800943c:	455e0b1b 	.word	0x455e0b1b
 8009440:	3b3f6342 	.word	0x3b3f6342
 8009444:	31          	.byte	0x31
 8009445:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8009446:	290e      	cmp	r1, #14
 8009448:	d00f      	beq.n	800946a <STM_NextState+0x46>
      if ( bState == ANY_STOP )
 800944a:	2907      	cmp	r1, #7
 800944c:	d00d      	beq.n	800946a <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800944e:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8009452:	2b01      	cmp	r3, #1
 8009454:	d014      	beq.n	8009480 <STM_NextState+0x5c>
 8009456:	2907      	cmp	r1, #7
 8009458:	d012      	beq.n	8009480 <STM_NextState+0x5c>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800945a:	2200      	movs	r2, #0
 800945c:	2180      	movs	r1, #128	; 0x80
 800945e:	f7ff ffc5 	bl	80093ec <STM_FaultProcessing>
 8009462:	2000      	movs	r0, #0
}
 8009464:	bd08      	pop	{r3, pc}
      if ( bState == IDLE )
 8009466:	2900      	cmp	r1, #0
 8009468:	d1f1      	bne.n	800944e <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 800946a:	7001      	strb	r1, [r0, #0]
 800946c:	2001      	movs	r0, #1
}
 800946e:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8009470:	2911      	cmp	r1, #17
 8009472:	d8f2      	bhi.n	800945a <STM_NextState+0x36>
 8009474:	4b23      	ldr	r3, [pc, #140]	; (8009504 <STM_NextState+0xe0>)
 8009476:	40cb      	lsrs	r3, r1
 8009478:	07da      	lsls	r2, r3, #31
 800947a:	d4f6      	bmi.n	800946a <STM_NextState+0x46>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800947c:	2903      	cmp	r1, #3
 800947e:	d1ec      	bne.n	800945a <STM_NextState+0x36>
 8009480:	2000      	movs	r0, #0
}
 8009482:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8009484:	2913      	cmp	r1, #19
 8009486:	d0f0      	beq.n	800946a <STM_NextState+0x46>
 8009488:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800948c:	2b05      	cmp	r3, #5
 800948e:	d1e0      	bne.n	8009452 <STM_NextState+0x2e>
 8009490:	e7eb      	b.n	800946a <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8009492:	2912      	cmp	r1, #18
 8009494:	d1d9      	bne.n	800944a <STM_NextState+0x26>
 8009496:	e7e8      	b.n	800946a <STM_NextState+0x46>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8009498:	2907      	cmp	r1, #7
 800949a:	d0e6      	beq.n	800946a <STM_NextState+0x46>
 800949c:	f1a1 030d 	sub.w	r3, r1, #13
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d8d4      	bhi.n	800944e <STM_NextState+0x2a>
 80094a4:	e7e1      	b.n	800946a <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 80094a6:	1f0b      	subs	r3, r1, #4
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d8ce      	bhi.n	800944a <STM_NextState+0x26>
 80094ac:	e7dd      	b.n	800946a <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 80094ae:	2904      	cmp	r1, #4
 80094b0:	d1cb      	bne.n	800944a <STM_NextState+0x26>
 80094b2:	e7da      	b.n	800946a <STM_NextState+0x46>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80094b4:	2911      	cmp	r1, #17
 80094b6:	d1c8      	bne.n	800944a <STM_NextState+0x26>
 80094b8:	e7d7      	b.n	800946a <STM_NextState+0x46>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 80094ba:	2902      	cmp	r1, #2
 80094bc:	d1c5      	bne.n	800944a <STM_NextState+0x26>
 80094be:	e7d4      	b.n	800946a <STM_NextState+0x46>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 80094c0:	2900      	cmp	r1, #0
 80094c2:	d0d2      	beq.n	800946a <STM_NextState+0x46>
 80094c4:	290c      	cmp	r1, #12
 80094c6:	d1c2      	bne.n	800944e <STM_NextState+0x2a>
 80094c8:	e7cf      	b.n	800946a <STM_NextState+0x46>
      if ( bState == STOP_IDLE )
 80094ca:	2909      	cmp	r1, #9
 80094cc:	d1bf      	bne.n	800944e <STM_NextState+0x2a>
 80094ce:	e7cc      	b.n	800946a <STM_NextState+0x46>
      if ( bState == STOP )
 80094d0:	2908      	cmp	r1, #8
 80094d2:	d1bc      	bne.n	800944e <STM_NextState+0x2a>
 80094d4:	e7c9      	b.n	800946a <STM_NextState+0x46>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 80094d6:	1f8b      	subs	r3, r1, #6
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d8b8      	bhi.n	800944e <STM_NextState+0x2a>
 80094dc:	e7c5      	b.n	800946a <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80094de:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d0c1      	beq.n	800946a <STM_NextState+0x46>
           || ( bState == ICLWAIT ) )
 80094e6:	290c      	cmp	r1, #12
 80094e8:	d1b5      	bne.n	8009456 <STM_NextState+0x32>
 80094ea:	e7be      	b.n	800946a <STM_NextState+0x46>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 80094ec:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 80094f0:	2b07      	cmp	r3, #7
 80094f2:	d1ac      	bne.n	800944e <STM_NextState+0x2a>
 80094f4:	e7b9      	b.n	800946a <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 80094f6:	2914      	cmp	r1, #20
 80094f8:	d8a9      	bhi.n	800944e <STM_NextState+0x2a>
 80094fa:	4b03      	ldr	r3, [pc, #12]	; (8009508 <STM_NextState+0xe4>)
 80094fc:	40cb      	lsrs	r3, r1
 80094fe:	07db      	lsls	r3, r3, #31
 8009500:	d4b3      	bmi.n	800946a <STM_NextState+0x46>
 8009502:	e7a4      	b.n	800944e <STM_NextState+0x2a>
 8009504:	00030092 	.word	0x00030092
 8009508:	00140080 	.word	0x00140080

0800950c <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 800950c:	7800      	ldrb	r0, [r0, #0]
 800950e:	4770      	bx	lr

08009510 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8009510:	7803      	ldrb	r3, [r0, #0]
 8009512:	2b0b      	cmp	r3, #11
 8009514:	d001      	beq.n	800951a <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8009516:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8009518:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 800951a:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800951c:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 800951e:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8009520:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 8009522:	2001      	movs	r0, #1
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop

08009528 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8009528:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 800952a:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 800952c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop

08009534 <TC_Init>:
  * @retval none
  */
void TC_Init(PosCtrl_Handle_t *pHandle, PID_Handle_t * pPIDPosReg, SpeednTorqCtrl_Handle_t * pSTC, ENCODER_Handle_t * pENC)
{

  pHandle->MovementDuration = 0.0f;
 8009534:	f04f 0c00 	mov.w	ip, #0
  pHandle->ElapseTime = 0.0f;

  pHandle->PositionControlRegulation = DISABLE;
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;

  pHandle->pENC = pENC;
 8009538:	6643      	str	r3, [r0, #100]	; 0x64
  pHandle->TcTick = 0;
 800953a:	2300      	movs	r3, #0
  pHandle->pSTC = pSTC;
 800953c:	e9c0 211a 	strd	r2, r1, [r0, #104]	; 0x68
  pHandle->MovementDuration = 0.0f;
 8009540:	f8c0 c000 	str.w	ip, [r0]
  pHandle->AngleStep = 0.0f;
 8009544:	f8c0 c00c 	str.w	ip, [r0, #12]
  pHandle->SubStep[0] = 0.0f;
 8009548:	f8c0 c010 	str.w	ip, [r0, #16]
  pHandle->SubStep[1] = 0.0f;
 800954c:	f8c0 c014 	str.w	ip, [r0, #20]
  pHandle->SubStep[2] = 0.0f;
 8009550:	f8c0 c018 	str.w	ip, [r0, #24]
  pHandle->SubStep[3] = 0.0f;
 8009554:	f8c0 c01c 	str.w	ip, [r0, #28]
  pHandle->SubStep[4] = 0.0f;
 8009558:	f8c0 c020 	str.w	ip, [r0, #32]
  pHandle->SubStep[5] = 0.0f;
 800955c:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
  pHandle->SubStepDuration = 0;
 8009560:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
  pHandle->ElapseTime = 0.0f;
 8009564:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
  pHandle->Jerk = 0.0f;
 8009568:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
  pHandle->CruiseSpeed = 0.0f;
 800956c:	f8c0 c038 	str.w	ip, [r0, #56]	; 0x38
  pHandle->Acceleration = 0.0f;
 8009570:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
  pHandle->Omega = 0.0f;
 8009574:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
  pHandle->OmegaPrev = 0.0f;
 8009578:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
  pHandle->Theta = 0.0f;
 800957c:	f8c0 c048 	str.w	ip, [r0, #72]	; 0x48
  pHandle->ThetaPrev = 0.0f;
 8009580:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
  pHandle->TcTick = 0;
 8009584:	6583      	str	r3, [r0, #88]	; 0x58
  pHandle->ReceivedTh = 0.0f;
 8009586:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800958a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  pHandle->PIDPosRegulator = pPIDPosReg;

  pHandle->MecAngleOffset = 0;
 800958e:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
 8009592:	4770      	bx	lr

08009594 <TC_MoveCommand>:
  * @param  movementDuration Duration to reach the final position.
  * @retval true  = Trajectory command programmed
  *         false = Not ready for a new trajectory configuration.
  */
bool TC_MoveCommand(PosCtrl_Handle_t *pHandle, float startingAngle, float angleStep, float movementDuration)
{
 8009594:	4603      	mov	r3, r0

  bool RetConfigStatus = false;
  float fMinimumStepDuration;

  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 8009596:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 800959a:	2803      	cmp	r0, #3
 800959c:	d061      	beq.n	8009662 <TC_MoveCommand+0xce>
  {
	  // Back to Move command as the movement duration is different from 0
	  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
  }

  if ( (pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0) )
 800959e:	b108      	cbz	r0, 80095a4 <TC_MoveCommand+0x10>
  bool RetConfigStatus = false;
 80095a0:	2000      	movs	r0, #0

    RetConfigStatus = true;

  }
  return (RetConfigStatus);
}
 80095a2:	4770      	bx	lr
  if ( (pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0) )
 80095a4:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 80095a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ac:	ddf9      	ble.n	80095a2 <TC_MoveCommand+0xe>
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 80095ae:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80095b2:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8009670 <TC_MoveCommand+0xdc>
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80095b6:	ed9f 4a2f 	vldr	s8, [pc, #188]	; 8009674 <TC_MoveCommand+0xe0>
    pHandle->StartingAngle = startingAngle;
 80095ba:	ed83 0a01 	vstr	s0, [r3, #4]
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 80095be:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 80095c2:	ee67 6a26 	vmul.f32	s13, s14, s13
    pHandle->FinalAngle = startingAngle + angleStep;
 80095c6:	ee70 3a20 	vadd.f32	s7, s0, s1
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80095ca:	ee81 7a26 	vdiv.f32	s14, s2, s13
    pHandle->ElapseTime = 0.0f;
 80095ce:	2200      	movs	r2, #0
    pHandle->PositionControlRegulation = ENABLE;
 80095d0:	2001      	movs	r0, #1
 80095d2:	f883 0051 	strb.w	r0, [r3, #81]	; 0x51
    pHandle->ElapseTime = 0.0f;
 80095d6:	62da      	str	r2, [r3, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 80095d8:	641a      	str	r2, [r3, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 80095da:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 80095dc:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80095e0:	ee20 4a84 	vmul.f32	s8, s1, s8
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80095e4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    pHandle->FinalAngle = startingAngle + angleStep;
 80095e8:	edc3 3a02 	vstr	s7, [r3, #8]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80095ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 80095f0:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80095f4:	ee27 7a26 	vmul.f32	s14, s14, s13
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 80095f8:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80095fc:	ee67 7a27 	vmul.f32	s15, s14, s15
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8009600:	ed83 7a00 	vstr	s14, [r3]
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8009604:	ee27 7aa7 	vmul.f32	s14, s15, s15
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8009608:	eeb1 5a08 	vmov.f32	s10, #24	; 0x40c00000  6.0
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800960c:	ee67 6a27 	vmul.f32	s13, s14, s15
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8009610:	ee37 7a07 	vadd.f32	s14, s14, s14
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8009614:	eec4 3a26 	vdiv.f32	s7, s8, s13
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8009618:	eef1 5a0c 	vmov.f32	s11, #28	; 0x40e00000  7.0
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 800961c:	ee37 3aa7 	vadd.f32	s6, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8009620:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8009624:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8009628:	ee67 5aa5 	vmul.f32	s11, s15, s11
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800962c:	ee67 6a86 	vmul.f32	s13, s15, s12
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8009630:	ee27 7a23 	vmul.f32	s14, s14, s7
    pHandle->AngleStep = angleStep;
 8009634:	edc3 0a03 	vstr	s1, [r3, #12]
    pHandle->Theta = startingAngle;
 8009638:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800963c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 8009640:	edc3 7a04 	vstr	s15, [r3, #16]
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 8009644:	ed83 3a05 	vstr	s6, [r3, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8009648:	edc3 4a06 	vstr	s9, [r3, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800964c:	ed83 5a07 	vstr	s10, [r3, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8009650:	edc3 5a08 	vstr	s11, [r3, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8009654:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8009658:	edc3 3a0d 	vstr	s7, [r3, #52]	; 0x34
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800965c:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
  return (RetConfigStatus);
 8009660:	4770      	bx	lr
  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 8009662:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8009666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800966a:	dca0      	bgt.n	80095ae <TC_MoveCommand+0x1a>
 800966c:	e798      	b.n	80095a0 <TC_MoveCommand+0xc>
 800966e:	bf00      	nop
 8009670:	3de38e39 	.word	0x3de38e39
 8009674:	3daaaaab 	.word	0x3daaaaab

08009678 <TC_FollowCommand>:
void TC_FollowCommand(PosCtrl_Handle_t *pHandle, float Angle)
{
  float omega = 0, acceleration = 0, dt = 0;
  
  // Estimate speed
  if (pHandle->ReceivedTh > 0) 
 8009678:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800967c:	b9a3      	cbnz	r3, 80096a8 <TC_FollowCommand+0x30>
  float omega = 0, acceleration = 0, dt = 0;
 800967e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80096fc <TC_FollowCommand+0x84>
 8009682:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80096fc <TC_FollowCommand+0x84>
      acceleration = (omega - pHandle->OmegaPrev) / dt;
    }
  }
  
  // Update state variable
  pHandle->ThetaPrev  = Angle;
 8009686:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
  pHandle->OmegaPrev = omega;
  if (pHandle->ReceivedTh < 2)
  {
    pHandle->ReceivedTh++;
 800968a:	3301      	adds	r3, #1
  pHandle->OmegaPrev = omega;
 800968c:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
    pHandle->ReceivedTh++;
 8009690:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  
  pHandle->Acceleration = acceleration;
  pHandle->Omega = omega;
  pHandle->Theta = Angle;
  
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 8009694:	2303      	movs	r3, #3
  pHandle->Acceleration = acceleration;
 8009696:	edc0 6a0f 	vstr	s13, [r0, #60]	; 0x3c
  pHandle->Omega = omega;
 800969a:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
  pHandle->Theta = Angle;
 800969e:	ed80 0a12 	vstr	s0, [r0, #72]	; 0x48
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 80096a2:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  
  return;
}
 80096a6:	4770      	bx	lr
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 80096a8:	edd0 7a16 	vldr	s15, [r0, #88]	; 0x58
 80096ac:	ed90 7a17 	vldr	s14, [r0, #92]	; 0x5c
 80096b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pHandle->TcTick = 0;
 80096b4:	2200      	movs	r2, #0
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 80096b6:	ee67 7a87 	vmul.f32	s15, s15, s14
    pHandle->TcTick = 0;
 80096ba:	6582      	str	r2, [r0, #88]	; 0x58
    if (dt > 0)
 80096bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c4:	dd12      	ble.n	80096ec <TC_FollowCommand+0x74>
      omega = (Angle - pHandle->ThetaPrev) / dt;
 80096c6:	edd0 6a13 	vldr	s13, [r0, #76]	; 0x4c
 80096ca:	ee70 6a66 	vsub.f32	s13, s0, s13
  if (pHandle->ReceivedTh > 1) {
 80096ce:	2b01      	cmp	r3, #1
      omega = (Angle - pHandle->ThetaPrev) / dt;
 80096d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  if (pHandle->ReceivedTh > 1) {
 80096d4:	d0d5      	beq.n	8009682 <TC_FollowCommand+0xa>
      acceleration = (omega - pHandle->OmegaPrev) / dt;
 80096d6:	ed90 6a11 	vldr	s12, [r0, #68]	; 0x44
 80096da:	ee37 6a46 	vsub.f32	s12, s14, s12
 80096de:	eec6 6a27 	vdiv.f32	s13, s12, s15
  pHandle->ThetaPrev  = Angle;
 80096e2:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
  pHandle->OmegaPrev = omega;
 80096e6:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
  if (pHandle->ReceivedTh < 2)
 80096ea:	e7d3      	b.n	8009694 <TC_FollowCommand+0x1c>
  if (pHandle->ReceivedTh > 1) {
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d0c6      	beq.n	800967e <TC_FollowCommand+0x6>
  float omega = 0, acceleration = 0, dt = 0;
 80096f0:	ed9f 7a02 	vldr	s14, [pc, #8]	; 80096fc <TC_FollowCommand+0x84>
 80096f4:	eef0 6a47 	vmov.f32	s13, s14
 80096f8:	e7f3      	b.n	80096e2 <TC_FollowCommand+0x6a>
 80096fa:	bf00      	nop
 80096fc:	00000000 	.word	0x00000000

08009700 <TC_MoveExecution>:
void TC_MoveExecution(PosCtrl_Handle_t *pHandle)
{

  float jerkApplied = 0;

  if (pHandle->ElapseTime < pHandle->SubStep[0])              // 1st Sub-Step interval time of acceleration phase
 8009700:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
 8009704:	ed90 7a04 	vldr	s14, [r0, #16]
 8009708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800970c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009710:	d535      	bpl.n	800977e <TC_MoveExecution+0x7e>
  {
    jerkApplied = pHandle->Jerk;
 8009712:	ed90 5a0d 	vldr	s10, [r0, #52]	; 0x34
  }
  else if (pHandle->ElapseTime < pHandle->SubStep[5])         // 2nd Sub-Step interval time of deceleration phase
  {

  }
  else if (pHandle->ElapseTime < pHandle->MovementDuration)   // 3rd Sub-Step interval time of deceleration phase
 8009716:	edd0 6a00 	vldr	s13, [r0]
  {
    pHandle->Theta = pHandle->FinalAngle;
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
  }

  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 800971a:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
  {
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 800971e:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 8009722:	2b01      	cmp	r3, #1
 8009724:	d113      	bne.n	800974e <TC_MoveExecution+0x4e>
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 8009726:	edd0 5a0f 	vldr	s11, [r0, #60]	; 0x3c
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800972a:	ed90 6a10 	vldr	s12, [r0, #64]	; 0x40
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 800972e:	eee7 5a05 	vfma.f32	s11, s14, s10
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 8009732:	ed90 5a12 	vldr	s10, [r0, #72]	; 0x48
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 8009736:	edc0 5a0f 	vstr	s11, [r0, #60]	; 0x3c
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800973a:	eea7 6a25 	vfma.f32	s12, s14, s11
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 800973e:	eef0 5a45 	vmov.f32	s11, s10
 8009742:	eee7 5a06 	vfma.f32	s11, s14, s12
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 8009746:	ed80 6a10 	vstr	s12, [r0, #64]	; 0x40
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 800974a:	edc0 5a12 	vstr	s11, [r0, #72]	; 0x48
  }

  pHandle->ElapseTime += pHandle->SamplingTime;
 800974e:	ee77 7a87 	vadd.f32	s15, s15, s14
bool TC_RampCompleted(PosCtrl_Handle_t *pHandle)
{
  bool retVal = false;

  // Check that entire sequence (Acceleration - Cruise - Deceleration) is completed.
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 8009752:	ee36 7a87 	vadd.f32	s14, s13, s14
  pHandle->ElapseTime += pHandle->SamplingTime;
 8009756:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 800975a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800975e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009762:	dd0b      	ble.n	800977c <TC_MoveExecution+0x7c>
    if (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START) {
 8009764:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 8009768:	2b01      	cmp	r3, #1
      pHandle->AlignmentStatus = TC_ALIGNMENT_ERROR;
 800976a:	bf04      	itt	eq
 800976c:	2305      	moveq	r3, #5
 800976e:	f880 3062 	strbeq.w	r3, [r0, #98]	; 0x62
    pHandle->ElapseTime = 0;
 8009772:	2200      	movs	r2, #0
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8009774:	2300      	movs	r3, #0
    pHandle->ElapseTime = 0;
 8009776:	62c2      	str	r2, [r0, #44]	; 0x2c
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8009778:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
}
 800977c:	4770      	bx	lr
  else if (pHandle->ElapseTime < pHandle->SubStep[1])         // 2nd Sub-Step interval time of acceleration phase
 800977e:	ed90 7a05 	vldr	s14, [r0, #20]
 8009782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800978a:	d504      	bpl.n	8009796 <TC_MoveExecution+0x96>
  else if (pHandle->ElapseTime < pHandle->MovementDuration)   // 3rd Sub-Step interval time of deceleration phase
 800978c:	edd0 6a00 	vldr	s13, [r0]
  float jerkApplied = 0;
 8009790:	ed9f 5a21 	vldr	s10, [pc, #132]	; 8009818 <TC_MoveExecution+0x118>
 8009794:	e7c1      	b.n	800971a <TC_MoveExecution+0x1a>
  else if (pHandle->ElapseTime < pHandle->SubStep[2])         // 3rd Sub-Step interval time of acceleration phase
 8009796:	ed90 7a06 	vldr	s14, [r0, #24]
 800979a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800979e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a2:	d418      	bmi.n	80097d6 <TC_MoveExecution+0xd6>
  else if (pHandle->ElapseTime < pHandle->SubStep[3])         // Speed Cruise phase (after acceleration and before deceleration phases)
 80097a4:	ed90 7a07 	vldr	s14, [r0, #28]
 80097a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b0:	d50a      	bpl.n	80097c8 <TC_MoveExecution+0xc8>
    pHandle->Acceleration = 0.0f;
 80097b2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009818 <TC_MoveExecution+0x118>
    pHandle->Omega = pHandle->CruiseSpeed;
 80097b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  else if (pHandle->ElapseTime < pHandle->MovementDuration)   // 3rd Sub-Step interval time of deceleration phase
 80097b8:	edd0 6a00 	vldr	s13, [r0]
    pHandle->Acceleration = 0.0f;
 80097bc:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
  float jerkApplied = 0;
 80097c0:	eeb0 5a47 	vmov.f32	s10, s14
    pHandle->Omega = pHandle->CruiseSpeed;
 80097c4:	6403      	str	r3, [r0, #64]	; 0x40
 80097c6:	e7a8      	b.n	800971a <TC_MoveExecution+0x1a>
  else if (pHandle->ElapseTime < pHandle->SubStep[4])         // 1st Sub-Step interval time of deceleration phase
 80097c8:	ed90 7a08 	vldr	s14, [r0, #32]
 80097cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097d4:	d506      	bpl.n	80097e4 <TC_MoveExecution+0xe4>
    jerkApplied = -(pHandle->Jerk);
 80097d6:	ed90 5a0d 	vldr	s10, [r0, #52]	; 0x34
  else if (pHandle->ElapseTime < pHandle->MovementDuration)   // 3rd Sub-Step interval time of deceleration phase
 80097da:	edd0 6a00 	vldr	s13, [r0]
    jerkApplied = -(pHandle->Jerk);
 80097de:	eeb1 5a45 	vneg.f32	s10, s10
 80097e2:	e79a      	b.n	800971a <TC_MoveExecution+0x1a>
  else if (pHandle->ElapseTime < pHandle->SubStep[5])         // 2nd Sub-Step interval time of deceleration phase
 80097e4:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 80097e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097f0:	d4cc      	bmi.n	800978c <TC_MoveExecution+0x8c>
  else if (pHandle->ElapseTime < pHandle->MovementDuration)   // 3rd Sub-Step interval time of deceleration phase
 80097f2:	edd0 6a00 	vldr	s13, [r0]
 80097f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80097fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097fe:	d502      	bpl.n	8009806 <TC_MoveExecution+0x106>
    jerkApplied = pHandle->Jerk;
 8009800:	ed90 5a0d 	vldr	s10, [r0, #52]	; 0x34
 8009804:	e789      	b.n	800971a <TC_MoveExecution+0x1a>
    pHandle->Theta = pHandle->FinalAngle;
 8009806:	6882      	ldr	r2, [r0, #8]
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 8009808:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
    pHandle->Theta = pHandle->FinalAngle;
 800980c:	6482      	str	r2, [r0, #72]	; 0x48
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
 800980e:	2302      	movs	r3, #2
 8009810:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 8009814:	e79b      	b.n	800974e <TC_MoveExecution+0x4e>
 8009816:	bf00      	nop
 8009818:	00000000 	.word	0x00000000

0800981c <TC_PositionRegulation>:
{
 800981c:	b538      	push	{r3, r4, r5, lr}
  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 800981e:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8009822:	2b01      	cmp	r3, #1
{
 8009824:	4604      	mov	r4, r0
  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 8009826:	d034      	beq.n	8009892 <TC_PositionRegulation+0x76>
  if ( pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING )
 8009828:	2b03      	cmp	r3, #3
 800982a:	d10f      	bne.n	800984c <TC_PositionRegulation+0x30>
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800982c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8009830:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8009834:	ed94 6a0f 	vldr	s12, [r4, #60]	; 0x3c
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 8009838:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800983c:	eee6 7a26 	vfma.f32	s15, s12, s13
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 8009840:	eea6 7aa7 	vfma.f32	s14, s13, s15
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 8009844:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 8009848:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
  if (pHandle->PositionControlRegulation == ENABLE)
 800984c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8009850:	b903      	cbnz	r3, 8009854 <TC_PositionRegulation+0x38>
}
 8009852:	bd38      	pop	{r3, r4, r5, pc}
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 8009854:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800989c <TC_PositionRegulation+0x80>
 8009858:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800985c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 800985e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009866:	ee17 5a90 	vmov	r5, s15
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800986a:	f7ff fcfd 	bl	8009268 <STC_GetSpeedSensor>
 800986e:	f7ff fc99 	bl	80091a4 <SPD_GetMecAngle>
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 8009872:	1a29      	subs	r1, r5, r0
 8009874:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009876:	f7fe facb 	bl	8007e10 <PID_Controller>
    STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 800987a:	2100      	movs	r1, #0
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 800987c:	4605      	mov	r5, r0
    STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 800987e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8009880:	f7ff fd0c 	bl	800929c <STC_SetControlMode>
    STC_ExecRamp( pHandle->pSTC, hTorqueRef_Pos, 0 );
 8009884:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8009886:	4629      	mov	r1, r5
 8009888:	2200      	movs	r2, #0
}
 800988a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    STC_ExecRamp( pHandle->pSTC, hTorqueRef_Pos, 0 );
 800988e:	f7ff bd09 	b.w	80092a4 <STC_ExecRamp>
    TC_MoveExecution(pHandle);
 8009892:	f7ff ff35 	bl	8009700 <TC_MoveExecution>
  if ( pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING )
 8009896:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800989a:	e7c5      	b.n	8009828 <TC_PositionRegulation+0xc>
 800989c:	4622f983 	.word	0x4622f983

080098a0 <TC_EncAlignmentCommand>:
{
 80098a0:	b510      	push	{r4, lr}
  if (pHandle->AlignmentStatus == TC_ALIGNMENT_COMPLETED) {
 80098a2:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 80098a6:	2b02      	cmp	r3, #2
{
 80098a8:	b082      	sub	sp, #8
 80098aa:	4604      	mov	r4, r0
  if (pHandle->AlignmentStatus == TC_ALIGNMENT_COMPLETED) {
 80098ac:	d010      	beq.n	80098d0 <TC_EncAlignmentCommand+0x30>
    if (pHandle->AlignmentCfg == TC_ABSOLUTE_ALIGNMENT_SUPPORTED)
 80098ae:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 80098b2:	2b04      	cmp	r3, #4
 80098b4:	d011      	beq.n	80098da <TC_EncAlignmentCommand+0x3a>
      pHandle->pENC->_Super.wMecAngle = 0;
 80098b6:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80098b8:	2300      	movs	r3, #0
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 80098ba:	2102      	movs	r1, #2
      pHandle->PositionControlRegulation = ENABLE;
 80098bc:	2201      	movs	r2, #1
      pHandle->pENC->_Super.wMecAngle = 0;
 80098be:	6083      	str	r3, [r0, #8]
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 80098c0:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
      pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 80098c4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      pHandle->PositionControlRegulation = ENABLE;
 80098c8:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
}
 80098cc:	b002      	add	sp, #8
 80098ce:	bd10      	pop	{r4, pc}
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 80098d0:	2300      	movs	r3, #0
 80098d2:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
}
 80098d6:	b002      	add	sp, #8
 80098d8:	bd10      	pop	{r4, pc}
      pHandle->EncoderAbsoluteAligned = false;
 80098da:	2300      	movs	r3, #0
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 80098dc:	6e80      	ldr	r0, [r0, #104]	; 0x68
      pHandle->EncoderAbsoluteAligned = false;
 80098de:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 80098e2:	f7ff fcc1 	bl	8009268 <STC_GetSpeedSensor>
 80098e6:	f7ff fc5d 	bl	80091a4 <SPD_GetMecAngle>
  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 80098ea:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 80098ee:	9001      	str	r0, [sp, #4]
  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 80098f0:	2b03      	cmp	r3, #3
 80098f2:	d005      	beq.n	8009900 <TC_EncAlignmentCommand+0x60>
  if ( (pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0) )
 80098f4:	b123      	cbz	r3, 8009900 <TC_EncAlignmentCommand+0x60>
      pHandle->AlignmentStatus = TC_ZERO_ALIGNMENT_START;
 80098f6:	2301      	movs	r3, #1
 80098f8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 80098fc:	b002      	add	sp, #8
 80098fe:	bd10      	pop	{r4, pc}
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 8009900:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8009904:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80099c8 <TC_EncAlignmentCommand+0x128>
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 8009908:	eddf 5a30 	vldr	s11, [pc, #192]	; 80099cc <TC_EncAlignmentCommand+0x12c>
    pHandle->AngleStep = angleStep;
 800990c:	eddf 3a30 	vldr	s7, [pc, #192]	; 80099d0 <TC_EncAlignmentCommand+0x130>
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8009910:	ed9f 2a30 	vldr	s4, [pc, #192]	; 80099d4 <TC_EncAlignmentCommand+0x134>
    pHandle->AngleStep = angleStep;
 8009914:	edc4 3a03 	vstr	s7, [r4, #12]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8009918:	eec7 6a27 	vdiv.f32	s13, s14, s15
    pHandle->ElapseTime = 0.0f;
 800991c:	2300      	movs	r3, #0
    pHandle->PositionControlRegulation = ENABLE;
 800991e:	2201      	movs	r2, #1
 8009920:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    pHandle->ElapseTime = 0.0f;
 8009924:	62e3      	str	r3, [r4, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 8009926:	6423      	str	r3, [r4, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 8009928:	63e3      	str	r3, [r4, #60]	; 0x3c
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 800992a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800992e:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8009932:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 8009936:	ee27 6a86 	vmul.f32	s12, s15, s12
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800993a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800993e:	eddf 7a26 	vldr	s15, [pc, #152]	; 80099d8 <TC_EncAlignmentCommand+0x138>
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 8009942:	ed9d 7a01 	vldr	s14, [sp, #4]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8009946:	ee66 6a86 	vmul.f32	s13, s13, s12
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 800994a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800994e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8009952:	edc4 6a00 	vstr	s13, [r4]
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8009956:	ee67 6aa7 	vmul.f32	s13, s15, s15
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 800995a:	ee27 7a25 	vmul.f32	s14, s14, s11
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800995e:	ee26 6aa7 	vmul.f32	s12, s13, s15
    pHandle->FinalAngle = startingAngle + angleStep;
 8009962:	ee77 2a23 	vadd.f32	s5, s14, s7
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8009966:	eec2 3a06 	vdiv.f32	s7, s4, s12
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800996a:	ee76 6aa6 	vadd.f32	s13, s13, s13
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800996e:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8009972:	eef1 4a08 	vmov.f32	s9, #24	; 0x40c00000  6.0
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8009976:	eeb1 5a0c 	vmov.f32	s10, #28	; 0x40e00000  7.0
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800997a:	eef2 5a00 	vmov.f32	s11, #32	; 0x41000000  8.0
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 800997e:	ee37 3aa7 	vadd.f32	s6, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8009982:	ee27 4a84 	vmul.f32	s8, s15, s8
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8009986:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800998a:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800998e:	ee27 6aa5 	vmul.f32	s12, s15, s11
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8009992:	ee66 6aa3 	vmul.f32	s13, s13, s7
    pHandle->StartingAngle = startingAngle;
 8009996:	ed84 7a01 	vstr	s14, [r4, #4]
    pHandle->FinalAngle = startingAngle + angleStep;
 800999a:	edc4 2a02 	vstr	s5, [r4, #8]
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800999e:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 80099a2:	edc4 7a04 	vstr	s15, [r4, #16]
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 80099a6:	ed84 3a05 	vstr	s6, [r4, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 80099aa:	ed84 4a06 	vstr	s8, [r4, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 80099ae:	edc4 4a07 	vstr	s9, [r4, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 80099b2:	ed84 5a08 	vstr	s10, [r4, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 80099b6:	ed84 6a09 	vstr	s12, [r4, #36]	; 0x24
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80099ba:	edc4 3a0d 	vstr	s7, [r4, #52]	; 0x34
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80099be:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    pHandle->Theta = startingAngle;
 80099c2:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
  return (RetConfigStatus);
 80099c6:	e796      	b.n	80098f6 <TC_EncAlignmentCommand+0x56>
 80099c8:	3e638e39 	.word	0x3e638e39
 80099cc:	38c90fdb 	.word	0x38c90fdb
 80099d0:	40c90fdb 	.word	0x40c90fdb
 80099d4:	3f060a92 	.word	0x3f060a92
 80099d8:	3de38e39 	.word	0x3de38e39

080099dc <TC_EncoderReset>:
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval none
  */
void TC_EncoderReset(PosCtrl_Handle_t *pHandle)
{
  if ((!pHandle->EncoderAbsoluteAligned) && (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START))
 80099dc:	f890 2052 	ldrb.w	r2, [r0, #82]	; 0x52
{
 80099e0:	4603      	mov	r3, r0
  if ((!pHandle->EncoderAbsoluteAligned) && (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START))
 80099e2:	b922      	cbnz	r2, 80099ee <TC_EncoderReset+0x12>
 80099e4:	f890 c062 	ldrb.w	ip, [r0, #98]	; 0x62
 80099e8:	f1bc 0f01 	cmp.w	ip, #1
 80099ec:	d000      	beq.n	80099f0 <TC_EncoderReset+0x14>
    pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
    pHandle->Theta = 0.0f;
    ENC_SetMecAngle(pHandle->pENC , pHandle->MecAngleOffset);
  }
}
 80099ee:	4770      	bx	lr
    pHandle->MecAngleOffset = pHandle->pENC->_Super.hMecAngle;
 80099f0:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80099f2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80099f6:	f8a3 1054 	strh.w	r1, [r3, #84]	; 0x54
    pHandle->pENC->_Super.wMecAngle = 0;
 80099fa:	6082      	str	r2, [r0, #8]
    pHandle->EncoderAbsoluteAligned = true;
 80099fc:	f883 c052 	strb.w	ip, [r3, #82]	; 0x52
    pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 8009a00:	f04f 0c02 	mov.w	ip, #2
 8009a04:	f883 c062 	strb.w	ip, [r3, #98]	; 0x62
    pHandle->Theta = 0.0f;
 8009a08:	f04f 0c00 	mov.w	ip, #0
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8009a0c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    pHandle->Theta = 0.0f;
 8009a10:	f8c3 c048 	str.w	ip, [r3, #72]	; 0x48
    ENC_SetMecAngle(pHandle->pENC , pHandle->MecAngleOffset);
 8009a14:	f7fe b8bc 	b.w	8007b90 <ENC_SetMecAngle>

08009a18 <TC_GetCurrentPosition>:
  * @brief  Returns the current rotor mechanical angle, expressed in radiant.
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval current mechanical position
  */
float TC_GetCurrentPosition(PosCtrl_Handle_t *pHandle)
{
 8009a18:	b510      	push	{r4, lr}
 8009a1a:	4604      	mov	r4, r0
  printf("TC_GetCurrentPosition\r\n");
 8009a1c:	4808      	ldr	r0, [pc, #32]	; (8009a40 <TC_GetCurrentPosition+0x28>)
 8009a1e:	f000 febf 	bl	800a7a0 <puts>
  return ((float)( (SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16) );
 8009a22:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8009a24:	f7ff fc20 	bl	8009268 <STC_GetSpeedSensor>
 8009a28:	f7ff fbbc 	bl	80091a4 <SPD_GetMecAngle>
 8009a2c:	ee07 0a90 	vmov	s15, r0
 8009a30:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8009a44 <TC_GetCurrentPosition+0x2c>
 8009a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8009a38:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009a3c:	bd10      	pop	{r4, pc}
 8009a3e:	bf00      	nop
 8009a40:	0800ce28 	.word	0x0800ce28
 8009a44:	38c90fdb 	.word	0x38c90fdb

08009a48 <TC_GetTargetPosition>:
  * @retval Target mechanical position
  */
float TC_GetTargetPosition(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->FinalAngle);
}
 8009a48:	ed90 0a02 	vldr	s0, [r0, #8]
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop

08009a50 <TC_GetMoveDuration>:
  * @retval Duration of programmed movement
  */
float TC_GetMoveDuration(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->MovementDuration);
}
 8009a50:	ed90 0a00 	vldr	s0, [r0]
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop

08009a58 <TC_IncTick>:
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval none
  */
void TC_IncTick(PosCtrl_Handle_t *pHandle)
{
  pHandle->TcTick++;
 8009a58:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	6583      	str	r3, [r0, #88]	; 0x58
}
 8009a5e:	4770      	bx	lr

08009a60 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8009a60:	f7fe b8c0 	b.w	8007be4 <FCP_Init>

08009a64 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8009a64:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
 8009a68:	b16b      	cbz	r3, 8009a86 <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8009a6a:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8009a6e:	4602      	mov	r2, r0
 8009a70:	b1a3      	cbz	r3, 8009a9c <UFCP_TX_IRQ_Handler+0x38>
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d108      	bne.n	8009a88 <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8009a76:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8009a78:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8009a7c:	6281      	str	r1, [r0, #40]	; 0x28

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 8009a7e:	3301      	adds	r3, #1
 8009a80:	f882 3098 	strb.w	r3, [r2, #152]	; 0x98
 8009a84:	4770      	bx	lr
 8009a86:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8009a88:	7d41      	ldrb	r1, [r0, #21]
 8009a8a:	3101      	adds	r1, #1
 8009a8c:	428b      	cmp	r3, r1
 8009a8e:	dc07      	bgt.n	8009aa0 <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8009a90:	18c1      	adds	r1, r0, r3
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8009a92:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 8009a96:	7d09      	ldrb	r1, [r1, #20]
 8009a98:	6281      	str	r1, [r0, #40]	; 0x28
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8009a9a:	e7f0      	b.n	8009a7e <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8009a9c:	7d01      	ldrb	r1, [r0, #20]
        break;
 8009a9e:	e7eb      	b.n	8009a78 <UFCP_TX_IRQ_Handler+0x14>
{
 8009aa0:	b410      	push	{r4}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8009aa2:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
 8009aa6:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
 8009aaa:	628b      	str	r3, [r1, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aac:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009ab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab4:	e841 3400 	strex	r4, r3, [r1]
 8009ab8:	2c00      	cmp	r4, #0
 8009aba:	d1f7      	bne.n	8009aac <UFCP_TX_IRQ_Handler+0x48>
    }
    else
    {
      LL_USART_DisableIT_TXE(pHandle->USARTx);
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8009abc:	f882 4097 	strb.w	r4, [r2, #151]	; 0x97

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8009ac0:	e9d2 0300 	ldrd	r0, r3, [r2]
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8009ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8009ac8:	4718      	bx	r3
 8009aca:	bf00      	nop

08009acc <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8009acc:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8009ad0:	b973      	cbnz	r3, 8009af0 <UFCP_Receive+0x24>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8009ad2:	2301      	movs	r3, #1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ad4:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 8009ad8:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009adc:	e852 3f00 	ldrex	r3, [r2]
 8009ae0:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae4:	e842 3100 	strex	r1, r3, [r2]
 8009ae8:	2900      	cmp	r1, #0
 8009aea:	d1f7      	bne.n	8009adc <UFCP_Receive+0x10>

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8009aec:	2002      	movs	r0, #2
 8009aee:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8009af0:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8009af2:	4770      	bx	lr

08009af4 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8009af4:	b570      	push	{r4, r5, r6, lr}
 8009af6:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8009af8:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8009afc:	2800      	cmp	r0, #0
 8009afe:	d147      	bne.n	8009b90 <UFCP_Send+0x9c>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 8009b00:	1e58      	subs	r0, r3, #1
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8009b02:	f104 0616 	add.w	r6, r4, #22
    pHandle->TxFrame.Code = code;
 8009b06:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8009b08:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8009b0a:	b2c0      	uxtb	r0, r0
 8009b0c:	b343      	cbz	r3, 8009b60 <UFCP_Send+0x6c>
 8009b0e:	1c51      	adds	r1, r2, #1
 8009b10:	1a75      	subs	r5, r6, r1
 8009b12:	2d02      	cmp	r5, #2
 8009b14:	d93e      	bls.n	8009b94 <UFCP_Send+0xa0>
 8009b16:	2807      	cmp	r0, #7
 8009b18:	d93c      	bls.n	8009b94 <UFCP_Send+0xa0>
 8009b1a:	089d      	lsrs	r5, r3, #2
 8009b1c:	3d01      	subs	r5, #1
 8009b1e:	b2e9      	uxtb	r1, r5
 8009b20:	1d15      	adds	r5, r2, #4
 8009b22:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8009b26:	46b4      	mov	ip, r6
 8009b28:	4611      	mov	r1, r2
 8009b2a:	f851 eb04 	ldr.w	lr, [r1], #4
 8009b2e:	f84c eb04 	str.w	lr, [ip], #4
 8009b32:	42a9      	cmp	r1, r5
 8009b34:	d1f9      	bne.n	8009b2a <UFCP_Send+0x36>
 8009b36:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 8009b3a:	1a40      	subs	r0, r0, r1
 8009b3c:	428b      	cmp	r3, r1
 8009b3e:	b2c0      	uxtb	r0, r0
 8009b40:	eb02 0c01 	add.w	ip, r2, r1
 8009b44:	eb06 0501 	add.w	r5, r6, r1
 8009b48:	d00a      	beq.n	8009b60 <UFCP_Send+0x6c>
 8009b4a:	5c53      	ldrb	r3, [r2, r1]
 8009b4c:	5473      	strb	r3, [r6, r1]
 8009b4e:	b138      	cbz	r0, 8009b60 <UFCP_Send+0x6c>
 8009b50:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8009b54:	706b      	strb	r3, [r5, #1]
 8009b56:	2801      	cmp	r0, #1
 8009b58:	d002      	beq.n	8009b60 <UFCP_Send+0x6c>
 8009b5a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8009b5e:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8009b60:	f104 0014 	add.w	r0, r4, #20
 8009b64:	f7fe f852 	bl	8007c0c <FCP_CalcCRC>

    pHandle->TxFrameLevel = 0;
 8009b68:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8009b6a:	2301      	movs	r3, #1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009b6c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8009b70:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 8009b74:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8009b78:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7c:	e852 3f00 	ldrex	r3, [r2]
 8009b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b84:	e842 3100 	strex	r1, r3, [r2]
 8009b88:	2900      	cmp	r1, #0
 8009b8a:	d1f7      	bne.n	8009b7c <UFCP_Send+0x88>
 8009b8c:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 8009b8e:	bd70      	pop	{r4, r5, r6, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8009b90:	2001      	movs	r0, #1
}
 8009b92:	bd70      	pop	{r4, r5, r6, pc}
 8009b94:	f104 0015 	add.w	r0, r4, #21
 8009b98:	4413      	add	r3, r2
 8009b9a:	e000      	b.n	8009b9e <UFCP_Send+0xaa>
 8009b9c:	3101      	adds	r1, #1
    while ( size-- ) *dest++ = *buffer++;
 8009b9e:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8009ba2:	f800 2f01 	strb.w	r2, [r0, #1]!
 8009ba6:	4299      	cmp	r1, r3
 8009ba8:	d1f8      	bne.n	8009b9c <UFCP_Send+0xa8>
 8009baa:	e7d9      	b.n	8009b60 <UFCP_Send+0x6c>

08009bac <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8009bac:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8009bb0:	b90b      	cbnz	r3, 8009bb6 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8009bb2:	4830      	ldr	r0, [pc, #192]	; (8009c74 <UFCP_RX_IRQ_Handler+0xc8>)
}
 8009bb4:	4770      	bx	lr
{
 8009bb6:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8009bb8:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 8009bbc:	b083      	sub	sp, #12
 8009bbe:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8009bc0:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 8009bc2:	b393      	cbz	r3, 8009c2a <UFCP_RX_IRQ_Handler+0x7e>
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d03a      	beq.n	8009c3e <UFCP_RX_IRQ_Handler+0x92>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8009bc8:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 8009bcc:	3101      	adds	r1, #1
 8009bce:	428b      	cmp	r3, r1
 8009bd0:	dc08      	bgt.n	8009be4 <UFCP_RX_IRQ_Handler+0x38>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8009bd2:	18c1      	adds	r1, r0, r3
          pBaseHandle->RxFrameLevel++;
 8009bd4:	3301      	adds	r3, #1
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8009bd6:	4827      	ldr	r0, [pc, #156]	; (8009c74 <UFCP_RX_IRQ_Handler+0xc8>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8009bd8:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 8009bdc:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8009be0:	b003      	add	sp, #12
 8009be2:	bd30      	pop	{r4, r5, pc}
          pBaseHandle->RxTimeoutCountdown = 0;
 8009be4:	2300      	movs	r3, #0
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009be6:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8009bea:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 8009bee:	8243      	strh	r3, [r0, #18]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf0:	e851 3f00 	ldrex	r3, [r1]
 8009bf4:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	e841 3200 	strex	r2, r3, [r1]
 8009bfc:	2a00      	cmp	r2, #0
 8009bfe:	d1f7      	bne.n	8009bf0 <UFCP_RX_IRQ_Handler+0x44>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8009c00:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8009c04:	f104 0099 	add.w	r0, r4, #153	; 0x99
 8009c08:	f7fe f800 	bl	8007c0c <FCP_CalcCRC>
 8009c0c:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8009c10:	4283      	cmp	r3, r0
 8009c12:	d122      	bne.n	8009c5a <UFCP_RX_IRQ_Handler+0xae>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8009c14:	6820      	ldr	r0, [r4, #0]
 8009c16:	68a5      	ldr	r5, [r4, #8]
 8009c18:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8009c1c:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 8009c20:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8009c24:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8009c26:	4814      	ldr	r0, [pc, #80]	; (8009c78 <UFCP_RX_IRQ_Handler+0xcc>)
 8009c28:	e7da      	b.n	8009be0 <UFCP_RX_IRQ_Handler+0x34>
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8009c2a:	8a01      	ldrh	r1, [r0, #16]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8009c2c:	4813      	ldr	r0, [pc, #76]	; (8009c7c <UFCP_RX_IRQ_Handler+0xd0>)
        pBaseHandle->RxFrame.Code = rx_byte;
 8009c2e:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 8009c32:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8009c34:	8261      	strh	r1, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 8009c36:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8009c3a:	b003      	add	sp, #12
 8009c3c:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8009c3e:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 8009c40:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8009c44:	d404      	bmi.n	8009c50 <UFCP_RX_IRQ_Handler+0xa4>
        pBaseHandle->RxFrameLevel++;
 8009c46:	2302      	movs	r3, #2
 8009c48:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8009c4c:	4809      	ldr	r0, [pc, #36]	; (8009c74 <UFCP_RX_IRQ_Handler+0xc8>)
 8009c4e:	e7c7      	b.n	8009be0 <UFCP_RX_IRQ_Handler+0x34>
          pBaseHandle->RxFrameLevel =0 ;
 8009c50:	2300      	movs	r3, #0
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8009c52:	4808      	ldr	r0, [pc, #32]	; (8009c74 <UFCP_RX_IRQ_Handler+0xc8>)
          pBaseHandle->RxFrameLevel =0 ;
 8009c54:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
 8009c58:	e7c2      	b.n	8009be0 <UFCP_RX_IRQ_Handler+0x34>
            error_code = FCP_MSG_RX_BAD_CRC;
 8009c5a:	250a      	movs	r5, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	f10d 0207 	add.w	r2, sp, #7
 8009c62:	21ff      	movs	r1, #255	; 0xff
 8009c64:	4620      	mov	r0, r4
            error_code = FCP_MSG_RX_BAD_CRC;
 8009c66:	f88d 5007 	strb.w	r5, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8009c6a:	f7ff ff43 	bl	8009af4 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8009c6e:	4802      	ldr	r0, [pc, #8]	; (8009c78 <UFCP_RX_IRQ_Handler+0xcc>)
  return ret_val;
 8009c70:	e7b6      	b.n	8009be0 <UFCP_RX_IRQ_Handler+0x34>
 8009c72:	bf00      	nop
 8009c74:	0800ce40 	.word	0x0800ce40
 8009c78:	0800ce44 	.word	0x0800ce44
 8009c7c:	0800ce42 	.word	0x0800ce42

08009c80 <UFCP_OVR_IRQ_Handler>:
{
 8009c80:	b500      	push	{lr}
 8009c82:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 8009c84:	f04f 0c08 	mov.w	ip, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8009c88:	2301      	movs	r3, #1
 8009c8a:	f10d 0207 	add.w	r2, sp, #7
 8009c8e:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8009c90:	f88d c007 	strb.w	ip, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8009c94:	f7ff ff2e 	bl	8009af4 <UFCP_Send>
}
 8009c98:	b003      	add	sp, #12
 8009c9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c9e:	bf00      	nop

08009ca0 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 8009ca6:	4770      	bx	lr

08009ca8 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 8009ca8:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8009caa:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
  pHandle->_Super.bSpeedErrorNumber = 0u;
 8009cac:	7003      	strb	r3, [r0, #0]
  pHandle->wElSpeedDpp32 = 0;
 8009cae:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.hElAngle = 0;
 8009cb2:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 8009cb4:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 8009cb6:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 8009cb8:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 8009cba:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8009cbc:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->hElAngleAccu = 0;
 8009cbe:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop

08009cc4 <VSS_Init>:
{
 8009cc4:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 8009cc6:	f7ff ffef 	bl	8009ca8 <VSS_Clear>
}
 8009cca:	bd08      	pop	{r3, pc}

08009ccc <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8009ccc:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 8009cce:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8009cd0:	fb91 f3f3 	sdiv	r3, r1, r3
  pHandle->_Super.hElAngle = hMecAngle;
 8009cd4:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8009cd6:	80c3      	strh	r3, [r0, #6]
}
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop

08009cdc <VSS_SetMecAcceleration>:
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 8009cdc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8009ce0:	b99b      	cbnz	r3, 8009d0a <VSS_SetMecAcceleration+0x2e>
{
 8009ce2:	b510      	push	{r4, lr}
  {
    if ( hDurationms == 0u )
 8009ce4:	b992      	cbnz	r2, 8009d0c <VSS_SetMecAcceleration+0x30>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8009ce6:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8009ce8:	69c4      	ldr	r4, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8009cea:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8009cec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8009cf0:	fb04 fc01 	mul.w	ip, r4, r1
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8009cf4:	005b      	lsls	r3, r3, #1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8009cf6:	fb9c f3f3 	sdiv	r3, ip, r3

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8009cfa:	f890 c001 	ldrb.w	ip, [r0, #1]

      pHandle->hRemainingStep = 0u;
 8009cfe:	8502      	strh	r2, [r0, #40]	; 0x28
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8009d00:	fb1c f303 	smulbb	r3, ip, r3
 8009d04:	81c3      	strh	r3, [r0, #14]

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8009d06:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 8009d08:	bd10      	pop	{r4, pc}
 8009d0a:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8009d0c:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8009d0e:	4c12      	ldr	r4, [pc, #72]	; (8009d58 <VSS_SetMecAcceleration+0x7c>)
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8009d10:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 8009d14:	f890 c001 	ldrb.w	ip, [r0, #1]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8009d18:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8009d1a:	fb03 f202 	mul.w	r2, r3, r2
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8009d1e:	fba4 2302 	umull	r2, r3, r4, r2
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8009d22:	f3c3 138f 	ubfx	r3, r3, #6, #16
      hNbrStep++;
 8009d26:	3301      	adds	r3, #1
 8009d28:	b29a      	uxth	r2, r3
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8009d2a:	8b43      	ldrh	r3, [r0, #26]
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8009d2c:	69c4      	ldr	r4, [r0, #28]
      pHandle->hRemainingStep = hNbrStep;
 8009d2e:	8502      	strh	r2, [r0, #40]	; 0x28
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8009d30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8009d34:	fb04 f101 	mul.w	r1, r4, r1
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8009d38:	005b      	lsls	r3, r3, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8009d3a:	fb91 f3f3 	sdiv	r3, r1, r3
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8009d3e:	fb9e f1fc 	sdiv	r1, lr, ip
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8009d42:	1a5b      	subs	r3, r3, r1
 8009d44:	041b      	lsls	r3, r3, #16
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8009d46:	ea4f 410e 	mov.w	r1, lr, lsl #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8009d4a:	fb93 f3f2 	sdiv	r3, r3, r2
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8009d4e:	fb0c f303 	mul.w	r3, ip, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8009d52:	e9c0 3108 	strd	r3, r1, [r0, #32]
}
 8009d56:	bd10      	pop	{r4, pc}
 8009d58:	10624dd3 	.word	0x10624dd3

08009d5c <__errno>:
 8009d5c:	4b01      	ldr	r3, [pc, #4]	; (8009d64 <__errno+0x8>)
 8009d5e:	6818      	ldr	r0, [r3, #0]
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	2000068c 	.word	0x2000068c

08009d68 <__libc_init_array>:
 8009d68:	b570      	push	{r4, r5, r6, lr}
 8009d6a:	4d0d      	ldr	r5, [pc, #52]	; (8009da0 <__libc_init_array+0x38>)
 8009d6c:	4c0d      	ldr	r4, [pc, #52]	; (8009da4 <__libc_init_array+0x3c>)
 8009d6e:	1b64      	subs	r4, r4, r5
 8009d70:	10a4      	asrs	r4, r4, #2
 8009d72:	2600      	movs	r6, #0
 8009d74:	42a6      	cmp	r6, r4
 8009d76:	d109      	bne.n	8009d8c <__libc_init_array+0x24>
 8009d78:	4d0b      	ldr	r5, [pc, #44]	; (8009da8 <__libc_init_array+0x40>)
 8009d7a:	4c0c      	ldr	r4, [pc, #48]	; (8009dac <__libc_init_array+0x44>)
 8009d7c:	f002 fde2 	bl	800c944 <_init>
 8009d80:	1b64      	subs	r4, r4, r5
 8009d82:	10a4      	asrs	r4, r4, #2
 8009d84:	2600      	movs	r6, #0
 8009d86:	42a6      	cmp	r6, r4
 8009d88:	d105      	bne.n	8009d96 <__libc_init_array+0x2e>
 8009d8a:	bd70      	pop	{r4, r5, r6, pc}
 8009d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d90:	4798      	blx	r3
 8009d92:	3601      	adds	r6, #1
 8009d94:	e7ee      	b.n	8009d74 <__libc_init_array+0xc>
 8009d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d9a:	4798      	blx	r3
 8009d9c:	3601      	adds	r6, #1
 8009d9e:	e7f2      	b.n	8009d86 <__libc_init_array+0x1e>
 8009da0:	0800d22c 	.word	0x0800d22c
 8009da4:	0800d22c 	.word	0x0800d22c
 8009da8:	0800d22c 	.word	0x0800d22c
 8009dac:	0800d230 	.word	0x0800d230

08009db0 <memset>:
 8009db0:	4402      	add	r2, r0
 8009db2:	4603      	mov	r3, r0
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d100      	bne.n	8009dba <memset+0xa>
 8009db8:	4770      	bx	lr
 8009dba:	f803 1b01 	strb.w	r1, [r3], #1
 8009dbe:	e7f9      	b.n	8009db4 <memset+0x4>

08009dc0 <__cvt>:
 8009dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc4:	ec55 4b10 	vmov	r4, r5, d0
 8009dc8:	2d00      	cmp	r5, #0
 8009dca:	460e      	mov	r6, r1
 8009dcc:	4619      	mov	r1, r3
 8009dce:	462b      	mov	r3, r5
 8009dd0:	bfbb      	ittet	lt
 8009dd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009dd6:	461d      	movlt	r5, r3
 8009dd8:	2300      	movge	r3, #0
 8009dda:	232d      	movlt	r3, #45	; 0x2d
 8009ddc:	700b      	strb	r3, [r1, #0]
 8009dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009de0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009de4:	4691      	mov	r9, r2
 8009de6:	f023 0820 	bic.w	r8, r3, #32
 8009dea:	bfbc      	itt	lt
 8009dec:	4622      	movlt	r2, r4
 8009dee:	4614      	movlt	r4, r2
 8009df0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009df4:	d005      	beq.n	8009e02 <__cvt+0x42>
 8009df6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009dfa:	d100      	bne.n	8009dfe <__cvt+0x3e>
 8009dfc:	3601      	adds	r6, #1
 8009dfe:	2102      	movs	r1, #2
 8009e00:	e000      	b.n	8009e04 <__cvt+0x44>
 8009e02:	2103      	movs	r1, #3
 8009e04:	ab03      	add	r3, sp, #12
 8009e06:	9301      	str	r3, [sp, #4]
 8009e08:	ab02      	add	r3, sp, #8
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	ec45 4b10 	vmov	d0, r4, r5
 8009e10:	4653      	mov	r3, sl
 8009e12:	4632      	mov	r2, r6
 8009e14:	f000 fe38 	bl	800aa88 <_dtoa_r>
 8009e18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009e1c:	4607      	mov	r7, r0
 8009e1e:	d102      	bne.n	8009e26 <__cvt+0x66>
 8009e20:	f019 0f01 	tst.w	r9, #1
 8009e24:	d022      	beq.n	8009e6c <__cvt+0xac>
 8009e26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e2a:	eb07 0906 	add.w	r9, r7, r6
 8009e2e:	d110      	bne.n	8009e52 <__cvt+0x92>
 8009e30:	783b      	ldrb	r3, [r7, #0]
 8009e32:	2b30      	cmp	r3, #48	; 0x30
 8009e34:	d10a      	bne.n	8009e4c <__cvt+0x8c>
 8009e36:	2200      	movs	r2, #0
 8009e38:	2300      	movs	r3, #0
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	f7f6 fe6b 	bl	8000b18 <__aeabi_dcmpeq>
 8009e42:	b918      	cbnz	r0, 8009e4c <__cvt+0x8c>
 8009e44:	f1c6 0601 	rsb	r6, r6, #1
 8009e48:	f8ca 6000 	str.w	r6, [sl]
 8009e4c:	f8da 3000 	ldr.w	r3, [sl]
 8009e50:	4499      	add	r9, r3
 8009e52:	2200      	movs	r2, #0
 8009e54:	2300      	movs	r3, #0
 8009e56:	4620      	mov	r0, r4
 8009e58:	4629      	mov	r1, r5
 8009e5a:	f7f6 fe5d 	bl	8000b18 <__aeabi_dcmpeq>
 8009e5e:	b108      	cbz	r0, 8009e64 <__cvt+0xa4>
 8009e60:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e64:	2230      	movs	r2, #48	; 0x30
 8009e66:	9b03      	ldr	r3, [sp, #12]
 8009e68:	454b      	cmp	r3, r9
 8009e6a:	d307      	bcc.n	8009e7c <__cvt+0xbc>
 8009e6c:	9b03      	ldr	r3, [sp, #12]
 8009e6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e70:	1bdb      	subs	r3, r3, r7
 8009e72:	4638      	mov	r0, r7
 8009e74:	6013      	str	r3, [r2, #0]
 8009e76:	b004      	add	sp, #16
 8009e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e7c:	1c59      	adds	r1, r3, #1
 8009e7e:	9103      	str	r1, [sp, #12]
 8009e80:	701a      	strb	r2, [r3, #0]
 8009e82:	e7f0      	b.n	8009e66 <__cvt+0xa6>

08009e84 <__exponent>:
 8009e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e86:	4603      	mov	r3, r0
 8009e88:	2900      	cmp	r1, #0
 8009e8a:	bfb8      	it	lt
 8009e8c:	4249      	neglt	r1, r1
 8009e8e:	f803 2b02 	strb.w	r2, [r3], #2
 8009e92:	bfb4      	ite	lt
 8009e94:	222d      	movlt	r2, #45	; 0x2d
 8009e96:	222b      	movge	r2, #43	; 0x2b
 8009e98:	2909      	cmp	r1, #9
 8009e9a:	7042      	strb	r2, [r0, #1]
 8009e9c:	dd2a      	ble.n	8009ef4 <__exponent+0x70>
 8009e9e:	f10d 0407 	add.w	r4, sp, #7
 8009ea2:	46a4      	mov	ip, r4
 8009ea4:	270a      	movs	r7, #10
 8009ea6:	46a6      	mov	lr, r4
 8009ea8:	460a      	mov	r2, r1
 8009eaa:	fb91 f6f7 	sdiv	r6, r1, r7
 8009eae:	fb07 1516 	mls	r5, r7, r6, r1
 8009eb2:	3530      	adds	r5, #48	; 0x30
 8009eb4:	2a63      	cmp	r2, #99	; 0x63
 8009eb6:	f104 34ff 	add.w	r4, r4, #4294967295
 8009eba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	dcf1      	bgt.n	8009ea6 <__exponent+0x22>
 8009ec2:	3130      	adds	r1, #48	; 0x30
 8009ec4:	f1ae 0502 	sub.w	r5, lr, #2
 8009ec8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009ecc:	1c44      	adds	r4, r0, #1
 8009ece:	4629      	mov	r1, r5
 8009ed0:	4561      	cmp	r1, ip
 8009ed2:	d30a      	bcc.n	8009eea <__exponent+0x66>
 8009ed4:	f10d 0209 	add.w	r2, sp, #9
 8009ed8:	eba2 020e 	sub.w	r2, r2, lr
 8009edc:	4565      	cmp	r5, ip
 8009ede:	bf88      	it	hi
 8009ee0:	2200      	movhi	r2, #0
 8009ee2:	4413      	add	r3, r2
 8009ee4:	1a18      	subs	r0, r3, r0
 8009ee6:	b003      	add	sp, #12
 8009ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009eee:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009ef2:	e7ed      	b.n	8009ed0 <__exponent+0x4c>
 8009ef4:	2330      	movs	r3, #48	; 0x30
 8009ef6:	3130      	adds	r1, #48	; 0x30
 8009ef8:	7083      	strb	r3, [r0, #2]
 8009efa:	70c1      	strb	r1, [r0, #3]
 8009efc:	1d03      	adds	r3, r0, #4
 8009efe:	e7f1      	b.n	8009ee4 <__exponent+0x60>

08009f00 <_printf_float>:
 8009f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f04:	ed2d 8b02 	vpush	{d8}
 8009f08:	b08d      	sub	sp, #52	; 0x34
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009f10:	4616      	mov	r6, r2
 8009f12:	461f      	mov	r7, r3
 8009f14:	4605      	mov	r5, r0
 8009f16:	f001 fd5d 	bl	800b9d4 <_localeconv_r>
 8009f1a:	f8d0 a000 	ldr.w	sl, [r0]
 8009f1e:	4650      	mov	r0, sl
 8009f20:	f7f6 f97e 	bl	8000220 <strlen>
 8009f24:	2300      	movs	r3, #0
 8009f26:	930a      	str	r3, [sp, #40]	; 0x28
 8009f28:	6823      	ldr	r3, [r4, #0]
 8009f2a:	9305      	str	r3, [sp, #20]
 8009f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8009f30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009f34:	3307      	adds	r3, #7
 8009f36:	f023 0307 	bic.w	r3, r3, #7
 8009f3a:	f103 0208 	add.w	r2, r3, #8
 8009f3e:	f8c8 2000 	str.w	r2, [r8]
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009f4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009f4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f52:	9307      	str	r3, [sp, #28]
 8009f54:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f58:	ee08 0a10 	vmov	s16, r0
 8009f5c:	4b9f      	ldr	r3, [pc, #636]	; (800a1dc <_printf_float+0x2dc>)
 8009f5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f62:	f04f 32ff 	mov.w	r2, #4294967295
 8009f66:	f7f6 fe09 	bl	8000b7c <__aeabi_dcmpun>
 8009f6a:	bb88      	cbnz	r0, 8009fd0 <_printf_float+0xd0>
 8009f6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f70:	4b9a      	ldr	r3, [pc, #616]	; (800a1dc <_printf_float+0x2dc>)
 8009f72:	f04f 32ff 	mov.w	r2, #4294967295
 8009f76:	f7f6 fde3 	bl	8000b40 <__aeabi_dcmple>
 8009f7a:	bb48      	cbnz	r0, 8009fd0 <_printf_float+0xd0>
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	2300      	movs	r3, #0
 8009f80:	4640      	mov	r0, r8
 8009f82:	4649      	mov	r1, r9
 8009f84:	f7f6 fdd2 	bl	8000b2c <__aeabi_dcmplt>
 8009f88:	b110      	cbz	r0, 8009f90 <_printf_float+0x90>
 8009f8a:	232d      	movs	r3, #45	; 0x2d
 8009f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f90:	4b93      	ldr	r3, [pc, #588]	; (800a1e0 <_printf_float+0x2e0>)
 8009f92:	4894      	ldr	r0, [pc, #592]	; (800a1e4 <_printf_float+0x2e4>)
 8009f94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009f98:	bf94      	ite	ls
 8009f9a:	4698      	movls	r8, r3
 8009f9c:	4680      	movhi	r8, r0
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	6123      	str	r3, [r4, #16]
 8009fa2:	9b05      	ldr	r3, [sp, #20]
 8009fa4:	f023 0204 	bic.w	r2, r3, #4
 8009fa8:	6022      	str	r2, [r4, #0]
 8009faa:	f04f 0900 	mov.w	r9, #0
 8009fae:	9700      	str	r7, [sp, #0]
 8009fb0:	4633      	mov	r3, r6
 8009fb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8009fb4:	4621      	mov	r1, r4
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f000 f9d8 	bl	800a36c <_printf_common>
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	f040 8090 	bne.w	800a0e2 <_printf_float+0x1e2>
 8009fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc6:	b00d      	add	sp, #52	; 0x34
 8009fc8:	ecbd 8b02 	vpop	{d8}
 8009fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd0:	4642      	mov	r2, r8
 8009fd2:	464b      	mov	r3, r9
 8009fd4:	4640      	mov	r0, r8
 8009fd6:	4649      	mov	r1, r9
 8009fd8:	f7f6 fdd0 	bl	8000b7c <__aeabi_dcmpun>
 8009fdc:	b140      	cbz	r0, 8009ff0 <_printf_float+0xf0>
 8009fde:	464b      	mov	r3, r9
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	bfbc      	itt	lt
 8009fe4:	232d      	movlt	r3, #45	; 0x2d
 8009fe6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009fea:	487f      	ldr	r0, [pc, #508]	; (800a1e8 <_printf_float+0x2e8>)
 8009fec:	4b7f      	ldr	r3, [pc, #508]	; (800a1ec <_printf_float+0x2ec>)
 8009fee:	e7d1      	b.n	8009f94 <_printf_float+0x94>
 8009ff0:	6863      	ldr	r3, [r4, #4]
 8009ff2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009ff6:	9206      	str	r2, [sp, #24]
 8009ff8:	1c5a      	adds	r2, r3, #1
 8009ffa:	d13f      	bne.n	800a07c <_printf_float+0x17c>
 8009ffc:	2306      	movs	r3, #6
 8009ffe:	6063      	str	r3, [r4, #4]
 800a000:	9b05      	ldr	r3, [sp, #20]
 800a002:	6861      	ldr	r1, [r4, #4]
 800a004:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a008:	2300      	movs	r3, #0
 800a00a:	9303      	str	r3, [sp, #12]
 800a00c:	ab0a      	add	r3, sp, #40	; 0x28
 800a00e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a012:	ab09      	add	r3, sp, #36	; 0x24
 800a014:	ec49 8b10 	vmov	d0, r8, r9
 800a018:	9300      	str	r3, [sp, #0]
 800a01a:	6022      	str	r2, [r4, #0]
 800a01c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a020:	4628      	mov	r0, r5
 800a022:	f7ff fecd 	bl	8009dc0 <__cvt>
 800a026:	9b06      	ldr	r3, [sp, #24]
 800a028:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a02a:	2b47      	cmp	r3, #71	; 0x47
 800a02c:	4680      	mov	r8, r0
 800a02e:	d108      	bne.n	800a042 <_printf_float+0x142>
 800a030:	1cc8      	adds	r0, r1, #3
 800a032:	db02      	blt.n	800a03a <_printf_float+0x13a>
 800a034:	6863      	ldr	r3, [r4, #4]
 800a036:	4299      	cmp	r1, r3
 800a038:	dd41      	ble.n	800a0be <_printf_float+0x1be>
 800a03a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a03e:	fa5f fb8b 	uxtb.w	fp, fp
 800a042:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a046:	d820      	bhi.n	800a08a <_printf_float+0x18a>
 800a048:	3901      	subs	r1, #1
 800a04a:	465a      	mov	r2, fp
 800a04c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a050:	9109      	str	r1, [sp, #36]	; 0x24
 800a052:	f7ff ff17 	bl	8009e84 <__exponent>
 800a056:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a058:	1813      	adds	r3, r2, r0
 800a05a:	2a01      	cmp	r2, #1
 800a05c:	4681      	mov	r9, r0
 800a05e:	6123      	str	r3, [r4, #16]
 800a060:	dc02      	bgt.n	800a068 <_printf_float+0x168>
 800a062:	6822      	ldr	r2, [r4, #0]
 800a064:	07d2      	lsls	r2, r2, #31
 800a066:	d501      	bpl.n	800a06c <_printf_float+0x16c>
 800a068:	3301      	adds	r3, #1
 800a06a:	6123      	str	r3, [r4, #16]
 800a06c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a070:	2b00      	cmp	r3, #0
 800a072:	d09c      	beq.n	8009fae <_printf_float+0xae>
 800a074:	232d      	movs	r3, #45	; 0x2d
 800a076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a07a:	e798      	b.n	8009fae <_printf_float+0xae>
 800a07c:	9a06      	ldr	r2, [sp, #24]
 800a07e:	2a47      	cmp	r2, #71	; 0x47
 800a080:	d1be      	bne.n	800a000 <_printf_float+0x100>
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1bc      	bne.n	800a000 <_printf_float+0x100>
 800a086:	2301      	movs	r3, #1
 800a088:	e7b9      	b.n	8009ffe <_printf_float+0xfe>
 800a08a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a08e:	d118      	bne.n	800a0c2 <_printf_float+0x1c2>
 800a090:	2900      	cmp	r1, #0
 800a092:	6863      	ldr	r3, [r4, #4]
 800a094:	dd0b      	ble.n	800a0ae <_printf_float+0x1ae>
 800a096:	6121      	str	r1, [r4, #16]
 800a098:	b913      	cbnz	r3, 800a0a0 <_printf_float+0x1a0>
 800a09a:	6822      	ldr	r2, [r4, #0]
 800a09c:	07d0      	lsls	r0, r2, #31
 800a09e:	d502      	bpl.n	800a0a6 <_printf_float+0x1a6>
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	440b      	add	r3, r1
 800a0a4:	6123      	str	r3, [r4, #16]
 800a0a6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a0a8:	f04f 0900 	mov.w	r9, #0
 800a0ac:	e7de      	b.n	800a06c <_printf_float+0x16c>
 800a0ae:	b913      	cbnz	r3, 800a0b6 <_printf_float+0x1b6>
 800a0b0:	6822      	ldr	r2, [r4, #0]
 800a0b2:	07d2      	lsls	r2, r2, #31
 800a0b4:	d501      	bpl.n	800a0ba <_printf_float+0x1ba>
 800a0b6:	3302      	adds	r3, #2
 800a0b8:	e7f4      	b.n	800a0a4 <_printf_float+0x1a4>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	e7f2      	b.n	800a0a4 <_printf_float+0x1a4>
 800a0be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a0c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0c4:	4299      	cmp	r1, r3
 800a0c6:	db05      	blt.n	800a0d4 <_printf_float+0x1d4>
 800a0c8:	6823      	ldr	r3, [r4, #0]
 800a0ca:	6121      	str	r1, [r4, #16]
 800a0cc:	07d8      	lsls	r0, r3, #31
 800a0ce:	d5ea      	bpl.n	800a0a6 <_printf_float+0x1a6>
 800a0d0:	1c4b      	adds	r3, r1, #1
 800a0d2:	e7e7      	b.n	800a0a4 <_printf_float+0x1a4>
 800a0d4:	2900      	cmp	r1, #0
 800a0d6:	bfd4      	ite	le
 800a0d8:	f1c1 0202 	rsble	r2, r1, #2
 800a0dc:	2201      	movgt	r2, #1
 800a0de:	4413      	add	r3, r2
 800a0e0:	e7e0      	b.n	800a0a4 <_printf_float+0x1a4>
 800a0e2:	6823      	ldr	r3, [r4, #0]
 800a0e4:	055a      	lsls	r2, r3, #21
 800a0e6:	d407      	bmi.n	800a0f8 <_printf_float+0x1f8>
 800a0e8:	6923      	ldr	r3, [r4, #16]
 800a0ea:	4642      	mov	r2, r8
 800a0ec:	4631      	mov	r1, r6
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	47b8      	blx	r7
 800a0f2:	3001      	adds	r0, #1
 800a0f4:	d12c      	bne.n	800a150 <_printf_float+0x250>
 800a0f6:	e764      	b.n	8009fc2 <_printf_float+0xc2>
 800a0f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a0fc:	f240 80e0 	bls.w	800a2c0 <_printf_float+0x3c0>
 800a100:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a104:	2200      	movs	r2, #0
 800a106:	2300      	movs	r3, #0
 800a108:	f7f6 fd06 	bl	8000b18 <__aeabi_dcmpeq>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d034      	beq.n	800a17a <_printf_float+0x27a>
 800a110:	4a37      	ldr	r2, [pc, #220]	; (800a1f0 <_printf_float+0x2f0>)
 800a112:	2301      	movs	r3, #1
 800a114:	4631      	mov	r1, r6
 800a116:	4628      	mov	r0, r5
 800a118:	47b8      	blx	r7
 800a11a:	3001      	adds	r0, #1
 800a11c:	f43f af51 	beq.w	8009fc2 <_printf_float+0xc2>
 800a120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a124:	429a      	cmp	r2, r3
 800a126:	db02      	blt.n	800a12e <_printf_float+0x22e>
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	07d8      	lsls	r0, r3, #31
 800a12c:	d510      	bpl.n	800a150 <_printf_float+0x250>
 800a12e:	ee18 3a10 	vmov	r3, s16
 800a132:	4652      	mov	r2, sl
 800a134:	4631      	mov	r1, r6
 800a136:	4628      	mov	r0, r5
 800a138:	47b8      	blx	r7
 800a13a:	3001      	adds	r0, #1
 800a13c:	f43f af41 	beq.w	8009fc2 <_printf_float+0xc2>
 800a140:	f04f 0800 	mov.w	r8, #0
 800a144:	f104 091a 	add.w	r9, r4, #26
 800a148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a14a:	3b01      	subs	r3, #1
 800a14c:	4543      	cmp	r3, r8
 800a14e:	dc09      	bgt.n	800a164 <_printf_float+0x264>
 800a150:	6823      	ldr	r3, [r4, #0]
 800a152:	079b      	lsls	r3, r3, #30
 800a154:	f100 8105 	bmi.w	800a362 <_printf_float+0x462>
 800a158:	68e0      	ldr	r0, [r4, #12]
 800a15a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a15c:	4298      	cmp	r0, r3
 800a15e:	bfb8      	it	lt
 800a160:	4618      	movlt	r0, r3
 800a162:	e730      	b.n	8009fc6 <_printf_float+0xc6>
 800a164:	2301      	movs	r3, #1
 800a166:	464a      	mov	r2, r9
 800a168:	4631      	mov	r1, r6
 800a16a:	4628      	mov	r0, r5
 800a16c:	47b8      	blx	r7
 800a16e:	3001      	adds	r0, #1
 800a170:	f43f af27 	beq.w	8009fc2 <_printf_float+0xc2>
 800a174:	f108 0801 	add.w	r8, r8, #1
 800a178:	e7e6      	b.n	800a148 <_printf_float+0x248>
 800a17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	dc39      	bgt.n	800a1f4 <_printf_float+0x2f4>
 800a180:	4a1b      	ldr	r2, [pc, #108]	; (800a1f0 <_printf_float+0x2f0>)
 800a182:	2301      	movs	r3, #1
 800a184:	4631      	mov	r1, r6
 800a186:	4628      	mov	r0, r5
 800a188:	47b8      	blx	r7
 800a18a:	3001      	adds	r0, #1
 800a18c:	f43f af19 	beq.w	8009fc2 <_printf_float+0xc2>
 800a190:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a194:	4313      	orrs	r3, r2
 800a196:	d102      	bne.n	800a19e <_printf_float+0x29e>
 800a198:	6823      	ldr	r3, [r4, #0]
 800a19a:	07d9      	lsls	r1, r3, #31
 800a19c:	d5d8      	bpl.n	800a150 <_printf_float+0x250>
 800a19e:	ee18 3a10 	vmov	r3, s16
 800a1a2:	4652      	mov	r2, sl
 800a1a4:	4631      	mov	r1, r6
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	47b8      	blx	r7
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	f43f af09 	beq.w	8009fc2 <_printf_float+0xc2>
 800a1b0:	f04f 0900 	mov.w	r9, #0
 800a1b4:	f104 0a1a 	add.w	sl, r4, #26
 800a1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ba:	425b      	negs	r3, r3
 800a1bc:	454b      	cmp	r3, r9
 800a1be:	dc01      	bgt.n	800a1c4 <_printf_float+0x2c4>
 800a1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c2:	e792      	b.n	800a0ea <_printf_float+0x1ea>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	4652      	mov	r2, sl
 800a1c8:	4631      	mov	r1, r6
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	47b8      	blx	r7
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	f43f aef7 	beq.w	8009fc2 <_printf_float+0xc2>
 800a1d4:	f109 0901 	add.w	r9, r9, #1
 800a1d8:	e7ee      	b.n	800a1b8 <_printf_float+0x2b8>
 800a1da:	bf00      	nop
 800a1dc:	7fefffff 	.word	0x7fefffff
 800a1e0:	0800ce4c 	.word	0x0800ce4c
 800a1e4:	0800ce50 	.word	0x0800ce50
 800a1e8:	0800ce58 	.word	0x0800ce58
 800a1ec:	0800ce54 	.word	0x0800ce54
 800a1f0:	0800ce5c 	.word	0x0800ce5c
 800a1f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	bfa8      	it	ge
 800a1fc:	461a      	movge	r2, r3
 800a1fe:	2a00      	cmp	r2, #0
 800a200:	4691      	mov	r9, r2
 800a202:	dc37      	bgt.n	800a274 <_printf_float+0x374>
 800a204:	f04f 0b00 	mov.w	fp, #0
 800a208:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a20c:	f104 021a 	add.w	r2, r4, #26
 800a210:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a212:	9305      	str	r3, [sp, #20]
 800a214:	eba3 0309 	sub.w	r3, r3, r9
 800a218:	455b      	cmp	r3, fp
 800a21a:	dc33      	bgt.n	800a284 <_printf_float+0x384>
 800a21c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a220:	429a      	cmp	r2, r3
 800a222:	db3b      	blt.n	800a29c <_printf_float+0x39c>
 800a224:	6823      	ldr	r3, [r4, #0]
 800a226:	07da      	lsls	r2, r3, #31
 800a228:	d438      	bmi.n	800a29c <_printf_float+0x39c>
 800a22a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a22c:	9a05      	ldr	r2, [sp, #20]
 800a22e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a230:	1a9a      	subs	r2, r3, r2
 800a232:	eba3 0901 	sub.w	r9, r3, r1
 800a236:	4591      	cmp	r9, r2
 800a238:	bfa8      	it	ge
 800a23a:	4691      	movge	r9, r2
 800a23c:	f1b9 0f00 	cmp.w	r9, #0
 800a240:	dc35      	bgt.n	800a2ae <_printf_float+0x3ae>
 800a242:	f04f 0800 	mov.w	r8, #0
 800a246:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a24a:	f104 0a1a 	add.w	sl, r4, #26
 800a24e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a252:	1a9b      	subs	r3, r3, r2
 800a254:	eba3 0309 	sub.w	r3, r3, r9
 800a258:	4543      	cmp	r3, r8
 800a25a:	f77f af79 	ble.w	800a150 <_printf_float+0x250>
 800a25e:	2301      	movs	r3, #1
 800a260:	4652      	mov	r2, sl
 800a262:	4631      	mov	r1, r6
 800a264:	4628      	mov	r0, r5
 800a266:	47b8      	blx	r7
 800a268:	3001      	adds	r0, #1
 800a26a:	f43f aeaa 	beq.w	8009fc2 <_printf_float+0xc2>
 800a26e:	f108 0801 	add.w	r8, r8, #1
 800a272:	e7ec      	b.n	800a24e <_printf_float+0x34e>
 800a274:	4613      	mov	r3, r2
 800a276:	4631      	mov	r1, r6
 800a278:	4642      	mov	r2, r8
 800a27a:	4628      	mov	r0, r5
 800a27c:	47b8      	blx	r7
 800a27e:	3001      	adds	r0, #1
 800a280:	d1c0      	bne.n	800a204 <_printf_float+0x304>
 800a282:	e69e      	b.n	8009fc2 <_printf_float+0xc2>
 800a284:	2301      	movs	r3, #1
 800a286:	4631      	mov	r1, r6
 800a288:	4628      	mov	r0, r5
 800a28a:	9205      	str	r2, [sp, #20]
 800a28c:	47b8      	blx	r7
 800a28e:	3001      	adds	r0, #1
 800a290:	f43f ae97 	beq.w	8009fc2 <_printf_float+0xc2>
 800a294:	9a05      	ldr	r2, [sp, #20]
 800a296:	f10b 0b01 	add.w	fp, fp, #1
 800a29a:	e7b9      	b.n	800a210 <_printf_float+0x310>
 800a29c:	ee18 3a10 	vmov	r3, s16
 800a2a0:	4652      	mov	r2, sl
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	47b8      	blx	r7
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	d1be      	bne.n	800a22a <_printf_float+0x32a>
 800a2ac:	e689      	b.n	8009fc2 <_printf_float+0xc2>
 800a2ae:	9a05      	ldr	r2, [sp, #20]
 800a2b0:	464b      	mov	r3, r9
 800a2b2:	4442      	add	r2, r8
 800a2b4:	4631      	mov	r1, r6
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	47b8      	blx	r7
 800a2ba:	3001      	adds	r0, #1
 800a2bc:	d1c1      	bne.n	800a242 <_printf_float+0x342>
 800a2be:	e680      	b.n	8009fc2 <_printf_float+0xc2>
 800a2c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2c2:	2a01      	cmp	r2, #1
 800a2c4:	dc01      	bgt.n	800a2ca <_printf_float+0x3ca>
 800a2c6:	07db      	lsls	r3, r3, #31
 800a2c8:	d538      	bpl.n	800a33c <_printf_float+0x43c>
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	4642      	mov	r2, r8
 800a2ce:	4631      	mov	r1, r6
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	47b8      	blx	r7
 800a2d4:	3001      	adds	r0, #1
 800a2d6:	f43f ae74 	beq.w	8009fc2 <_printf_float+0xc2>
 800a2da:	ee18 3a10 	vmov	r3, s16
 800a2de:	4652      	mov	r2, sl
 800a2e0:	4631      	mov	r1, r6
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	47b8      	blx	r7
 800a2e6:	3001      	adds	r0, #1
 800a2e8:	f43f ae6b 	beq.w	8009fc2 <_printf_float+0xc2>
 800a2ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	f7f6 fc10 	bl	8000b18 <__aeabi_dcmpeq>
 800a2f8:	b9d8      	cbnz	r0, 800a332 <_printf_float+0x432>
 800a2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2fc:	f108 0201 	add.w	r2, r8, #1
 800a300:	3b01      	subs	r3, #1
 800a302:	4631      	mov	r1, r6
 800a304:	4628      	mov	r0, r5
 800a306:	47b8      	blx	r7
 800a308:	3001      	adds	r0, #1
 800a30a:	d10e      	bne.n	800a32a <_printf_float+0x42a>
 800a30c:	e659      	b.n	8009fc2 <_printf_float+0xc2>
 800a30e:	2301      	movs	r3, #1
 800a310:	4652      	mov	r2, sl
 800a312:	4631      	mov	r1, r6
 800a314:	4628      	mov	r0, r5
 800a316:	47b8      	blx	r7
 800a318:	3001      	adds	r0, #1
 800a31a:	f43f ae52 	beq.w	8009fc2 <_printf_float+0xc2>
 800a31e:	f108 0801 	add.w	r8, r8, #1
 800a322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a324:	3b01      	subs	r3, #1
 800a326:	4543      	cmp	r3, r8
 800a328:	dcf1      	bgt.n	800a30e <_printf_float+0x40e>
 800a32a:	464b      	mov	r3, r9
 800a32c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a330:	e6dc      	b.n	800a0ec <_printf_float+0x1ec>
 800a332:	f04f 0800 	mov.w	r8, #0
 800a336:	f104 0a1a 	add.w	sl, r4, #26
 800a33a:	e7f2      	b.n	800a322 <_printf_float+0x422>
 800a33c:	2301      	movs	r3, #1
 800a33e:	4642      	mov	r2, r8
 800a340:	e7df      	b.n	800a302 <_printf_float+0x402>
 800a342:	2301      	movs	r3, #1
 800a344:	464a      	mov	r2, r9
 800a346:	4631      	mov	r1, r6
 800a348:	4628      	mov	r0, r5
 800a34a:	47b8      	blx	r7
 800a34c:	3001      	adds	r0, #1
 800a34e:	f43f ae38 	beq.w	8009fc2 <_printf_float+0xc2>
 800a352:	f108 0801 	add.w	r8, r8, #1
 800a356:	68e3      	ldr	r3, [r4, #12]
 800a358:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a35a:	1a5b      	subs	r3, r3, r1
 800a35c:	4543      	cmp	r3, r8
 800a35e:	dcf0      	bgt.n	800a342 <_printf_float+0x442>
 800a360:	e6fa      	b.n	800a158 <_printf_float+0x258>
 800a362:	f04f 0800 	mov.w	r8, #0
 800a366:	f104 0919 	add.w	r9, r4, #25
 800a36a:	e7f4      	b.n	800a356 <_printf_float+0x456>

0800a36c <_printf_common>:
 800a36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a370:	4616      	mov	r6, r2
 800a372:	4699      	mov	r9, r3
 800a374:	688a      	ldr	r2, [r1, #8]
 800a376:	690b      	ldr	r3, [r1, #16]
 800a378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a37c:	4293      	cmp	r3, r2
 800a37e:	bfb8      	it	lt
 800a380:	4613      	movlt	r3, r2
 800a382:	6033      	str	r3, [r6, #0]
 800a384:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a388:	4607      	mov	r7, r0
 800a38a:	460c      	mov	r4, r1
 800a38c:	b10a      	cbz	r2, 800a392 <_printf_common+0x26>
 800a38e:	3301      	adds	r3, #1
 800a390:	6033      	str	r3, [r6, #0]
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	0699      	lsls	r1, r3, #26
 800a396:	bf42      	ittt	mi
 800a398:	6833      	ldrmi	r3, [r6, #0]
 800a39a:	3302      	addmi	r3, #2
 800a39c:	6033      	strmi	r3, [r6, #0]
 800a39e:	6825      	ldr	r5, [r4, #0]
 800a3a0:	f015 0506 	ands.w	r5, r5, #6
 800a3a4:	d106      	bne.n	800a3b4 <_printf_common+0x48>
 800a3a6:	f104 0a19 	add.w	sl, r4, #25
 800a3aa:	68e3      	ldr	r3, [r4, #12]
 800a3ac:	6832      	ldr	r2, [r6, #0]
 800a3ae:	1a9b      	subs	r3, r3, r2
 800a3b0:	42ab      	cmp	r3, r5
 800a3b2:	dc26      	bgt.n	800a402 <_printf_common+0x96>
 800a3b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3b8:	1e13      	subs	r3, r2, #0
 800a3ba:	6822      	ldr	r2, [r4, #0]
 800a3bc:	bf18      	it	ne
 800a3be:	2301      	movne	r3, #1
 800a3c0:	0692      	lsls	r2, r2, #26
 800a3c2:	d42b      	bmi.n	800a41c <_printf_common+0xb0>
 800a3c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3c8:	4649      	mov	r1, r9
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	47c0      	blx	r8
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	d01e      	beq.n	800a410 <_printf_common+0xa4>
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	68e5      	ldr	r5, [r4, #12]
 800a3d6:	6832      	ldr	r2, [r6, #0]
 800a3d8:	f003 0306 	and.w	r3, r3, #6
 800a3dc:	2b04      	cmp	r3, #4
 800a3de:	bf08      	it	eq
 800a3e0:	1aad      	subeq	r5, r5, r2
 800a3e2:	68a3      	ldr	r3, [r4, #8]
 800a3e4:	6922      	ldr	r2, [r4, #16]
 800a3e6:	bf0c      	ite	eq
 800a3e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3ec:	2500      	movne	r5, #0
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	bfc4      	itt	gt
 800a3f2:	1a9b      	subgt	r3, r3, r2
 800a3f4:	18ed      	addgt	r5, r5, r3
 800a3f6:	2600      	movs	r6, #0
 800a3f8:	341a      	adds	r4, #26
 800a3fa:	42b5      	cmp	r5, r6
 800a3fc:	d11a      	bne.n	800a434 <_printf_common+0xc8>
 800a3fe:	2000      	movs	r0, #0
 800a400:	e008      	b.n	800a414 <_printf_common+0xa8>
 800a402:	2301      	movs	r3, #1
 800a404:	4652      	mov	r2, sl
 800a406:	4649      	mov	r1, r9
 800a408:	4638      	mov	r0, r7
 800a40a:	47c0      	blx	r8
 800a40c:	3001      	adds	r0, #1
 800a40e:	d103      	bne.n	800a418 <_printf_common+0xac>
 800a410:	f04f 30ff 	mov.w	r0, #4294967295
 800a414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a418:	3501      	adds	r5, #1
 800a41a:	e7c6      	b.n	800a3aa <_printf_common+0x3e>
 800a41c:	18e1      	adds	r1, r4, r3
 800a41e:	1c5a      	adds	r2, r3, #1
 800a420:	2030      	movs	r0, #48	; 0x30
 800a422:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a426:	4422      	add	r2, r4
 800a428:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a42c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a430:	3302      	adds	r3, #2
 800a432:	e7c7      	b.n	800a3c4 <_printf_common+0x58>
 800a434:	2301      	movs	r3, #1
 800a436:	4622      	mov	r2, r4
 800a438:	4649      	mov	r1, r9
 800a43a:	4638      	mov	r0, r7
 800a43c:	47c0      	blx	r8
 800a43e:	3001      	adds	r0, #1
 800a440:	d0e6      	beq.n	800a410 <_printf_common+0xa4>
 800a442:	3601      	adds	r6, #1
 800a444:	e7d9      	b.n	800a3fa <_printf_common+0x8e>
	...

0800a448 <_printf_i>:
 800a448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a44c:	7e0f      	ldrb	r7, [r1, #24]
 800a44e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a450:	2f78      	cmp	r7, #120	; 0x78
 800a452:	4691      	mov	r9, r2
 800a454:	4680      	mov	r8, r0
 800a456:	460c      	mov	r4, r1
 800a458:	469a      	mov	sl, r3
 800a45a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a45e:	d807      	bhi.n	800a470 <_printf_i+0x28>
 800a460:	2f62      	cmp	r7, #98	; 0x62
 800a462:	d80a      	bhi.n	800a47a <_printf_i+0x32>
 800a464:	2f00      	cmp	r7, #0
 800a466:	f000 80d8 	beq.w	800a61a <_printf_i+0x1d2>
 800a46a:	2f58      	cmp	r7, #88	; 0x58
 800a46c:	f000 80a3 	beq.w	800a5b6 <_printf_i+0x16e>
 800a470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a474:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a478:	e03a      	b.n	800a4f0 <_printf_i+0xa8>
 800a47a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a47e:	2b15      	cmp	r3, #21
 800a480:	d8f6      	bhi.n	800a470 <_printf_i+0x28>
 800a482:	a101      	add	r1, pc, #4	; (adr r1, 800a488 <_printf_i+0x40>)
 800a484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a488:	0800a4e1 	.word	0x0800a4e1
 800a48c:	0800a4f5 	.word	0x0800a4f5
 800a490:	0800a471 	.word	0x0800a471
 800a494:	0800a471 	.word	0x0800a471
 800a498:	0800a471 	.word	0x0800a471
 800a49c:	0800a471 	.word	0x0800a471
 800a4a0:	0800a4f5 	.word	0x0800a4f5
 800a4a4:	0800a471 	.word	0x0800a471
 800a4a8:	0800a471 	.word	0x0800a471
 800a4ac:	0800a471 	.word	0x0800a471
 800a4b0:	0800a471 	.word	0x0800a471
 800a4b4:	0800a601 	.word	0x0800a601
 800a4b8:	0800a525 	.word	0x0800a525
 800a4bc:	0800a5e3 	.word	0x0800a5e3
 800a4c0:	0800a471 	.word	0x0800a471
 800a4c4:	0800a471 	.word	0x0800a471
 800a4c8:	0800a623 	.word	0x0800a623
 800a4cc:	0800a471 	.word	0x0800a471
 800a4d0:	0800a525 	.word	0x0800a525
 800a4d4:	0800a471 	.word	0x0800a471
 800a4d8:	0800a471 	.word	0x0800a471
 800a4dc:	0800a5eb 	.word	0x0800a5eb
 800a4e0:	682b      	ldr	r3, [r5, #0]
 800a4e2:	1d1a      	adds	r2, r3, #4
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	602a      	str	r2, [r5, #0]
 800a4e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e0a3      	b.n	800a63c <_printf_i+0x1f4>
 800a4f4:	6820      	ldr	r0, [r4, #0]
 800a4f6:	6829      	ldr	r1, [r5, #0]
 800a4f8:	0606      	lsls	r6, r0, #24
 800a4fa:	f101 0304 	add.w	r3, r1, #4
 800a4fe:	d50a      	bpl.n	800a516 <_printf_i+0xce>
 800a500:	680e      	ldr	r6, [r1, #0]
 800a502:	602b      	str	r3, [r5, #0]
 800a504:	2e00      	cmp	r6, #0
 800a506:	da03      	bge.n	800a510 <_printf_i+0xc8>
 800a508:	232d      	movs	r3, #45	; 0x2d
 800a50a:	4276      	negs	r6, r6
 800a50c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a510:	485e      	ldr	r0, [pc, #376]	; (800a68c <_printf_i+0x244>)
 800a512:	230a      	movs	r3, #10
 800a514:	e019      	b.n	800a54a <_printf_i+0x102>
 800a516:	680e      	ldr	r6, [r1, #0]
 800a518:	602b      	str	r3, [r5, #0]
 800a51a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a51e:	bf18      	it	ne
 800a520:	b236      	sxthne	r6, r6
 800a522:	e7ef      	b.n	800a504 <_printf_i+0xbc>
 800a524:	682b      	ldr	r3, [r5, #0]
 800a526:	6820      	ldr	r0, [r4, #0]
 800a528:	1d19      	adds	r1, r3, #4
 800a52a:	6029      	str	r1, [r5, #0]
 800a52c:	0601      	lsls	r1, r0, #24
 800a52e:	d501      	bpl.n	800a534 <_printf_i+0xec>
 800a530:	681e      	ldr	r6, [r3, #0]
 800a532:	e002      	b.n	800a53a <_printf_i+0xf2>
 800a534:	0646      	lsls	r6, r0, #25
 800a536:	d5fb      	bpl.n	800a530 <_printf_i+0xe8>
 800a538:	881e      	ldrh	r6, [r3, #0]
 800a53a:	4854      	ldr	r0, [pc, #336]	; (800a68c <_printf_i+0x244>)
 800a53c:	2f6f      	cmp	r7, #111	; 0x6f
 800a53e:	bf0c      	ite	eq
 800a540:	2308      	moveq	r3, #8
 800a542:	230a      	movne	r3, #10
 800a544:	2100      	movs	r1, #0
 800a546:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a54a:	6865      	ldr	r5, [r4, #4]
 800a54c:	60a5      	str	r5, [r4, #8]
 800a54e:	2d00      	cmp	r5, #0
 800a550:	bfa2      	ittt	ge
 800a552:	6821      	ldrge	r1, [r4, #0]
 800a554:	f021 0104 	bicge.w	r1, r1, #4
 800a558:	6021      	strge	r1, [r4, #0]
 800a55a:	b90e      	cbnz	r6, 800a560 <_printf_i+0x118>
 800a55c:	2d00      	cmp	r5, #0
 800a55e:	d04d      	beq.n	800a5fc <_printf_i+0x1b4>
 800a560:	4615      	mov	r5, r2
 800a562:	fbb6 f1f3 	udiv	r1, r6, r3
 800a566:	fb03 6711 	mls	r7, r3, r1, r6
 800a56a:	5dc7      	ldrb	r7, [r0, r7]
 800a56c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a570:	4637      	mov	r7, r6
 800a572:	42bb      	cmp	r3, r7
 800a574:	460e      	mov	r6, r1
 800a576:	d9f4      	bls.n	800a562 <_printf_i+0x11a>
 800a578:	2b08      	cmp	r3, #8
 800a57a:	d10b      	bne.n	800a594 <_printf_i+0x14c>
 800a57c:	6823      	ldr	r3, [r4, #0]
 800a57e:	07de      	lsls	r6, r3, #31
 800a580:	d508      	bpl.n	800a594 <_printf_i+0x14c>
 800a582:	6923      	ldr	r3, [r4, #16]
 800a584:	6861      	ldr	r1, [r4, #4]
 800a586:	4299      	cmp	r1, r3
 800a588:	bfde      	ittt	le
 800a58a:	2330      	movle	r3, #48	; 0x30
 800a58c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a590:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a594:	1b52      	subs	r2, r2, r5
 800a596:	6122      	str	r2, [r4, #16]
 800a598:	f8cd a000 	str.w	sl, [sp]
 800a59c:	464b      	mov	r3, r9
 800a59e:	aa03      	add	r2, sp, #12
 800a5a0:	4621      	mov	r1, r4
 800a5a2:	4640      	mov	r0, r8
 800a5a4:	f7ff fee2 	bl	800a36c <_printf_common>
 800a5a8:	3001      	adds	r0, #1
 800a5aa:	d14c      	bne.n	800a646 <_printf_i+0x1fe>
 800a5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b0:	b004      	add	sp, #16
 800a5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b6:	4835      	ldr	r0, [pc, #212]	; (800a68c <_printf_i+0x244>)
 800a5b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a5bc:	6829      	ldr	r1, [r5, #0]
 800a5be:	6823      	ldr	r3, [r4, #0]
 800a5c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a5c4:	6029      	str	r1, [r5, #0]
 800a5c6:	061d      	lsls	r5, r3, #24
 800a5c8:	d514      	bpl.n	800a5f4 <_printf_i+0x1ac>
 800a5ca:	07df      	lsls	r7, r3, #31
 800a5cc:	bf44      	itt	mi
 800a5ce:	f043 0320 	orrmi.w	r3, r3, #32
 800a5d2:	6023      	strmi	r3, [r4, #0]
 800a5d4:	b91e      	cbnz	r6, 800a5de <_printf_i+0x196>
 800a5d6:	6823      	ldr	r3, [r4, #0]
 800a5d8:	f023 0320 	bic.w	r3, r3, #32
 800a5dc:	6023      	str	r3, [r4, #0]
 800a5de:	2310      	movs	r3, #16
 800a5e0:	e7b0      	b.n	800a544 <_printf_i+0xfc>
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	f043 0320 	orr.w	r3, r3, #32
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	2378      	movs	r3, #120	; 0x78
 800a5ec:	4828      	ldr	r0, [pc, #160]	; (800a690 <_printf_i+0x248>)
 800a5ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5f2:	e7e3      	b.n	800a5bc <_printf_i+0x174>
 800a5f4:	0659      	lsls	r1, r3, #25
 800a5f6:	bf48      	it	mi
 800a5f8:	b2b6      	uxthmi	r6, r6
 800a5fa:	e7e6      	b.n	800a5ca <_printf_i+0x182>
 800a5fc:	4615      	mov	r5, r2
 800a5fe:	e7bb      	b.n	800a578 <_printf_i+0x130>
 800a600:	682b      	ldr	r3, [r5, #0]
 800a602:	6826      	ldr	r6, [r4, #0]
 800a604:	6961      	ldr	r1, [r4, #20]
 800a606:	1d18      	adds	r0, r3, #4
 800a608:	6028      	str	r0, [r5, #0]
 800a60a:	0635      	lsls	r5, r6, #24
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	d501      	bpl.n	800a614 <_printf_i+0x1cc>
 800a610:	6019      	str	r1, [r3, #0]
 800a612:	e002      	b.n	800a61a <_printf_i+0x1d2>
 800a614:	0670      	lsls	r0, r6, #25
 800a616:	d5fb      	bpl.n	800a610 <_printf_i+0x1c8>
 800a618:	8019      	strh	r1, [r3, #0]
 800a61a:	2300      	movs	r3, #0
 800a61c:	6123      	str	r3, [r4, #16]
 800a61e:	4615      	mov	r5, r2
 800a620:	e7ba      	b.n	800a598 <_printf_i+0x150>
 800a622:	682b      	ldr	r3, [r5, #0]
 800a624:	1d1a      	adds	r2, r3, #4
 800a626:	602a      	str	r2, [r5, #0]
 800a628:	681d      	ldr	r5, [r3, #0]
 800a62a:	6862      	ldr	r2, [r4, #4]
 800a62c:	2100      	movs	r1, #0
 800a62e:	4628      	mov	r0, r5
 800a630:	f7f5 fdfe 	bl	8000230 <memchr>
 800a634:	b108      	cbz	r0, 800a63a <_printf_i+0x1f2>
 800a636:	1b40      	subs	r0, r0, r5
 800a638:	6060      	str	r0, [r4, #4]
 800a63a:	6863      	ldr	r3, [r4, #4]
 800a63c:	6123      	str	r3, [r4, #16]
 800a63e:	2300      	movs	r3, #0
 800a640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a644:	e7a8      	b.n	800a598 <_printf_i+0x150>
 800a646:	6923      	ldr	r3, [r4, #16]
 800a648:	462a      	mov	r2, r5
 800a64a:	4649      	mov	r1, r9
 800a64c:	4640      	mov	r0, r8
 800a64e:	47d0      	blx	sl
 800a650:	3001      	adds	r0, #1
 800a652:	d0ab      	beq.n	800a5ac <_printf_i+0x164>
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	079b      	lsls	r3, r3, #30
 800a658:	d413      	bmi.n	800a682 <_printf_i+0x23a>
 800a65a:	68e0      	ldr	r0, [r4, #12]
 800a65c:	9b03      	ldr	r3, [sp, #12]
 800a65e:	4298      	cmp	r0, r3
 800a660:	bfb8      	it	lt
 800a662:	4618      	movlt	r0, r3
 800a664:	e7a4      	b.n	800a5b0 <_printf_i+0x168>
 800a666:	2301      	movs	r3, #1
 800a668:	4632      	mov	r2, r6
 800a66a:	4649      	mov	r1, r9
 800a66c:	4640      	mov	r0, r8
 800a66e:	47d0      	blx	sl
 800a670:	3001      	adds	r0, #1
 800a672:	d09b      	beq.n	800a5ac <_printf_i+0x164>
 800a674:	3501      	adds	r5, #1
 800a676:	68e3      	ldr	r3, [r4, #12]
 800a678:	9903      	ldr	r1, [sp, #12]
 800a67a:	1a5b      	subs	r3, r3, r1
 800a67c:	42ab      	cmp	r3, r5
 800a67e:	dcf2      	bgt.n	800a666 <_printf_i+0x21e>
 800a680:	e7eb      	b.n	800a65a <_printf_i+0x212>
 800a682:	2500      	movs	r5, #0
 800a684:	f104 0619 	add.w	r6, r4, #25
 800a688:	e7f5      	b.n	800a676 <_printf_i+0x22e>
 800a68a:	bf00      	nop
 800a68c:	0800ce5e 	.word	0x0800ce5e
 800a690:	0800ce6f 	.word	0x0800ce6f

0800a694 <iprintf>:
 800a694:	b40f      	push	{r0, r1, r2, r3}
 800a696:	4b0a      	ldr	r3, [pc, #40]	; (800a6c0 <iprintf+0x2c>)
 800a698:	b513      	push	{r0, r1, r4, lr}
 800a69a:	681c      	ldr	r4, [r3, #0]
 800a69c:	b124      	cbz	r4, 800a6a8 <iprintf+0x14>
 800a69e:	69a3      	ldr	r3, [r4, #24]
 800a6a0:	b913      	cbnz	r3, 800a6a8 <iprintf+0x14>
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f001 f8f8 	bl	800b898 <__sinit>
 800a6a8:	ab05      	add	r3, sp, #20
 800a6aa:	9a04      	ldr	r2, [sp, #16]
 800a6ac:	68a1      	ldr	r1, [r4, #8]
 800a6ae:	9301      	str	r3, [sp, #4]
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f001 feb5 	bl	800c420 <_vfiprintf_r>
 800a6b6:	b002      	add	sp, #8
 800a6b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6bc:	b004      	add	sp, #16
 800a6be:	4770      	bx	lr
 800a6c0:	2000068c 	.word	0x2000068c

0800a6c4 <_puts_r>:
 800a6c4:	b570      	push	{r4, r5, r6, lr}
 800a6c6:	460e      	mov	r6, r1
 800a6c8:	4605      	mov	r5, r0
 800a6ca:	b118      	cbz	r0, 800a6d4 <_puts_r+0x10>
 800a6cc:	6983      	ldr	r3, [r0, #24]
 800a6ce:	b90b      	cbnz	r3, 800a6d4 <_puts_r+0x10>
 800a6d0:	f001 f8e2 	bl	800b898 <__sinit>
 800a6d4:	69ab      	ldr	r3, [r5, #24]
 800a6d6:	68ac      	ldr	r4, [r5, #8]
 800a6d8:	b913      	cbnz	r3, 800a6e0 <_puts_r+0x1c>
 800a6da:	4628      	mov	r0, r5
 800a6dc:	f001 f8dc 	bl	800b898 <__sinit>
 800a6e0:	4b2c      	ldr	r3, [pc, #176]	; (800a794 <_puts_r+0xd0>)
 800a6e2:	429c      	cmp	r4, r3
 800a6e4:	d120      	bne.n	800a728 <_puts_r+0x64>
 800a6e6:	686c      	ldr	r4, [r5, #4]
 800a6e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6ea:	07db      	lsls	r3, r3, #31
 800a6ec:	d405      	bmi.n	800a6fa <_puts_r+0x36>
 800a6ee:	89a3      	ldrh	r3, [r4, #12]
 800a6f0:	0598      	lsls	r0, r3, #22
 800a6f2:	d402      	bmi.n	800a6fa <_puts_r+0x36>
 800a6f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6f6:	f001 f972 	bl	800b9de <__retarget_lock_acquire_recursive>
 800a6fa:	89a3      	ldrh	r3, [r4, #12]
 800a6fc:	0719      	lsls	r1, r3, #28
 800a6fe:	d51d      	bpl.n	800a73c <_puts_r+0x78>
 800a700:	6923      	ldr	r3, [r4, #16]
 800a702:	b1db      	cbz	r3, 800a73c <_puts_r+0x78>
 800a704:	3e01      	subs	r6, #1
 800a706:	68a3      	ldr	r3, [r4, #8]
 800a708:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a70c:	3b01      	subs	r3, #1
 800a70e:	60a3      	str	r3, [r4, #8]
 800a710:	bb39      	cbnz	r1, 800a762 <_puts_r+0x9e>
 800a712:	2b00      	cmp	r3, #0
 800a714:	da38      	bge.n	800a788 <_puts_r+0xc4>
 800a716:	4622      	mov	r2, r4
 800a718:	210a      	movs	r1, #10
 800a71a:	4628      	mov	r0, r5
 800a71c:	f000 f866 	bl	800a7ec <__swbuf_r>
 800a720:	3001      	adds	r0, #1
 800a722:	d011      	beq.n	800a748 <_puts_r+0x84>
 800a724:	250a      	movs	r5, #10
 800a726:	e011      	b.n	800a74c <_puts_r+0x88>
 800a728:	4b1b      	ldr	r3, [pc, #108]	; (800a798 <_puts_r+0xd4>)
 800a72a:	429c      	cmp	r4, r3
 800a72c:	d101      	bne.n	800a732 <_puts_r+0x6e>
 800a72e:	68ac      	ldr	r4, [r5, #8]
 800a730:	e7da      	b.n	800a6e8 <_puts_r+0x24>
 800a732:	4b1a      	ldr	r3, [pc, #104]	; (800a79c <_puts_r+0xd8>)
 800a734:	429c      	cmp	r4, r3
 800a736:	bf08      	it	eq
 800a738:	68ec      	ldreq	r4, [r5, #12]
 800a73a:	e7d5      	b.n	800a6e8 <_puts_r+0x24>
 800a73c:	4621      	mov	r1, r4
 800a73e:	4628      	mov	r0, r5
 800a740:	f000 f8a6 	bl	800a890 <__swsetup_r>
 800a744:	2800      	cmp	r0, #0
 800a746:	d0dd      	beq.n	800a704 <_puts_r+0x40>
 800a748:	f04f 35ff 	mov.w	r5, #4294967295
 800a74c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a74e:	07da      	lsls	r2, r3, #31
 800a750:	d405      	bmi.n	800a75e <_puts_r+0x9a>
 800a752:	89a3      	ldrh	r3, [r4, #12]
 800a754:	059b      	lsls	r3, r3, #22
 800a756:	d402      	bmi.n	800a75e <_puts_r+0x9a>
 800a758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a75a:	f001 f941 	bl	800b9e0 <__retarget_lock_release_recursive>
 800a75e:	4628      	mov	r0, r5
 800a760:	bd70      	pop	{r4, r5, r6, pc}
 800a762:	2b00      	cmp	r3, #0
 800a764:	da04      	bge.n	800a770 <_puts_r+0xac>
 800a766:	69a2      	ldr	r2, [r4, #24]
 800a768:	429a      	cmp	r2, r3
 800a76a:	dc06      	bgt.n	800a77a <_puts_r+0xb6>
 800a76c:	290a      	cmp	r1, #10
 800a76e:	d004      	beq.n	800a77a <_puts_r+0xb6>
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	1c5a      	adds	r2, r3, #1
 800a774:	6022      	str	r2, [r4, #0]
 800a776:	7019      	strb	r1, [r3, #0]
 800a778:	e7c5      	b.n	800a706 <_puts_r+0x42>
 800a77a:	4622      	mov	r2, r4
 800a77c:	4628      	mov	r0, r5
 800a77e:	f000 f835 	bl	800a7ec <__swbuf_r>
 800a782:	3001      	adds	r0, #1
 800a784:	d1bf      	bne.n	800a706 <_puts_r+0x42>
 800a786:	e7df      	b.n	800a748 <_puts_r+0x84>
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	250a      	movs	r5, #10
 800a78c:	1c5a      	adds	r2, r3, #1
 800a78e:	6022      	str	r2, [r4, #0]
 800a790:	701d      	strb	r5, [r3, #0]
 800a792:	e7db      	b.n	800a74c <_puts_r+0x88>
 800a794:	0800cf30 	.word	0x0800cf30
 800a798:	0800cf50 	.word	0x0800cf50
 800a79c:	0800cf10 	.word	0x0800cf10

0800a7a0 <puts>:
 800a7a0:	4b02      	ldr	r3, [pc, #8]	; (800a7ac <puts+0xc>)
 800a7a2:	4601      	mov	r1, r0
 800a7a4:	6818      	ldr	r0, [r3, #0]
 800a7a6:	f7ff bf8d 	b.w	800a6c4 <_puts_r>
 800a7aa:	bf00      	nop
 800a7ac:	2000068c 	.word	0x2000068c

0800a7b0 <strdup>:
 800a7b0:	4b02      	ldr	r3, [pc, #8]	; (800a7bc <strdup+0xc>)
 800a7b2:	4601      	mov	r1, r0
 800a7b4:	6818      	ldr	r0, [r3, #0]
 800a7b6:	f000 b803 	b.w	800a7c0 <_strdup_r>
 800a7ba:	bf00      	nop
 800a7bc:	2000068c 	.word	0x2000068c

0800a7c0 <_strdup_r>:
 800a7c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	460d      	mov	r5, r1
 800a7c8:	f7f5 fd2a 	bl	8000220 <strlen>
 800a7cc:	1c42      	adds	r2, r0, #1
 800a7ce:	4611      	mov	r1, r2
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	9201      	str	r2, [sp, #4]
 800a7d4:	f001 fd86 	bl	800c2e4 <_malloc_r>
 800a7d8:	4604      	mov	r4, r0
 800a7da:	b118      	cbz	r0, 800a7e4 <_strdup_r+0x24>
 800a7dc:	9a01      	ldr	r2, [sp, #4]
 800a7de:	4629      	mov	r1, r5
 800a7e0:	f001 f96c 	bl	800babc <memcpy>
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	b003      	add	sp, #12
 800a7e8:	bd30      	pop	{r4, r5, pc}
	...

0800a7ec <__swbuf_r>:
 800a7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ee:	460e      	mov	r6, r1
 800a7f0:	4614      	mov	r4, r2
 800a7f2:	4605      	mov	r5, r0
 800a7f4:	b118      	cbz	r0, 800a7fe <__swbuf_r+0x12>
 800a7f6:	6983      	ldr	r3, [r0, #24]
 800a7f8:	b90b      	cbnz	r3, 800a7fe <__swbuf_r+0x12>
 800a7fa:	f001 f84d 	bl	800b898 <__sinit>
 800a7fe:	4b21      	ldr	r3, [pc, #132]	; (800a884 <__swbuf_r+0x98>)
 800a800:	429c      	cmp	r4, r3
 800a802:	d12b      	bne.n	800a85c <__swbuf_r+0x70>
 800a804:	686c      	ldr	r4, [r5, #4]
 800a806:	69a3      	ldr	r3, [r4, #24]
 800a808:	60a3      	str	r3, [r4, #8]
 800a80a:	89a3      	ldrh	r3, [r4, #12]
 800a80c:	071a      	lsls	r2, r3, #28
 800a80e:	d52f      	bpl.n	800a870 <__swbuf_r+0x84>
 800a810:	6923      	ldr	r3, [r4, #16]
 800a812:	b36b      	cbz	r3, 800a870 <__swbuf_r+0x84>
 800a814:	6923      	ldr	r3, [r4, #16]
 800a816:	6820      	ldr	r0, [r4, #0]
 800a818:	1ac0      	subs	r0, r0, r3
 800a81a:	6963      	ldr	r3, [r4, #20]
 800a81c:	b2f6      	uxtb	r6, r6
 800a81e:	4283      	cmp	r3, r0
 800a820:	4637      	mov	r7, r6
 800a822:	dc04      	bgt.n	800a82e <__swbuf_r+0x42>
 800a824:	4621      	mov	r1, r4
 800a826:	4628      	mov	r0, r5
 800a828:	f000 ffa2 	bl	800b770 <_fflush_r>
 800a82c:	bb30      	cbnz	r0, 800a87c <__swbuf_r+0x90>
 800a82e:	68a3      	ldr	r3, [r4, #8]
 800a830:	3b01      	subs	r3, #1
 800a832:	60a3      	str	r3, [r4, #8]
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	1c5a      	adds	r2, r3, #1
 800a838:	6022      	str	r2, [r4, #0]
 800a83a:	701e      	strb	r6, [r3, #0]
 800a83c:	6963      	ldr	r3, [r4, #20]
 800a83e:	3001      	adds	r0, #1
 800a840:	4283      	cmp	r3, r0
 800a842:	d004      	beq.n	800a84e <__swbuf_r+0x62>
 800a844:	89a3      	ldrh	r3, [r4, #12]
 800a846:	07db      	lsls	r3, r3, #31
 800a848:	d506      	bpl.n	800a858 <__swbuf_r+0x6c>
 800a84a:	2e0a      	cmp	r6, #10
 800a84c:	d104      	bne.n	800a858 <__swbuf_r+0x6c>
 800a84e:	4621      	mov	r1, r4
 800a850:	4628      	mov	r0, r5
 800a852:	f000 ff8d 	bl	800b770 <_fflush_r>
 800a856:	b988      	cbnz	r0, 800a87c <__swbuf_r+0x90>
 800a858:	4638      	mov	r0, r7
 800a85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a85c:	4b0a      	ldr	r3, [pc, #40]	; (800a888 <__swbuf_r+0x9c>)
 800a85e:	429c      	cmp	r4, r3
 800a860:	d101      	bne.n	800a866 <__swbuf_r+0x7a>
 800a862:	68ac      	ldr	r4, [r5, #8]
 800a864:	e7cf      	b.n	800a806 <__swbuf_r+0x1a>
 800a866:	4b09      	ldr	r3, [pc, #36]	; (800a88c <__swbuf_r+0xa0>)
 800a868:	429c      	cmp	r4, r3
 800a86a:	bf08      	it	eq
 800a86c:	68ec      	ldreq	r4, [r5, #12]
 800a86e:	e7ca      	b.n	800a806 <__swbuf_r+0x1a>
 800a870:	4621      	mov	r1, r4
 800a872:	4628      	mov	r0, r5
 800a874:	f000 f80c 	bl	800a890 <__swsetup_r>
 800a878:	2800      	cmp	r0, #0
 800a87a:	d0cb      	beq.n	800a814 <__swbuf_r+0x28>
 800a87c:	f04f 37ff 	mov.w	r7, #4294967295
 800a880:	e7ea      	b.n	800a858 <__swbuf_r+0x6c>
 800a882:	bf00      	nop
 800a884:	0800cf30 	.word	0x0800cf30
 800a888:	0800cf50 	.word	0x0800cf50
 800a88c:	0800cf10 	.word	0x0800cf10

0800a890 <__swsetup_r>:
 800a890:	4b32      	ldr	r3, [pc, #200]	; (800a95c <__swsetup_r+0xcc>)
 800a892:	b570      	push	{r4, r5, r6, lr}
 800a894:	681d      	ldr	r5, [r3, #0]
 800a896:	4606      	mov	r6, r0
 800a898:	460c      	mov	r4, r1
 800a89a:	b125      	cbz	r5, 800a8a6 <__swsetup_r+0x16>
 800a89c:	69ab      	ldr	r3, [r5, #24]
 800a89e:	b913      	cbnz	r3, 800a8a6 <__swsetup_r+0x16>
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	f000 fff9 	bl	800b898 <__sinit>
 800a8a6:	4b2e      	ldr	r3, [pc, #184]	; (800a960 <__swsetup_r+0xd0>)
 800a8a8:	429c      	cmp	r4, r3
 800a8aa:	d10f      	bne.n	800a8cc <__swsetup_r+0x3c>
 800a8ac:	686c      	ldr	r4, [r5, #4]
 800a8ae:	89a3      	ldrh	r3, [r4, #12]
 800a8b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8b4:	0719      	lsls	r1, r3, #28
 800a8b6:	d42c      	bmi.n	800a912 <__swsetup_r+0x82>
 800a8b8:	06dd      	lsls	r5, r3, #27
 800a8ba:	d411      	bmi.n	800a8e0 <__swsetup_r+0x50>
 800a8bc:	2309      	movs	r3, #9
 800a8be:	6033      	str	r3, [r6, #0]
 800a8c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a8c4:	81a3      	strh	r3, [r4, #12]
 800a8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ca:	e03e      	b.n	800a94a <__swsetup_r+0xba>
 800a8cc:	4b25      	ldr	r3, [pc, #148]	; (800a964 <__swsetup_r+0xd4>)
 800a8ce:	429c      	cmp	r4, r3
 800a8d0:	d101      	bne.n	800a8d6 <__swsetup_r+0x46>
 800a8d2:	68ac      	ldr	r4, [r5, #8]
 800a8d4:	e7eb      	b.n	800a8ae <__swsetup_r+0x1e>
 800a8d6:	4b24      	ldr	r3, [pc, #144]	; (800a968 <__swsetup_r+0xd8>)
 800a8d8:	429c      	cmp	r4, r3
 800a8da:	bf08      	it	eq
 800a8dc:	68ec      	ldreq	r4, [r5, #12]
 800a8de:	e7e6      	b.n	800a8ae <__swsetup_r+0x1e>
 800a8e0:	0758      	lsls	r0, r3, #29
 800a8e2:	d512      	bpl.n	800a90a <__swsetup_r+0x7a>
 800a8e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8e6:	b141      	cbz	r1, 800a8fa <__swsetup_r+0x6a>
 800a8e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8ec:	4299      	cmp	r1, r3
 800a8ee:	d002      	beq.n	800a8f6 <__swsetup_r+0x66>
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	f001 fc8b 	bl	800c20c <_free_r>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	6363      	str	r3, [r4, #52]	; 0x34
 800a8fa:	89a3      	ldrh	r3, [r4, #12]
 800a8fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a900:	81a3      	strh	r3, [r4, #12]
 800a902:	2300      	movs	r3, #0
 800a904:	6063      	str	r3, [r4, #4]
 800a906:	6923      	ldr	r3, [r4, #16]
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	89a3      	ldrh	r3, [r4, #12]
 800a90c:	f043 0308 	orr.w	r3, r3, #8
 800a910:	81a3      	strh	r3, [r4, #12]
 800a912:	6923      	ldr	r3, [r4, #16]
 800a914:	b94b      	cbnz	r3, 800a92a <__swsetup_r+0x9a>
 800a916:	89a3      	ldrh	r3, [r4, #12]
 800a918:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a91c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a920:	d003      	beq.n	800a92a <__swsetup_r+0x9a>
 800a922:	4621      	mov	r1, r4
 800a924:	4630      	mov	r0, r6
 800a926:	f001 f881 	bl	800ba2c <__smakebuf_r>
 800a92a:	89a0      	ldrh	r0, [r4, #12]
 800a92c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a930:	f010 0301 	ands.w	r3, r0, #1
 800a934:	d00a      	beq.n	800a94c <__swsetup_r+0xbc>
 800a936:	2300      	movs	r3, #0
 800a938:	60a3      	str	r3, [r4, #8]
 800a93a:	6963      	ldr	r3, [r4, #20]
 800a93c:	425b      	negs	r3, r3
 800a93e:	61a3      	str	r3, [r4, #24]
 800a940:	6923      	ldr	r3, [r4, #16]
 800a942:	b943      	cbnz	r3, 800a956 <__swsetup_r+0xc6>
 800a944:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a948:	d1ba      	bne.n	800a8c0 <__swsetup_r+0x30>
 800a94a:	bd70      	pop	{r4, r5, r6, pc}
 800a94c:	0781      	lsls	r1, r0, #30
 800a94e:	bf58      	it	pl
 800a950:	6963      	ldrpl	r3, [r4, #20]
 800a952:	60a3      	str	r3, [r4, #8]
 800a954:	e7f4      	b.n	800a940 <__swsetup_r+0xb0>
 800a956:	2000      	movs	r0, #0
 800a958:	e7f7      	b.n	800a94a <__swsetup_r+0xba>
 800a95a:	bf00      	nop
 800a95c:	2000068c 	.word	0x2000068c
 800a960:	0800cf30 	.word	0x0800cf30
 800a964:	0800cf50 	.word	0x0800cf50
 800a968:	0800cf10 	.word	0x0800cf10

0800a96c <quorem>:
 800a96c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a970:	6903      	ldr	r3, [r0, #16]
 800a972:	690c      	ldr	r4, [r1, #16]
 800a974:	42a3      	cmp	r3, r4
 800a976:	4607      	mov	r7, r0
 800a978:	f2c0 8081 	blt.w	800aa7e <quorem+0x112>
 800a97c:	3c01      	subs	r4, #1
 800a97e:	f101 0814 	add.w	r8, r1, #20
 800a982:	f100 0514 	add.w	r5, r0, #20
 800a986:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a98a:	9301      	str	r3, [sp, #4]
 800a98c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a990:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a994:	3301      	adds	r3, #1
 800a996:	429a      	cmp	r2, r3
 800a998:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a99c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a9a0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a9a4:	d331      	bcc.n	800aa0a <quorem+0x9e>
 800a9a6:	f04f 0e00 	mov.w	lr, #0
 800a9aa:	4640      	mov	r0, r8
 800a9ac:	46ac      	mov	ip, r5
 800a9ae:	46f2      	mov	sl, lr
 800a9b0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a9b4:	b293      	uxth	r3, r2
 800a9b6:	fb06 e303 	mla	r3, r6, r3, lr
 800a9ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	ebaa 0303 	sub.w	r3, sl, r3
 800a9c4:	f8dc a000 	ldr.w	sl, [ip]
 800a9c8:	0c12      	lsrs	r2, r2, #16
 800a9ca:	fa13 f38a 	uxtah	r3, r3, sl
 800a9ce:	fb06 e202 	mla	r2, r6, r2, lr
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	9b00      	ldr	r3, [sp, #0]
 800a9d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a9da:	b292      	uxth	r2, r2
 800a9dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a9e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9e4:	f8bd 3000 	ldrh.w	r3, [sp]
 800a9e8:	4581      	cmp	r9, r0
 800a9ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9ee:	f84c 3b04 	str.w	r3, [ip], #4
 800a9f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a9f6:	d2db      	bcs.n	800a9b0 <quorem+0x44>
 800a9f8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a9fc:	b92b      	cbnz	r3, 800aa0a <quorem+0x9e>
 800a9fe:	9b01      	ldr	r3, [sp, #4]
 800aa00:	3b04      	subs	r3, #4
 800aa02:	429d      	cmp	r5, r3
 800aa04:	461a      	mov	r2, r3
 800aa06:	d32e      	bcc.n	800aa66 <quorem+0xfa>
 800aa08:	613c      	str	r4, [r7, #16]
 800aa0a:	4638      	mov	r0, r7
 800aa0c:	f001 fae6 	bl	800bfdc <__mcmp>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	db24      	blt.n	800aa5e <quorem+0xf2>
 800aa14:	3601      	adds	r6, #1
 800aa16:	4628      	mov	r0, r5
 800aa18:	f04f 0c00 	mov.w	ip, #0
 800aa1c:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa20:	f8d0 e000 	ldr.w	lr, [r0]
 800aa24:	b293      	uxth	r3, r2
 800aa26:	ebac 0303 	sub.w	r3, ip, r3
 800aa2a:	0c12      	lsrs	r2, r2, #16
 800aa2c:	fa13 f38e 	uxtah	r3, r3, lr
 800aa30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aa34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa3e:	45c1      	cmp	r9, r8
 800aa40:	f840 3b04 	str.w	r3, [r0], #4
 800aa44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aa48:	d2e8      	bcs.n	800aa1c <quorem+0xb0>
 800aa4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa52:	b922      	cbnz	r2, 800aa5e <quorem+0xf2>
 800aa54:	3b04      	subs	r3, #4
 800aa56:	429d      	cmp	r5, r3
 800aa58:	461a      	mov	r2, r3
 800aa5a:	d30a      	bcc.n	800aa72 <quorem+0x106>
 800aa5c:	613c      	str	r4, [r7, #16]
 800aa5e:	4630      	mov	r0, r6
 800aa60:	b003      	add	sp, #12
 800aa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa66:	6812      	ldr	r2, [r2, #0]
 800aa68:	3b04      	subs	r3, #4
 800aa6a:	2a00      	cmp	r2, #0
 800aa6c:	d1cc      	bne.n	800aa08 <quorem+0x9c>
 800aa6e:	3c01      	subs	r4, #1
 800aa70:	e7c7      	b.n	800aa02 <quorem+0x96>
 800aa72:	6812      	ldr	r2, [r2, #0]
 800aa74:	3b04      	subs	r3, #4
 800aa76:	2a00      	cmp	r2, #0
 800aa78:	d1f0      	bne.n	800aa5c <quorem+0xf0>
 800aa7a:	3c01      	subs	r4, #1
 800aa7c:	e7eb      	b.n	800aa56 <quorem+0xea>
 800aa7e:	2000      	movs	r0, #0
 800aa80:	e7ee      	b.n	800aa60 <quorem+0xf4>
 800aa82:	0000      	movs	r0, r0
 800aa84:	0000      	movs	r0, r0
	...

0800aa88 <_dtoa_r>:
 800aa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8c:	ed2d 8b04 	vpush	{d8-d9}
 800aa90:	ec57 6b10 	vmov	r6, r7, d0
 800aa94:	b093      	sub	sp, #76	; 0x4c
 800aa96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aa9c:	9106      	str	r1, [sp, #24]
 800aa9e:	ee10 aa10 	vmov	sl, s0
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	9209      	str	r2, [sp, #36]	; 0x24
 800aaa6:	930c      	str	r3, [sp, #48]	; 0x30
 800aaa8:	46bb      	mov	fp, r7
 800aaaa:	b975      	cbnz	r5, 800aaca <_dtoa_r+0x42>
 800aaac:	2010      	movs	r0, #16
 800aaae:	f000 fffd 	bl	800baac <malloc>
 800aab2:	4602      	mov	r2, r0
 800aab4:	6260      	str	r0, [r4, #36]	; 0x24
 800aab6:	b920      	cbnz	r0, 800aac2 <_dtoa_r+0x3a>
 800aab8:	4ba7      	ldr	r3, [pc, #668]	; (800ad58 <_dtoa_r+0x2d0>)
 800aaba:	21ea      	movs	r1, #234	; 0xea
 800aabc:	48a7      	ldr	r0, [pc, #668]	; (800ad5c <_dtoa_r+0x2d4>)
 800aabe:	f001 fe45 	bl	800c74c <__assert_func>
 800aac2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aac6:	6005      	str	r5, [r0, #0]
 800aac8:	60c5      	str	r5, [r0, #12]
 800aaca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aacc:	6819      	ldr	r1, [r3, #0]
 800aace:	b151      	cbz	r1, 800aae6 <_dtoa_r+0x5e>
 800aad0:	685a      	ldr	r2, [r3, #4]
 800aad2:	604a      	str	r2, [r1, #4]
 800aad4:	2301      	movs	r3, #1
 800aad6:	4093      	lsls	r3, r2
 800aad8:	608b      	str	r3, [r1, #8]
 800aada:	4620      	mov	r0, r4
 800aadc:	f001 f83c 	bl	800bb58 <_Bfree>
 800aae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aae2:	2200      	movs	r2, #0
 800aae4:	601a      	str	r2, [r3, #0]
 800aae6:	1e3b      	subs	r3, r7, #0
 800aae8:	bfaa      	itet	ge
 800aaea:	2300      	movge	r3, #0
 800aaec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800aaf0:	f8c8 3000 	strge.w	r3, [r8]
 800aaf4:	4b9a      	ldr	r3, [pc, #616]	; (800ad60 <_dtoa_r+0x2d8>)
 800aaf6:	bfbc      	itt	lt
 800aaf8:	2201      	movlt	r2, #1
 800aafa:	f8c8 2000 	strlt.w	r2, [r8]
 800aafe:	ea33 030b 	bics.w	r3, r3, fp
 800ab02:	d11b      	bne.n	800ab3c <_dtoa_r+0xb4>
 800ab04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab06:	f242 730f 	movw	r3, #9999	; 0x270f
 800ab0a:	6013      	str	r3, [r2, #0]
 800ab0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab10:	4333      	orrs	r3, r6
 800ab12:	f000 8592 	beq.w	800b63a <_dtoa_r+0xbb2>
 800ab16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab18:	b963      	cbnz	r3, 800ab34 <_dtoa_r+0xac>
 800ab1a:	4b92      	ldr	r3, [pc, #584]	; (800ad64 <_dtoa_r+0x2dc>)
 800ab1c:	e022      	b.n	800ab64 <_dtoa_r+0xdc>
 800ab1e:	4b92      	ldr	r3, [pc, #584]	; (800ad68 <_dtoa_r+0x2e0>)
 800ab20:	9301      	str	r3, [sp, #4]
 800ab22:	3308      	adds	r3, #8
 800ab24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ab26:	6013      	str	r3, [r2, #0]
 800ab28:	9801      	ldr	r0, [sp, #4]
 800ab2a:	b013      	add	sp, #76	; 0x4c
 800ab2c:	ecbd 8b04 	vpop	{d8-d9}
 800ab30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab34:	4b8b      	ldr	r3, [pc, #556]	; (800ad64 <_dtoa_r+0x2dc>)
 800ab36:	9301      	str	r3, [sp, #4]
 800ab38:	3303      	adds	r3, #3
 800ab3a:	e7f3      	b.n	800ab24 <_dtoa_r+0x9c>
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	2300      	movs	r3, #0
 800ab40:	4650      	mov	r0, sl
 800ab42:	4659      	mov	r1, fp
 800ab44:	f7f5 ffe8 	bl	8000b18 <__aeabi_dcmpeq>
 800ab48:	ec4b ab19 	vmov	d9, sl, fp
 800ab4c:	4680      	mov	r8, r0
 800ab4e:	b158      	cbz	r0, 800ab68 <_dtoa_r+0xe0>
 800ab50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab52:	2301      	movs	r3, #1
 800ab54:	6013      	str	r3, [r2, #0]
 800ab56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f000 856b 	beq.w	800b634 <_dtoa_r+0xbac>
 800ab5e:	4883      	ldr	r0, [pc, #524]	; (800ad6c <_dtoa_r+0x2e4>)
 800ab60:	6018      	str	r0, [r3, #0]
 800ab62:	1e43      	subs	r3, r0, #1
 800ab64:	9301      	str	r3, [sp, #4]
 800ab66:	e7df      	b.n	800ab28 <_dtoa_r+0xa0>
 800ab68:	ec4b ab10 	vmov	d0, sl, fp
 800ab6c:	aa10      	add	r2, sp, #64	; 0x40
 800ab6e:	a911      	add	r1, sp, #68	; 0x44
 800ab70:	4620      	mov	r0, r4
 800ab72:	f001 fad9 	bl	800c128 <__d2b>
 800ab76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ab7a:	ee08 0a10 	vmov	s16, r0
 800ab7e:	2d00      	cmp	r5, #0
 800ab80:	f000 8084 	beq.w	800ac8c <_dtoa_r+0x204>
 800ab84:	ee19 3a90 	vmov	r3, s19
 800ab88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ab90:	4656      	mov	r6, sl
 800ab92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ab96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ab9e:	4b74      	ldr	r3, [pc, #464]	; (800ad70 <_dtoa_r+0x2e8>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	4630      	mov	r0, r6
 800aba4:	4639      	mov	r1, r7
 800aba6:	f7f5 fb97 	bl	80002d8 <__aeabi_dsub>
 800abaa:	a365      	add	r3, pc, #404	; (adr r3, 800ad40 <_dtoa_r+0x2b8>)
 800abac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb0:	f7f5 fd4a 	bl	8000648 <__aeabi_dmul>
 800abb4:	a364      	add	r3, pc, #400	; (adr r3, 800ad48 <_dtoa_r+0x2c0>)
 800abb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abba:	f7f5 fb8f 	bl	80002dc <__adddf3>
 800abbe:	4606      	mov	r6, r0
 800abc0:	4628      	mov	r0, r5
 800abc2:	460f      	mov	r7, r1
 800abc4:	f7f5 fcd6 	bl	8000574 <__aeabi_i2d>
 800abc8:	a361      	add	r3, pc, #388	; (adr r3, 800ad50 <_dtoa_r+0x2c8>)
 800abca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abce:	f7f5 fd3b 	bl	8000648 <__aeabi_dmul>
 800abd2:	4602      	mov	r2, r0
 800abd4:	460b      	mov	r3, r1
 800abd6:	4630      	mov	r0, r6
 800abd8:	4639      	mov	r1, r7
 800abda:	f7f5 fb7f 	bl	80002dc <__adddf3>
 800abde:	4606      	mov	r6, r0
 800abe0:	460f      	mov	r7, r1
 800abe2:	f7f5 ffe1 	bl	8000ba8 <__aeabi_d2iz>
 800abe6:	2200      	movs	r2, #0
 800abe8:	9000      	str	r0, [sp, #0]
 800abea:	2300      	movs	r3, #0
 800abec:	4630      	mov	r0, r6
 800abee:	4639      	mov	r1, r7
 800abf0:	f7f5 ff9c 	bl	8000b2c <__aeabi_dcmplt>
 800abf4:	b150      	cbz	r0, 800ac0c <_dtoa_r+0x184>
 800abf6:	9800      	ldr	r0, [sp, #0]
 800abf8:	f7f5 fcbc 	bl	8000574 <__aeabi_i2d>
 800abfc:	4632      	mov	r2, r6
 800abfe:	463b      	mov	r3, r7
 800ac00:	f7f5 ff8a 	bl	8000b18 <__aeabi_dcmpeq>
 800ac04:	b910      	cbnz	r0, 800ac0c <_dtoa_r+0x184>
 800ac06:	9b00      	ldr	r3, [sp, #0]
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	9300      	str	r3, [sp, #0]
 800ac0c:	9b00      	ldr	r3, [sp, #0]
 800ac0e:	2b16      	cmp	r3, #22
 800ac10:	d85a      	bhi.n	800acc8 <_dtoa_r+0x240>
 800ac12:	9a00      	ldr	r2, [sp, #0]
 800ac14:	4b57      	ldr	r3, [pc, #348]	; (800ad74 <_dtoa_r+0x2ec>)
 800ac16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1e:	ec51 0b19 	vmov	r0, r1, d9
 800ac22:	f7f5 ff83 	bl	8000b2c <__aeabi_dcmplt>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	d050      	beq.n	800accc <_dtoa_r+0x244>
 800ac2a:	9b00      	ldr	r3, [sp, #0]
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	2300      	movs	r3, #0
 800ac32:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac36:	1b5d      	subs	r5, r3, r5
 800ac38:	1e6b      	subs	r3, r5, #1
 800ac3a:	9305      	str	r3, [sp, #20]
 800ac3c:	bf45      	ittet	mi
 800ac3e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ac42:	9304      	strmi	r3, [sp, #16]
 800ac44:	2300      	movpl	r3, #0
 800ac46:	2300      	movmi	r3, #0
 800ac48:	bf4c      	ite	mi
 800ac4a:	9305      	strmi	r3, [sp, #20]
 800ac4c:	9304      	strpl	r3, [sp, #16]
 800ac4e:	9b00      	ldr	r3, [sp, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	db3d      	blt.n	800acd0 <_dtoa_r+0x248>
 800ac54:	9b05      	ldr	r3, [sp, #20]
 800ac56:	9a00      	ldr	r2, [sp, #0]
 800ac58:	920a      	str	r2, [sp, #40]	; 0x28
 800ac5a:	4413      	add	r3, r2
 800ac5c:	9305      	str	r3, [sp, #20]
 800ac5e:	2300      	movs	r3, #0
 800ac60:	9307      	str	r3, [sp, #28]
 800ac62:	9b06      	ldr	r3, [sp, #24]
 800ac64:	2b09      	cmp	r3, #9
 800ac66:	f200 8089 	bhi.w	800ad7c <_dtoa_r+0x2f4>
 800ac6a:	2b05      	cmp	r3, #5
 800ac6c:	bfc4      	itt	gt
 800ac6e:	3b04      	subgt	r3, #4
 800ac70:	9306      	strgt	r3, [sp, #24]
 800ac72:	9b06      	ldr	r3, [sp, #24]
 800ac74:	f1a3 0302 	sub.w	r3, r3, #2
 800ac78:	bfcc      	ite	gt
 800ac7a:	2500      	movgt	r5, #0
 800ac7c:	2501      	movle	r5, #1
 800ac7e:	2b03      	cmp	r3, #3
 800ac80:	f200 8087 	bhi.w	800ad92 <_dtoa_r+0x30a>
 800ac84:	e8df f003 	tbb	[pc, r3]
 800ac88:	59383a2d 	.word	0x59383a2d
 800ac8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ac90:	441d      	add	r5, r3
 800ac92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ac96:	2b20      	cmp	r3, #32
 800ac98:	bfc1      	itttt	gt
 800ac9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ac9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aca2:	fa0b f303 	lslgt.w	r3, fp, r3
 800aca6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800acaa:	bfda      	itte	le
 800acac:	f1c3 0320 	rsble	r3, r3, #32
 800acb0:	fa06 f003 	lslle.w	r0, r6, r3
 800acb4:	4318      	orrgt	r0, r3
 800acb6:	f7f5 fc4d 	bl	8000554 <__aeabi_ui2d>
 800acba:	2301      	movs	r3, #1
 800acbc:	4606      	mov	r6, r0
 800acbe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800acc2:	3d01      	subs	r5, #1
 800acc4:	930e      	str	r3, [sp, #56]	; 0x38
 800acc6:	e76a      	b.n	800ab9e <_dtoa_r+0x116>
 800acc8:	2301      	movs	r3, #1
 800acca:	e7b2      	b.n	800ac32 <_dtoa_r+0x1aa>
 800accc:	900b      	str	r0, [sp, #44]	; 0x2c
 800acce:	e7b1      	b.n	800ac34 <_dtoa_r+0x1ac>
 800acd0:	9b04      	ldr	r3, [sp, #16]
 800acd2:	9a00      	ldr	r2, [sp, #0]
 800acd4:	1a9b      	subs	r3, r3, r2
 800acd6:	9304      	str	r3, [sp, #16]
 800acd8:	4253      	negs	r3, r2
 800acda:	9307      	str	r3, [sp, #28]
 800acdc:	2300      	movs	r3, #0
 800acde:	930a      	str	r3, [sp, #40]	; 0x28
 800ace0:	e7bf      	b.n	800ac62 <_dtoa_r+0x1da>
 800ace2:	2300      	movs	r3, #0
 800ace4:	9308      	str	r3, [sp, #32]
 800ace6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ace8:	2b00      	cmp	r3, #0
 800acea:	dc55      	bgt.n	800ad98 <_dtoa_r+0x310>
 800acec:	2301      	movs	r3, #1
 800acee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800acf2:	461a      	mov	r2, r3
 800acf4:	9209      	str	r2, [sp, #36]	; 0x24
 800acf6:	e00c      	b.n	800ad12 <_dtoa_r+0x28a>
 800acf8:	2301      	movs	r3, #1
 800acfa:	e7f3      	b.n	800ace4 <_dtoa_r+0x25c>
 800acfc:	2300      	movs	r3, #0
 800acfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad00:	9308      	str	r3, [sp, #32]
 800ad02:	9b00      	ldr	r3, [sp, #0]
 800ad04:	4413      	add	r3, r2
 800ad06:	9302      	str	r3, [sp, #8]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	9303      	str	r3, [sp, #12]
 800ad0e:	bfb8      	it	lt
 800ad10:	2301      	movlt	r3, #1
 800ad12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ad14:	2200      	movs	r2, #0
 800ad16:	6042      	str	r2, [r0, #4]
 800ad18:	2204      	movs	r2, #4
 800ad1a:	f102 0614 	add.w	r6, r2, #20
 800ad1e:	429e      	cmp	r6, r3
 800ad20:	6841      	ldr	r1, [r0, #4]
 800ad22:	d93d      	bls.n	800ada0 <_dtoa_r+0x318>
 800ad24:	4620      	mov	r0, r4
 800ad26:	f000 fed7 	bl	800bad8 <_Balloc>
 800ad2a:	9001      	str	r0, [sp, #4]
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d13b      	bne.n	800ada8 <_dtoa_r+0x320>
 800ad30:	4b11      	ldr	r3, [pc, #68]	; (800ad78 <_dtoa_r+0x2f0>)
 800ad32:	4602      	mov	r2, r0
 800ad34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ad38:	e6c0      	b.n	800aabc <_dtoa_r+0x34>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e7df      	b.n	800acfe <_dtoa_r+0x276>
 800ad3e:	bf00      	nop
 800ad40:	636f4361 	.word	0x636f4361
 800ad44:	3fd287a7 	.word	0x3fd287a7
 800ad48:	8b60c8b3 	.word	0x8b60c8b3
 800ad4c:	3fc68a28 	.word	0x3fc68a28
 800ad50:	509f79fb 	.word	0x509f79fb
 800ad54:	3fd34413 	.word	0x3fd34413
 800ad58:	0800ce8d 	.word	0x0800ce8d
 800ad5c:	0800cea4 	.word	0x0800cea4
 800ad60:	7ff00000 	.word	0x7ff00000
 800ad64:	0800ce89 	.word	0x0800ce89
 800ad68:	0800ce80 	.word	0x0800ce80
 800ad6c:	0800ce5d 	.word	0x0800ce5d
 800ad70:	3ff80000 	.word	0x3ff80000
 800ad74:	0800cff8 	.word	0x0800cff8
 800ad78:	0800ceff 	.word	0x0800ceff
 800ad7c:	2501      	movs	r5, #1
 800ad7e:	2300      	movs	r3, #0
 800ad80:	9306      	str	r3, [sp, #24]
 800ad82:	9508      	str	r5, [sp, #32]
 800ad84:	f04f 33ff 	mov.w	r3, #4294967295
 800ad88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	2312      	movs	r3, #18
 800ad90:	e7b0      	b.n	800acf4 <_dtoa_r+0x26c>
 800ad92:	2301      	movs	r3, #1
 800ad94:	9308      	str	r3, [sp, #32]
 800ad96:	e7f5      	b.n	800ad84 <_dtoa_r+0x2fc>
 800ad98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ad9e:	e7b8      	b.n	800ad12 <_dtoa_r+0x28a>
 800ada0:	3101      	adds	r1, #1
 800ada2:	6041      	str	r1, [r0, #4]
 800ada4:	0052      	lsls	r2, r2, #1
 800ada6:	e7b8      	b.n	800ad1a <_dtoa_r+0x292>
 800ada8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adaa:	9a01      	ldr	r2, [sp, #4]
 800adac:	601a      	str	r2, [r3, #0]
 800adae:	9b03      	ldr	r3, [sp, #12]
 800adb0:	2b0e      	cmp	r3, #14
 800adb2:	f200 809d 	bhi.w	800aef0 <_dtoa_r+0x468>
 800adb6:	2d00      	cmp	r5, #0
 800adb8:	f000 809a 	beq.w	800aef0 <_dtoa_r+0x468>
 800adbc:	9b00      	ldr	r3, [sp, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	dd32      	ble.n	800ae28 <_dtoa_r+0x3a0>
 800adc2:	4ab7      	ldr	r2, [pc, #732]	; (800b0a0 <_dtoa_r+0x618>)
 800adc4:	f003 030f 	and.w	r3, r3, #15
 800adc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800adcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800add0:	9b00      	ldr	r3, [sp, #0]
 800add2:	05d8      	lsls	r0, r3, #23
 800add4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800add8:	d516      	bpl.n	800ae08 <_dtoa_r+0x380>
 800adda:	4bb2      	ldr	r3, [pc, #712]	; (800b0a4 <_dtoa_r+0x61c>)
 800addc:	ec51 0b19 	vmov	r0, r1, d9
 800ade0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ade4:	f7f5 fd5a 	bl	800089c <__aeabi_ddiv>
 800ade8:	f007 070f 	and.w	r7, r7, #15
 800adec:	4682      	mov	sl, r0
 800adee:	468b      	mov	fp, r1
 800adf0:	2503      	movs	r5, #3
 800adf2:	4eac      	ldr	r6, [pc, #688]	; (800b0a4 <_dtoa_r+0x61c>)
 800adf4:	b957      	cbnz	r7, 800ae0c <_dtoa_r+0x384>
 800adf6:	4642      	mov	r2, r8
 800adf8:	464b      	mov	r3, r9
 800adfa:	4650      	mov	r0, sl
 800adfc:	4659      	mov	r1, fp
 800adfe:	f7f5 fd4d 	bl	800089c <__aeabi_ddiv>
 800ae02:	4682      	mov	sl, r0
 800ae04:	468b      	mov	fp, r1
 800ae06:	e028      	b.n	800ae5a <_dtoa_r+0x3d2>
 800ae08:	2502      	movs	r5, #2
 800ae0a:	e7f2      	b.n	800adf2 <_dtoa_r+0x36a>
 800ae0c:	07f9      	lsls	r1, r7, #31
 800ae0e:	d508      	bpl.n	800ae22 <_dtoa_r+0x39a>
 800ae10:	4640      	mov	r0, r8
 800ae12:	4649      	mov	r1, r9
 800ae14:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae18:	f7f5 fc16 	bl	8000648 <__aeabi_dmul>
 800ae1c:	3501      	adds	r5, #1
 800ae1e:	4680      	mov	r8, r0
 800ae20:	4689      	mov	r9, r1
 800ae22:	107f      	asrs	r7, r7, #1
 800ae24:	3608      	adds	r6, #8
 800ae26:	e7e5      	b.n	800adf4 <_dtoa_r+0x36c>
 800ae28:	f000 809b 	beq.w	800af62 <_dtoa_r+0x4da>
 800ae2c:	9b00      	ldr	r3, [sp, #0]
 800ae2e:	4f9d      	ldr	r7, [pc, #628]	; (800b0a4 <_dtoa_r+0x61c>)
 800ae30:	425e      	negs	r6, r3
 800ae32:	4b9b      	ldr	r3, [pc, #620]	; (800b0a0 <_dtoa_r+0x618>)
 800ae34:	f006 020f 	and.w	r2, r6, #15
 800ae38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae40:	ec51 0b19 	vmov	r0, r1, d9
 800ae44:	f7f5 fc00 	bl	8000648 <__aeabi_dmul>
 800ae48:	1136      	asrs	r6, r6, #4
 800ae4a:	4682      	mov	sl, r0
 800ae4c:	468b      	mov	fp, r1
 800ae4e:	2300      	movs	r3, #0
 800ae50:	2502      	movs	r5, #2
 800ae52:	2e00      	cmp	r6, #0
 800ae54:	d17a      	bne.n	800af4c <_dtoa_r+0x4c4>
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1d3      	bne.n	800ae02 <_dtoa_r+0x37a>
 800ae5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f000 8082 	beq.w	800af66 <_dtoa_r+0x4de>
 800ae62:	4b91      	ldr	r3, [pc, #580]	; (800b0a8 <_dtoa_r+0x620>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	4650      	mov	r0, sl
 800ae68:	4659      	mov	r1, fp
 800ae6a:	f7f5 fe5f 	bl	8000b2c <__aeabi_dcmplt>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	d079      	beq.n	800af66 <_dtoa_r+0x4de>
 800ae72:	9b03      	ldr	r3, [sp, #12]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d076      	beq.n	800af66 <_dtoa_r+0x4de>
 800ae78:	9b02      	ldr	r3, [sp, #8]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	dd36      	ble.n	800aeec <_dtoa_r+0x464>
 800ae7e:	9b00      	ldr	r3, [sp, #0]
 800ae80:	4650      	mov	r0, sl
 800ae82:	4659      	mov	r1, fp
 800ae84:	1e5f      	subs	r7, r3, #1
 800ae86:	2200      	movs	r2, #0
 800ae88:	4b88      	ldr	r3, [pc, #544]	; (800b0ac <_dtoa_r+0x624>)
 800ae8a:	f7f5 fbdd 	bl	8000648 <__aeabi_dmul>
 800ae8e:	9e02      	ldr	r6, [sp, #8]
 800ae90:	4682      	mov	sl, r0
 800ae92:	468b      	mov	fp, r1
 800ae94:	3501      	adds	r5, #1
 800ae96:	4628      	mov	r0, r5
 800ae98:	f7f5 fb6c 	bl	8000574 <__aeabi_i2d>
 800ae9c:	4652      	mov	r2, sl
 800ae9e:	465b      	mov	r3, fp
 800aea0:	f7f5 fbd2 	bl	8000648 <__aeabi_dmul>
 800aea4:	4b82      	ldr	r3, [pc, #520]	; (800b0b0 <_dtoa_r+0x628>)
 800aea6:	2200      	movs	r2, #0
 800aea8:	f7f5 fa18 	bl	80002dc <__adddf3>
 800aeac:	46d0      	mov	r8, sl
 800aeae:	46d9      	mov	r9, fp
 800aeb0:	4682      	mov	sl, r0
 800aeb2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800aeb6:	2e00      	cmp	r6, #0
 800aeb8:	d158      	bne.n	800af6c <_dtoa_r+0x4e4>
 800aeba:	4b7e      	ldr	r3, [pc, #504]	; (800b0b4 <_dtoa_r+0x62c>)
 800aebc:	2200      	movs	r2, #0
 800aebe:	4640      	mov	r0, r8
 800aec0:	4649      	mov	r1, r9
 800aec2:	f7f5 fa09 	bl	80002d8 <__aeabi_dsub>
 800aec6:	4652      	mov	r2, sl
 800aec8:	465b      	mov	r3, fp
 800aeca:	4680      	mov	r8, r0
 800aecc:	4689      	mov	r9, r1
 800aece:	f7f5 fe4b 	bl	8000b68 <__aeabi_dcmpgt>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	f040 8295 	bne.w	800b402 <_dtoa_r+0x97a>
 800aed8:	4652      	mov	r2, sl
 800aeda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aede:	4640      	mov	r0, r8
 800aee0:	4649      	mov	r1, r9
 800aee2:	f7f5 fe23 	bl	8000b2c <__aeabi_dcmplt>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	f040 8289 	bne.w	800b3fe <_dtoa_r+0x976>
 800aeec:	ec5b ab19 	vmov	sl, fp, d9
 800aef0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f2c0 8148 	blt.w	800b188 <_dtoa_r+0x700>
 800aef8:	9a00      	ldr	r2, [sp, #0]
 800aefa:	2a0e      	cmp	r2, #14
 800aefc:	f300 8144 	bgt.w	800b188 <_dtoa_r+0x700>
 800af00:	4b67      	ldr	r3, [pc, #412]	; (800b0a0 <_dtoa_r+0x618>)
 800af02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af06:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f280 80d5 	bge.w	800b0bc <_dtoa_r+0x634>
 800af12:	9b03      	ldr	r3, [sp, #12]
 800af14:	2b00      	cmp	r3, #0
 800af16:	f300 80d1 	bgt.w	800b0bc <_dtoa_r+0x634>
 800af1a:	f040 826f 	bne.w	800b3fc <_dtoa_r+0x974>
 800af1e:	4b65      	ldr	r3, [pc, #404]	; (800b0b4 <_dtoa_r+0x62c>)
 800af20:	2200      	movs	r2, #0
 800af22:	4640      	mov	r0, r8
 800af24:	4649      	mov	r1, r9
 800af26:	f7f5 fb8f 	bl	8000648 <__aeabi_dmul>
 800af2a:	4652      	mov	r2, sl
 800af2c:	465b      	mov	r3, fp
 800af2e:	f7f5 fe11 	bl	8000b54 <__aeabi_dcmpge>
 800af32:	9e03      	ldr	r6, [sp, #12]
 800af34:	4637      	mov	r7, r6
 800af36:	2800      	cmp	r0, #0
 800af38:	f040 8245 	bne.w	800b3c6 <_dtoa_r+0x93e>
 800af3c:	9d01      	ldr	r5, [sp, #4]
 800af3e:	2331      	movs	r3, #49	; 0x31
 800af40:	f805 3b01 	strb.w	r3, [r5], #1
 800af44:	9b00      	ldr	r3, [sp, #0]
 800af46:	3301      	adds	r3, #1
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	e240      	b.n	800b3ce <_dtoa_r+0x946>
 800af4c:	07f2      	lsls	r2, r6, #31
 800af4e:	d505      	bpl.n	800af5c <_dtoa_r+0x4d4>
 800af50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af54:	f7f5 fb78 	bl	8000648 <__aeabi_dmul>
 800af58:	3501      	adds	r5, #1
 800af5a:	2301      	movs	r3, #1
 800af5c:	1076      	asrs	r6, r6, #1
 800af5e:	3708      	adds	r7, #8
 800af60:	e777      	b.n	800ae52 <_dtoa_r+0x3ca>
 800af62:	2502      	movs	r5, #2
 800af64:	e779      	b.n	800ae5a <_dtoa_r+0x3d2>
 800af66:	9f00      	ldr	r7, [sp, #0]
 800af68:	9e03      	ldr	r6, [sp, #12]
 800af6a:	e794      	b.n	800ae96 <_dtoa_r+0x40e>
 800af6c:	9901      	ldr	r1, [sp, #4]
 800af6e:	4b4c      	ldr	r3, [pc, #304]	; (800b0a0 <_dtoa_r+0x618>)
 800af70:	4431      	add	r1, r6
 800af72:	910d      	str	r1, [sp, #52]	; 0x34
 800af74:	9908      	ldr	r1, [sp, #32]
 800af76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800af7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af7e:	2900      	cmp	r1, #0
 800af80:	d043      	beq.n	800b00a <_dtoa_r+0x582>
 800af82:	494d      	ldr	r1, [pc, #308]	; (800b0b8 <_dtoa_r+0x630>)
 800af84:	2000      	movs	r0, #0
 800af86:	f7f5 fc89 	bl	800089c <__aeabi_ddiv>
 800af8a:	4652      	mov	r2, sl
 800af8c:	465b      	mov	r3, fp
 800af8e:	f7f5 f9a3 	bl	80002d8 <__aeabi_dsub>
 800af92:	9d01      	ldr	r5, [sp, #4]
 800af94:	4682      	mov	sl, r0
 800af96:	468b      	mov	fp, r1
 800af98:	4649      	mov	r1, r9
 800af9a:	4640      	mov	r0, r8
 800af9c:	f7f5 fe04 	bl	8000ba8 <__aeabi_d2iz>
 800afa0:	4606      	mov	r6, r0
 800afa2:	f7f5 fae7 	bl	8000574 <__aeabi_i2d>
 800afa6:	4602      	mov	r2, r0
 800afa8:	460b      	mov	r3, r1
 800afaa:	4640      	mov	r0, r8
 800afac:	4649      	mov	r1, r9
 800afae:	f7f5 f993 	bl	80002d8 <__aeabi_dsub>
 800afb2:	3630      	adds	r6, #48	; 0x30
 800afb4:	f805 6b01 	strb.w	r6, [r5], #1
 800afb8:	4652      	mov	r2, sl
 800afba:	465b      	mov	r3, fp
 800afbc:	4680      	mov	r8, r0
 800afbe:	4689      	mov	r9, r1
 800afc0:	f7f5 fdb4 	bl	8000b2c <__aeabi_dcmplt>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d163      	bne.n	800b090 <_dtoa_r+0x608>
 800afc8:	4642      	mov	r2, r8
 800afca:	464b      	mov	r3, r9
 800afcc:	4936      	ldr	r1, [pc, #216]	; (800b0a8 <_dtoa_r+0x620>)
 800afce:	2000      	movs	r0, #0
 800afd0:	f7f5 f982 	bl	80002d8 <__aeabi_dsub>
 800afd4:	4652      	mov	r2, sl
 800afd6:	465b      	mov	r3, fp
 800afd8:	f7f5 fda8 	bl	8000b2c <__aeabi_dcmplt>
 800afdc:	2800      	cmp	r0, #0
 800afde:	f040 80b5 	bne.w	800b14c <_dtoa_r+0x6c4>
 800afe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afe4:	429d      	cmp	r5, r3
 800afe6:	d081      	beq.n	800aeec <_dtoa_r+0x464>
 800afe8:	4b30      	ldr	r3, [pc, #192]	; (800b0ac <_dtoa_r+0x624>)
 800afea:	2200      	movs	r2, #0
 800afec:	4650      	mov	r0, sl
 800afee:	4659      	mov	r1, fp
 800aff0:	f7f5 fb2a 	bl	8000648 <__aeabi_dmul>
 800aff4:	4b2d      	ldr	r3, [pc, #180]	; (800b0ac <_dtoa_r+0x624>)
 800aff6:	4682      	mov	sl, r0
 800aff8:	468b      	mov	fp, r1
 800affa:	4640      	mov	r0, r8
 800affc:	4649      	mov	r1, r9
 800affe:	2200      	movs	r2, #0
 800b000:	f7f5 fb22 	bl	8000648 <__aeabi_dmul>
 800b004:	4680      	mov	r8, r0
 800b006:	4689      	mov	r9, r1
 800b008:	e7c6      	b.n	800af98 <_dtoa_r+0x510>
 800b00a:	4650      	mov	r0, sl
 800b00c:	4659      	mov	r1, fp
 800b00e:	f7f5 fb1b 	bl	8000648 <__aeabi_dmul>
 800b012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b014:	9d01      	ldr	r5, [sp, #4]
 800b016:	930f      	str	r3, [sp, #60]	; 0x3c
 800b018:	4682      	mov	sl, r0
 800b01a:	468b      	mov	fp, r1
 800b01c:	4649      	mov	r1, r9
 800b01e:	4640      	mov	r0, r8
 800b020:	f7f5 fdc2 	bl	8000ba8 <__aeabi_d2iz>
 800b024:	4606      	mov	r6, r0
 800b026:	f7f5 faa5 	bl	8000574 <__aeabi_i2d>
 800b02a:	3630      	adds	r6, #48	; 0x30
 800b02c:	4602      	mov	r2, r0
 800b02e:	460b      	mov	r3, r1
 800b030:	4640      	mov	r0, r8
 800b032:	4649      	mov	r1, r9
 800b034:	f7f5 f950 	bl	80002d8 <__aeabi_dsub>
 800b038:	f805 6b01 	strb.w	r6, [r5], #1
 800b03c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b03e:	429d      	cmp	r5, r3
 800b040:	4680      	mov	r8, r0
 800b042:	4689      	mov	r9, r1
 800b044:	f04f 0200 	mov.w	r2, #0
 800b048:	d124      	bne.n	800b094 <_dtoa_r+0x60c>
 800b04a:	4b1b      	ldr	r3, [pc, #108]	; (800b0b8 <_dtoa_r+0x630>)
 800b04c:	4650      	mov	r0, sl
 800b04e:	4659      	mov	r1, fp
 800b050:	f7f5 f944 	bl	80002dc <__adddf3>
 800b054:	4602      	mov	r2, r0
 800b056:	460b      	mov	r3, r1
 800b058:	4640      	mov	r0, r8
 800b05a:	4649      	mov	r1, r9
 800b05c:	f7f5 fd84 	bl	8000b68 <__aeabi_dcmpgt>
 800b060:	2800      	cmp	r0, #0
 800b062:	d173      	bne.n	800b14c <_dtoa_r+0x6c4>
 800b064:	4652      	mov	r2, sl
 800b066:	465b      	mov	r3, fp
 800b068:	4913      	ldr	r1, [pc, #76]	; (800b0b8 <_dtoa_r+0x630>)
 800b06a:	2000      	movs	r0, #0
 800b06c:	f7f5 f934 	bl	80002d8 <__aeabi_dsub>
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	4640      	mov	r0, r8
 800b076:	4649      	mov	r1, r9
 800b078:	f7f5 fd58 	bl	8000b2c <__aeabi_dcmplt>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	f43f af35 	beq.w	800aeec <_dtoa_r+0x464>
 800b082:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b084:	1e6b      	subs	r3, r5, #1
 800b086:	930f      	str	r3, [sp, #60]	; 0x3c
 800b088:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b08c:	2b30      	cmp	r3, #48	; 0x30
 800b08e:	d0f8      	beq.n	800b082 <_dtoa_r+0x5fa>
 800b090:	9700      	str	r7, [sp, #0]
 800b092:	e049      	b.n	800b128 <_dtoa_r+0x6a0>
 800b094:	4b05      	ldr	r3, [pc, #20]	; (800b0ac <_dtoa_r+0x624>)
 800b096:	f7f5 fad7 	bl	8000648 <__aeabi_dmul>
 800b09a:	4680      	mov	r8, r0
 800b09c:	4689      	mov	r9, r1
 800b09e:	e7bd      	b.n	800b01c <_dtoa_r+0x594>
 800b0a0:	0800cff8 	.word	0x0800cff8
 800b0a4:	0800cfd0 	.word	0x0800cfd0
 800b0a8:	3ff00000 	.word	0x3ff00000
 800b0ac:	40240000 	.word	0x40240000
 800b0b0:	401c0000 	.word	0x401c0000
 800b0b4:	40140000 	.word	0x40140000
 800b0b8:	3fe00000 	.word	0x3fe00000
 800b0bc:	9d01      	ldr	r5, [sp, #4]
 800b0be:	4656      	mov	r6, sl
 800b0c0:	465f      	mov	r7, fp
 800b0c2:	4642      	mov	r2, r8
 800b0c4:	464b      	mov	r3, r9
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	4639      	mov	r1, r7
 800b0ca:	f7f5 fbe7 	bl	800089c <__aeabi_ddiv>
 800b0ce:	f7f5 fd6b 	bl	8000ba8 <__aeabi_d2iz>
 800b0d2:	4682      	mov	sl, r0
 800b0d4:	f7f5 fa4e 	bl	8000574 <__aeabi_i2d>
 800b0d8:	4642      	mov	r2, r8
 800b0da:	464b      	mov	r3, r9
 800b0dc:	f7f5 fab4 	bl	8000648 <__aeabi_dmul>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	4639      	mov	r1, r7
 800b0e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b0ec:	f7f5 f8f4 	bl	80002d8 <__aeabi_dsub>
 800b0f0:	f805 6b01 	strb.w	r6, [r5], #1
 800b0f4:	9e01      	ldr	r6, [sp, #4]
 800b0f6:	9f03      	ldr	r7, [sp, #12]
 800b0f8:	1bae      	subs	r6, r5, r6
 800b0fa:	42b7      	cmp	r7, r6
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	460b      	mov	r3, r1
 800b100:	d135      	bne.n	800b16e <_dtoa_r+0x6e6>
 800b102:	f7f5 f8eb 	bl	80002dc <__adddf3>
 800b106:	4642      	mov	r2, r8
 800b108:	464b      	mov	r3, r9
 800b10a:	4606      	mov	r6, r0
 800b10c:	460f      	mov	r7, r1
 800b10e:	f7f5 fd2b 	bl	8000b68 <__aeabi_dcmpgt>
 800b112:	b9d0      	cbnz	r0, 800b14a <_dtoa_r+0x6c2>
 800b114:	4642      	mov	r2, r8
 800b116:	464b      	mov	r3, r9
 800b118:	4630      	mov	r0, r6
 800b11a:	4639      	mov	r1, r7
 800b11c:	f7f5 fcfc 	bl	8000b18 <__aeabi_dcmpeq>
 800b120:	b110      	cbz	r0, 800b128 <_dtoa_r+0x6a0>
 800b122:	f01a 0f01 	tst.w	sl, #1
 800b126:	d110      	bne.n	800b14a <_dtoa_r+0x6c2>
 800b128:	4620      	mov	r0, r4
 800b12a:	ee18 1a10 	vmov	r1, s16
 800b12e:	f000 fd13 	bl	800bb58 <_Bfree>
 800b132:	2300      	movs	r3, #0
 800b134:	9800      	ldr	r0, [sp, #0]
 800b136:	702b      	strb	r3, [r5, #0]
 800b138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b13a:	3001      	adds	r0, #1
 800b13c:	6018      	str	r0, [r3, #0]
 800b13e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b140:	2b00      	cmp	r3, #0
 800b142:	f43f acf1 	beq.w	800ab28 <_dtoa_r+0xa0>
 800b146:	601d      	str	r5, [r3, #0]
 800b148:	e4ee      	b.n	800ab28 <_dtoa_r+0xa0>
 800b14a:	9f00      	ldr	r7, [sp, #0]
 800b14c:	462b      	mov	r3, r5
 800b14e:	461d      	mov	r5, r3
 800b150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b154:	2a39      	cmp	r2, #57	; 0x39
 800b156:	d106      	bne.n	800b166 <_dtoa_r+0x6de>
 800b158:	9a01      	ldr	r2, [sp, #4]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d1f7      	bne.n	800b14e <_dtoa_r+0x6c6>
 800b15e:	9901      	ldr	r1, [sp, #4]
 800b160:	2230      	movs	r2, #48	; 0x30
 800b162:	3701      	adds	r7, #1
 800b164:	700a      	strb	r2, [r1, #0]
 800b166:	781a      	ldrb	r2, [r3, #0]
 800b168:	3201      	adds	r2, #1
 800b16a:	701a      	strb	r2, [r3, #0]
 800b16c:	e790      	b.n	800b090 <_dtoa_r+0x608>
 800b16e:	4ba6      	ldr	r3, [pc, #664]	; (800b408 <_dtoa_r+0x980>)
 800b170:	2200      	movs	r2, #0
 800b172:	f7f5 fa69 	bl	8000648 <__aeabi_dmul>
 800b176:	2200      	movs	r2, #0
 800b178:	2300      	movs	r3, #0
 800b17a:	4606      	mov	r6, r0
 800b17c:	460f      	mov	r7, r1
 800b17e:	f7f5 fccb 	bl	8000b18 <__aeabi_dcmpeq>
 800b182:	2800      	cmp	r0, #0
 800b184:	d09d      	beq.n	800b0c2 <_dtoa_r+0x63a>
 800b186:	e7cf      	b.n	800b128 <_dtoa_r+0x6a0>
 800b188:	9a08      	ldr	r2, [sp, #32]
 800b18a:	2a00      	cmp	r2, #0
 800b18c:	f000 80d7 	beq.w	800b33e <_dtoa_r+0x8b6>
 800b190:	9a06      	ldr	r2, [sp, #24]
 800b192:	2a01      	cmp	r2, #1
 800b194:	f300 80ba 	bgt.w	800b30c <_dtoa_r+0x884>
 800b198:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b19a:	2a00      	cmp	r2, #0
 800b19c:	f000 80b2 	beq.w	800b304 <_dtoa_r+0x87c>
 800b1a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b1a4:	9e07      	ldr	r6, [sp, #28]
 800b1a6:	9d04      	ldr	r5, [sp, #16]
 800b1a8:	9a04      	ldr	r2, [sp, #16]
 800b1aa:	441a      	add	r2, r3
 800b1ac:	9204      	str	r2, [sp, #16]
 800b1ae:	9a05      	ldr	r2, [sp, #20]
 800b1b0:	2101      	movs	r1, #1
 800b1b2:	441a      	add	r2, r3
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	9205      	str	r2, [sp, #20]
 800b1b8:	f000 fd86 	bl	800bcc8 <__i2b>
 800b1bc:	4607      	mov	r7, r0
 800b1be:	2d00      	cmp	r5, #0
 800b1c0:	dd0c      	ble.n	800b1dc <_dtoa_r+0x754>
 800b1c2:	9b05      	ldr	r3, [sp, #20]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	dd09      	ble.n	800b1dc <_dtoa_r+0x754>
 800b1c8:	42ab      	cmp	r3, r5
 800b1ca:	9a04      	ldr	r2, [sp, #16]
 800b1cc:	bfa8      	it	ge
 800b1ce:	462b      	movge	r3, r5
 800b1d0:	1ad2      	subs	r2, r2, r3
 800b1d2:	9204      	str	r2, [sp, #16]
 800b1d4:	9a05      	ldr	r2, [sp, #20]
 800b1d6:	1aed      	subs	r5, r5, r3
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	9305      	str	r3, [sp, #20]
 800b1dc:	9b07      	ldr	r3, [sp, #28]
 800b1de:	b31b      	cbz	r3, 800b228 <_dtoa_r+0x7a0>
 800b1e0:	9b08      	ldr	r3, [sp, #32]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	f000 80af 	beq.w	800b346 <_dtoa_r+0x8be>
 800b1e8:	2e00      	cmp	r6, #0
 800b1ea:	dd13      	ble.n	800b214 <_dtoa_r+0x78c>
 800b1ec:	4639      	mov	r1, r7
 800b1ee:	4632      	mov	r2, r6
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f000 fe29 	bl	800be48 <__pow5mult>
 800b1f6:	ee18 2a10 	vmov	r2, s16
 800b1fa:	4601      	mov	r1, r0
 800b1fc:	4607      	mov	r7, r0
 800b1fe:	4620      	mov	r0, r4
 800b200:	f000 fd78 	bl	800bcf4 <__multiply>
 800b204:	ee18 1a10 	vmov	r1, s16
 800b208:	4680      	mov	r8, r0
 800b20a:	4620      	mov	r0, r4
 800b20c:	f000 fca4 	bl	800bb58 <_Bfree>
 800b210:	ee08 8a10 	vmov	s16, r8
 800b214:	9b07      	ldr	r3, [sp, #28]
 800b216:	1b9a      	subs	r2, r3, r6
 800b218:	d006      	beq.n	800b228 <_dtoa_r+0x7a0>
 800b21a:	ee18 1a10 	vmov	r1, s16
 800b21e:	4620      	mov	r0, r4
 800b220:	f000 fe12 	bl	800be48 <__pow5mult>
 800b224:	ee08 0a10 	vmov	s16, r0
 800b228:	2101      	movs	r1, #1
 800b22a:	4620      	mov	r0, r4
 800b22c:	f000 fd4c 	bl	800bcc8 <__i2b>
 800b230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b232:	2b00      	cmp	r3, #0
 800b234:	4606      	mov	r6, r0
 800b236:	f340 8088 	ble.w	800b34a <_dtoa_r+0x8c2>
 800b23a:	461a      	mov	r2, r3
 800b23c:	4601      	mov	r1, r0
 800b23e:	4620      	mov	r0, r4
 800b240:	f000 fe02 	bl	800be48 <__pow5mult>
 800b244:	9b06      	ldr	r3, [sp, #24]
 800b246:	2b01      	cmp	r3, #1
 800b248:	4606      	mov	r6, r0
 800b24a:	f340 8081 	ble.w	800b350 <_dtoa_r+0x8c8>
 800b24e:	f04f 0800 	mov.w	r8, #0
 800b252:	6933      	ldr	r3, [r6, #16]
 800b254:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b258:	6918      	ldr	r0, [r3, #16]
 800b25a:	f000 fce5 	bl	800bc28 <__hi0bits>
 800b25e:	f1c0 0020 	rsb	r0, r0, #32
 800b262:	9b05      	ldr	r3, [sp, #20]
 800b264:	4418      	add	r0, r3
 800b266:	f010 001f 	ands.w	r0, r0, #31
 800b26a:	f000 8092 	beq.w	800b392 <_dtoa_r+0x90a>
 800b26e:	f1c0 0320 	rsb	r3, r0, #32
 800b272:	2b04      	cmp	r3, #4
 800b274:	f340 808a 	ble.w	800b38c <_dtoa_r+0x904>
 800b278:	f1c0 001c 	rsb	r0, r0, #28
 800b27c:	9b04      	ldr	r3, [sp, #16]
 800b27e:	4403      	add	r3, r0
 800b280:	9304      	str	r3, [sp, #16]
 800b282:	9b05      	ldr	r3, [sp, #20]
 800b284:	4403      	add	r3, r0
 800b286:	4405      	add	r5, r0
 800b288:	9305      	str	r3, [sp, #20]
 800b28a:	9b04      	ldr	r3, [sp, #16]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	dd07      	ble.n	800b2a0 <_dtoa_r+0x818>
 800b290:	ee18 1a10 	vmov	r1, s16
 800b294:	461a      	mov	r2, r3
 800b296:	4620      	mov	r0, r4
 800b298:	f000 fe30 	bl	800befc <__lshift>
 800b29c:	ee08 0a10 	vmov	s16, r0
 800b2a0:	9b05      	ldr	r3, [sp, #20]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	dd05      	ble.n	800b2b2 <_dtoa_r+0x82a>
 800b2a6:	4631      	mov	r1, r6
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	f000 fe26 	bl	800befc <__lshift>
 800b2b0:	4606      	mov	r6, r0
 800b2b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d06e      	beq.n	800b396 <_dtoa_r+0x90e>
 800b2b8:	ee18 0a10 	vmov	r0, s16
 800b2bc:	4631      	mov	r1, r6
 800b2be:	f000 fe8d 	bl	800bfdc <__mcmp>
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	da67      	bge.n	800b396 <_dtoa_r+0x90e>
 800b2c6:	9b00      	ldr	r3, [sp, #0]
 800b2c8:	3b01      	subs	r3, #1
 800b2ca:	ee18 1a10 	vmov	r1, s16
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	220a      	movs	r2, #10
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	f000 fc61 	bl	800bb9c <__multadd>
 800b2da:	9b08      	ldr	r3, [sp, #32]
 800b2dc:	ee08 0a10 	vmov	s16, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f000 81b1 	beq.w	800b648 <_dtoa_r+0xbc0>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	4639      	mov	r1, r7
 800b2ea:	220a      	movs	r2, #10
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f000 fc55 	bl	800bb9c <__multadd>
 800b2f2:	9b02      	ldr	r3, [sp, #8]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	4607      	mov	r7, r0
 800b2f8:	f300 808e 	bgt.w	800b418 <_dtoa_r+0x990>
 800b2fc:	9b06      	ldr	r3, [sp, #24]
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	dc51      	bgt.n	800b3a6 <_dtoa_r+0x91e>
 800b302:	e089      	b.n	800b418 <_dtoa_r+0x990>
 800b304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b306:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b30a:	e74b      	b.n	800b1a4 <_dtoa_r+0x71c>
 800b30c:	9b03      	ldr	r3, [sp, #12]
 800b30e:	1e5e      	subs	r6, r3, #1
 800b310:	9b07      	ldr	r3, [sp, #28]
 800b312:	42b3      	cmp	r3, r6
 800b314:	bfbf      	itttt	lt
 800b316:	9b07      	ldrlt	r3, [sp, #28]
 800b318:	9607      	strlt	r6, [sp, #28]
 800b31a:	1af2      	sublt	r2, r6, r3
 800b31c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b31e:	bfb6      	itet	lt
 800b320:	189b      	addlt	r3, r3, r2
 800b322:	1b9e      	subge	r6, r3, r6
 800b324:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b326:	9b03      	ldr	r3, [sp, #12]
 800b328:	bfb8      	it	lt
 800b32a:	2600      	movlt	r6, #0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	bfb7      	itett	lt
 800b330:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b334:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b338:	1a9d      	sublt	r5, r3, r2
 800b33a:	2300      	movlt	r3, #0
 800b33c:	e734      	b.n	800b1a8 <_dtoa_r+0x720>
 800b33e:	9e07      	ldr	r6, [sp, #28]
 800b340:	9d04      	ldr	r5, [sp, #16]
 800b342:	9f08      	ldr	r7, [sp, #32]
 800b344:	e73b      	b.n	800b1be <_dtoa_r+0x736>
 800b346:	9a07      	ldr	r2, [sp, #28]
 800b348:	e767      	b.n	800b21a <_dtoa_r+0x792>
 800b34a:	9b06      	ldr	r3, [sp, #24]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	dc18      	bgt.n	800b382 <_dtoa_r+0x8fa>
 800b350:	f1ba 0f00 	cmp.w	sl, #0
 800b354:	d115      	bne.n	800b382 <_dtoa_r+0x8fa>
 800b356:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b35a:	b993      	cbnz	r3, 800b382 <_dtoa_r+0x8fa>
 800b35c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b360:	0d1b      	lsrs	r3, r3, #20
 800b362:	051b      	lsls	r3, r3, #20
 800b364:	b183      	cbz	r3, 800b388 <_dtoa_r+0x900>
 800b366:	9b04      	ldr	r3, [sp, #16]
 800b368:	3301      	adds	r3, #1
 800b36a:	9304      	str	r3, [sp, #16]
 800b36c:	9b05      	ldr	r3, [sp, #20]
 800b36e:	3301      	adds	r3, #1
 800b370:	9305      	str	r3, [sp, #20]
 800b372:	f04f 0801 	mov.w	r8, #1
 800b376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b378:	2b00      	cmp	r3, #0
 800b37a:	f47f af6a 	bne.w	800b252 <_dtoa_r+0x7ca>
 800b37e:	2001      	movs	r0, #1
 800b380:	e76f      	b.n	800b262 <_dtoa_r+0x7da>
 800b382:	f04f 0800 	mov.w	r8, #0
 800b386:	e7f6      	b.n	800b376 <_dtoa_r+0x8ee>
 800b388:	4698      	mov	r8, r3
 800b38a:	e7f4      	b.n	800b376 <_dtoa_r+0x8ee>
 800b38c:	f43f af7d 	beq.w	800b28a <_dtoa_r+0x802>
 800b390:	4618      	mov	r0, r3
 800b392:	301c      	adds	r0, #28
 800b394:	e772      	b.n	800b27c <_dtoa_r+0x7f4>
 800b396:	9b03      	ldr	r3, [sp, #12]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	dc37      	bgt.n	800b40c <_dtoa_r+0x984>
 800b39c:	9b06      	ldr	r3, [sp, #24]
 800b39e:	2b02      	cmp	r3, #2
 800b3a0:	dd34      	ble.n	800b40c <_dtoa_r+0x984>
 800b3a2:	9b03      	ldr	r3, [sp, #12]
 800b3a4:	9302      	str	r3, [sp, #8]
 800b3a6:	9b02      	ldr	r3, [sp, #8]
 800b3a8:	b96b      	cbnz	r3, 800b3c6 <_dtoa_r+0x93e>
 800b3aa:	4631      	mov	r1, r6
 800b3ac:	2205      	movs	r2, #5
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f000 fbf4 	bl	800bb9c <__multadd>
 800b3b4:	4601      	mov	r1, r0
 800b3b6:	4606      	mov	r6, r0
 800b3b8:	ee18 0a10 	vmov	r0, s16
 800b3bc:	f000 fe0e 	bl	800bfdc <__mcmp>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	f73f adbb 	bgt.w	800af3c <_dtoa_r+0x4b4>
 800b3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c8:	9d01      	ldr	r5, [sp, #4]
 800b3ca:	43db      	mvns	r3, r3
 800b3cc:	9300      	str	r3, [sp, #0]
 800b3ce:	f04f 0800 	mov.w	r8, #0
 800b3d2:	4631      	mov	r1, r6
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f000 fbbf 	bl	800bb58 <_Bfree>
 800b3da:	2f00      	cmp	r7, #0
 800b3dc:	f43f aea4 	beq.w	800b128 <_dtoa_r+0x6a0>
 800b3e0:	f1b8 0f00 	cmp.w	r8, #0
 800b3e4:	d005      	beq.n	800b3f2 <_dtoa_r+0x96a>
 800b3e6:	45b8      	cmp	r8, r7
 800b3e8:	d003      	beq.n	800b3f2 <_dtoa_r+0x96a>
 800b3ea:	4641      	mov	r1, r8
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f000 fbb3 	bl	800bb58 <_Bfree>
 800b3f2:	4639      	mov	r1, r7
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f000 fbaf 	bl	800bb58 <_Bfree>
 800b3fa:	e695      	b.n	800b128 <_dtoa_r+0x6a0>
 800b3fc:	2600      	movs	r6, #0
 800b3fe:	4637      	mov	r7, r6
 800b400:	e7e1      	b.n	800b3c6 <_dtoa_r+0x93e>
 800b402:	9700      	str	r7, [sp, #0]
 800b404:	4637      	mov	r7, r6
 800b406:	e599      	b.n	800af3c <_dtoa_r+0x4b4>
 800b408:	40240000 	.word	0x40240000
 800b40c:	9b08      	ldr	r3, [sp, #32]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	f000 80ca 	beq.w	800b5a8 <_dtoa_r+0xb20>
 800b414:	9b03      	ldr	r3, [sp, #12]
 800b416:	9302      	str	r3, [sp, #8]
 800b418:	2d00      	cmp	r5, #0
 800b41a:	dd05      	ble.n	800b428 <_dtoa_r+0x9a0>
 800b41c:	4639      	mov	r1, r7
 800b41e:	462a      	mov	r2, r5
 800b420:	4620      	mov	r0, r4
 800b422:	f000 fd6b 	bl	800befc <__lshift>
 800b426:	4607      	mov	r7, r0
 800b428:	f1b8 0f00 	cmp.w	r8, #0
 800b42c:	d05b      	beq.n	800b4e6 <_dtoa_r+0xa5e>
 800b42e:	6879      	ldr	r1, [r7, #4]
 800b430:	4620      	mov	r0, r4
 800b432:	f000 fb51 	bl	800bad8 <_Balloc>
 800b436:	4605      	mov	r5, r0
 800b438:	b928      	cbnz	r0, 800b446 <_dtoa_r+0x9be>
 800b43a:	4b87      	ldr	r3, [pc, #540]	; (800b658 <_dtoa_r+0xbd0>)
 800b43c:	4602      	mov	r2, r0
 800b43e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b442:	f7ff bb3b 	b.w	800aabc <_dtoa_r+0x34>
 800b446:	693a      	ldr	r2, [r7, #16]
 800b448:	3202      	adds	r2, #2
 800b44a:	0092      	lsls	r2, r2, #2
 800b44c:	f107 010c 	add.w	r1, r7, #12
 800b450:	300c      	adds	r0, #12
 800b452:	f000 fb33 	bl	800babc <memcpy>
 800b456:	2201      	movs	r2, #1
 800b458:	4629      	mov	r1, r5
 800b45a:	4620      	mov	r0, r4
 800b45c:	f000 fd4e 	bl	800befc <__lshift>
 800b460:	9b01      	ldr	r3, [sp, #4]
 800b462:	f103 0901 	add.w	r9, r3, #1
 800b466:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b46a:	4413      	add	r3, r2
 800b46c:	9305      	str	r3, [sp, #20]
 800b46e:	f00a 0301 	and.w	r3, sl, #1
 800b472:	46b8      	mov	r8, r7
 800b474:	9304      	str	r3, [sp, #16]
 800b476:	4607      	mov	r7, r0
 800b478:	4631      	mov	r1, r6
 800b47a:	ee18 0a10 	vmov	r0, s16
 800b47e:	f7ff fa75 	bl	800a96c <quorem>
 800b482:	4641      	mov	r1, r8
 800b484:	9002      	str	r0, [sp, #8]
 800b486:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b48a:	ee18 0a10 	vmov	r0, s16
 800b48e:	f000 fda5 	bl	800bfdc <__mcmp>
 800b492:	463a      	mov	r2, r7
 800b494:	9003      	str	r0, [sp, #12]
 800b496:	4631      	mov	r1, r6
 800b498:	4620      	mov	r0, r4
 800b49a:	f000 fdbb 	bl	800c014 <__mdiff>
 800b49e:	68c2      	ldr	r2, [r0, #12]
 800b4a0:	f109 3bff 	add.w	fp, r9, #4294967295
 800b4a4:	4605      	mov	r5, r0
 800b4a6:	bb02      	cbnz	r2, 800b4ea <_dtoa_r+0xa62>
 800b4a8:	4601      	mov	r1, r0
 800b4aa:	ee18 0a10 	vmov	r0, s16
 800b4ae:	f000 fd95 	bl	800bfdc <__mcmp>
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	4629      	mov	r1, r5
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	9207      	str	r2, [sp, #28]
 800b4ba:	f000 fb4d 	bl	800bb58 <_Bfree>
 800b4be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b4c2:	ea43 0102 	orr.w	r1, r3, r2
 800b4c6:	9b04      	ldr	r3, [sp, #16]
 800b4c8:	430b      	orrs	r3, r1
 800b4ca:	464d      	mov	r5, r9
 800b4cc:	d10f      	bne.n	800b4ee <_dtoa_r+0xa66>
 800b4ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b4d2:	d02a      	beq.n	800b52a <_dtoa_r+0xaa2>
 800b4d4:	9b03      	ldr	r3, [sp, #12]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	dd02      	ble.n	800b4e0 <_dtoa_r+0xa58>
 800b4da:	9b02      	ldr	r3, [sp, #8]
 800b4dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b4e0:	f88b a000 	strb.w	sl, [fp]
 800b4e4:	e775      	b.n	800b3d2 <_dtoa_r+0x94a>
 800b4e6:	4638      	mov	r0, r7
 800b4e8:	e7ba      	b.n	800b460 <_dtoa_r+0x9d8>
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	e7e2      	b.n	800b4b4 <_dtoa_r+0xa2c>
 800b4ee:	9b03      	ldr	r3, [sp, #12]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	db04      	blt.n	800b4fe <_dtoa_r+0xa76>
 800b4f4:	9906      	ldr	r1, [sp, #24]
 800b4f6:	430b      	orrs	r3, r1
 800b4f8:	9904      	ldr	r1, [sp, #16]
 800b4fa:	430b      	orrs	r3, r1
 800b4fc:	d122      	bne.n	800b544 <_dtoa_r+0xabc>
 800b4fe:	2a00      	cmp	r2, #0
 800b500:	ddee      	ble.n	800b4e0 <_dtoa_r+0xa58>
 800b502:	ee18 1a10 	vmov	r1, s16
 800b506:	2201      	movs	r2, #1
 800b508:	4620      	mov	r0, r4
 800b50a:	f000 fcf7 	bl	800befc <__lshift>
 800b50e:	4631      	mov	r1, r6
 800b510:	ee08 0a10 	vmov	s16, r0
 800b514:	f000 fd62 	bl	800bfdc <__mcmp>
 800b518:	2800      	cmp	r0, #0
 800b51a:	dc03      	bgt.n	800b524 <_dtoa_r+0xa9c>
 800b51c:	d1e0      	bne.n	800b4e0 <_dtoa_r+0xa58>
 800b51e:	f01a 0f01 	tst.w	sl, #1
 800b522:	d0dd      	beq.n	800b4e0 <_dtoa_r+0xa58>
 800b524:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b528:	d1d7      	bne.n	800b4da <_dtoa_r+0xa52>
 800b52a:	2339      	movs	r3, #57	; 0x39
 800b52c:	f88b 3000 	strb.w	r3, [fp]
 800b530:	462b      	mov	r3, r5
 800b532:	461d      	mov	r5, r3
 800b534:	3b01      	subs	r3, #1
 800b536:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b53a:	2a39      	cmp	r2, #57	; 0x39
 800b53c:	d071      	beq.n	800b622 <_dtoa_r+0xb9a>
 800b53e:	3201      	adds	r2, #1
 800b540:	701a      	strb	r2, [r3, #0]
 800b542:	e746      	b.n	800b3d2 <_dtoa_r+0x94a>
 800b544:	2a00      	cmp	r2, #0
 800b546:	dd07      	ble.n	800b558 <_dtoa_r+0xad0>
 800b548:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b54c:	d0ed      	beq.n	800b52a <_dtoa_r+0xaa2>
 800b54e:	f10a 0301 	add.w	r3, sl, #1
 800b552:	f88b 3000 	strb.w	r3, [fp]
 800b556:	e73c      	b.n	800b3d2 <_dtoa_r+0x94a>
 800b558:	9b05      	ldr	r3, [sp, #20]
 800b55a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b55e:	4599      	cmp	r9, r3
 800b560:	d047      	beq.n	800b5f2 <_dtoa_r+0xb6a>
 800b562:	ee18 1a10 	vmov	r1, s16
 800b566:	2300      	movs	r3, #0
 800b568:	220a      	movs	r2, #10
 800b56a:	4620      	mov	r0, r4
 800b56c:	f000 fb16 	bl	800bb9c <__multadd>
 800b570:	45b8      	cmp	r8, r7
 800b572:	ee08 0a10 	vmov	s16, r0
 800b576:	f04f 0300 	mov.w	r3, #0
 800b57a:	f04f 020a 	mov.w	r2, #10
 800b57e:	4641      	mov	r1, r8
 800b580:	4620      	mov	r0, r4
 800b582:	d106      	bne.n	800b592 <_dtoa_r+0xb0a>
 800b584:	f000 fb0a 	bl	800bb9c <__multadd>
 800b588:	4680      	mov	r8, r0
 800b58a:	4607      	mov	r7, r0
 800b58c:	f109 0901 	add.w	r9, r9, #1
 800b590:	e772      	b.n	800b478 <_dtoa_r+0x9f0>
 800b592:	f000 fb03 	bl	800bb9c <__multadd>
 800b596:	4639      	mov	r1, r7
 800b598:	4680      	mov	r8, r0
 800b59a:	2300      	movs	r3, #0
 800b59c:	220a      	movs	r2, #10
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f000 fafc 	bl	800bb9c <__multadd>
 800b5a4:	4607      	mov	r7, r0
 800b5a6:	e7f1      	b.n	800b58c <_dtoa_r+0xb04>
 800b5a8:	9b03      	ldr	r3, [sp, #12]
 800b5aa:	9302      	str	r3, [sp, #8]
 800b5ac:	9d01      	ldr	r5, [sp, #4]
 800b5ae:	ee18 0a10 	vmov	r0, s16
 800b5b2:	4631      	mov	r1, r6
 800b5b4:	f7ff f9da 	bl	800a96c <quorem>
 800b5b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b5bc:	9b01      	ldr	r3, [sp, #4]
 800b5be:	f805 ab01 	strb.w	sl, [r5], #1
 800b5c2:	1aea      	subs	r2, r5, r3
 800b5c4:	9b02      	ldr	r3, [sp, #8]
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	dd09      	ble.n	800b5de <_dtoa_r+0xb56>
 800b5ca:	ee18 1a10 	vmov	r1, s16
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	220a      	movs	r2, #10
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f000 fae2 	bl	800bb9c <__multadd>
 800b5d8:	ee08 0a10 	vmov	s16, r0
 800b5dc:	e7e7      	b.n	800b5ae <_dtoa_r+0xb26>
 800b5de:	9b02      	ldr	r3, [sp, #8]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	bfc8      	it	gt
 800b5e4:	461d      	movgt	r5, r3
 800b5e6:	9b01      	ldr	r3, [sp, #4]
 800b5e8:	bfd8      	it	le
 800b5ea:	2501      	movle	r5, #1
 800b5ec:	441d      	add	r5, r3
 800b5ee:	f04f 0800 	mov.w	r8, #0
 800b5f2:	ee18 1a10 	vmov	r1, s16
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f000 fc7f 	bl	800befc <__lshift>
 800b5fe:	4631      	mov	r1, r6
 800b600:	ee08 0a10 	vmov	s16, r0
 800b604:	f000 fcea 	bl	800bfdc <__mcmp>
 800b608:	2800      	cmp	r0, #0
 800b60a:	dc91      	bgt.n	800b530 <_dtoa_r+0xaa8>
 800b60c:	d102      	bne.n	800b614 <_dtoa_r+0xb8c>
 800b60e:	f01a 0f01 	tst.w	sl, #1
 800b612:	d18d      	bne.n	800b530 <_dtoa_r+0xaa8>
 800b614:	462b      	mov	r3, r5
 800b616:	461d      	mov	r5, r3
 800b618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b61c:	2a30      	cmp	r2, #48	; 0x30
 800b61e:	d0fa      	beq.n	800b616 <_dtoa_r+0xb8e>
 800b620:	e6d7      	b.n	800b3d2 <_dtoa_r+0x94a>
 800b622:	9a01      	ldr	r2, [sp, #4]
 800b624:	429a      	cmp	r2, r3
 800b626:	d184      	bne.n	800b532 <_dtoa_r+0xaaa>
 800b628:	9b00      	ldr	r3, [sp, #0]
 800b62a:	3301      	adds	r3, #1
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	2331      	movs	r3, #49	; 0x31
 800b630:	7013      	strb	r3, [r2, #0]
 800b632:	e6ce      	b.n	800b3d2 <_dtoa_r+0x94a>
 800b634:	4b09      	ldr	r3, [pc, #36]	; (800b65c <_dtoa_r+0xbd4>)
 800b636:	f7ff ba95 	b.w	800ab64 <_dtoa_r+0xdc>
 800b63a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	f47f aa6e 	bne.w	800ab1e <_dtoa_r+0x96>
 800b642:	4b07      	ldr	r3, [pc, #28]	; (800b660 <_dtoa_r+0xbd8>)
 800b644:	f7ff ba8e 	b.w	800ab64 <_dtoa_r+0xdc>
 800b648:	9b02      	ldr	r3, [sp, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	dcae      	bgt.n	800b5ac <_dtoa_r+0xb24>
 800b64e:	9b06      	ldr	r3, [sp, #24]
 800b650:	2b02      	cmp	r3, #2
 800b652:	f73f aea8 	bgt.w	800b3a6 <_dtoa_r+0x91e>
 800b656:	e7a9      	b.n	800b5ac <_dtoa_r+0xb24>
 800b658:	0800ceff 	.word	0x0800ceff
 800b65c:	0800ce5c 	.word	0x0800ce5c
 800b660:	0800ce80 	.word	0x0800ce80

0800b664 <__sflush_r>:
 800b664:	898a      	ldrh	r2, [r1, #12]
 800b666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b66a:	4605      	mov	r5, r0
 800b66c:	0710      	lsls	r0, r2, #28
 800b66e:	460c      	mov	r4, r1
 800b670:	d458      	bmi.n	800b724 <__sflush_r+0xc0>
 800b672:	684b      	ldr	r3, [r1, #4]
 800b674:	2b00      	cmp	r3, #0
 800b676:	dc05      	bgt.n	800b684 <__sflush_r+0x20>
 800b678:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	dc02      	bgt.n	800b684 <__sflush_r+0x20>
 800b67e:	2000      	movs	r0, #0
 800b680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b686:	2e00      	cmp	r6, #0
 800b688:	d0f9      	beq.n	800b67e <__sflush_r+0x1a>
 800b68a:	2300      	movs	r3, #0
 800b68c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b690:	682f      	ldr	r7, [r5, #0]
 800b692:	602b      	str	r3, [r5, #0]
 800b694:	d032      	beq.n	800b6fc <__sflush_r+0x98>
 800b696:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	075a      	lsls	r2, r3, #29
 800b69c:	d505      	bpl.n	800b6aa <__sflush_r+0x46>
 800b69e:	6863      	ldr	r3, [r4, #4]
 800b6a0:	1ac0      	subs	r0, r0, r3
 800b6a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6a4:	b10b      	cbz	r3, 800b6aa <__sflush_r+0x46>
 800b6a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6a8:	1ac0      	subs	r0, r0, r3
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6b0:	6a21      	ldr	r1, [r4, #32]
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	47b0      	blx	r6
 800b6b6:	1c43      	adds	r3, r0, #1
 800b6b8:	89a3      	ldrh	r3, [r4, #12]
 800b6ba:	d106      	bne.n	800b6ca <__sflush_r+0x66>
 800b6bc:	6829      	ldr	r1, [r5, #0]
 800b6be:	291d      	cmp	r1, #29
 800b6c0:	d82c      	bhi.n	800b71c <__sflush_r+0xb8>
 800b6c2:	4a2a      	ldr	r2, [pc, #168]	; (800b76c <__sflush_r+0x108>)
 800b6c4:	40ca      	lsrs	r2, r1
 800b6c6:	07d6      	lsls	r6, r2, #31
 800b6c8:	d528      	bpl.n	800b71c <__sflush_r+0xb8>
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	6062      	str	r2, [r4, #4]
 800b6ce:	04d9      	lsls	r1, r3, #19
 800b6d0:	6922      	ldr	r2, [r4, #16]
 800b6d2:	6022      	str	r2, [r4, #0]
 800b6d4:	d504      	bpl.n	800b6e0 <__sflush_r+0x7c>
 800b6d6:	1c42      	adds	r2, r0, #1
 800b6d8:	d101      	bne.n	800b6de <__sflush_r+0x7a>
 800b6da:	682b      	ldr	r3, [r5, #0]
 800b6dc:	b903      	cbnz	r3, 800b6e0 <__sflush_r+0x7c>
 800b6de:	6560      	str	r0, [r4, #84]	; 0x54
 800b6e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6e2:	602f      	str	r7, [r5, #0]
 800b6e4:	2900      	cmp	r1, #0
 800b6e6:	d0ca      	beq.n	800b67e <__sflush_r+0x1a>
 800b6e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6ec:	4299      	cmp	r1, r3
 800b6ee:	d002      	beq.n	800b6f6 <__sflush_r+0x92>
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	f000 fd8b 	bl	800c20c <_free_r>
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	6360      	str	r0, [r4, #52]	; 0x34
 800b6fa:	e7c1      	b.n	800b680 <__sflush_r+0x1c>
 800b6fc:	6a21      	ldr	r1, [r4, #32]
 800b6fe:	2301      	movs	r3, #1
 800b700:	4628      	mov	r0, r5
 800b702:	47b0      	blx	r6
 800b704:	1c41      	adds	r1, r0, #1
 800b706:	d1c7      	bne.n	800b698 <__sflush_r+0x34>
 800b708:	682b      	ldr	r3, [r5, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d0c4      	beq.n	800b698 <__sflush_r+0x34>
 800b70e:	2b1d      	cmp	r3, #29
 800b710:	d001      	beq.n	800b716 <__sflush_r+0xb2>
 800b712:	2b16      	cmp	r3, #22
 800b714:	d101      	bne.n	800b71a <__sflush_r+0xb6>
 800b716:	602f      	str	r7, [r5, #0]
 800b718:	e7b1      	b.n	800b67e <__sflush_r+0x1a>
 800b71a:	89a3      	ldrh	r3, [r4, #12]
 800b71c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b720:	81a3      	strh	r3, [r4, #12]
 800b722:	e7ad      	b.n	800b680 <__sflush_r+0x1c>
 800b724:	690f      	ldr	r7, [r1, #16]
 800b726:	2f00      	cmp	r7, #0
 800b728:	d0a9      	beq.n	800b67e <__sflush_r+0x1a>
 800b72a:	0793      	lsls	r3, r2, #30
 800b72c:	680e      	ldr	r6, [r1, #0]
 800b72e:	bf08      	it	eq
 800b730:	694b      	ldreq	r3, [r1, #20]
 800b732:	600f      	str	r7, [r1, #0]
 800b734:	bf18      	it	ne
 800b736:	2300      	movne	r3, #0
 800b738:	eba6 0807 	sub.w	r8, r6, r7
 800b73c:	608b      	str	r3, [r1, #8]
 800b73e:	f1b8 0f00 	cmp.w	r8, #0
 800b742:	dd9c      	ble.n	800b67e <__sflush_r+0x1a>
 800b744:	6a21      	ldr	r1, [r4, #32]
 800b746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b748:	4643      	mov	r3, r8
 800b74a:	463a      	mov	r2, r7
 800b74c:	4628      	mov	r0, r5
 800b74e:	47b0      	blx	r6
 800b750:	2800      	cmp	r0, #0
 800b752:	dc06      	bgt.n	800b762 <__sflush_r+0xfe>
 800b754:	89a3      	ldrh	r3, [r4, #12]
 800b756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b75a:	81a3      	strh	r3, [r4, #12]
 800b75c:	f04f 30ff 	mov.w	r0, #4294967295
 800b760:	e78e      	b.n	800b680 <__sflush_r+0x1c>
 800b762:	4407      	add	r7, r0
 800b764:	eba8 0800 	sub.w	r8, r8, r0
 800b768:	e7e9      	b.n	800b73e <__sflush_r+0xda>
 800b76a:	bf00      	nop
 800b76c:	20400001 	.word	0x20400001

0800b770 <_fflush_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	690b      	ldr	r3, [r1, #16]
 800b774:	4605      	mov	r5, r0
 800b776:	460c      	mov	r4, r1
 800b778:	b913      	cbnz	r3, 800b780 <_fflush_r+0x10>
 800b77a:	2500      	movs	r5, #0
 800b77c:	4628      	mov	r0, r5
 800b77e:	bd38      	pop	{r3, r4, r5, pc}
 800b780:	b118      	cbz	r0, 800b78a <_fflush_r+0x1a>
 800b782:	6983      	ldr	r3, [r0, #24]
 800b784:	b90b      	cbnz	r3, 800b78a <_fflush_r+0x1a>
 800b786:	f000 f887 	bl	800b898 <__sinit>
 800b78a:	4b14      	ldr	r3, [pc, #80]	; (800b7dc <_fflush_r+0x6c>)
 800b78c:	429c      	cmp	r4, r3
 800b78e:	d11b      	bne.n	800b7c8 <_fflush_r+0x58>
 800b790:	686c      	ldr	r4, [r5, #4]
 800b792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d0ef      	beq.n	800b77a <_fflush_r+0xa>
 800b79a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b79c:	07d0      	lsls	r0, r2, #31
 800b79e:	d404      	bmi.n	800b7aa <_fflush_r+0x3a>
 800b7a0:	0599      	lsls	r1, r3, #22
 800b7a2:	d402      	bmi.n	800b7aa <_fflush_r+0x3a>
 800b7a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7a6:	f000 f91a 	bl	800b9de <__retarget_lock_acquire_recursive>
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	4621      	mov	r1, r4
 800b7ae:	f7ff ff59 	bl	800b664 <__sflush_r>
 800b7b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7b4:	07da      	lsls	r2, r3, #31
 800b7b6:	4605      	mov	r5, r0
 800b7b8:	d4e0      	bmi.n	800b77c <_fflush_r+0xc>
 800b7ba:	89a3      	ldrh	r3, [r4, #12]
 800b7bc:	059b      	lsls	r3, r3, #22
 800b7be:	d4dd      	bmi.n	800b77c <_fflush_r+0xc>
 800b7c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7c2:	f000 f90d 	bl	800b9e0 <__retarget_lock_release_recursive>
 800b7c6:	e7d9      	b.n	800b77c <_fflush_r+0xc>
 800b7c8:	4b05      	ldr	r3, [pc, #20]	; (800b7e0 <_fflush_r+0x70>)
 800b7ca:	429c      	cmp	r4, r3
 800b7cc:	d101      	bne.n	800b7d2 <_fflush_r+0x62>
 800b7ce:	68ac      	ldr	r4, [r5, #8]
 800b7d0:	e7df      	b.n	800b792 <_fflush_r+0x22>
 800b7d2:	4b04      	ldr	r3, [pc, #16]	; (800b7e4 <_fflush_r+0x74>)
 800b7d4:	429c      	cmp	r4, r3
 800b7d6:	bf08      	it	eq
 800b7d8:	68ec      	ldreq	r4, [r5, #12]
 800b7da:	e7da      	b.n	800b792 <_fflush_r+0x22>
 800b7dc:	0800cf30 	.word	0x0800cf30
 800b7e0:	0800cf50 	.word	0x0800cf50
 800b7e4:	0800cf10 	.word	0x0800cf10

0800b7e8 <std>:
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	b510      	push	{r4, lr}
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	e9c0 3300 	strd	r3, r3, [r0]
 800b7f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7f6:	6083      	str	r3, [r0, #8]
 800b7f8:	8181      	strh	r1, [r0, #12]
 800b7fa:	6643      	str	r3, [r0, #100]	; 0x64
 800b7fc:	81c2      	strh	r2, [r0, #14]
 800b7fe:	6183      	str	r3, [r0, #24]
 800b800:	4619      	mov	r1, r3
 800b802:	2208      	movs	r2, #8
 800b804:	305c      	adds	r0, #92	; 0x5c
 800b806:	f7fe fad3 	bl	8009db0 <memset>
 800b80a:	4b05      	ldr	r3, [pc, #20]	; (800b820 <std+0x38>)
 800b80c:	6263      	str	r3, [r4, #36]	; 0x24
 800b80e:	4b05      	ldr	r3, [pc, #20]	; (800b824 <std+0x3c>)
 800b810:	62a3      	str	r3, [r4, #40]	; 0x28
 800b812:	4b05      	ldr	r3, [pc, #20]	; (800b828 <std+0x40>)
 800b814:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b816:	4b05      	ldr	r3, [pc, #20]	; (800b82c <std+0x44>)
 800b818:	6224      	str	r4, [r4, #32]
 800b81a:	6323      	str	r3, [r4, #48]	; 0x30
 800b81c:	bd10      	pop	{r4, pc}
 800b81e:	bf00      	nop
 800b820:	0800c6a1 	.word	0x0800c6a1
 800b824:	0800c6c3 	.word	0x0800c6c3
 800b828:	0800c6fb 	.word	0x0800c6fb
 800b82c:	0800c71f 	.word	0x0800c71f

0800b830 <_cleanup_r>:
 800b830:	4901      	ldr	r1, [pc, #4]	; (800b838 <_cleanup_r+0x8>)
 800b832:	f000 b8af 	b.w	800b994 <_fwalk_reent>
 800b836:	bf00      	nop
 800b838:	0800b771 	.word	0x0800b771

0800b83c <__sfmoreglue>:
 800b83c:	b570      	push	{r4, r5, r6, lr}
 800b83e:	2268      	movs	r2, #104	; 0x68
 800b840:	1e4d      	subs	r5, r1, #1
 800b842:	4355      	muls	r5, r2
 800b844:	460e      	mov	r6, r1
 800b846:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b84a:	f000 fd4b 	bl	800c2e4 <_malloc_r>
 800b84e:	4604      	mov	r4, r0
 800b850:	b140      	cbz	r0, 800b864 <__sfmoreglue+0x28>
 800b852:	2100      	movs	r1, #0
 800b854:	e9c0 1600 	strd	r1, r6, [r0]
 800b858:	300c      	adds	r0, #12
 800b85a:	60a0      	str	r0, [r4, #8]
 800b85c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b860:	f7fe faa6 	bl	8009db0 <memset>
 800b864:	4620      	mov	r0, r4
 800b866:	bd70      	pop	{r4, r5, r6, pc}

0800b868 <__sfp_lock_acquire>:
 800b868:	4801      	ldr	r0, [pc, #4]	; (800b870 <__sfp_lock_acquire+0x8>)
 800b86a:	f000 b8b8 	b.w	800b9de <__retarget_lock_acquire_recursive>
 800b86e:	bf00      	nop
 800b870:	20000d35 	.word	0x20000d35

0800b874 <__sfp_lock_release>:
 800b874:	4801      	ldr	r0, [pc, #4]	; (800b87c <__sfp_lock_release+0x8>)
 800b876:	f000 b8b3 	b.w	800b9e0 <__retarget_lock_release_recursive>
 800b87a:	bf00      	nop
 800b87c:	20000d35 	.word	0x20000d35

0800b880 <__sinit_lock_acquire>:
 800b880:	4801      	ldr	r0, [pc, #4]	; (800b888 <__sinit_lock_acquire+0x8>)
 800b882:	f000 b8ac 	b.w	800b9de <__retarget_lock_acquire_recursive>
 800b886:	bf00      	nop
 800b888:	20000d36 	.word	0x20000d36

0800b88c <__sinit_lock_release>:
 800b88c:	4801      	ldr	r0, [pc, #4]	; (800b894 <__sinit_lock_release+0x8>)
 800b88e:	f000 b8a7 	b.w	800b9e0 <__retarget_lock_release_recursive>
 800b892:	bf00      	nop
 800b894:	20000d36 	.word	0x20000d36

0800b898 <__sinit>:
 800b898:	b510      	push	{r4, lr}
 800b89a:	4604      	mov	r4, r0
 800b89c:	f7ff fff0 	bl	800b880 <__sinit_lock_acquire>
 800b8a0:	69a3      	ldr	r3, [r4, #24]
 800b8a2:	b11b      	cbz	r3, 800b8ac <__sinit+0x14>
 800b8a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8a8:	f7ff bff0 	b.w	800b88c <__sinit_lock_release>
 800b8ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b8b0:	6523      	str	r3, [r4, #80]	; 0x50
 800b8b2:	4b13      	ldr	r3, [pc, #76]	; (800b900 <__sinit+0x68>)
 800b8b4:	4a13      	ldr	r2, [pc, #76]	; (800b904 <__sinit+0x6c>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b8ba:	42a3      	cmp	r3, r4
 800b8bc:	bf04      	itt	eq
 800b8be:	2301      	moveq	r3, #1
 800b8c0:	61a3      	streq	r3, [r4, #24]
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	f000 f820 	bl	800b908 <__sfp>
 800b8c8:	6060      	str	r0, [r4, #4]
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f000 f81c 	bl	800b908 <__sfp>
 800b8d0:	60a0      	str	r0, [r4, #8]
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f000 f818 	bl	800b908 <__sfp>
 800b8d8:	2200      	movs	r2, #0
 800b8da:	60e0      	str	r0, [r4, #12]
 800b8dc:	2104      	movs	r1, #4
 800b8de:	6860      	ldr	r0, [r4, #4]
 800b8e0:	f7ff ff82 	bl	800b7e8 <std>
 800b8e4:	68a0      	ldr	r0, [r4, #8]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	2109      	movs	r1, #9
 800b8ea:	f7ff ff7d 	bl	800b7e8 <std>
 800b8ee:	68e0      	ldr	r0, [r4, #12]
 800b8f0:	2202      	movs	r2, #2
 800b8f2:	2112      	movs	r1, #18
 800b8f4:	f7ff ff78 	bl	800b7e8 <std>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	61a3      	str	r3, [r4, #24]
 800b8fc:	e7d2      	b.n	800b8a4 <__sinit+0xc>
 800b8fe:	bf00      	nop
 800b900:	0800ce48 	.word	0x0800ce48
 800b904:	0800b831 	.word	0x0800b831

0800b908 <__sfp>:
 800b908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90a:	4607      	mov	r7, r0
 800b90c:	f7ff ffac 	bl	800b868 <__sfp_lock_acquire>
 800b910:	4b1e      	ldr	r3, [pc, #120]	; (800b98c <__sfp+0x84>)
 800b912:	681e      	ldr	r6, [r3, #0]
 800b914:	69b3      	ldr	r3, [r6, #24]
 800b916:	b913      	cbnz	r3, 800b91e <__sfp+0x16>
 800b918:	4630      	mov	r0, r6
 800b91a:	f7ff ffbd 	bl	800b898 <__sinit>
 800b91e:	3648      	adds	r6, #72	; 0x48
 800b920:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b924:	3b01      	subs	r3, #1
 800b926:	d503      	bpl.n	800b930 <__sfp+0x28>
 800b928:	6833      	ldr	r3, [r6, #0]
 800b92a:	b30b      	cbz	r3, 800b970 <__sfp+0x68>
 800b92c:	6836      	ldr	r6, [r6, #0]
 800b92e:	e7f7      	b.n	800b920 <__sfp+0x18>
 800b930:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b934:	b9d5      	cbnz	r5, 800b96c <__sfp+0x64>
 800b936:	4b16      	ldr	r3, [pc, #88]	; (800b990 <__sfp+0x88>)
 800b938:	60e3      	str	r3, [r4, #12]
 800b93a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b93e:	6665      	str	r5, [r4, #100]	; 0x64
 800b940:	f000 f84c 	bl	800b9dc <__retarget_lock_init_recursive>
 800b944:	f7ff ff96 	bl	800b874 <__sfp_lock_release>
 800b948:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b94c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b950:	6025      	str	r5, [r4, #0]
 800b952:	61a5      	str	r5, [r4, #24]
 800b954:	2208      	movs	r2, #8
 800b956:	4629      	mov	r1, r5
 800b958:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b95c:	f7fe fa28 	bl	8009db0 <memset>
 800b960:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b964:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b968:	4620      	mov	r0, r4
 800b96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b96c:	3468      	adds	r4, #104	; 0x68
 800b96e:	e7d9      	b.n	800b924 <__sfp+0x1c>
 800b970:	2104      	movs	r1, #4
 800b972:	4638      	mov	r0, r7
 800b974:	f7ff ff62 	bl	800b83c <__sfmoreglue>
 800b978:	4604      	mov	r4, r0
 800b97a:	6030      	str	r0, [r6, #0]
 800b97c:	2800      	cmp	r0, #0
 800b97e:	d1d5      	bne.n	800b92c <__sfp+0x24>
 800b980:	f7ff ff78 	bl	800b874 <__sfp_lock_release>
 800b984:	230c      	movs	r3, #12
 800b986:	603b      	str	r3, [r7, #0]
 800b988:	e7ee      	b.n	800b968 <__sfp+0x60>
 800b98a:	bf00      	nop
 800b98c:	0800ce48 	.word	0x0800ce48
 800b990:	ffff0001 	.word	0xffff0001

0800b994 <_fwalk_reent>:
 800b994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b998:	4606      	mov	r6, r0
 800b99a:	4688      	mov	r8, r1
 800b99c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9a0:	2700      	movs	r7, #0
 800b9a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9a6:	f1b9 0901 	subs.w	r9, r9, #1
 800b9aa:	d505      	bpl.n	800b9b8 <_fwalk_reent+0x24>
 800b9ac:	6824      	ldr	r4, [r4, #0]
 800b9ae:	2c00      	cmp	r4, #0
 800b9b0:	d1f7      	bne.n	800b9a2 <_fwalk_reent+0xe>
 800b9b2:	4638      	mov	r0, r7
 800b9b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9b8:	89ab      	ldrh	r3, [r5, #12]
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d907      	bls.n	800b9ce <_fwalk_reent+0x3a>
 800b9be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	d003      	beq.n	800b9ce <_fwalk_reent+0x3a>
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	47c0      	blx	r8
 800b9cc:	4307      	orrs	r7, r0
 800b9ce:	3568      	adds	r5, #104	; 0x68
 800b9d0:	e7e9      	b.n	800b9a6 <_fwalk_reent+0x12>
	...

0800b9d4 <_localeconv_r>:
 800b9d4:	4800      	ldr	r0, [pc, #0]	; (800b9d8 <_localeconv_r+0x4>)
 800b9d6:	4770      	bx	lr
 800b9d8:	200007e0 	.word	0x200007e0

0800b9dc <__retarget_lock_init_recursive>:
 800b9dc:	4770      	bx	lr

0800b9de <__retarget_lock_acquire_recursive>:
 800b9de:	4770      	bx	lr

0800b9e0 <__retarget_lock_release_recursive>:
 800b9e0:	4770      	bx	lr

0800b9e2 <__swhatbuf_r>:
 800b9e2:	b570      	push	{r4, r5, r6, lr}
 800b9e4:	460e      	mov	r6, r1
 800b9e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ea:	2900      	cmp	r1, #0
 800b9ec:	b096      	sub	sp, #88	; 0x58
 800b9ee:	4614      	mov	r4, r2
 800b9f0:	461d      	mov	r5, r3
 800b9f2:	da08      	bge.n	800ba06 <__swhatbuf_r+0x24>
 800b9f4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	602a      	str	r2, [r5, #0]
 800b9fc:	061a      	lsls	r2, r3, #24
 800b9fe:	d410      	bmi.n	800ba22 <__swhatbuf_r+0x40>
 800ba00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba04:	e00e      	b.n	800ba24 <__swhatbuf_r+0x42>
 800ba06:	466a      	mov	r2, sp
 800ba08:	f000 fee0 	bl	800c7cc <_fstat_r>
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	dbf1      	blt.n	800b9f4 <__swhatbuf_r+0x12>
 800ba10:	9a01      	ldr	r2, [sp, #4]
 800ba12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba1a:	425a      	negs	r2, r3
 800ba1c:	415a      	adcs	r2, r3
 800ba1e:	602a      	str	r2, [r5, #0]
 800ba20:	e7ee      	b.n	800ba00 <__swhatbuf_r+0x1e>
 800ba22:	2340      	movs	r3, #64	; 0x40
 800ba24:	2000      	movs	r0, #0
 800ba26:	6023      	str	r3, [r4, #0]
 800ba28:	b016      	add	sp, #88	; 0x58
 800ba2a:	bd70      	pop	{r4, r5, r6, pc}

0800ba2c <__smakebuf_r>:
 800ba2c:	898b      	ldrh	r3, [r1, #12]
 800ba2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba30:	079d      	lsls	r5, r3, #30
 800ba32:	4606      	mov	r6, r0
 800ba34:	460c      	mov	r4, r1
 800ba36:	d507      	bpl.n	800ba48 <__smakebuf_r+0x1c>
 800ba38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba3c:	6023      	str	r3, [r4, #0]
 800ba3e:	6123      	str	r3, [r4, #16]
 800ba40:	2301      	movs	r3, #1
 800ba42:	6163      	str	r3, [r4, #20]
 800ba44:	b002      	add	sp, #8
 800ba46:	bd70      	pop	{r4, r5, r6, pc}
 800ba48:	ab01      	add	r3, sp, #4
 800ba4a:	466a      	mov	r2, sp
 800ba4c:	f7ff ffc9 	bl	800b9e2 <__swhatbuf_r>
 800ba50:	9900      	ldr	r1, [sp, #0]
 800ba52:	4605      	mov	r5, r0
 800ba54:	4630      	mov	r0, r6
 800ba56:	f000 fc45 	bl	800c2e4 <_malloc_r>
 800ba5a:	b948      	cbnz	r0, 800ba70 <__smakebuf_r+0x44>
 800ba5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba60:	059a      	lsls	r2, r3, #22
 800ba62:	d4ef      	bmi.n	800ba44 <__smakebuf_r+0x18>
 800ba64:	f023 0303 	bic.w	r3, r3, #3
 800ba68:	f043 0302 	orr.w	r3, r3, #2
 800ba6c:	81a3      	strh	r3, [r4, #12]
 800ba6e:	e7e3      	b.n	800ba38 <__smakebuf_r+0xc>
 800ba70:	4b0d      	ldr	r3, [pc, #52]	; (800baa8 <__smakebuf_r+0x7c>)
 800ba72:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba74:	89a3      	ldrh	r3, [r4, #12]
 800ba76:	6020      	str	r0, [r4, #0]
 800ba78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba7c:	81a3      	strh	r3, [r4, #12]
 800ba7e:	9b00      	ldr	r3, [sp, #0]
 800ba80:	6163      	str	r3, [r4, #20]
 800ba82:	9b01      	ldr	r3, [sp, #4]
 800ba84:	6120      	str	r0, [r4, #16]
 800ba86:	b15b      	cbz	r3, 800baa0 <__smakebuf_r+0x74>
 800ba88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	f000 feaf 	bl	800c7f0 <_isatty_r>
 800ba92:	b128      	cbz	r0, 800baa0 <__smakebuf_r+0x74>
 800ba94:	89a3      	ldrh	r3, [r4, #12]
 800ba96:	f023 0303 	bic.w	r3, r3, #3
 800ba9a:	f043 0301 	orr.w	r3, r3, #1
 800ba9e:	81a3      	strh	r3, [r4, #12]
 800baa0:	89a0      	ldrh	r0, [r4, #12]
 800baa2:	4305      	orrs	r5, r0
 800baa4:	81a5      	strh	r5, [r4, #12]
 800baa6:	e7cd      	b.n	800ba44 <__smakebuf_r+0x18>
 800baa8:	0800b831 	.word	0x0800b831

0800baac <malloc>:
 800baac:	4b02      	ldr	r3, [pc, #8]	; (800bab8 <malloc+0xc>)
 800baae:	4601      	mov	r1, r0
 800bab0:	6818      	ldr	r0, [r3, #0]
 800bab2:	f000 bc17 	b.w	800c2e4 <_malloc_r>
 800bab6:	bf00      	nop
 800bab8:	2000068c 	.word	0x2000068c

0800babc <memcpy>:
 800babc:	440a      	add	r2, r1
 800babe:	4291      	cmp	r1, r2
 800bac0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bac4:	d100      	bne.n	800bac8 <memcpy+0xc>
 800bac6:	4770      	bx	lr
 800bac8:	b510      	push	{r4, lr}
 800baca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bace:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bad2:	4291      	cmp	r1, r2
 800bad4:	d1f9      	bne.n	800baca <memcpy+0xe>
 800bad6:	bd10      	pop	{r4, pc}

0800bad8 <_Balloc>:
 800bad8:	b570      	push	{r4, r5, r6, lr}
 800bada:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800badc:	4604      	mov	r4, r0
 800bade:	460d      	mov	r5, r1
 800bae0:	b976      	cbnz	r6, 800bb00 <_Balloc+0x28>
 800bae2:	2010      	movs	r0, #16
 800bae4:	f7ff ffe2 	bl	800baac <malloc>
 800bae8:	4602      	mov	r2, r0
 800baea:	6260      	str	r0, [r4, #36]	; 0x24
 800baec:	b920      	cbnz	r0, 800baf8 <_Balloc+0x20>
 800baee:	4b18      	ldr	r3, [pc, #96]	; (800bb50 <_Balloc+0x78>)
 800baf0:	4818      	ldr	r0, [pc, #96]	; (800bb54 <_Balloc+0x7c>)
 800baf2:	2166      	movs	r1, #102	; 0x66
 800baf4:	f000 fe2a 	bl	800c74c <__assert_func>
 800baf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bafc:	6006      	str	r6, [r0, #0]
 800bafe:	60c6      	str	r6, [r0, #12]
 800bb00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb02:	68f3      	ldr	r3, [r6, #12]
 800bb04:	b183      	cbz	r3, 800bb28 <_Balloc+0x50>
 800bb06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb0e:	b9b8      	cbnz	r0, 800bb40 <_Balloc+0x68>
 800bb10:	2101      	movs	r1, #1
 800bb12:	fa01 f605 	lsl.w	r6, r1, r5
 800bb16:	1d72      	adds	r2, r6, #5
 800bb18:	0092      	lsls	r2, r2, #2
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f000 fb60 	bl	800c1e0 <_calloc_r>
 800bb20:	b160      	cbz	r0, 800bb3c <_Balloc+0x64>
 800bb22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb26:	e00e      	b.n	800bb46 <_Balloc+0x6e>
 800bb28:	2221      	movs	r2, #33	; 0x21
 800bb2a:	2104      	movs	r1, #4
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	f000 fb57 	bl	800c1e0 <_calloc_r>
 800bb32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb34:	60f0      	str	r0, [r6, #12]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1e4      	bne.n	800bb06 <_Balloc+0x2e>
 800bb3c:	2000      	movs	r0, #0
 800bb3e:	bd70      	pop	{r4, r5, r6, pc}
 800bb40:	6802      	ldr	r2, [r0, #0]
 800bb42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb46:	2300      	movs	r3, #0
 800bb48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb4c:	e7f7      	b.n	800bb3e <_Balloc+0x66>
 800bb4e:	bf00      	nop
 800bb50:	0800ce8d 	.word	0x0800ce8d
 800bb54:	0800cf70 	.word	0x0800cf70

0800bb58 <_Bfree>:
 800bb58:	b570      	push	{r4, r5, r6, lr}
 800bb5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb5c:	4605      	mov	r5, r0
 800bb5e:	460c      	mov	r4, r1
 800bb60:	b976      	cbnz	r6, 800bb80 <_Bfree+0x28>
 800bb62:	2010      	movs	r0, #16
 800bb64:	f7ff ffa2 	bl	800baac <malloc>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	6268      	str	r0, [r5, #36]	; 0x24
 800bb6c:	b920      	cbnz	r0, 800bb78 <_Bfree+0x20>
 800bb6e:	4b09      	ldr	r3, [pc, #36]	; (800bb94 <_Bfree+0x3c>)
 800bb70:	4809      	ldr	r0, [pc, #36]	; (800bb98 <_Bfree+0x40>)
 800bb72:	218a      	movs	r1, #138	; 0x8a
 800bb74:	f000 fdea 	bl	800c74c <__assert_func>
 800bb78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb7c:	6006      	str	r6, [r0, #0]
 800bb7e:	60c6      	str	r6, [r0, #12]
 800bb80:	b13c      	cbz	r4, 800bb92 <_Bfree+0x3a>
 800bb82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb84:	6862      	ldr	r2, [r4, #4]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb8c:	6021      	str	r1, [r4, #0]
 800bb8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb92:	bd70      	pop	{r4, r5, r6, pc}
 800bb94:	0800ce8d 	.word	0x0800ce8d
 800bb98:	0800cf70 	.word	0x0800cf70

0800bb9c <__multadd>:
 800bb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba0:	690d      	ldr	r5, [r1, #16]
 800bba2:	4607      	mov	r7, r0
 800bba4:	460c      	mov	r4, r1
 800bba6:	461e      	mov	r6, r3
 800bba8:	f101 0c14 	add.w	ip, r1, #20
 800bbac:	2000      	movs	r0, #0
 800bbae:	f8dc 3000 	ldr.w	r3, [ip]
 800bbb2:	b299      	uxth	r1, r3
 800bbb4:	fb02 6101 	mla	r1, r2, r1, r6
 800bbb8:	0c1e      	lsrs	r6, r3, #16
 800bbba:	0c0b      	lsrs	r3, r1, #16
 800bbbc:	fb02 3306 	mla	r3, r2, r6, r3
 800bbc0:	b289      	uxth	r1, r1
 800bbc2:	3001      	adds	r0, #1
 800bbc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bbc8:	4285      	cmp	r5, r0
 800bbca:	f84c 1b04 	str.w	r1, [ip], #4
 800bbce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bbd2:	dcec      	bgt.n	800bbae <__multadd+0x12>
 800bbd4:	b30e      	cbz	r6, 800bc1a <__multadd+0x7e>
 800bbd6:	68a3      	ldr	r3, [r4, #8]
 800bbd8:	42ab      	cmp	r3, r5
 800bbda:	dc19      	bgt.n	800bc10 <__multadd+0x74>
 800bbdc:	6861      	ldr	r1, [r4, #4]
 800bbde:	4638      	mov	r0, r7
 800bbe0:	3101      	adds	r1, #1
 800bbe2:	f7ff ff79 	bl	800bad8 <_Balloc>
 800bbe6:	4680      	mov	r8, r0
 800bbe8:	b928      	cbnz	r0, 800bbf6 <__multadd+0x5a>
 800bbea:	4602      	mov	r2, r0
 800bbec:	4b0c      	ldr	r3, [pc, #48]	; (800bc20 <__multadd+0x84>)
 800bbee:	480d      	ldr	r0, [pc, #52]	; (800bc24 <__multadd+0x88>)
 800bbf0:	21b5      	movs	r1, #181	; 0xb5
 800bbf2:	f000 fdab 	bl	800c74c <__assert_func>
 800bbf6:	6922      	ldr	r2, [r4, #16]
 800bbf8:	3202      	adds	r2, #2
 800bbfa:	f104 010c 	add.w	r1, r4, #12
 800bbfe:	0092      	lsls	r2, r2, #2
 800bc00:	300c      	adds	r0, #12
 800bc02:	f7ff ff5b 	bl	800babc <memcpy>
 800bc06:	4621      	mov	r1, r4
 800bc08:	4638      	mov	r0, r7
 800bc0a:	f7ff ffa5 	bl	800bb58 <_Bfree>
 800bc0e:	4644      	mov	r4, r8
 800bc10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc14:	3501      	adds	r5, #1
 800bc16:	615e      	str	r6, [r3, #20]
 800bc18:	6125      	str	r5, [r4, #16]
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc20:	0800ceff 	.word	0x0800ceff
 800bc24:	0800cf70 	.word	0x0800cf70

0800bc28 <__hi0bits>:
 800bc28:	0c03      	lsrs	r3, r0, #16
 800bc2a:	041b      	lsls	r3, r3, #16
 800bc2c:	b9d3      	cbnz	r3, 800bc64 <__hi0bits+0x3c>
 800bc2e:	0400      	lsls	r0, r0, #16
 800bc30:	2310      	movs	r3, #16
 800bc32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc36:	bf04      	itt	eq
 800bc38:	0200      	lsleq	r0, r0, #8
 800bc3a:	3308      	addeq	r3, #8
 800bc3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc40:	bf04      	itt	eq
 800bc42:	0100      	lsleq	r0, r0, #4
 800bc44:	3304      	addeq	r3, #4
 800bc46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc4a:	bf04      	itt	eq
 800bc4c:	0080      	lsleq	r0, r0, #2
 800bc4e:	3302      	addeq	r3, #2
 800bc50:	2800      	cmp	r0, #0
 800bc52:	db05      	blt.n	800bc60 <__hi0bits+0x38>
 800bc54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc58:	f103 0301 	add.w	r3, r3, #1
 800bc5c:	bf08      	it	eq
 800bc5e:	2320      	moveq	r3, #32
 800bc60:	4618      	mov	r0, r3
 800bc62:	4770      	bx	lr
 800bc64:	2300      	movs	r3, #0
 800bc66:	e7e4      	b.n	800bc32 <__hi0bits+0xa>

0800bc68 <__lo0bits>:
 800bc68:	6803      	ldr	r3, [r0, #0]
 800bc6a:	f013 0207 	ands.w	r2, r3, #7
 800bc6e:	4601      	mov	r1, r0
 800bc70:	d00b      	beq.n	800bc8a <__lo0bits+0x22>
 800bc72:	07da      	lsls	r2, r3, #31
 800bc74:	d423      	bmi.n	800bcbe <__lo0bits+0x56>
 800bc76:	0798      	lsls	r0, r3, #30
 800bc78:	bf49      	itett	mi
 800bc7a:	085b      	lsrmi	r3, r3, #1
 800bc7c:	089b      	lsrpl	r3, r3, #2
 800bc7e:	2001      	movmi	r0, #1
 800bc80:	600b      	strmi	r3, [r1, #0]
 800bc82:	bf5c      	itt	pl
 800bc84:	600b      	strpl	r3, [r1, #0]
 800bc86:	2002      	movpl	r0, #2
 800bc88:	4770      	bx	lr
 800bc8a:	b298      	uxth	r0, r3
 800bc8c:	b9a8      	cbnz	r0, 800bcba <__lo0bits+0x52>
 800bc8e:	0c1b      	lsrs	r3, r3, #16
 800bc90:	2010      	movs	r0, #16
 800bc92:	b2da      	uxtb	r2, r3
 800bc94:	b90a      	cbnz	r2, 800bc9a <__lo0bits+0x32>
 800bc96:	3008      	adds	r0, #8
 800bc98:	0a1b      	lsrs	r3, r3, #8
 800bc9a:	071a      	lsls	r2, r3, #28
 800bc9c:	bf04      	itt	eq
 800bc9e:	091b      	lsreq	r3, r3, #4
 800bca0:	3004      	addeq	r0, #4
 800bca2:	079a      	lsls	r2, r3, #30
 800bca4:	bf04      	itt	eq
 800bca6:	089b      	lsreq	r3, r3, #2
 800bca8:	3002      	addeq	r0, #2
 800bcaa:	07da      	lsls	r2, r3, #31
 800bcac:	d403      	bmi.n	800bcb6 <__lo0bits+0x4e>
 800bcae:	085b      	lsrs	r3, r3, #1
 800bcb0:	f100 0001 	add.w	r0, r0, #1
 800bcb4:	d005      	beq.n	800bcc2 <__lo0bits+0x5a>
 800bcb6:	600b      	str	r3, [r1, #0]
 800bcb8:	4770      	bx	lr
 800bcba:	4610      	mov	r0, r2
 800bcbc:	e7e9      	b.n	800bc92 <__lo0bits+0x2a>
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	4770      	bx	lr
 800bcc2:	2020      	movs	r0, #32
 800bcc4:	4770      	bx	lr
	...

0800bcc8 <__i2b>:
 800bcc8:	b510      	push	{r4, lr}
 800bcca:	460c      	mov	r4, r1
 800bccc:	2101      	movs	r1, #1
 800bcce:	f7ff ff03 	bl	800bad8 <_Balloc>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	b928      	cbnz	r0, 800bce2 <__i2b+0x1a>
 800bcd6:	4b05      	ldr	r3, [pc, #20]	; (800bcec <__i2b+0x24>)
 800bcd8:	4805      	ldr	r0, [pc, #20]	; (800bcf0 <__i2b+0x28>)
 800bcda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bcde:	f000 fd35 	bl	800c74c <__assert_func>
 800bce2:	2301      	movs	r3, #1
 800bce4:	6144      	str	r4, [r0, #20]
 800bce6:	6103      	str	r3, [r0, #16]
 800bce8:	bd10      	pop	{r4, pc}
 800bcea:	bf00      	nop
 800bcec:	0800ceff 	.word	0x0800ceff
 800bcf0:	0800cf70 	.word	0x0800cf70

0800bcf4 <__multiply>:
 800bcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf8:	4691      	mov	r9, r2
 800bcfa:	690a      	ldr	r2, [r1, #16]
 800bcfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	bfb8      	it	lt
 800bd04:	460b      	movlt	r3, r1
 800bd06:	460c      	mov	r4, r1
 800bd08:	bfbc      	itt	lt
 800bd0a:	464c      	movlt	r4, r9
 800bd0c:	4699      	movlt	r9, r3
 800bd0e:	6927      	ldr	r7, [r4, #16]
 800bd10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd14:	68a3      	ldr	r3, [r4, #8]
 800bd16:	6861      	ldr	r1, [r4, #4]
 800bd18:	eb07 060a 	add.w	r6, r7, sl
 800bd1c:	42b3      	cmp	r3, r6
 800bd1e:	b085      	sub	sp, #20
 800bd20:	bfb8      	it	lt
 800bd22:	3101      	addlt	r1, #1
 800bd24:	f7ff fed8 	bl	800bad8 <_Balloc>
 800bd28:	b930      	cbnz	r0, 800bd38 <__multiply+0x44>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	4b44      	ldr	r3, [pc, #272]	; (800be40 <__multiply+0x14c>)
 800bd2e:	4845      	ldr	r0, [pc, #276]	; (800be44 <__multiply+0x150>)
 800bd30:	f240 115d 	movw	r1, #349	; 0x15d
 800bd34:	f000 fd0a 	bl	800c74c <__assert_func>
 800bd38:	f100 0514 	add.w	r5, r0, #20
 800bd3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd40:	462b      	mov	r3, r5
 800bd42:	2200      	movs	r2, #0
 800bd44:	4543      	cmp	r3, r8
 800bd46:	d321      	bcc.n	800bd8c <__multiply+0x98>
 800bd48:	f104 0314 	add.w	r3, r4, #20
 800bd4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd50:	f109 0314 	add.w	r3, r9, #20
 800bd54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd58:	9202      	str	r2, [sp, #8]
 800bd5a:	1b3a      	subs	r2, r7, r4
 800bd5c:	3a15      	subs	r2, #21
 800bd5e:	f022 0203 	bic.w	r2, r2, #3
 800bd62:	3204      	adds	r2, #4
 800bd64:	f104 0115 	add.w	r1, r4, #21
 800bd68:	428f      	cmp	r7, r1
 800bd6a:	bf38      	it	cc
 800bd6c:	2204      	movcc	r2, #4
 800bd6e:	9201      	str	r2, [sp, #4]
 800bd70:	9a02      	ldr	r2, [sp, #8]
 800bd72:	9303      	str	r3, [sp, #12]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d80c      	bhi.n	800bd92 <__multiply+0x9e>
 800bd78:	2e00      	cmp	r6, #0
 800bd7a:	dd03      	ble.n	800bd84 <__multiply+0x90>
 800bd7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d05a      	beq.n	800be3a <__multiply+0x146>
 800bd84:	6106      	str	r6, [r0, #16]
 800bd86:	b005      	add	sp, #20
 800bd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd8c:	f843 2b04 	str.w	r2, [r3], #4
 800bd90:	e7d8      	b.n	800bd44 <__multiply+0x50>
 800bd92:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd96:	f1ba 0f00 	cmp.w	sl, #0
 800bd9a:	d024      	beq.n	800bde6 <__multiply+0xf2>
 800bd9c:	f104 0e14 	add.w	lr, r4, #20
 800bda0:	46a9      	mov	r9, r5
 800bda2:	f04f 0c00 	mov.w	ip, #0
 800bda6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bdaa:	f8d9 1000 	ldr.w	r1, [r9]
 800bdae:	fa1f fb82 	uxth.w	fp, r2
 800bdb2:	b289      	uxth	r1, r1
 800bdb4:	fb0a 110b 	mla	r1, sl, fp, r1
 800bdb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bdbc:	f8d9 2000 	ldr.w	r2, [r9]
 800bdc0:	4461      	add	r1, ip
 800bdc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdc6:	fb0a c20b 	mla	r2, sl, fp, ip
 800bdca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bdce:	b289      	uxth	r1, r1
 800bdd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bdd4:	4577      	cmp	r7, lr
 800bdd6:	f849 1b04 	str.w	r1, [r9], #4
 800bdda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdde:	d8e2      	bhi.n	800bda6 <__multiply+0xb2>
 800bde0:	9a01      	ldr	r2, [sp, #4]
 800bde2:	f845 c002 	str.w	ip, [r5, r2]
 800bde6:	9a03      	ldr	r2, [sp, #12]
 800bde8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bdec:	3304      	adds	r3, #4
 800bdee:	f1b9 0f00 	cmp.w	r9, #0
 800bdf2:	d020      	beq.n	800be36 <__multiply+0x142>
 800bdf4:	6829      	ldr	r1, [r5, #0]
 800bdf6:	f104 0c14 	add.w	ip, r4, #20
 800bdfa:	46ae      	mov	lr, r5
 800bdfc:	f04f 0a00 	mov.w	sl, #0
 800be00:	f8bc b000 	ldrh.w	fp, [ip]
 800be04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be08:	fb09 220b 	mla	r2, r9, fp, r2
 800be0c:	4492      	add	sl, r2
 800be0e:	b289      	uxth	r1, r1
 800be10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800be14:	f84e 1b04 	str.w	r1, [lr], #4
 800be18:	f85c 2b04 	ldr.w	r2, [ip], #4
 800be1c:	f8be 1000 	ldrh.w	r1, [lr]
 800be20:	0c12      	lsrs	r2, r2, #16
 800be22:	fb09 1102 	mla	r1, r9, r2, r1
 800be26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800be2a:	4567      	cmp	r7, ip
 800be2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be30:	d8e6      	bhi.n	800be00 <__multiply+0x10c>
 800be32:	9a01      	ldr	r2, [sp, #4]
 800be34:	50a9      	str	r1, [r5, r2]
 800be36:	3504      	adds	r5, #4
 800be38:	e79a      	b.n	800bd70 <__multiply+0x7c>
 800be3a:	3e01      	subs	r6, #1
 800be3c:	e79c      	b.n	800bd78 <__multiply+0x84>
 800be3e:	bf00      	nop
 800be40:	0800ceff 	.word	0x0800ceff
 800be44:	0800cf70 	.word	0x0800cf70

0800be48 <__pow5mult>:
 800be48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be4c:	4615      	mov	r5, r2
 800be4e:	f012 0203 	ands.w	r2, r2, #3
 800be52:	4606      	mov	r6, r0
 800be54:	460f      	mov	r7, r1
 800be56:	d007      	beq.n	800be68 <__pow5mult+0x20>
 800be58:	4c25      	ldr	r4, [pc, #148]	; (800bef0 <__pow5mult+0xa8>)
 800be5a:	3a01      	subs	r2, #1
 800be5c:	2300      	movs	r3, #0
 800be5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be62:	f7ff fe9b 	bl	800bb9c <__multadd>
 800be66:	4607      	mov	r7, r0
 800be68:	10ad      	asrs	r5, r5, #2
 800be6a:	d03d      	beq.n	800bee8 <__pow5mult+0xa0>
 800be6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be6e:	b97c      	cbnz	r4, 800be90 <__pow5mult+0x48>
 800be70:	2010      	movs	r0, #16
 800be72:	f7ff fe1b 	bl	800baac <malloc>
 800be76:	4602      	mov	r2, r0
 800be78:	6270      	str	r0, [r6, #36]	; 0x24
 800be7a:	b928      	cbnz	r0, 800be88 <__pow5mult+0x40>
 800be7c:	4b1d      	ldr	r3, [pc, #116]	; (800bef4 <__pow5mult+0xac>)
 800be7e:	481e      	ldr	r0, [pc, #120]	; (800bef8 <__pow5mult+0xb0>)
 800be80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be84:	f000 fc62 	bl	800c74c <__assert_func>
 800be88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be8c:	6004      	str	r4, [r0, #0]
 800be8e:	60c4      	str	r4, [r0, #12]
 800be90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be98:	b94c      	cbnz	r4, 800beae <__pow5mult+0x66>
 800be9a:	f240 2171 	movw	r1, #625	; 0x271
 800be9e:	4630      	mov	r0, r6
 800bea0:	f7ff ff12 	bl	800bcc8 <__i2b>
 800bea4:	2300      	movs	r3, #0
 800bea6:	f8c8 0008 	str.w	r0, [r8, #8]
 800beaa:	4604      	mov	r4, r0
 800beac:	6003      	str	r3, [r0, #0]
 800beae:	f04f 0900 	mov.w	r9, #0
 800beb2:	07eb      	lsls	r3, r5, #31
 800beb4:	d50a      	bpl.n	800becc <__pow5mult+0x84>
 800beb6:	4639      	mov	r1, r7
 800beb8:	4622      	mov	r2, r4
 800beba:	4630      	mov	r0, r6
 800bebc:	f7ff ff1a 	bl	800bcf4 <__multiply>
 800bec0:	4639      	mov	r1, r7
 800bec2:	4680      	mov	r8, r0
 800bec4:	4630      	mov	r0, r6
 800bec6:	f7ff fe47 	bl	800bb58 <_Bfree>
 800beca:	4647      	mov	r7, r8
 800becc:	106d      	asrs	r5, r5, #1
 800bece:	d00b      	beq.n	800bee8 <__pow5mult+0xa0>
 800bed0:	6820      	ldr	r0, [r4, #0]
 800bed2:	b938      	cbnz	r0, 800bee4 <__pow5mult+0x9c>
 800bed4:	4622      	mov	r2, r4
 800bed6:	4621      	mov	r1, r4
 800bed8:	4630      	mov	r0, r6
 800beda:	f7ff ff0b 	bl	800bcf4 <__multiply>
 800bede:	6020      	str	r0, [r4, #0]
 800bee0:	f8c0 9000 	str.w	r9, [r0]
 800bee4:	4604      	mov	r4, r0
 800bee6:	e7e4      	b.n	800beb2 <__pow5mult+0x6a>
 800bee8:	4638      	mov	r0, r7
 800beea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beee:	bf00      	nop
 800bef0:	0800d0c0 	.word	0x0800d0c0
 800bef4:	0800ce8d 	.word	0x0800ce8d
 800bef8:	0800cf70 	.word	0x0800cf70

0800befc <__lshift>:
 800befc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf00:	460c      	mov	r4, r1
 800bf02:	6849      	ldr	r1, [r1, #4]
 800bf04:	6923      	ldr	r3, [r4, #16]
 800bf06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf0a:	68a3      	ldr	r3, [r4, #8]
 800bf0c:	4607      	mov	r7, r0
 800bf0e:	4691      	mov	r9, r2
 800bf10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf14:	f108 0601 	add.w	r6, r8, #1
 800bf18:	42b3      	cmp	r3, r6
 800bf1a:	db0b      	blt.n	800bf34 <__lshift+0x38>
 800bf1c:	4638      	mov	r0, r7
 800bf1e:	f7ff fddb 	bl	800bad8 <_Balloc>
 800bf22:	4605      	mov	r5, r0
 800bf24:	b948      	cbnz	r0, 800bf3a <__lshift+0x3e>
 800bf26:	4602      	mov	r2, r0
 800bf28:	4b2a      	ldr	r3, [pc, #168]	; (800bfd4 <__lshift+0xd8>)
 800bf2a:	482b      	ldr	r0, [pc, #172]	; (800bfd8 <__lshift+0xdc>)
 800bf2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf30:	f000 fc0c 	bl	800c74c <__assert_func>
 800bf34:	3101      	adds	r1, #1
 800bf36:	005b      	lsls	r3, r3, #1
 800bf38:	e7ee      	b.n	800bf18 <__lshift+0x1c>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	f100 0114 	add.w	r1, r0, #20
 800bf40:	f100 0210 	add.w	r2, r0, #16
 800bf44:	4618      	mov	r0, r3
 800bf46:	4553      	cmp	r3, sl
 800bf48:	db37      	blt.n	800bfba <__lshift+0xbe>
 800bf4a:	6920      	ldr	r0, [r4, #16]
 800bf4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf50:	f104 0314 	add.w	r3, r4, #20
 800bf54:	f019 091f 	ands.w	r9, r9, #31
 800bf58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf60:	d02f      	beq.n	800bfc2 <__lshift+0xc6>
 800bf62:	f1c9 0e20 	rsb	lr, r9, #32
 800bf66:	468a      	mov	sl, r1
 800bf68:	f04f 0c00 	mov.w	ip, #0
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	fa02 f209 	lsl.w	r2, r2, r9
 800bf72:	ea42 020c 	orr.w	r2, r2, ip
 800bf76:	f84a 2b04 	str.w	r2, [sl], #4
 800bf7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf7e:	4298      	cmp	r0, r3
 800bf80:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bf84:	d8f2      	bhi.n	800bf6c <__lshift+0x70>
 800bf86:	1b03      	subs	r3, r0, r4
 800bf88:	3b15      	subs	r3, #21
 800bf8a:	f023 0303 	bic.w	r3, r3, #3
 800bf8e:	3304      	adds	r3, #4
 800bf90:	f104 0215 	add.w	r2, r4, #21
 800bf94:	4290      	cmp	r0, r2
 800bf96:	bf38      	it	cc
 800bf98:	2304      	movcc	r3, #4
 800bf9a:	f841 c003 	str.w	ip, [r1, r3]
 800bf9e:	f1bc 0f00 	cmp.w	ip, #0
 800bfa2:	d001      	beq.n	800bfa8 <__lshift+0xac>
 800bfa4:	f108 0602 	add.w	r6, r8, #2
 800bfa8:	3e01      	subs	r6, #1
 800bfaa:	4638      	mov	r0, r7
 800bfac:	612e      	str	r6, [r5, #16]
 800bfae:	4621      	mov	r1, r4
 800bfb0:	f7ff fdd2 	bl	800bb58 <_Bfree>
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfba:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	e7c1      	b.n	800bf46 <__lshift+0x4a>
 800bfc2:	3904      	subs	r1, #4
 800bfc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfc8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfcc:	4298      	cmp	r0, r3
 800bfce:	d8f9      	bhi.n	800bfc4 <__lshift+0xc8>
 800bfd0:	e7ea      	b.n	800bfa8 <__lshift+0xac>
 800bfd2:	bf00      	nop
 800bfd4:	0800ceff 	.word	0x0800ceff
 800bfd8:	0800cf70 	.word	0x0800cf70

0800bfdc <__mcmp>:
 800bfdc:	b530      	push	{r4, r5, lr}
 800bfde:	6902      	ldr	r2, [r0, #16]
 800bfe0:	690c      	ldr	r4, [r1, #16]
 800bfe2:	1b12      	subs	r2, r2, r4
 800bfe4:	d10e      	bne.n	800c004 <__mcmp+0x28>
 800bfe6:	f100 0314 	add.w	r3, r0, #20
 800bfea:	3114      	adds	r1, #20
 800bfec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bff0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bff4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bff8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bffc:	42a5      	cmp	r5, r4
 800bffe:	d003      	beq.n	800c008 <__mcmp+0x2c>
 800c000:	d305      	bcc.n	800c00e <__mcmp+0x32>
 800c002:	2201      	movs	r2, #1
 800c004:	4610      	mov	r0, r2
 800c006:	bd30      	pop	{r4, r5, pc}
 800c008:	4283      	cmp	r3, r0
 800c00a:	d3f3      	bcc.n	800bff4 <__mcmp+0x18>
 800c00c:	e7fa      	b.n	800c004 <__mcmp+0x28>
 800c00e:	f04f 32ff 	mov.w	r2, #4294967295
 800c012:	e7f7      	b.n	800c004 <__mcmp+0x28>

0800c014 <__mdiff>:
 800c014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c018:	460c      	mov	r4, r1
 800c01a:	4606      	mov	r6, r0
 800c01c:	4611      	mov	r1, r2
 800c01e:	4620      	mov	r0, r4
 800c020:	4690      	mov	r8, r2
 800c022:	f7ff ffdb 	bl	800bfdc <__mcmp>
 800c026:	1e05      	subs	r5, r0, #0
 800c028:	d110      	bne.n	800c04c <__mdiff+0x38>
 800c02a:	4629      	mov	r1, r5
 800c02c:	4630      	mov	r0, r6
 800c02e:	f7ff fd53 	bl	800bad8 <_Balloc>
 800c032:	b930      	cbnz	r0, 800c042 <__mdiff+0x2e>
 800c034:	4b3a      	ldr	r3, [pc, #232]	; (800c120 <__mdiff+0x10c>)
 800c036:	4602      	mov	r2, r0
 800c038:	f240 2132 	movw	r1, #562	; 0x232
 800c03c:	4839      	ldr	r0, [pc, #228]	; (800c124 <__mdiff+0x110>)
 800c03e:	f000 fb85 	bl	800c74c <__assert_func>
 800c042:	2301      	movs	r3, #1
 800c044:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c04c:	bfa4      	itt	ge
 800c04e:	4643      	movge	r3, r8
 800c050:	46a0      	movge	r8, r4
 800c052:	4630      	mov	r0, r6
 800c054:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c058:	bfa6      	itte	ge
 800c05a:	461c      	movge	r4, r3
 800c05c:	2500      	movge	r5, #0
 800c05e:	2501      	movlt	r5, #1
 800c060:	f7ff fd3a 	bl	800bad8 <_Balloc>
 800c064:	b920      	cbnz	r0, 800c070 <__mdiff+0x5c>
 800c066:	4b2e      	ldr	r3, [pc, #184]	; (800c120 <__mdiff+0x10c>)
 800c068:	4602      	mov	r2, r0
 800c06a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c06e:	e7e5      	b.n	800c03c <__mdiff+0x28>
 800c070:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c074:	6926      	ldr	r6, [r4, #16]
 800c076:	60c5      	str	r5, [r0, #12]
 800c078:	f104 0914 	add.w	r9, r4, #20
 800c07c:	f108 0514 	add.w	r5, r8, #20
 800c080:	f100 0e14 	add.w	lr, r0, #20
 800c084:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c088:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c08c:	f108 0210 	add.w	r2, r8, #16
 800c090:	46f2      	mov	sl, lr
 800c092:	2100      	movs	r1, #0
 800c094:	f859 3b04 	ldr.w	r3, [r9], #4
 800c098:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c09c:	fa1f f883 	uxth.w	r8, r3
 800c0a0:	fa11 f18b 	uxtah	r1, r1, fp
 800c0a4:	0c1b      	lsrs	r3, r3, #16
 800c0a6:	eba1 0808 	sub.w	r8, r1, r8
 800c0aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c0b2:	fa1f f888 	uxth.w	r8, r8
 800c0b6:	1419      	asrs	r1, r3, #16
 800c0b8:	454e      	cmp	r6, r9
 800c0ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c0be:	f84a 3b04 	str.w	r3, [sl], #4
 800c0c2:	d8e7      	bhi.n	800c094 <__mdiff+0x80>
 800c0c4:	1b33      	subs	r3, r6, r4
 800c0c6:	3b15      	subs	r3, #21
 800c0c8:	f023 0303 	bic.w	r3, r3, #3
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	3415      	adds	r4, #21
 800c0d0:	42a6      	cmp	r6, r4
 800c0d2:	bf38      	it	cc
 800c0d4:	2304      	movcc	r3, #4
 800c0d6:	441d      	add	r5, r3
 800c0d8:	4473      	add	r3, lr
 800c0da:	469e      	mov	lr, r3
 800c0dc:	462e      	mov	r6, r5
 800c0de:	4566      	cmp	r6, ip
 800c0e0:	d30e      	bcc.n	800c100 <__mdiff+0xec>
 800c0e2:	f10c 0203 	add.w	r2, ip, #3
 800c0e6:	1b52      	subs	r2, r2, r5
 800c0e8:	f022 0203 	bic.w	r2, r2, #3
 800c0ec:	3d03      	subs	r5, #3
 800c0ee:	45ac      	cmp	ip, r5
 800c0f0:	bf38      	it	cc
 800c0f2:	2200      	movcc	r2, #0
 800c0f4:	441a      	add	r2, r3
 800c0f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c0fa:	b17b      	cbz	r3, 800c11c <__mdiff+0x108>
 800c0fc:	6107      	str	r7, [r0, #16]
 800c0fe:	e7a3      	b.n	800c048 <__mdiff+0x34>
 800c100:	f856 8b04 	ldr.w	r8, [r6], #4
 800c104:	fa11 f288 	uxtah	r2, r1, r8
 800c108:	1414      	asrs	r4, r2, #16
 800c10a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c10e:	b292      	uxth	r2, r2
 800c110:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c114:	f84e 2b04 	str.w	r2, [lr], #4
 800c118:	1421      	asrs	r1, r4, #16
 800c11a:	e7e0      	b.n	800c0de <__mdiff+0xca>
 800c11c:	3f01      	subs	r7, #1
 800c11e:	e7ea      	b.n	800c0f6 <__mdiff+0xe2>
 800c120:	0800ceff 	.word	0x0800ceff
 800c124:	0800cf70 	.word	0x0800cf70

0800c128 <__d2b>:
 800c128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c12c:	4689      	mov	r9, r1
 800c12e:	2101      	movs	r1, #1
 800c130:	ec57 6b10 	vmov	r6, r7, d0
 800c134:	4690      	mov	r8, r2
 800c136:	f7ff fccf 	bl	800bad8 <_Balloc>
 800c13a:	4604      	mov	r4, r0
 800c13c:	b930      	cbnz	r0, 800c14c <__d2b+0x24>
 800c13e:	4602      	mov	r2, r0
 800c140:	4b25      	ldr	r3, [pc, #148]	; (800c1d8 <__d2b+0xb0>)
 800c142:	4826      	ldr	r0, [pc, #152]	; (800c1dc <__d2b+0xb4>)
 800c144:	f240 310a 	movw	r1, #778	; 0x30a
 800c148:	f000 fb00 	bl	800c74c <__assert_func>
 800c14c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c150:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c154:	bb35      	cbnz	r5, 800c1a4 <__d2b+0x7c>
 800c156:	2e00      	cmp	r6, #0
 800c158:	9301      	str	r3, [sp, #4]
 800c15a:	d028      	beq.n	800c1ae <__d2b+0x86>
 800c15c:	4668      	mov	r0, sp
 800c15e:	9600      	str	r6, [sp, #0]
 800c160:	f7ff fd82 	bl	800bc68 <__lo0bits>
 800c164:	9900      	ldr	r1, [sp, #0]
 800c166:	b300      	cbz	r0, 800c1aa <__d2b+0x82>
 800c168:	9a01      	ldr	r2, [sp, #4]
 800c16a:	f1c0 0320 	rsb	r3, r0, #32
 800c16e:	fa02 f303 	lsl.w	r3, r2, r3
 800c172:	430b      	orrs	r3, r1
 800c174:	40c2      	lsrs	r2, r0
 800c176:	6163      	str	r3, [r4, #20]
 800c178:	9201      	str	r2, [sp, #4]
 800c17a:	9b01      	ldr	r3, [sp, #4]
 800c17c:	61a3      	str	r3, [r4, #24]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	bf14      	ite	ne
 800c182:	2202      	movne	r2, #2
 800c184:	2201      	moveq	r2, #1
 800c186:	6122      	str	r2, [r4, #16]
 800c188:	b1d5      	cbz	r5, 800c1c0 <__d2b+0x98>
 800c18a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c18e:	4405      	add	r5, r0
 800c190:	f8c9 5000 	str.w	r5, [r9]
 800c194:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c198:	f8c8 0000 	str.w	r0, [r8]
 800c19c:	4620      	mov	r0, r4
 800c19e:	b003      	add	sp, #12
 800c1a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1a8:	e7d5      	b.n	800c156 <__d2b+0x2e>
 800c1aa:	6161      	str	r1, [r4, #20]
 800c1ac:	e7e5      	b.n	800c17a <__d2b+0x52>
 800c1ae:	a801      	add	r0, sp, #4
 800c1b0:	f7ff fd5a 	bl	800bc68 <__lo0bits>
 800c1b4:	9b01      	ldr	r3, [sp, #4]
 800c1b6:	6163      	str	r3, [r4, #20]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	6122      	str	r2, [r4, #16]
 800c1bc:	3020      	adds	r0, #32
 800c1be:	e7e3      	b.n	800c188 <__d2b+0x60>
 800c1c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c1c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c1c8:	f8c9 0000 	str.w	r0, [r9]
 800c1cc:	6918      	ldr	r0, [r3, #16]
 800c1ce:	f7ff fd2b 	bl	800bc28 <__hi0bits>
 800c1d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c1d6:	e7df      	b.n	800c198 <__d2b+0x70>
 800c1d8:	0800ceff 	.word	0x0800ceff
 800c1dc:	0800cf70 	.word	0x0800cf70

0800c1e0 <_calloc_r>:
 800c1e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1e2:	fba1 2402 	umull	r2, r4, r1, r2
 800c1e6:	b94c      	cbnz	r4, 800c1fc <_calloc_r+0x1c>
 800c1e8:	4611      	mov	r1, r2
 800c1ea:	9201      	str	r2, [sp, #4]
 800c1ec:	f000 f87a 	bl	800c2e4 <_malloc_r>
 800c1f0:	9a01      	ldr	r2, [sp, #4]
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	b930      	cbnz	r0, 800c204 <_calloc_r+0x24>
 800c1f6:	4628      	mov	r0, r5
 800c1f8:	b003      	add	sp, #12
 800c1fa:	bd30      	pop	{r4, r5, pc}
 800c1fc:	220c      	movs	r2, #12
 800c1fe:	6002      	str	r2, [r0, #0]
 800c200:	2500      	movs	r5, #0
 800c202:	e7f8      	b.n	800c1f6 <_calloc_r+0x16>
 800c204:	4621      	mov	r1, r4
 800c206:	f7fd fdd3 	bl	8009db0 <memset>
 800c20a:	e7f4      	b.n	800c1f6 <_calloc_r+0x16>

0800c20c <_free_r>:
 800c20c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c20e:	2900      	cmp	r1, #0
 800c210:	d044      	beq.n	800c29c <_free_r+0x90>
 800c212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c216:	9001      	str	r0, [sp, #4]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f1a1 0404 	sub.w	r4, r1, #4
 800c21e:	bfb8      	it	lt
 800c220:	18e4      	addlt	r4, r4, r3
 800c222:	f000 fb19 	bl	800c858 <__malloc_lock>
 800c226:	4a1e      	ldr	r2, [pc, #120]	; (800c2a0 <_free_r+0x94>)
 800c228:	9801      	ldr	r0, [sp, #4]
 800c22a:	6813      	ldr	r3, [r2, #0]
 800c22c:	b933      	cbnz	r3, 800c23c <_free_r+0x30>
 800c22e:	6063      	str	r3, [r4, #4]
 800c230:	6014      	str	r4, [r2, #0]
 800c232:	b003      	add	sp, #12
 800c234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c238:	f000 bb14 	b.w	800c864 <__malloc_unlock>
 800c23c:	42a3      	cmp	r3, r4
 800c23e:	d908      	bls.n	800c252 <_free_r+0x46>
 800c240:	6825      	ldr	r5, [r4, #0]
 800c242:	1961      	adds	r1, r4, r5
 800c244:	428b      	cmp	r3, r1
 800c246:	bf01      	itttt	eq
 800c248:	6819      	ldreq	r1, [r3, #0]
 800c24a:	685b      	ldreq	r3, [r3, #4]
 800c24c:	1949      	addeq	r1, r1, r5
 800c24e:	6021      	streq	r1, [r4, #0]
 800c250:	e7ed      	b.n	800c22e <_free_r+0x22>
 800c252:	461a      	mov	r2, r3
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	b10b      	cbz	r3, 800c25c <_free_r+0x50>
 800c258:	42a3      	cmp	r3, r4
 800c25a:	d9fa      	bls.n	800c252 <_free_r+0x46>
 800c25c:	6811      	ldr	r1, [r2, #0]
 800c25e:	1855      	adds	r5, r2, r1
 800c260:	42a5      	cmp	r5, r4
 800c262:	d10b      	bne.n	800c27c <_free_r+0x70>
 800c264:	6824      	ldr	r4, [r4, #0]
 800c266:	4421      	add	r1, r4
 800c268:	1854      	adds	r4, r2, r1
 800c26a:	42a3      	cmp	r3, r4
 800c26c:	6011      	str	r1, [r2, #0]
 800c26e:	d1e0      	bne.n	800c232 <_free_r+0x26>
 800c270:	681c      	ldr	r4, [r3, #0]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	6053      	str	r3, [r2, #4]
 800c276:	4421      	add	r1, r4
 800c278:	6011      	str	r1, [r2, #0]
 800c27a:	e7da      	b.n	800c232 <_free_r+0x26>
 800c27c:	d902      	bls.n	800c284 <_free_r+0x78>
 800c27e:	230c      	movs	r3, #12
 800c280:	6003      	str	r3, [r0, #0]
 800c282:	e7d6      	b.n	800c232 <_free_r+0x26>
 800c284:	6825      	ldr	r5, [r4, #0]
 800c286:	1961      	adds	r1, r4, r5
 800c288:	428b      	cmp	r3, r1
 800c28a:	bf04      	itt	eq
 800c28c:	6819      	ldreq	r1, [r3, #0]
 800c28e:	685b      	ldreq	r3, [r3, #4]
 800c290:	6063      	str	r3, [r4, #4]
 800c292:	bf04      	itt	eq
 800c294:	1949      	addeq	r1, r1, r5
 800c296:	6021      	streq	r1, [r4, #0]
 800c298:	6054      	str	r4, [r2, #4]
 800c29a:	e7ca      	b.n	800c232 <_free_r+0x26>
 800c29c:	b003      	add	sp, #12
 800c29e:	bd30      	pop	{r4, r5, pc}
 800c2a0:	20000d38 	.word	0x20000d38

0800c2a4 <sbrk_aligned>:
 800c2a4:	b570      	push	{r4, r5, r6, lr}
 800c2a6:	4e0e      	ldr	r6, [pc, #56]	; (800c2e0 <sbrk_aligned+0x3c>)
 800c2a8:	460c      	mov	r4, r1
 800c2aa:	6831      	ldr	r1, [r6, #0]
 800c2ac:	4605      	mov	r5, r0
 800c2ae:	b911      	cbnz	r1, 800c2b6 <sbrk_aligned+0x12>
 800c2b0:	f000 f9e6 	bl	800c680 <_sbrk_r>
 800c2b4:	6030      	str	r0, [r6, #0]
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	f000 f9e1 	bl	800c680 <_sbrk_r>
 800c2be:	1c43      	adds	r3, r0, #1
 800c2c0:	d00a      	beq.n	800c2d8 <sbrk_aligned+0x34>
 800c2c2:	1cc4      	adds	r4, r0, #3
 800c2c4:	f024 0403 	bic.w	r4, r4, #3
 800c2c8:	42a0      	cmp	r0, r4
 800c2ca:	d007      	beq.n	800c2dc <sbrk_aligned+0x38>
 800c2cc:	1a21      	subs	r1, r4, r0
 800c2ce:	4628      	mov	r0, r5
 800c2d0:	f000 f9d6 	bl	800c680 <_sbrk_r>
 800c2d4:	3001      	adds	r0, #1
 800c2d6:	d101      	bne.n	800c2dc <sbrk_aligned+0x38>
 800c2d8:	f04f 34ff 	mov.w	r4, #4294967295
 800c2dc:	4620      	mov	r0, r4
 800c2de:	bd70      	pop	{r4, r5, r6, pc}
 800c2e0:	20000d3c 	.word	0x20000d3c

0800c2e4 <_malloc_r>:
 800c2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e8:	1ccd      	adds	r5, r1, #3
 800c2ea:	f025 0503 	bic.w	r5, r5, #3
 800c2ee:	3508      	adds	r5, #8
 800c2f0:	2d0c      	cmp	r5, #12
 800c2f2:	bf38      	it	cc
 800c2f4:	250c      	movcc	r5, #12
 800c2f6:	2d00      	cmp	r5, #0
 800c2f8:	4607      	mov	r7, r0
 800c2fa:	db01      	blt.n	800c300 <_malloc_r+0x1c>
 800c2fc:	42a9      	cmp	r1, r5
 800c2fe:	d905      	bls.n	800c30c <_malloc_r+0x28>
 800c300:	230c      	movs	r3, #12
 800c302:	603b      	str	r3, [r7, #0]
 800c304:	2600      	movs	r6, #0
 800c306:	4630      	mov	r0, r6
 800c308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c30c:	4e2e      	ldr	r6, [pc, #184]	; (800c3c8 <_malloc_r+0xe4>)
 800c30e:	f000 faa3 	bl	800c858 <__malloc_lock>
 800c312:	6833      	ldr	r3, [r6, #0]
 800c314:	461c      	mov	r4, r3
 800c316:	bb34      	cbnz	r4, 800c366 <_malloc_r+0x82>
 800c318:	4629      	mov	r1, r5
 800c31a:	4638      	mov	r0, r7
 800c31c:	f7ff ffc2 	bl	800c2a4 <sbrk_aligned>
 800c320:	1c43      	adds	r3, r0, #1
 800c322:	4604      	mov	r4, r0
 800c324:	d14d      	bne.n	800c3c2 <_malloc_r+0xde>
 800c326:	6834      	ldr	r4, [r6, #0]
 800c328:	4626      	mov	r6, r4
 800c32a:	2e00      	cmp	r6, #0
 800c32c:	d140      	bne.n	800c3b0 <_malloc_r+0xcc>
 800c32e:	6823      	ldr	r3, [r4, #0]
 800c330:	4631      	mov	r1, r6
 800c332:	4638      	mov	r0, r7
 800c334:	eb04 0803 	add.w	r8, r4, r3
 800c338:	f000 f9a2 	bl	800c680 <_sbrk_r>
 800c33c:	4580      	cmp	r8, r0
 800c33e:	d13a      	bne.n	800c3b6 <_malloc_r+0xd2>
 800c340:	6821      	ldr	r1, [r4, #0]
 800c342:	3503      	adds	r5, #3
 800c344:	1a6d      	subs	r5, r5, r1
 800c346:	f025 0503 	bic.w	r5, r5, #3
 800c34a:	3508      	adds	r5, #8
 800c34c:	2d0c      	cmp	r5, #12
 800c34e:	bf38      	it	cc
 800c350:	250c      	movcc	r5, #12
 800c352:	4629      	mov	r1, r5
 800c354:	4638      	mov	r0, r7
 800c356:	f7ff ffa5 	bl	800c2a4 <sbrk_aligned>
 800c35a:	3001      	adds	r0, #1
 800c35c:	d02b      	beq.n	800c3b6 <_malloc_r+0xd2>
 800c35e:	6823      	ldr	r3, [r4, #0]
 800c360:	442b      	add	r3, r5
 800c362:	6023      	str	r3, [r4, #0]
 800c364:	e00e      	b.n	800c384 <_malloc_r+0xa0>
 800c366:	6822      	ldr	r2, [r4, #0]
 800c368:	1b52      	subs	r2, r2, r5
 800c36a:	d41e      	bmi.n	800c3aa <_malloc_r+0xc6>
 800c36c:	2a0b      	cmp	r2, #11
 800c36e:	d916      	bls.n	800c39e <_malloc_r+0xba>
 800c370:	1961      	adds	r1, r4, r5
 800c372:	42a3      	cmp	r3, r4
 800c374:	6025      	str	r5, [r4, #0]
 800c376:	bf18      	it	ne
 800c378:	6059      	strne	r1, [r3, #4]
 800c37a:	6863      	ldr	r3, [r4, #4]
 800c37c:	bf08      	it	eq
 800c37e:	6031      	streq	r1, [r6, #0]
 800c380:	5162      	str	r2, [r4, r5]
 800c382:	604b      	str	r3, [r1, #4]
 800c384:	4638      	mov	r0, r7
 800c386:	f104 060b 	add.w	r6, r4, #11
 800c38a:	f000 fa6b 	bl	800c864 <__malloc_unlock>
 800c38e:	f026 0607 	bic.w	r6, r6, #7
 800c392:	1d23      	adds	r3, r4, #4
 800c394:	1af2      	subs	r2, r6, r3
 800c396:	d0b6      	beq.n	800c306 <_malloc_r+0x22>
 800c398:	1b9b      	subs	r3, r3, r6
 800c39a:	50a3      	str	r3, [r4, r2]
 800c39c:	e7b3      	b.n	800c306 <_malloc_r+0x22>
 800c39e:	6862      	ldr	r2, [r4, #4]
 800c3a0:	42a3      	cmp	r3, r4
 800c3a2:	bf0c      	ite	eq
 800c3a4:	6032      	streq	r2, [r6, #0]
 800c3a6:	605a      	strne	r2, [r3, #4]
 800c3a8:	e7ec      	b.n	800c384 <_malloc_r+0xa0>
 800c3aa:	4623      	mov	r3, r4
 800c3ac:	6864      	ldr	r4, [r4, #4]
 800c3ae:	e7b2      	b.n	800c316 <_malloc_r+0x32>
 800c3b0:	4634      	mov	r4, r6
 800c3b2:	6876      	ldr	r6, [r6, #4]
 800c3b4:	e7b9      	b.n	800c32a <_malloc_r+0x46>
 800c3b6:	230c      	movs	r3, #12
 800c3b8:	603b      	str	r3, [r7, #0]
 800c3ba:	4638      	mov	r0, r7
 800c3bc:	f000 fa52 	bl	800c864 <__malloc_unlock>
 800c3c0:	e7a1      	b.n	800c306 <_malloc_r+0x22>
 800c3c2:	6025      	str	r5, [r4, #0]
 800c3c4:	e7de      	b.n	800c384 <_malloc_r+0xa0>
 800c3c6:	bf00      	nop
 800c3c8:	20000d38 	.word	0x20000d38

0800c3cc <__sfputc_r>:
 800c3cc:	6893      	ldr	r3, [r2, #8]
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	b410      	push	{r4}
 800c3d4:	6093      	str	r3, [r2, #8]
 800c3d6:	da08      	bge.n	800c3ea <__sfputc_r+0x1e>
 800c3d8:	6994      	ldr	r4, [r2, #24]
 800c3da:	42a3      	cmp	r3, r4
 800c3dc:	db01      	blt.n	800c3e2 <__sfputc_r+0x16>
 800c3de:	290a      	cmp	r1, #10
 800c3e0:	d103      	bne.n	800c3ea <__sfputc_r+0x1e>
 800c3e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3e6:	f7fe ba01 	b.w	800a7ec <__swbuf_r>
 800c3ea:	6813      	ldr	r3, [r2, #0]
 800c3ec:	1c58      	adds	r0, r3, #1
 800c3ee:	6010      	str	r0, [r2, #0]
 800c3f0:	7019      	strb	r1, [r3, #0]
 800c3f2:	4608      	mov	r0, r1
 800c3f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3f8:	4770      	bx	lr

0800c3fa <__sfputs_r>:
 800c3fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3fc:	4606      	mov	r6, r0
 800c3fe:	460f      	mov	r7, r1
 800c400:	4614      	mov	r4, r2
 800c402:	18d5      	adds	r5, r2, r3
 800c404:	42ac      	cmp	r4, r5
 800c406:	d101      	bne.n	800c40c <__sfputs_r+0x12>
 800c408:	2000      	movs	r0, #0
 800c40a:	e007      	b.n	800c41c <__sfputs_r+0x22>
 800c40c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c410:	463a      	mov	r2, r7
 800c412:	4630      	mov	r0, r6
 800c414:	f7ff ffda 	bl	800c3cc <__sfputc_r>
 800c418:	1c43      	adds	r3, r0, #1
 800c41a:	d1f3      	bne.n	800c404 <__sfputs_r+0xa>
 800c41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c420 <_vfiprintf_r>:
 800c420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c424:	460d      	mov	r5, r1
 800c426:	b09d      	sub	sp, #116	; 0x74
 800c428:	4614      	mov	r4, r2
 800c42a:	4698      	mov	r8, r3
 800c42c:	4606      	mov	r6, r0
 800c42e:	b118      	cbz	r0, 800c438 <_vfiprintf_r+0x18>
 800c430:	6983      	ldr	r3, [r0, #24]
 800c432:	b90b      	cbnz	r3, 800c438 <_vfiprintf_r+0x18>
 800c434:	f7ff fa30 	bl	800b898 <__sinit>
 800c438:	4b89      	ldr	r3, [pc, #548]	; (800c660 <_vfiprintf_r+0x240>)
 800c43a:	429d      	cmp	r5, r3
 800c43c:	d11b      	bne.n	800c476 <_vfiprintf_r+0x56>
 800c43e:	6875      	ldr	r5, [r6, #4]
 800c440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c442:	07d9      	lsls	r1, r3, #31
 800c444:	d405      	bmi.n	800c452 <_vfiprintf_r+0x32>
 800c446:	89ab      	ldrh	r3, [r5, #12]
 800c448:	059a      	lsls	r2, r3, #22
 800c44a:	d402      	bmi.n	800c452 <_vfiprintf_r+0x32>
 800c44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c44e:	f7ff fac6 	bl	800b9de <__retarget_lock_acquire_recursive>
 800c452:	89ab      	ldrh	r3, [r5, #12]
 800c454:	071b      	lsls	r3, r3, #28
 800c456:	d501      	bpl.n	800c45c <_vfiprintf_r+0x3c>
 800c458:	692b      	ldr	r3, [r5, #16]
 800c45a:	b9eb      	cbnz	r3, 800c498 <_vfiprintf_r+0x78>
 800c45c:	4629      	mov	r1, r5
 800c45e:	4630      	mov	r0, r6
 800c460:	f7fe fa16 	bl	800a890 <__swsetup_r>
 800c464:	b1c0      	cbz	r0, 800c498 <_vfiprintf_r+0x78>
 800c466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c468:	07dc      	lsls	r4, r3, #31
 800c46a:	d50e      	bpl.n	800c48a <_vfiprintf_r+0x6a>
 800c46c:	f04f 30ff 	mov.w	r0, #4294967295
 800c470:	b01d      	add	sp, #116	; 0x74
 800c472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c476:	4b7b      	ldr	r3, [pc, #492]	; (800c664 <_vfiprintf_r+0x244>)
 800c478:	429d      	cmp	r5, r3
 800c47a:	d101      	bne.n	800c480 <_vfiprintf_r+0x60>
 800c47c:	68b5      	ldr	r5, [r6, #8]
 800c47e:	e7df      	b.n	800c440 <_vfiprintf_r+0x20>
 800c480:	4b79      	ldr	r3, [pc, #484]	; (800c668 <_vfiprintf_r+0x248>)
 800c482:	429d      	cmp	r5, r3
 800c484:	bf08      	it	eq
 800c486:	68f5      	ldreq	r5, [r6, #12]
 800c488:	e7da      	b.n	800c440 <_vfiprintf_r+0x20>
 800c48a:	89ab      	ldrh	r3, [r5, #12]
 800c48c:	0598      	lsls	r0, r3, #22
 800c48e:	d4ed      	bmi.n	800c46c <_vfiprintf_r+0x4c>
 800c490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c492:	f7ff faa5 	bl	800b9e0 <__retarget_lock_release_recursive>
 800c496:	e7e9      	b.n	800c46c <_vfiprintf_r+0x4c>
 800c498:	2300      	movs	r3, #0
 800c49a:	9309      	str	r3, [sp, #36]	; 0x24
 800c49c:	2320      	movs	r3, #32
 800c49e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4a6:	2330      	movs	r3, #48	; 0x30
 800c4a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c66c <_vfiprintf_r+0x24c>
 800c4ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4b0:	f04f 0901 	mov.w	r9, #1
 800c4b4:	4623      	mov	r3, r4
 800c4b6:	469a      	mov	sl, r3
 800c4b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4bc:	b10a      	cbz	r2, 800c4c2 <_vfiprintf_r+0xa2>
 800c4be:	2a25      	cmp	r2, #37	; 0x25
 800c4c0:	d1f9      	bne.n	800c4b6 <_vfiprintf_r+0x96>
 800c4c2:	ebba 0b04 	subs.w	fp, sl, r4
 800c4c6:	d00b      	beq.n	800c4e0 <_vfiprintf_r+0xc0>
 800c4c8:	465b      	mov	r3, fp
 800c4ca:	4622      	mov	r2, r4
 800c4cc:	4629      	mov	r1, r5
 800c4ce:	4630      	mov	r0, r6
 800c4d0:	f7ff ff93 	bl	800c3fa <__sfputs_r>
 800c4d4:	3001      	adds	r0, #1
 800c4d6:	f000 80aa 	beq.w	800c62e <_vfiprintf_r+0x20e>
 800c4da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4dc:	445a      	add	r2, fp
 800c4de:	9209      	str	r2, [sp, #36]	; 0x24
 800c4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	f000 80a2 	beq.w	800c62e <_vfiprintf_r+0x20e>
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4f4:	f10a 0a01 	add.w	sl, sl, #1
 800c4f8:	9304      	str	r3, [sp, #16]
 800c4fa:	9307      	str	r3, [sp, #28]
 800c4fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c500:	931a      	str	r3, [sp, #104]	; 0x68
 800c502:	4654      	mov	r4, sl
 800c504:	2205      	movs	r2, #5
 800c506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c50a:	4858      	ldr	r0, [pc, #352]	; (800c66c <_vfiprintf_r+0x24c>)
 800c50c:	f7f3 fe90 	bl	8000230 <memchr>
 800c510:	9a04      	ldr	r2, [sp, #16]
 800c512:	b9d8      	cbnz	r0, 800c54c <_vfiprintf_r+0x12c>
 800c514:	06d1      	lsls	r1, r2, #27
 800c516:	bf44      	itt	mi
 800c518:	2320      	movmi	r3, #32
 800c51a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c51e:	0713      	lsls	r3, r2, #28
 800c520:	bf44      	itt	mi
 800c522:	232b      	movmi	r3, #43	; 0x2b
 800c524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c528:	f89a 3000 	ldrb.w	r3, [sl]
 800c52c:	2b2a      	cmp	r3, #42	; 0x2a
 800c52e:	d015      	beq.n	800c55c <_vfiprintf_r+0x13c>
 800c530:	9a07      	ldr	r2, [sp, #28]
 800c532:	4654      	mov	r4, sl
 800c534:	2000      	movs	r0, #0
 800c536:	f04f 0c0a 	mov.w	ip, #10
 800c53a:	4621      	mov	r1, r4
 800c53c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c540:	3b30      	subs	r3, #48	; 0x30
 800c542:	2b09      	cmp	r3, #9
 800c544:	d94e      	bls.n	800c5e4 <_vfiprintf_r+0x1c4>
 800c546:	b1b0      	cbz	r0, 800c576 <_vfiprintf_r+0x156>
 800c548:	9207      	str	r2, [sp, #28]
 800c54a:	e014      	b.n	800c576 <_vfiprintf_r+0x156>
 800c54c:	eba0 0308 	sub.w	r3, r0, r8
 800c550:	fa09 f303 	lsl.w	r3, r9, r3
 800c554:	4313      	orrs	r3, r2
 800c556:	9304      	str	r3, [sp, #16]
 800c558:	46a2      	mov	sl, r4
 800c55a:	e7d2      	b.n	800c502 <_vfiprintf_r+0xe2>
 800c55c:	9b03      	ldr	r3, [sp, #12]
 800c55e:	1d19      	adds	r1, r3, #4
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	9103      	str	r1, [sp, #12]
 800c564:	2b00      	cmp	r3, #0
 800c566:	bfbb      	ittet	lt
 800c568:	425b      	neglt	r3, r3
 800c56a:	f042 0202 	orrlt.w	r2, r2, #2
 800c56e:	9307      	strge	r3, [sp, #28]
 800c570:	9307      	strlt	r3, [sp, #28]
 800c572:	bfb8      	it	lt
 800c574:	9204      	strlt	r2, [sp, #16]
 800c576:	7823      	ldrb	r3, [r4, #0]
 800c578:	2b2e      	cmp	r3, #46	; 0x2e
 800c57a:	d10c      	bne.n	800c596 <_vfiprintf_r+0x176>
 800c57c:	7863      	ldrb	r3, [r4, #1]
 800c57e:	2b2a      	cmp	r3, #42	; 0x2a
 800c580:	d135      	bne.n	800c5ee <_vfiprintf_r+0x1ce>
 800c582:	9b03      	ldr	r3, [sp, #12]
 800c584:	1d1a      	adds	r2, r3, #4
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	9203      	str	r2, [sp, #12]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	bfb8      	it	lt
 800c58e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c592:	3402      	adds	r4, #2
 800c594:	9305      	str	r3, [sp, #20]
 800c596:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c67c <_vfiprintf_r+0x25c>
 800c59a:	7821      	ldrb	r1, [r4, #0]
 800c59c:	2203      	movs	r2, #3
 800c59e:	4650      	mov	r0, sl
 800c5a0:	f7f3 fe46 	bl	8000230 <memchr>
 800c5a4:	b140      	cbz	r0, 800c5b8 <_vfiprintf_r+0x198>
 800c5a6:	2340      	movs	r3, #64	; 0x40
 800c5a8:	eba0 000a 	sub.w	r0, r0, sl
 800c5ac:	fa03 f000 	lsl.w	r0, r3, r0
 800c5b0:	9b04      	ldr	r3, [sp, #16]
 800c5b2:	4303      	orrs	r3, r0
 800c5b4:	3401      	adds	r4, #1
 800c5b6:	9304      	str	r3, [sp, #16]
 800c5b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5bc:	482c      	ldr	r0, [pc, #176]	; (800c670 <_vfiprintf_r+0x250>)
 800c5be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5c2:	2206      	movs	r2, #6
 800c5c4:	f7f3 fe34 	bl	8000230 <memchr>
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	d03f      	beq.n	800c64c <_vfiprintf_r+0x22c>
 800c5cc:	4b29      	ldr	r3, [pc, #164]	; (800c674 <_vfiprintf_r+0x254>)
 800c5ce:	bb1b      	cbnz	r3, 800c618 <_vfiprintf_r+0x1f8>
 800c5d0:	9b03      	ldr	r3, [sp, #12]
 800c5d2:	3307      	adds	r3, #7
 800c5d4:	f023 0307 	bic.w	r3, r3, #7
 800c5d8:	3308      	adds	r3, #8
 800c5da:	9303      	str	r3, [sp, #12]
 800c5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5de:	443b      	add	r3, r7
 800c5e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5e2:	e767      	b.n	800c4b4 <_vfiprintf_r+0x94>
 800c5e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5e8:	460c      	mov	r4, r1
 800c5ea:	2001      	movs	r0, #1
 800c5ec:	e7a5      	b.n	800c53a <_vfiprintf_r+0x11a>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	3401      	adds	r4, #1
 800c5f2:	9305      	str	r3, [sp, #20]
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	f04f 0c0a 	mov.w	ip, #10
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c600:	3a30      	subs	r2, #48	; 0x30
 800c602:	2a09      	cmp	r2, #9
 800c604:	d903      	bls.n	800c60e <_vfiprintf_r+0x1ee>
 800c606:	2b00      	cmp	r3, #0
 800c608:	d0c5      	beq.n	800c596 <_vfiprintf_r+0x176>
 800c60a:	9105      	str	r1, [sp, #20]
 800c60c:	e7c3      	b.n	800c596 <_vfiprintf_r+0x176>
 800c60e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c612:	4604      	mov	r4, r0
 800c614:	2301      	movs	r3, #1
 800c616:	e7f0      	b.n	800c5fa <_vfiprintf_r+0x1da>
 800c618:	ab03      	add	r3, sp, #12
 800c61a:	9300      	str	r3, [sp, #0]
 800c61c:	462a      	mov	r2, r5
 800c61e:	4b16      	ldr	r3, [pc, #88]	; (800c678 <_vfiprintf_r+0x258>)
 800c620:	a904      	add	r1, sp, #16
 800c622:	4630      	mov	r0, r6
 800c624:	f7fd fc6c 	bl	8009f00 <_printf_float>
 800c628:	4607      	mov	r7, r0
 800c62a:	1c78      	adds	r0, r7, #1
 800c62c:	d1d6      	bne.n	800c5dc <_vfiprintf_r+0x1bc>
 800c62e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c630:	07d9      	lsls	r1, r3, #31
 800c632:	d405      	bmi.n	800c640 <_vfiprintf_r+0x220>
 800c634:	89ab      	ldrh	r3, [r5, #12]
 800c636:	059a      	lsls	r2, r3, #22
 800c638:	d402      	bmi.n	800c640 <_vfiprintf_r+0x220>
 800c63a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c63c:	f7ff f9d0 	bl	800b9e0 <__retarget_lock_release_recursive>
 800c640:	89ab      	ldrh	r3, [r5, #12]
 800c642:	065b      	lsls	r3, r3, #25
 800c644:	f53f af12 	bmi.w	800c46c <_vfiprintf_r+0x4c>
 800c648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c64a:	e711      	b.n	800c470 <_vfiprintf_r+0x50>
 800c64c:	ab03      	add	r3, sp, #12
 800c64e:	9300      	str	r3, [sp, #0]
 800c650:	462a      	mov	r2, r5
 800c652:	4b09      	ldr	r3, [pc, #36]	; (800c678 <_vfiprintf_r+0x258>)
 800c654:	a904      	add	r1, sp, #16
 800c656:	4630      	mov	r0, r6
 800c658:	f7fd fef6 	bl	800a448 <_printf_i>
 800c65c:	e7e4      	b.n	800c628 <_vfiprintf_r+0x208>
 800c65e:	bf00      	nop
 800c660:	0800cf30 	.word	0x0800cf30
 800c664:	0800cf50 	.word	0x0800cf50
 800c668:	0800cf10 	.word	0x0800cf10
 800c66c:	0800d0cc 	.word	0x0800d0cc
 800c670:	0800d0d6 	.word	0x0800d0d6
 800c674:	08009f01 	.word	0x08009f01
 800c678:	0800c3fb 	.word	0x0800c3fb
 800c67c:	0800d0d2 	.word	0x0800d0d2

0800c680 <_sbrk_r>:
 800c680:	b538      	push	{r3, r4, r5, lr}
 800c682:	4d06      	ldr	r5, [pc, #24]	; (800c69c <_sbrk_r+0x1c>)
 800c684:	2300      	movs	r3, #0
 800c686:	4604      	mov	r4, r0
 800c688:	4608      	mov	r0, r1
 800c68a:	602b      	str	r3, [r5, #0]
 800c68c:	f7f7 fb0e 	bl	8003cac <_sbrk>
 800c690:	1c43      	adds	r3, r0, #1
 800c692:	d102      	bne.n	800c69a <_sbrk_r+0x1a>
 800c694:	682b      	ldr	r3, [r5, #0]
 800c696:	b103      	cbz	r3, 800c69a <_sbrk_r+0x1a>
 800c698:	6023      	str	r3, [r4, #0]
 800c69a:	bd38      	pop	{r3, r4, r5, pc}
 800c69c:	20000d40 	.word	0x20000d40

0800c6a0 <__sread>:
 800c6a0:	b510      	push	{r4, lr}
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6a8:	f000 f8e2 	bl	800c870 <_read_r>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	bfab      	itete	ge
 800c6b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6b2:	89a3      	ldrhlt	r3, [r4, #12]
 800c6b4:	181b      	addge	r3, r3, r0
 800c6b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6ba:	bfac      	ite	ge
 800c6bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6be:	81a3      	strhlt	r3, [r4, #12]
 800c6c0:	bd10      	pop	{r4, pc}

0800c6c2 <__swrite>:
 800c6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c6:	461f      	mov	r7, r3
 800c6c8:	898b      	ldrh	r3, [r1, #12]
 800c6ca:	05db      	lsls	r3, r3, #23
 800c6cc:	4605      	mov	r5, r0
 800c6ce:	460c      	mov	r4, r1
 800c6d0:	4616      	mov	r6, r2
 800c6d2:	d505      	bpl.n	800c6e0 <__swrite+0x1e>
 800c6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d8:	2302      	movs	r3, #2
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f000 f898 	bl	800c810 <_lseek_r>
 800c6e0:	89a3      	ldrh	r3, [r4, #12]
 800c6e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6ea:	81a3      	strh	r3, [r4, #12]
 800c6ec:	4632      	mov	r2, r6
 800c6ee:	463b      	mov	r3, r7
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f6:	f000 b817 	b.w	800c728 <_write_r>

0800c6fa <__sseek>:
 800c6fa:	b510      	push	{r4, lr}
 800c6fc:	460c      	mov	r4, r1
 800c6fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c702:	f000 f885 	bl	800c810 <_lseek_r>
 800c706:	1c43      	adds	r3, r0, #1
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	bf15      	itete	ne
 800c70c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c70e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c712:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c716:	81a3      	strheq	r3, [r4, #12]
 800c718:	bf18      	it	ne
 800c71a:	81a3      	strhne	r3, [r4, #12]
 800c71c:	bd10      	pop	{r4, pc}

0800c71e <__sclose>:
 800c71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c722:	f000 b831 	b.w	800c788 <_close_r>
	...

0800c728 <_write_r>:
 800c728:	b538      	push	{r3, r4, r5, lr}
 800c72a:	4d07      	ldr	r5, [pc, #28]	; (800c748 <_write_r+0x20>)
 800c72c:	4604      	mov	r4, r0
 800c72e:	4608      	mov	r0, r1
 800c730:	4611      	mov	r1, r2
 800c732:	2200      	movs	r2, #0
 800c734:	602a      	str	r2, [r5, #0]
 800c736:	461a      	mov	r2, r3
 800c738:	f7f4 fe92 	bl	8001460 <_write>
 800c73c:	1c43      	adds	r3, r0, #1
 800c73e:	d102      	bne.n	800c746 <_write_r+0x1e>
 800c740:	682b      	ldr	r3, [r5, #0]
 800c742:	b103      	cbz	r3, 800c746 <_write_r+0x1e>
 800c744:	6023      	str	r3, [r4, #0]
 800c746:	bd38      	pop	{r3, r4, r5, pc}
 800c748:	20000d40 	.word	0x20000d40

0800c74c <__assert_func>:
 800c74c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c74e:	4614      	mov	r4, r2
 800c750:	461a      	mov	r2, r3
 800c752:	4b09      	ldr	r3, [pc, #36]	; (800c778 <__assert_func+0x2c>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4605      	mov	r5, r0
 800c758:	68d8      	ldr	r0, [r3, #12]
 800c75a:	b14c      	cbz	r4, 800c770 <__assert_func+0x24>
 800c75c:	4b07      	ldr	r3, [pc, #28]	; (800c77c <__assert_func+0x30>)
 800c75e:	9100      	str	r1, [sp, #0]
 800c760:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c764:	4906      	ldr	r1, [pc, #24]	; (800c780 <__assert_func+0x34>)
 800c766:	462b      	mov	r3, r5
 800c768:	f000 f81e 	bl	800c7a8 <fiprintf>
 800c76c:	f000 f89f 	bl	800c8ae <abort>
 800c770:	4b04      	ldr	r3, [pc, #16]	; (800c784 <__assert_func+0x38>)
 800c772:	461c      	mov	r4, r3
 800c774:	e7f3      	b.n	800c75e <__assert_func+0x12>
 800c776:	bf00      	nop
 800c778:	2000068c 	.word	0x2000068c
 800c77c:	0800d0dd 	.word	0x0800d0dd
 800c780:	0800d0ea 	.word	0x0800d0ea
 800c784:	0800d118 	.word	0x0800d118

0800c788 <_close_r>:
 800c788:	b538      	push	{r3, r4, r5, lr}
 800c78a:	4d06      	ldr	r5, [pc, #24]	; (800c7a4 <_close_r+0x1c>)
 800c78c:	2300      	movs	r3, #0
 800c78e:	4604      	mov	r4, r0
 800c790:	4608      	mov	r0, r1
 800c792:	602b      	str	r3, [r5, #0]
 800c794:	f7f7 fa7c 	bl	8003c90 <_close>
 800c798:	1c43      	adds	r3, r0, #1
 800c79a:	d102      	bne.n	800c7a2 <_close_r+0x1a>
 800c79c:	682b      	ldr	r3, [r5, #0]
 800c79e:	b103      	cbz	r3, 800c7a2 <_close_r+0x1a>
 800c7a0:	6023      	str	r3, [r4, #0]
 800c7a2:	bd38      	pop	{r3, r4, r5, pc}
 800c7a4:	20000d40 	.word	0x20000d40

0800c7a8 <fiprintf>:
 800c7a8:	b40e      	push	{r1, r2, r3}
 800c7aa:	b503      	push	{r0, r1, lr}
 800c7ac:	4601      	mov	r1, r0
 800c7ae:	ab03      	add	r3, sp, #12
 800c7b0:	4805      	ldr	r0, [pc, #20]	; (800c7c8 <fiprintf+0x20>)
 800c7b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7b6:	6800      	ldr	r0, [r0, #0]
 800c7b8:	9301      	str	r3, [sp, #4]
 800c7ba:	f7ff fe31 	bl	800c420 <_vfiprintf_r>
 800c7be:	b002      	add	sp, #8
 800c7c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7c4:	b003      	add	sp, #12
 800c7c6:	4770      	bx	lr
 800c7c8:	2000068c 	.word	0x2000068c

0800c7cc <_fstat_r>:
 800c7cc:	b538      	push	{r3, r4, r5, lr}
 800c7ce:	4d07      	ldr	r5, [pc, #28]	; (800c7ec <_fstat_r+0x20>)
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	4604      	mov	r4, r0
 800c7d4:	4608      	mov	r0, r1
 800c7d6:	4611      	mov	r1, r2
 800c7d8:	602b      	str	r3, [r5, #0]
 800c7da:	f7f7 fa5d 	bl	8003c98 <_fstat>
 800c7de:	1c43      	adds	r3, r0, #1
 800c7e0:	d102      	bne.n	800c7e8 <_fstat_r+0x1c>
 800c7e2:	682b      	ldr	r3, [r5, #0]
 800c7e4:	b103      	cbz	r3, 800c7e8 <_fstat_r+0x1c>
 800c7e6:	6023      	str	r3, [r4, #0]
 800c7e8:	bd38      	pop	{r3, r4, r5, pc}
 800c7ea:	bf00      	nop
 800c7ec:	20000d40 	.word	0x20000d40

0800c7f0 <_isatty_r>:
 800c7f0:	b538      	push	{r3, r4, r5, lr}
 800c7f2:	4d06      	ldr	r5, [pc, #24]	; (800c80c <_isatty_r+0x1c>)
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	4604      	mov	r4, r0
 800c7f8:	4608      	mov	r0, r1
 800c7fa:	602b      	str	r3, [r5, #0]
 800c7fc:	f7f7 fa52 	bl	8003ca4 <_isatty>
 800c800:	1c43      	adds	r3, r0, #1
 800c802:	d102      	bne.n	800c80a <_isatty_r+0x1a>
 800c804:	682b      	ldr	r3, [r5, #0]
 800c806:	b103      	cbz	r3, 800c80a <_isatty_r+0x1a>
 800c808:	6023      	str	r3, [r4, #0]
 800c80a:	bd38      	pop	{r3, r4, r5, pc}
 800c80c:	20000d40 	.word	0x20000d40

0800c810 <_lseek_r>:
 800c810:	b538      	push	{r3, r4, r5, lr}
 800c812:	4d07      	ldr	r5, [pc, #28]	; (800c830 <_lseek_r+0x20>)
 800c814:	4604      	mov	r4, r0
 800c816:	4608      	mov	r0, r1
 800c818:	4611      	mov	r1, r2
 800c81a:	2200      	movs	r2, #0
 800c81c:	602a      	str	r2, [r5, #0]
 800c81e:	461a      	mov	r2, r3
 800c820:	f7f7 fa42 	bl	8003ca8 <_lseek>
 800c824:	1c43      	adds	r3, r0, #1
 800c826:	d102      	bne.n	800c82e <_lseek_r+0x1e>
 800c828:	682b      	ldr	r3, [r5, #0]
 800c82a:	b103      	cbz	r3, 800c82e <_lseek_r+0x1e>
 800c82c:	6023      	str	r3, [r4, #0]
 800c82e:	bd38      	pop	{r3, r4, r5, pc}
 800c830:	20000d40 	.word	0x20000d40

0800c834 <__ascii_mbtowc>:
 800c834:	b082      	sub	sp, #8
 800c836:	b901      	cbnz	r1, 800c83a <__ascii_mbtowc+0x6>
 800c838:	a901      	add	r1, sp, #4
 800c83a:	b142      	cbz	r2, 800c84e <__ascii_mbtowc+0x1a>
 800c83c:	b14b      	cbz	r3, 800c852 <__ascii_mbtowc+0x1e>
 800c83e:	7813      	ldrb	r3, [r2, #0]
 800c840:	600b      	str	r3, [r1, #0]
 800c842:	7812      	ldrb	r2, [r2, #0]
 800c844:	1e10      	subs	r0, r2, #0
 800c846:	bf18      	it	ne
 800c848:	2001      	movne	r0, #1
 800c84a:	b002      	add	sp, #8
 800c84c:	4770      	bx	lr
 800c84e:	4610      	mov	r0, r2
 800c850:	e7fb      	b.n	800c84a <__ascii_mbtowc+0x16>
 800c852:	f06f 0001 	mvn.w	r0, #1
 800c856:	e7f8      	b.n	800c84a <__ascii_mbtowc+0x16>

0800c858 <__malloc_lock>:
 800c858:	4801      	ldr	r0, [pc, #4]	; (800c860 <__malloc_lock+0x8>)
 800c85a:	f7ff b8c0 	b.w	800b9de <__retarget_lock_acquire_recursive>
 800c85e:	bf00      	nop
 800c860:	20000d34 	.word	0x20000d34

0800c864 <__malloc_unlock>:
 800c864:	4801      	ldr	r0, [pc, #4]	; (800c86c <__malloc_unlock+0x8>)
 800c866:	f7ff b8bb 	b.w	800b9e0 <__retarget_lock_release_recursive>
 800c86a:	bf00      	nop
 800c86c:	20000d34 	.word	0x20000d34

0800c870 <_read_r>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	4d07      	ldr	r5, [pc, #28]	; (800c890 <_read_r+0x20>)
 800c874:	4604      	mov	r4, r0
 800c876:	4608      	mov	r0, r1
 800c878:	4611      	mov	r1, r2
 800c87a:	2200      	movs	r2, #0
 800c87c:	602a      	str	r2, [r5, #0]
 800c87e:	461a      	mov	r2, r3
 800c880:	f7f7 f9f8 	bl	8003c74 <_read>
 800c884:	1c43      	adds	r3, r0, #1
 800c886:	d102      	bne.n	800c88e <_read_r+0x1e>
 800c888:	682b      	ldr	r3, [r5, #0]
 800c88a:	b103      	cbz	r3, 800c88e <_read_r+0x1e>
 800c88c:	6023      	str	r3, [r4, #0]
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	20000d40 	.word	0x20000d40

0800c894 <__ascii_wctomb>:
 800c894:	b149      	cbz	r1, 800c8aa <__ascii_wctomb+0x16>
 800c896:	2aff      	cmp	r2, #255	; 0xff
 800c898:	bf85      	ittet	hi
 800c89a:	238a      	movhi	r3, #138	; 0x8a
 800c89c:	6003      	strhi	r3, [r0, #0]
 800c89e:	700a      	strbls	r2, [r1, #0]
 800c8a0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c8a4:	bf98      	it	ls
 800c8a6:	2001      	movls	r0, #1
 800c8a8:	4770      	bx	lr
 800c8aa:	4608      	mov	r0, r1
 800c8ac:	4770      	bx	lr

0800c8ae <abort>:
 800c8ae:	b508      	push	{r3, lr}
 800c8b0:	2006      	movs	r0, #6
 800c8b2:	f000 f82b 	bl	800c90c <raise>
 800c8b6:	2001      	movs	r0, #1
 800c8b8:	f7f7 f9d6 	bl	8003c68 <_exit>

0800c8bc <_raise_r>:
 800c8bc:	291f      	cmp	r1, #31
 800c8be:	b538      	push	{r3, r4, r5, lr}
 800c8c0:	4604      	mov	r4, r0
 800c8c2:	460d      	mov	r5, r1
 800c8c4:	d904      	bls.n	800c8d0 <_raise_r+0x14>
 800c8c6:	2316      	movs	r3, #22
 800c8c8:	6003      	str	r3, [r0, #0]
 800c8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ce:	bd38      	pop	{r3, r4, r5, pc}
 800c8d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c8d2:	b112      	cbz	r2, 800c8da <_raise_r+0x1e>
 800c8d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8d8:	b94b      	cbnz	r3, 800c8ee <_raise_r+0x32>
 800c8da:	4620      	mov	r0, r4
 800c8dc:	f000 f830 	bl	800c940 <_getpid_r>
 800c8e0:	462a      	mov	r2, r5
 800c8e2:	4601      	mov	r1, r0
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8ea:	f000 b817 	b.w	800c91c <_kill_r>
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d00a      	beq.n	800c908 <_raise_r+0x4c>
 800c8f2:	1c59      	adds	r1, r3, #1
 800c8f4:	d103      	bne.n	800c8fe <_raise_r+0x42>
 800c8f6:	2316      	movs	r3, #22
 800c8f8:	6003      	str	r3, [r0, #0]
 800c8fa:	2001      	movs	r0, #1
 800c8fc:	e7e7      	b.n	800c8ce <_raise_r+0x12>
 800c8fe:	2400      	movs	r4, #0
 800c900:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c904:	4628      	mov	r0, r5
 800c906:	4798      	blx	r3
 800c908:	2000      	movs	r0, #0
 800c90a:	e7e0      	b.n	800c8ce <_raise_r+0x12>

0800c90c <raise>:
 800c90c:	4b02      	ldr	r3, [pc, #8]	; (800c918 <raise+0xc>)
 800c90e:	4601      	mov	r1, r0
 800c910:	6818      	ldr	r0, [r3, #0]
 800c912:	f7ff bfd3 	b.w	800c8bc <_raise_r>
 800c916:	bf00      	nop
 800c918:	2000068c 	.word	0x2000068c

0800c91c <_kill_r>:
 800c91c:	b538      	push	{r3, r4, r5, lr}
 800c91e:	4d07      	ldr	r5, [pc, #28]	; (800c93c <_kill_r+0x20>)
 800c920:	2300      	movs	r3, #0
 800c922:	4604      	mov	r4, r0
 800c924:	4608      	mov	r0, r1
 800c926:	4611      	mov	r1, r2
 800c928:	602b      	str	r3, [r5, #0]
 800c92a:	f7f7 f995 	bl	8003c58 <_kill>
 800c92e:	1c43      	adds	r3, r0, #1
 800c930:	d102      	bne.n	800c938 <_kill_r+0x1c>
 800c932:	682b      	ldr	r3, [r5, #0]
 800c934:	b103      	cbz	r3, 800c938 <_kill_r+0x1c>
 800c936:	6023      	str	r3, [r4, #0]
 800c938:	bd38      	pop	{r3, r4, r5, pc}
 800c93a:	bf00      	nop
 800c93c:	20000d40 	.word	0x20000d40

0800c940 <_getpid_r>:
 800c940:	f7f7 b988 	b.w	8003c54 <_getpid>

0800c944 <_init>:
 800c944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c946:	bf00      	nop
 800c948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c94a:	bc08      	pop	{r3}
 800c94c:	469e      	mov	lr, r3
 800c94e:	4770      	bx	lr

0800c950 <_fini>:
 800c950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c952:	bf00      	nop
 800c954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c956:	bc08      	pop	{r3}
 800c958:	469e      	mov	lr, r3
 800c95a:	4770      	bx	lr
