
Final_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf78  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a38  0800d158  0800d158  0001d158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db90  0800db90  000206a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800db90  0800db90  0001db90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db98  0800db98  000206a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db98  0800db98  0001db98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db9c  0800db9c  0001db9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006a4  20000000  0800dba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001634  200006a4  0800e244  000206a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cd8  0800e244  00021cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206a4  2**0
                  CONTENTS, READONLY
 12 .debug_line   00047b30  00000000  00000000  000206d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0004c33f  00000000  00000000  00068204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000928b  00000000  00000000  000b4543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e98  00000000  00000000  000bd7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00104179  00000000  00000000  000bf668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00006670  00000000  00000000  001c37e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0002e22c  00000000  00000000  001c9e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002de96  00000000  00000000  001f8084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00225f1a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a68  00000000  00000000  00225f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200006a4 	.word	0x200006a4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d140 	.word	0x0800d140

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200006a8 	.word	0x200006a8
 800021c:	0800d140 	.word	0x0800d140

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa2:	490e      	ldr	r1, [pc, #56]	; (8000fdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <LoopForever+0xe>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb8:	4c0b      	ldr	r4, [pc, #44]	; (8000fe8 <LoopForever+0x16>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fc6:	f004 f935 	bl	8005234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fca:	f009 fb41 	bl	800a650 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fce:	f000 ffbf 	bl	8001f50 <main>

08000fd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fd2:	e7fe      	b.n	8000fd2 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8000fd4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fdc:	200006a4 	.word	0x200006a4
  ldr r2, =_sidata
 8000fe0:	0800dba0 	.word	0x0800dba0
  ldr r2, =_sbss
 8000fe4:	200006a4 	.word	0x200006a4
  ldr r4, =_ebss
 8000fe8:	20001cd8 	.word	0x20001cd8

08000fec <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <BusFault_Handler>
	...

08000ff0 <getMecSpeed>:

extern Encoder encoder;

float getMecSpeed(ENCODER_Handle_t *pHandle)
{
    return ((float)pHandle->_Super.hAvrMecSpeedUnit * 60) / 10;
 8000ff0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8000ff4:	ee07 3a90 	vmov	s15, r3
 8000ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffc:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
}
 8001000:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <getPendulumAngle>:
        #define M2_PULSE_NBR ( (4 * (M2_ENCODER_PPR)) - 1 )

*/
float getPendulumAngle(ENCODER_Handle_t *pHandle)
{
    float currentPositionRad = (float)(pHandle->_Super.wMecAngle) / RADTOS16;
 8001008:	edd0 7a02 	vldr	s15, [r0, #8]

    float angle = currentPositionRad * 180 / M_PI;
 800100c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001070 <getPendulumAngle+0x68>
    float currentPositionRad = (float)(pHandle->_Super.wMecAngle) / RADTOS16;
 8001010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8001014:	b508      	push	{r3, lr}
    float angle = currentPositionRad * 180 / M_PI;
 8001016:	ee67 7a87 	vmul.f32	s15, s15, s14
 800101a:	ee17 0a90 	vmov	r0, s15
 800101e:	f7ff fabb 	bl	8000598 <__aeabi_f2d>
 8001022:	a30f      	add	r3, pc, #60	; (adr r3, 8001060 <getPendulumAngle+0x58>)
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	f7ff fb0e 	bl	8000648 <__aeabi_dmul>
 800102c:	f7ff fde4 	bl	8000bf8 <__aeabi_d2f>

    float fangle = fmod(angle, 360.0); 
 8001030:	f7ff fab2 	bl	8000598 <__aeabi_f2d>
 8001034:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8001068 <getPendulumAngle+0x60>
 8001038:	ec41 0b10 	vmov	d0, r0, r1
 800103c:	f00b ff40 	bl	800cec0 <fmod>
 8001040:	ec51 0b10 	vmov	r0, r1, d0
 8001044:	f7ff fdd8 	bl	8000bf8 <__aeabi_d2f>
 8001048:	ee00 0a10 	vmov	s0, r0
    if (fangle < 0 ) fangle+=360;
 800104c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001054:	bf44      	itt	mi
 8001056:	eddf 7a07 	vldrmi	s15, [pc, #28]	; 8001074 <getPendulumAngle+0x6c>
 800105a:	ee30 0a27 	vaddmi.f32	s0, s0, s15
    return fangle;
}
 800105e:	bd08      	pop	{r3, pc}
 8001060:	6dc9c883 	.word	0x6dc9c883
 8001064:	3fd45f30 	.word	0x3fd45f30
 8001068:	00000000 	.word	0x00000000
 800106c:	40768000 	.word	0x40768000
 8001070:	3c8d5f26 	.word	0x3c8d5f26
 8001074:	43b40000 	.word	0x43b40000

08001078 <getLegacyPendulumAngle>:

float getLegacyPendulumAngle(ENCODER_Handle_t *pHandle)
{
    float currentPositionRad = (float)(pHandle->_Super.wMecAngle) / RADTOS16;
 8001078:	edd0 7a02 	vldr	s15, [r0, #8]
    return currentPositionRad * 180 / M_PI;
 800107c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80010b0 <getLegacyPendulumAngle+0x38>
    float currentPositionRad = (float)(pHandle->_Super.wMecAngle) / RADTOS16;
 8001080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8001084:	b508      	push	{r3, lr}
    return currentPositionRad * 180 / M_PI;
 8001086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108a:	ee17 0a90 	vmov	r0, s15
 800108e:	f7ff fa83 	bl	8000598 <__aeabi_f2d>
 8001092:	a305      	add	r3, pc, #20	; (adr r3, 80010a8 <getLegacyPendulumAngle+0x30>)
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	f7ff fad6 	bl	8000648 <__aeabi_dmul>
 800109c:	f7ff fdac 	bl	8000bf8 <__aeabi_d2f>
}
 80010a0:	ee00 0a10 	vmov	s0, r0
 80010a4:	bd08      	pop	{r3, pc}
 80010a6:	bf00      	nop
 80010a8:	6dc9c883 	.word	0x6dc9c883
 80010ac:	3fd45f30 	.word	0x3fd45f30
 80010b0:	3c8d5f26 	.word	0x3c8d5f26
 80010b4:	00000000 	.word	0x00000000

080010b8 <calculatePendulumVelocity>:

float calculatePendulumVelocity(){
 80010b8:	b530      	push	{r4, r5, lr}
 80010ba:	b083      	sub	sp, #12
	static float last_angle = 0.0f;
	static float pen_velocity = 0.0f;

	//Runs every 200ms
	int delay_ms = 20; //ms
	if (HAL_GetTick() % delay_ms == 0) {
 80010bc:	f004 f906 	bl	80052cc <HAL_GetTick>
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <calculatePendulumVelocity+0x78>)
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <calculatePendulumVelocity+0x7c>)
 80010c4:	fb02 f000 	mul.w	r0, r2, r0
 80010c8:	ebb3 0fb0 	cmp.w	r3, r0, ror #2
 80010cc:	d204      	bcs.n	80010d8 <calculatePendulumVelocity+0x20>
        //printf("encoder.pendulum_velocity = %f\r\n",encoder.pendulum_velocity);

        last_angle = angle_rad;
    }

	return pen_velocity;
 80010ce:	4c1a      	ldr	r4, [pc, #104]	; (8001138 <calculatePendulumVelocity+0x80>)
}
 80010d0:	ed94 0a00 	vldr	s0, [r4]
 80010d4:	b003      	add	sp, #12
 80010d6:	bd30      	pop	{r4, r5, pc}
		volatile float angle_rad =  (encoder.pendulum_angle * M_PI) / 180;
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <calculatePendulumVelocity+0x84>)
		pen_velocity =  (angle_rad - last_angle)/(delay_ms*1e-3);
 80010da:	4d19      	ldr	r5, [pc, #100]	; (8001140 <calculatePendulumVelocity+0x88>)
		volatile float angle_rad =  (encoder.pendulum_angle * M_PI) / 180;
 80010dc:	6818      	ldr	r0, [r3, #0]
		pen_velocity =  (angle_rad - last_angle)/(delay_ms*1e-3);
 80010de:	4c16      	ldr	r4, [pc, #88]	; (8001138 <calculatePendulumVelocity+0x80>)
		volatile float angle_rad =  (encoder.pendulum_angle * M_PI) / 180;
 80010e0:	f7ff fa5a 	bl	8000598 <__aeabi_f2d>
 80010e4:	a310      	add	r3, pc, #64	; (adr r3, 8001128 <calculatePendulumVelocity+0x70>)
 80010e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ea:	f7ff faad 	bl	8000648 <__aeabi_dmul>
 80010ee:	f7ff fd83 	bl	8000bf8 <__aeabi_d2f>
 80010f2:	9001      	str	r0, [sp, #4]
		pen_velocity =  (angle_rad - last_angle)/(delay_ms*1e-3);
 80010f4:	edd5 6a00 	vldr	s13, [r5]
 80010f8:	eddd 7a01 	vldr	s15, [sp, #4]
 80010fc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001144 <calculatePendulumVelocity+0x8c>
        printf("angle_rad = %f\r\n",angle_rad);
 8001100:	9801      	ldr	r0, [sp, #4]
		pen_velocity =  (angle_rad - last_angle)/(delay_ms*1e-3);
 8001102:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001106:	ee67 7a87 	vmul.f32	s15, s15, s14
 800110a:	edc4 7a00 	vstr	s15, [r4]
        printf("angle_rad = %f\r\n",angle_rad);
 800110e:	f7ff fa43 	bl	8000598 <__aeabi_f2d>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	480c      	ldr	r0, [pc, #48]	; (8001148 <calculatePendulumVelocity+0x90>)
 8001118:	f00a f822 	bl	800b160 <iprintf>
        last_angle = angle_rad;
 800111c:	9b01      	ldr	r3, [sp, #4]
}
 800111e:	ed94 0a00 	vldr	s0, [r4]
        last_angle = angle_rad;
 8001122:	602b      	str	r3, [r5, #0]
}
 8001124:	b003      	add	sp, #12
 8001126:	bd30      	pop	{r4, r5, pc}
 8001128:	a2529d39 	.word	0xa2529d39
 800112c:	3f91df46 	.word	0x3f91df46
 8001130:	cccccccd 	.word	0xcccccccd
 8001134:	0ccccccc 	.word	0x0ccccccc
 8001138:	200006cc 	.word	0x200006cc
 800113c:	200006d8 	.word	0x200006d8
 8001140:	200006c4 	.word	0x200006c4
 8001144:	42480000 	.word	0x42480000
 8001148:	0800d158 	.word	0x0800d158

0800114c <calculatePendulumAcceleration>:

float calculatePendulumAcceleration(){
 800114c:	b570      	push	{r4, r5, r6, lr}
	static float last_accel = 0.0f;
    static float pen_accel = 0.0f;

	//Runs every 200ms
	int delay_ms = 20; //ms
	if (HAL_GetTick() % delay_ms == 0) {
 800114e:	f004 f8bd 	bl	80052cc <HAL_GetTick>
 8001152:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <calculatePendulumAcceleration+0x58>)
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <calculatePendulumAcceleration+0x5c>)
 8001156:	fb02 f000 	mul.w	r0, r2, r0
 800115a:	ebb3 0fb0 	cmp.w	r3, r0, ror #2
 800115e:	d203      	bcs.n	8001168 <calculatePendulumAcceleration+0x1c>
        //printf("encoder.pendulum_velocity = %f\r\n",encoder.pendulum_velocity);

        last_accel = encoder.pendulum_velocity;
    }

	return pen_accel;
 8001160:	4c12      	ldr	r4, [pc, #72]	; (80011ac <calculatePendulumAcceleration+0x60>)
}
 8001162:	ed94 0a00 	vldr	s0, [r4]
 8001166:	bd70      	pop	{r4, r5, r6, pc}
		pen_accel =  (encoder.pendulum_velocity - last_accel)/(delay_ms*1e-3);
 8001168:	4e11      	ldr	r6, [pc, #68]	; (80011b0 <calculatePendulumAcceleration+0x64>)
 800116a:	4d12      	ldr	r5, [pc, #72]	; (80011b4 <calculatePendulumAcceleration+0x68>)
 800116c:	edd6 7a03 	vldr	s15, [r6, #12]
 8001170:	edd5 6a00 	vldr	s13, [r5]
 8001174:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80011b8 <calculatePendulumAcceleration+0x6c>
 8001178:	4c0c      	ldr	r4, [pc, #48]	; (80011ac <calculatePendulumAcceleration+0x60>)
 800117a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800117e:	ee67 7a87 	vmul.f32	s15, s15, s14
        printf("accel = %f\r\n",pen_accel);
 8001182:	ee17 0a90 	vmov	r0, s15
		pen_accel =  (encoder.pendulum_velocity - last_accel)/(delay_ms*1e-3);
 8001186:	edc4 7a00 	vstr	s15, [r4]
        printf("accel = %f\r\n",pen_accel);
 800118a:	f7ff fa05 	bl	8000598 <__aeabi_f2d>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	480a      	ldr	r0, [pc, #40]	; (80011bc <calculatePendulumAcceleration+0x70>)
 8001194:	f009 ffe4 	bl	800b160 <iprintf>
        last_accel = encoder.pendulum_velocity;
 8001198:	68f3      	ldr	r3, [r6, #12]
}
 800119a:	ed94 0a00 	vldr	s0, [r4]
        last_accel = encoder.pendulum_velocity;
 800119e:	602b      	str	r3, [r5, #0]
}
 80011a0:	bd70      	pop	{r4, r5, r6, pc}
 80011a2:	bf00      	nop
 80011a4:	cccccccd 	.word	0xcccccccd
 80011a8:	0ccccccc 	.word	0x0ccccccc
 80011ac:	200006c8 	.word	0x200006c8
 80011b0:	200006d8 	.word	0x200006d8
 80011b4:	200006c0 	.word	0x200006c0
 80011b8:	42480000 	.word	0x42480000
 80011bc:	0800d16c 	.word	0x0800d16c

080011c0 <faultCodeToString>:
    
}
*/

char *faultCodeToString(uint16_t fCode)
{
 80011c0:	b530      	push	{r4, r5, lr}
    char errorString[50];

    switch (fCode)
 80011c2:	2820      	cmp	r0, #32
{
 80011c4:	b08f      	sub	sp, #60	; 0x3c
    switch (fCode)
 80011c6:	d814      	bhi.n	80011f2 <faultCodeToString+0x32>
 80011c8:	2820      	cmp	r0, #32
 80011ca:	d826      	bhi.n	800121a <faultCodeToString+0x5a>
 80011cc:	e8df f000 	tbb	[pc, r0]
 80011d0:	254d3e31 	.word	0x254d3e31
 80011d4:	2525255c 	.word	0x2525255c
 80011d8:	2525256b 	.word	0x2525256b
 80011dc:	25252525 	.word	0x25252525
 80011e0:	2525257a 	.word	0x2525257a
 80011e4:	25252525 	.word	0x25252525
 80011e8:	25252525 	.word	0x25252525
 80011ec:	25252525 	.word	0x25252525
 80011f0:	7c          	.byte	0x7c
 80011f1:	00          	.byte	0x00
 80011f2:	2840      	cmp	r0, #64	; 0x40
 80011f4:	d077      	beq.n	80012e6 <faultCodeToString+0x126>
 80011f6:	2880      	cmp	r0, #128	; 0x80
 80011f8:	d10f      	bne.n	800121a <faultCodeToString+0x5a>
        break;
    case MC_BREAK_IN:
        snprintf(errorString, sizeof(errorString), "Error: Emergency Input (Over Current)");
        break;
    case MC_SW_ERROR:
        snprintf(errorString, sizeof(errorString), "Error: Software Error");
 80011fa:	4d45      	ldr	r5, [pc, #276]	; (8001310 <faultCodeToString+0x150>)
 80011fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011fe:	f10d 0c04 	add.w	ip, sp, #4
 8001202:	4664      	mov	r4, ip
 8001204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001206:	e895 0003 	ldmia.w	r5, {r0, r1}
 800120a:	f844 0b04 	str.w	r0, [r4], #4
    default:
        snprintf(errorString, sizeof(errorString), "Unknown Error");
        break;
    }
    
    return strdup(errorString);
 800120e:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: Software Error");
 8001210:	8021      	strh	r1, [r4, #0]
    return strdup(errorString);
 8001212:	f00a f887 	bl	800b324 <strdup>
}
 8001216:	b00f      	add	sp, #60	; 0x3c
 8001218:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Unknown Error");
 800121a:	4b3e      	ldr	r3, [pc, #248]	; (8001314 <faultCodeToString+0x154>)
 800121c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800121e:	f10d 0c04 	add.w	ip, sp, #4
 8001222:	4664      	mov	r4, ip
 8001224:	c407      	stmia	r4!, {r0, r1, r2}
    return strdup(errorString);
 8001226:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Unknown Error");
 8001228:	8023      	strh	r3, [r4, #0]
    return strdup(errorString);
 800122a:	f00a f87b 	bl	800b324 <strdup>
}
 800122e:	b00f      	add	sp, #60	; 0x3c
 8001230:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "No Error");
 8001232:	4b39      	ldr	r3, [pc, #228]	; (8001318 <faultCodeToString+0x158>)
 8001234:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001238:	f10d 0c04 	add.w	ip, sp, #4
 800123c:	4663      	mov	r3, ip
 800123e:	c303      	stmia	r3!, {r0, r1}
    return strdup(errorString);
 8001240:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "No Error");
 8001242:	701a      	strb	r2, [r3, #0]
    return strdup(errorString);
 8001244:	f00a f86e 	bl	800b324 <strdup>
}
 8001248:	b00f      	add	sp, #60	; 0x3c
 800124a:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: FOC Rate Too High");
 800124c:	4d33      	ldr	r5, [pc, #204]	; (800131c <faultCodeToString+0x15c>)
 800124e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001250:	f10d 0c04 	add.w	ip, sp, #4
 8001254:	4664      	mov	r4, ip
 8001256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001258:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800125c:	c403      	stmia	r4!, {r0, r1}
    return strdup(errorString);
 800125e:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: FOC Rate Too High");
 8001260:	7022      	strb	r2, [r4, #0]
    return strdup(errorString);
 8001262:	f00a f85f 	bl	800b324 <strdup>
}
 8001266:	b00f      	add	sp, #60	; 0x3c
 8001268:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Software Over Voltage");
 800126a:	4d2d      	ldr	r5, [pc, #180]	; (8001320 <faultCodeToString+0x160>)
 800126c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800126e:	f10d 0c04 	add.w	ip, sp, #4
 8001272:	4664      	mov	r4, ip
 8001274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001276:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800127a:	c407      	stmia	r4!, {r0, r1, r2}
    return strdup(errorString);
 800127c:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: Software Over Voltage");
 800127e:	7023      	strb	r3, [r4, #0]
    return strdup(errorString);
 8001280:	f00a f850 	bl	800b324 <strdup>
}
 8001284:	b00f      	add	sp, #60	; 0x3c
 8001286:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Software Under Voltage");
 8001288:	4d26      	ldr	r5, [pc, #152]	; (8001324 <faultCodeToString+0x164>)
 800128a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128c:	f10d 0c04 	add.w	ip, sp, #4
 8001290:	4664      	mov	r4, ip
 8001292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001294:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001298:	c407      	stmia	r4!, {r0, r1, r2}
    return strdup(errorString);
 800129a:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: Software Under Voltage");
 800129c:	8023      	strh	r3, [r4, #0]
    return strdup(errorString);
 800129e:	f00a f841 	bl	800b324 <strdup>
}
 80012a2:	b00f      	add	sp, #60	; 0x3c
 80012a4:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Software Over Temperature");
 80012a6:	4d20      	ldr	r5, [pc, #128]	; (8001328 <faultCodeToString+0x168>)
 80012a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012aa:	f10d 0c04 	add.w	ip, sp, #4
 80012ae:	4664      	mov	r4, ip
 80012b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b6:	682b      	ldr	r3, [r5, #0]
 80012b8:	7023      	strb	r3, [r4, #0]
    return strdup(errorString);
 80012ba:	4660      	mov	r0, ip
 80012bc:	f00a f832 	bl	800b324 <strdup>
}
 80012c0:	b00f      	add	sp, #60	; 0x3c
 80012c2:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Startup Failed");
 80012c4:	4d19      	ldr	r5, [pc, #100]	; (800132c <faultCodeToString+0x16c>)
 80012c6:	e799      	b.n	80011fc <faultCodeToString+0x3c>
        snprintf(errorString, sizeof(errorString), "Error: Speed Feedback Error");
 80012c8:	4d19      	ldr	r5, [pc, #100]	; (8001330 <faultCodeToString+0x170>)
 80012ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012cc:	f10d 0c04 	add.w	ip, sp, #4
 80012d0:	4664      	mov	r4, ip
 80012d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return strdup(errorString);
 80012dc:	4660      	mov	r0, ip
 80012de:	f00a f821 	bl	800b324 <strdup>
}
 80012e2:	b00f      	add	sp, #60	; 0x3c
 80012e4:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Emergency Input (Over Current)");
 80012e6:	4c13      	ldr	r4, [pc, #76]	; (8001334 <faultCodeToString+0x174>)
 80012e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ea:	f10d 0c04 	add.w	ip, sp, #4
 80012ee:	46e6      	mov	lr, ip
 80012f0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80012f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80012fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012fe:	f84e 0b04 	str.w	r0, [lr], #4
    return strdup(errorString);
 8001302:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: Emergency Input (Over Current)");
 8001304:	f8ae 1000 	strh.w	r1, [lr]
    return strdup(errorString);
 8001308:	f00a f80c 	bl	800b324 <strdup>
}
 800130c:	b00f      	add	sp, #60	; 0x3c
 800130e:	bd30      	pop	{r4, r5, pc}
 8001310:	0800d264 	.word	0x0800d264
 8001314:	0800d27c 	.word	0x0800d27c
 8001318:	0800d17c 	.word	0x0800d17c
 800131c:	0800d188 	.word	0x0800d188
 8001320:	0800d1a4 	.word	0x0800d1a4
 8001324:	0800d1c4 	.word	0x0800d1c4
 8001328:	0800d1e4 	.word	0x0800d1e4
 800132c:	0800d208 	.word	0x0800d208
 8001330:	0800d220 	.word	0x0800d220
 8001334:	0800d23c 	.word	0x0800d23c

08001338 <getMotorStatus>:

//Status of motor
char *getMotorStatus(MCI_Handle_t *pHandle)
{
 8001338:	b530      	push	{r4, r5, lr}
 800133a:	b08f      	sub	sp, #60	; 0x3c
    return faultCodeToString(MCI_GetCurrentFaults(pHandle));
 800133c:	f001 fa32 	bl	80027a4 <MCI_GetCurrentFaults>
    switch (fCode)
 8001340:	2820      	cmp	r0, #32
 8001342:	d814      	bhi.n	800136e <getMotorStatus+0x36>
 8001344:	2820      	cmp	r0, #32
 8001346:	d826      	bhi.n	8001396 <getMotorStatus+0x5e>
 8001348:	e8df f000 	tbb	[pc, r0]
 800134c:	254d3e31 	.word	0x254d3e31
 8001350:	2525255c 	.word	0x2525255c
 8001354:	2525256b 	.word	0x2525256b
 8001358:	25252525 	.word	0x25252525
 800135c:	2525257a 	.word	0x2525257a
 8001360:	25252525 	.word	0x25252525
 8001364:	25252525 	.word	0x25252525
 8001368:	25252525 	.word	0x25252525
 800136c:	7c          	.byte	0x7c
 800136d:	00          	.byte	0x00
 800136e:	2840      	cmp	r0, #64	; 0x40
 8001370:	d077      	beq.n	8001462 <getMotorStatus+0x12a>
 8001372:	2880      	cmp	r0, #128	; 0x80
 8001374:	d10f      	bne.n	8001396 <getMotorStatus+0x5e>
        snprintf(errorString, sizeof(errorString), "Error: Software Error");
 8001376:	4d45      	ldr	r5, [pc, #276]	; (800148c <getMotorStatus+0x154>)
 8001378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137a:	f10d 0c04 	add.w	ip, sp, #4
 800137e:	4664      	mov	r4, ip
 8001380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001382:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001386:	f844 0b04 	str.w	r0, [r4], #4
    return strdup(errorString);
 800138a:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: Software Error");
 800138c:	8021      	strh	r1, [r4, #0]
    return strdup(errorString);
 800138e:	f009 ffc9 	bl	800b324 <strdup>
}
 8001392:	b00f      	add	sp, #60	; 0x3c
 8001394:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Unknown Error");
 8001396:	4b3e      	ldr	r3, [pc, #248]	; (8001490 <getMotorStatus+0x158>)
 8001398:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800139a:	f10d 0c04 	add.w	ip, sp, #4
 800139e:	4664      	mov	r4, ip
 80013a0:	c407      	stmia	r4!, {r0, r1, r2}
    return strdup(errorString);
 80013a2:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Unknown Error");
 80013a4:	8023      	strh	r3, [r4, #0]
    return strdup(errorString);
 80013a6:	f009 ffbd 	bl	800b324 <strdup>
}
 80013aa:	b00f      	add	sp, #60	; 0x3c
 80013ac:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "No Error");
 80013ae:	4b39      	ldr	r3, [pc, #228]	; (8001494 <getMotorStatus+0x15c>)
 80013b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80013b4:	f10d 0c04 	add.w	ip, sp, #4
 80013b8:	4663      	mov	r3, ip
 80013ba:	c303      	stmia	r3!, {r0, r1}
    return strdup(errorString);
 80013bc:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "No Error");
 80013be:	701a      	strb	r2, [r3, #0]
    return strdup(errorString);
 80013c0:	f009 ffb0 	bl	800b324 <strdup>
}
 80013c4:	b00f      	add	sp, #60	; 0x3c
 80013c6:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: FOC Rate Too High");
 80013c8:	4d33      	ldr	r5, [pc, #204]	; (8001498 <getMotorStatus+0x160>)
 80013ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013cc:	f10d 0c04 	add.w	ip, sp, #4
 80013d0:	4664      	mov	r4, ip
 80013d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013d8:	c403      	stmia	r4!, {r0, r1}
    return strdup(errorString);
 80013da:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: FOC Rate Too High");
 80013dc:	7022      	strb	r2, [r4, #0]
    return strdup(errorString);
 80013de:	f009 ffa1 	bl	800b324 <strdup>
}
 80013e2:	b00f      	add	sp, #60	; 0x3c
 80013e4:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Software Over Voltage");
 80013e6:	4d2d      	ldr	r5, [pc, #180]	; (800149c <getMotorStatus+0x164>)
 80013e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ea:	f10d 0c04 	add.w	ip, sp, #4
 80013ee:	4664      	mov	r4, ip
 80013f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013f6:	c407      	stmia	r4!, {r0, r1, r2}
    return strdup(errorString);
 80013f8:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: Software Over Voltage");
 80013fa:	7023      	strb	r3, [r4, #0]
    return strdup(errorString);
 80013fc:	f009 ff92 	bl	800b324 <strdup>
}
 8001400:	b00f      	add	sp, #60	; 0x3c
 8001402:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Software Under Voltage");
 8001404:	4d26      	ldr	r5, [pc, #152]	; (80014a0 <getMotorStatus+0x168>)
 8001406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001408:	f10d 0c04 	add.w	ip, sp, #4
 800140c:	4664      	mov	r4, ip
 800140e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001410:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001414:	c407      	stmia	r4!, {r0, r1, r2}
    return strdup(errorString);
 8001416:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: Software Under Voltage");
 8001418:	8023      	strh	r3, [r4, #0]
    return strdup(errorString);
 800141a:	f009 ff83 	bl	800b324 <strdup>
}
 800141e:	b00f      	add	sp, #60	; 0x3c
 8001420:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Software Over Temperature");
 8001422:	4d20      	ldr	r5, [pc, #128]	; (80014a4 <getMotorStatus+0x16c>)
 8001424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001426:	f10d 0c04 	add.w	ip, sp, #4
 800142a:	4664      	mov	r4, ip
 800142c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800142e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001432:	682b      	ldr	r3, [r5, #0]
 8001434:	7023      	strb	r3, [r4, #0]
    return strdup(errorString);
 8001436:	4660      	mov	r0, ip
 8001438:	f009 ff74 	bl	800b324 <strdup>
}
 800143c:	b00f      	add	sp, #60	; 0x3c
 800143e:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Startup Failed");
 8001440:	4d19      	ldr	r5, [pc, #100]	; (80014a8 <getMotorStatus+0x170>)
 8001442:	e799      	b.n	8001378 <getMotorStatus+0x40>
        snprintf(errorString, sizeof(errorString), "Error: Speed Feedback Error");
 8001444:	4d19      	ldr	r5, [pc, #100]	; (80014ac <getMotorStatus+0x174>)
 8001446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001448:	f10d 0c04 	add.w	ip, sp, #4
 800144c:	4664      	mov	r4, ip
 800144e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001450:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001454:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return strdup(errorString);
 8001458:	4660      	mov	r0, ip
 800145a:	f009 ff63 	bl	800b324 <strdup>
}
 800145e:	b00f      	add	sp, #60	; 0x3c
 8001460:	bd30      	pop	{r4, r5, pc}
        snprintf(errorString, sizeof(errorString), "Error: Emergency Input (Over Current)");
 8001462:	4c13      	ldr	r4, [pc, #76]	; (80014b0 <getMotorStatus+0x178>)
 8001464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001466:	f10d 0c04 	add.w	ip, sp, #4
 800146a:	46e6      	mov	lr, ip
 800146c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001472:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001476:	e894 0003 	ldmia.w	r4, {r0, r1}
 800147a:	f84e 0b04 	str.w	r0, [lr], #4
    return strdup(errorString);
 800147e:	4660      	mov	r0, ip
        snprintf(errorString, sizeof(errorString), "Error: Emergency Input (Over Current)");
 8001480:	f8ae 1000 	strh.w	r1, [lr]
    return strdup(errorString);
 8001484:	f009 ff4e 	bl	800b324 <strdup>
}
 8001488:	b00f      	add	sp, #60	; 0x3c
 800148a:	bd30      	pop	{r4, r5, pc}
 800148c:	0800d264 	.word	0x0800d264
 8001490:	0800d27c 	.word	0x0800d27c
 8001494:	0800d17c 	.word	0x0800d17c
 8001498:	0800d188 	.word	0x0800d188
 800149c:	0800d1a4 	.word	0x0800d1a4
 80014a0:	0800d1c4 	.word	0x0800d1c4
 80014a4:	0800d1e4 	.word	0x0800d1e4
 80014a8:	0800d208 	.word	0x0800d208
 80014ac:	0800d220 	.word	0x0800d220
 80014b0:	0800d23c 	.word	0x0800d23c

080014b4 <getCurrentMotorState>:

//State machine
int getCurrentMotorState(MCI_Handle_t *pHandle)
{
 80014b4:	b508      	push	{r3, lr}
    return MCI_GetSTMState(pHandle);
 80014b6:	f001 f971 	bl	800279c <MCI_GetSTMState>
}
 80014ba:	bd08      	pop	{r3, pc}

080014bc <computeStabilization>:
void computeStabilization_test2(){
	 // Implementation of stabilization control
	float mapped_angle = encoder.pendulum_angle - neutral_angle;

	//float Kr[3] = {735,0,0};
	controlSignalRPM = Kr[0]*mapped_angle + Kr[1]*encoder.pendulum_velocity+Kr[2]*encoder.motor_speed;
 80014bc:	4a36      	ldr	r2, [pc, #216]	; (8001598 <computeStabilization+0xdc>)
	float mapped_angle = encoder.pendulum_angle - neutral_angle;
 80014be:	4b37      	ldr	r3, [pc, #220]	; (800159c <computeStabilization+0xe0>)
	controlSignalRPM = Kr[0]*mapped_angle + Kr[1]*encoder.pendulum_velocity+Kr[2]*encoder.motor_speed;
 80014c0:	edd2 6a02 	vldr	s13, [r2, #8]
	float mapped_angle = encoder.pendulum_angle - neutral_angle;
 80014c4:	ed93 7a00 	vldr	s14, [r3]
	controlSignalRPM = Kr[0]*mapped_angle + Kr[1]*encoder.pendulum_velocity+Kr[2]*encoder.motor_speed;
 80014c8:	ed93 6a03 	vldr	s12, [r3, #12]
 80014cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80014d0:	edd2 5a01 	vldr	s11, [r2, #4]
	float mapped_angle = encoder.pendulum_angle - neutral_angle;
 80014d4:	4932      	ldr	r1, [pc, #200]	; (80015a0 <computeStabilization+0xe4>)
	controlSignalRPM = Kr[0]*mapped_angle + Kr[1]*encoder.pendulum_velocity+Kr[2]*encoder.motor_speed;
 80014d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
	float mapped_angle = encoder.pendulum_angle - neutral_angle;
 80014da:	edd1 6a00 	vldr	s13, [r1]
 80014de:	eee5 7a86 	vfma.f32	s15, s11, s12
 80014e2:	ee37 7a66 	vsub.f32	s14, s14, s13
	controlSignalRPM = Kr[0]*mapped_angle + Kr[1]*encoder.pendulum_velocity+Kr[2]*encoder.motor_speed;
 80014e6:	ed92 6a00 	vldr	s12, [r2]
 80014ea:	4a2e      	ldr	r2, [pc, #184]	; (80015a4 <computeStabilization+0xe8>)
 80014ec:	eee7 7a06 	vfma.f32	s15, s14, s12

	// limit the control signal set to the motor
	if(fabs(controlSignalRPM) > MAX_APPLICATION_SPEED_RPM*0.9) controlSignalRPM = _sign(controlSignalRPM)*MAX_APPLICATION_SPEED_RPM*0.9;
 80014f0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80015a8 <computeStabilization+0xec>
	controlSignalRPM = Kr[0]*mapped_angle + Kr[1]*encoder.pendulum_velocity+Kr[2]*encoder.motor_speed;
 80014f4:	edc2 7a00 	vstr	s15, [r2]
	if(fabs(controlSignalRPM) > MAX_APPLICATION_SPEED_RPM*0.9) controlSignalRPM = _sign(controlSignalRPM)*MAX_APPLICATION_SPEED_RPM*0.9;
 80014f8:	edd2 7a00 	vldr	s15, [r2]
 80014fc:	eef0 7ae7 	vabs.f32	s15, s15
 8001500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001508:	dd13      	ble.n	8001532 <computeStabilization+0x76>
 800150a:	edd2 7a00 	vldr	s15, [r2]
 800150e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001516:	db2d      	blt.n	8001574 <computeStabilization+0xb8>
 8001518:	eddf 7a24 	vldr	s15, [pc, #144]	; 80015ac <computeStabilization+0xf0>
 800151c:	ed92 6a00 	vldr	s12, [r2]
 8001520:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001528:	bfd8      	it	le
 800152a:	eeb0 7a67 	vmovle.f32	s14, s15
 800152e:	ed82 7a00 	vstr	s14, [r2]

	//Make sure that encoder is in the stabilize angle (due to timing issue)
	if (encoder.pendulum_angle >= POS_SWINGUP_ANGLE  && encoder.pendulum_angle <=  neutral_angle)
 8001532:	ed93 7a00 	vldr	s14, [r3]
 8001536:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80015b0 <computeStabilization+0xf4>
 800153a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001542:	db06      	blt.n	8001552 <computeStabilization+0x96>
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	eef4 6ae7 	vcmpe.f32	s13, s15
 800154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001550:	da13      	bge.n	800157a <computeStabilization+0xbe>
	{
	    MC_ProgramSpeedRampMotor1((int)controlSignalRPM/6, 0);
	} else if ( encoder.pendulum_angle <= NEG_SWINGUP_ANGLE && encoder.pendulum_angle >= neutral_angle)
 8001552:	ed93 7a00 	vldr	s14, [r3]
 8001556:	eddf 7a17 	vldr	s15, [pc, #92]	; 80015b4 <computeStabilization+0xf8>
 800155a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800155e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001562:	d806      	bhi.n	8001572 <computeStabilization+0xb6>
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	eef4 6ae7 	vcmpe.f32	s13, s15
 800156c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001570:	d903      	bls.n	800157a <computeStabilization+0xbe>
    controlSignalRPM = Kp * error + Ki * integral;
    MC_ProgramSpeedRampMotor1((int)controlSignalRPM/6, 0);
	//MC_ProgramSpeedRampMotor1(controlSignalRPM/6,0);
	 *
	 */
}
 8001572:	4770      	bx	lr
	if(fabs(controlSignalRPM) > MAX_APPLICATION_SPEED_RPM*0.9) controlSignalRPM = _sign(controlSignalRPM)*MAX_APPLICATION_SPEED_RPM*0.9;
 8001574:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80015b8 <computeStabilization+0xfc>
 8001578:	e7d9      	b.n	800152e <computeStabilization+0x72>
	    MC_ProgramSpeedRampMotor1((int)(controlSignalRPM)/6, 0);
 800157a:	edd2 7a00 	vldr	s15, [r2]
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <computeStabilization+0x100>)
 8001580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001584:	2100      	movs	r1, #0
 8001586:	ee17 0a90 	vmov	r0, s15
 800158a:	fb83 2300 	smull	r2, r3, r3, r0
 800158e:	eba3 70e0 	sub.w	r0, r3, r0, asr #31
 8001592:	f001 b875 	b.w	8002680 <MC_ProgramSpeedRampMotor1>
 8001596:	bf00      	nop
 8001598:	20000000 	.word	0x20000000
 800159c:	200006d8 	.word	0x200006d8
 80015a0:	2000000c 	.word	0x2000000c
 80015a4:	200006d4 	.word	0x200006d4
 80015a8:	4540f000 	.word	0x4540f000
 80015ac:	00000000 	.word	0x00000000
 80015b0:	43200000 	.word	0x43200000
 80015b4:	43520000 	.word	0x43520000
 80015b8:	c540f000 	.word	0xc540f000
 80015bc:	2aaaaaab 	.word	0x2aaaaaab

080015c0 <computeSwingUp>:
	//HAL_Delay();



}
void computeSwingUp() {
 80015c0:	b538      	push	{r3, r4, r5, lr}
    printf("Computing swing up algorithm...\r\n");
 80015c2:	4867      	ldr	r0, [pc, #412]	; (8001760 <computeSwingUp+0x1a0>)
	float mapped_angle = encoder.getLegacyPendulumAngle(&ENCODER_M2);
 80015c4:	4c67      	ldr	r4, [pc, #412]	; (8001764 <computeSwingUp+0x1a4>)
    printf("Computing swing up algorithm...\r\n");
 80015c6:	f009 fe51 	bl	800b26c <puts>
    printf("Computing swing up algorithm...\r\n");
 80015ca:	4865      	ldr	r0, [pc, #404]	; (8001760 <computeSwingUp+0x1a0>)
 80015cc:	f009 fe4e 	bl	800b26c <puts>
	float mapped_angle = encoder.getLegacyPendulumAngle(&ENCODER_M2);
 80015d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015d2:	4865      	ldr	r0, [pc, #404]	; (8001768 <computeSwingUp+0x1a8>)
 80015d4:	4798      	blx	r3
	if (stop_algo1 == false && stop_algo2 == false)
 80015d6:	4b65      	ldr	r3, [pc, #404]	; (800176c <computeSwingUp+0x1ac>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b32b      	cbz	r3, 8001628 <computeSwingUp+0x68>
	else if (stop_algo1 == true && stop_algo2 == false)
 80015dc:	4b64      	ldr	r3, [pc, #400]	; (8001770 <computeSwingUp+0x1b0>)
 80015de:	781d      	ldrb	r5, [r3, #0]
 80015e0:	2d00      	cmp	r5, #0
 80015e2:	d058      	beq.n	8001696 <computeSwingUp+0xd6>
		swing_level = 2;
 80015e4:	4b63      	ldr	r3, [pc, #396]	; (8001774 <computeSwingUp+0x1b4>)
printf("Swing up - Level 2 \r\n");
 80015e6:	4864      	ldr	r0, [pc, #400]	; (8001778 <computeSwingUp+0x1b8>)
		swing_level = 2;
 80015e8:	2202      	movs	r2, #2
 80015ea:	601a      	str	r2, [r3, #0]
printf("Swing up - Level 2 \r\n");
 80015ec:	f009 fe3e 	bl	800b26c <puts>
	  if (encoder.pendulum_angle <= 360 && encoder.pendulum_angle > NEG_SWINGUP_ANGLE)
 80015f0:	ed94 7a00 	vldr	s14, [r4]
 80015f4:	eddf 7a61 	vldr	s15, [pc, #388]	; 800177c <computeSwingUp+0x1bc>
 80015f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001600:	d97d      	bls.n	80016fe <computeSwingUp+0x13e>
else if (encoder.pendulum_angle < 360 && encoder.pendulum_angle < POS_SWINGUP_ANGLE)
 8001602:	ed94 7a00 	vldr	s14, [r4]
 8001606:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800177c <computeSwingUp+0x1bc>
 800160a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800160e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001612:	d508      	bpl.n	8001626 <computeSwingUp+0x66>
 8001614:	ed94 7a00 	vldr	s14, [r4]
 8001618:	eddf 7a59 	vldr	s15, [pc, #356]	; 8001780 <computeSwingUp+0x1c0>
 800161c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	d47f      	bmi.n	8001726 <computeSwingUp+0x166>
		{
		  finishSwingUp2();
		}
	  }
	  */
}
 8001626:	bd38      	pop	{r3, r4, r5, pc}
	if (stop_algo1 == false && stop_algo2 == false)
 8001628:	4b51      	ldr	r3, [pc, #324]	; (8001770 <computeSwingUp+0x1b0>)
 800162a:	781d      	ldrb	r5, [r3, #0]
 800162c:	2d00      	cmp	r5, #0
 800162e:	d1d9      	bne.n	80015e4 <computeSwingUp+0x24>
	    swing_level = 0;
 8001630:	4b50      	ldr	r3, [pc, #320]	; (8001774 <computeSwingUp+0x1b4>)
  printf("Start Swing up - Level 0\r\n");
 8001632:	4854      	ldr	r0, [pc, #336]	; (8001784 <computeSwingUp+0x1c4>)
	    swing_level = 0;
 8001634:	601d      	str	r5, [r3, #0]
  printf("Start Swing up - Level 0\r\n");
 8001636:	f009 fe19 	bl	800b26c <puts>
  if (encoder.pendulum_angle <= 360 && encoder.pendulum_angle > NEG_SWINGUP_ANGLE)
 800163a:	ed94 7a00 	vldr	s14, [r4]
 800163e:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800177c <computeSwingUp+0x1bc>
 8001642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	d808      	bhi.n	800165e <computeSwingUp+0x9e>
 800164c:	ed94 7a00 	vldr	s14, [r4]
 8001650:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8001788 <computeSwingUp+0x1c8>
 8001654:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165c:	dc77      	bgt.n	800174e <computeSwingUp+0x18e>
  else if (encoder.pendulum_angle < 360 && encoder.pendulum_angle < POS_SWINGUP_ANGLE)
 800165e:	ed94 7a00 	vldr	s14, [r4]
 8001662:	eddf 7a46 	vldr	s15, [pc, #280]	; 800177c <computeSwingUp+0x1bc>
 8001666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166e:	d5da      	bpl.n	8001626 <computeSwingUp+0x66>
 8001670:	ed94 7a00 	vldr	s14, [r4]
 8001674:	eddf 7a42 	vldr	s15, [pc, #264]	; 8001780 <computeSwingUp+0x1c0>
 8001678:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001680:	d5d1      	bpl.n	8001626 <computeSwingUp+0x66>
    MC_ProgramSpeedRampMotor1(1600 / 6, 0);
 8001682:	2100      	movs	r1, #0
 8001684:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8001688:	f000 fffa 	bl	8002680 <MC_ProgramSpeedRampMotor1>
}
 800168c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_Delay(250);
 8001690:	20fa      	movs	r0, #250	; 0xfa
 8001692:	f003 be21 	b.w	80052d8 <HAL_Delay>
	    swing_level = 1;
 8001696:	4b37      	ldr	r3, [pc, #220]	; (8001774 <computeSwingUp+0x1b4>)
  printf("Swing up - Level 1 \r\n");
 8001698:	483c      	ldr	r0, [pc, #240]	; (800178c <computeSwingUp+0x1cc>)
	    swing_level = 1;
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]
  printf("Swing up - Level 1 \r\n");
 800169e:	f009 fde5 	bl	800b26c <puts>
  if (encoder.pendulum_angle <= 360 && encoder.pendulum_angle > NEG_SWINGUP_ANGLE)
 80016a2:	ed94 7a00 	vldr	s14, [r4]
 80016a6:	eddf 7a35 	vldr	s15, [pc, #212]	; 800177c <computeSwingUp+0x1bc>
 80016aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b2:	d808      	bhi.n	80016c6 <computeSwingUp+0x106>
 80016b4:	ed94 7a00 	vldr	s14, [r4]
 80016b8:	eddf 7a33 	vldr	s15, [pc, #204]	; 8001788 <computeSwingUp+0x1c8>
 80016bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	dc39      	bgt.n	800173a <computeSwingUp+0x17a>
  else if (encoder.pendulum_angle < 360 && encoder.pendulum_angle < POS_SWINGUP_ANGLE)
 80016c6:	ed94 7a00 	vldr	s14, [r4]
 80016ca:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800177c <computeSwingUp+0x1bc>
 80016ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d6:	d5a6      	bpl.n	8001626 <computeSwingUp+0x66>
 80016d8:	ed94 7a00 	vldr	s14, [r4]
 80016dc:	eddf 7a28 	vldr	s15, [pc, #160]	; 8001780 <computeSwingUp+0x1c0>
 80016e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e8:	d59d      	bpl.n	8001626 <computeSwingUp+0x66>
    MC_ProgramSpeedRampMotor1(2000 / 6, 0);
 80016ea:	2100      	movs	r1, #0
 80016ec:	f240 104d 	movw	r0, #333	; 0x14d
 80016f0:	f000 ffc6 	bl	8002680 <MC_ProgramSpeedRampMotor1>
}
 80016f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_Delay(200);
 80016f8:	20c8      	movs	r0, #200	; 0xc8
 80016fa:	f003 bded 	b.w	80052d8 <HAL_Delay>
	  if (encoder.pendulum_angle <= 360 && encoder.pendulum_angle > NEG_SWINGUP_ANGLE)
 80016fe:	ed94 7a00 	vldr	s14, [r4]
 8001702:	eddf 7a21 	vldr	s15, [pc, #132]	; 8001788 <computeSwingUp+0x1c8>
 8001706:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170e:	f77f af78 	ble.w	8001602 <computeSwingUp+0x42>
    MC_ProgramSpeedRampMotor1(-1700 / 6, 0);
 8001712:	2100      	movs	r1, #0
 8001714:	f46f 708d 	mvn.w	r0, #282	; 0x11a
 8001718:	f000 ffb2 	bl	8002680 <MC_ProgramSpeedRampMotor1>
}
 800171c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_Delay(200);
 8001720:	20c8      	movs	r0, #200	; 0xc8
 8001722:	f003 bdd9 	b.w	80052d8 <HAL_Delay>
    MC_ProgramSpeedRampMotor1(1700 / 6, 0);
 8001726:	2100      	movs	r1, #0
 8001728:	f240 101b 	movw	r0, #283	; 0x11b
 800172c:	f000 ffa8 	bl	8002680 <MC_ProgramSpeedRampMotor1>
}
 8001730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_Delay(200);
 8001734:	20c8      	movs	r0, #200	; 0xc8
 8001736:	f003 bdcf 	b.w	80052d8 <HAL_Delay>
    MC_ProgramSpeedRampMotor1(-2000 / 6, 0);
 800173a:	4629      	mov	r1, r5
 800173c:	f46f 70a6 	mvn.w	r0, #332	; 0x14c
 8001740:	f000 ff9e 	bl	8002680 <MC_ProgramSpeedRampMotor1>
}
 8001744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_Delay(200);
 8001748:	20c8      	movs	r0, #200	; 0xc8
 800174a:	f003 bdc5 	b.w	80052d8 <HAL_Delay>
    MC_ProgramSpeedRampMotor1(-1600 / 6, 0);
 800174e:	4629      	mov	r1, r5
 8001750:	480f      	ldr	r0, [pc, #60]	; (8001790 <computeSwingUp+0x1d0>)
 8001752:	f000 ff95 	bl	8002680 <MC_ProgramSpeedRampMotor1>
}
 8001756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_Delay(200);
 800175a:	20c8      	movs	r0, #200	; 0xc8
 800175c:	f003 bdbc 	b.w	80052d8 <HAL_Delay>
 8001760:	0800d2d8 	.word	0x0800d2d8
 8001764:	200006d8 	.word	0x200006d8
 8001768:	20000174 	.word	0x20000174
 800176c:	20000a68 	.word	0x20000a68
 8001770:	20000a69 	.word	0x20000a69
 8001774:	20000a6c 	.word	0x20000a6c
 8001778:	0800d2c0 	.word	0x0800d2c0
 800177c:	43b40000 	.word	0x43b40000
 8001780:	43200000 	.word	0x43200000
 8001784:	0800d28c 	.word	0x0800d28c
 8001788:	43520000 	.word	0x43520000
 800178c:	0800d2a8 	.word	0x0800d2a8
 8001790:	fffffef6 	.word	0xfffffef6

08001794 <indicateError>:
 * yellow and green LEDs.
 * 
 * Note: GPIO pins for the LEDs need to be defined separately.
 */
void indicateError() {
    printf("Error LED turned on.\n");
 8001794:	4801      	ldr	r0, [pc, #4]	; (800179c <indicateError+0x8>)
 8001796:	f009 bd69 	b.w	800b26c <puts>
 800179a:	bf00      	nop
 800179c:	0800d2fc 	.word	0x0800d2fc

080017a0 <indicateWarning>:
 * red and green LEDs.
 * 
 * Note: GPIO pins for the LEDs need to be defined separately.
 */
void indicateWarning() {
    printf("Warning LED turned on.\n");
 80017a0:	4801      	ldr	r0, [pc, #4]	; (80017a8 <indicateWarning+0x8>)
 80017a2:	f009 bd63 	b.w	800b26c <puts>
 80017a6:	bf00      	nop
 80017a8:	0800d314 	.word	0x0800d314

080017ac <indicateNormalOperation>:
 * yellow LEDs.
 * 
 * Note: GPIO pins for the LEDs need to be defined separately.
 */
void indicateNormalOperation() {
    printf("Normal operation LED turned on.\n");
 80017ac:	4801      	ldr	r0, [pc, #4]	; (80017b4 <indicateNormalOperation+0x8>)
 80017ae:	f009 bd5d 	b.w	800b26c <puts>
 80017b2:	bf00      	nop
 80017b4:	0800d32c 	.word	0x0800d32c

080017b8 <turnOffAllLeds>:
 * @brief Turn off all LEDs by turning off the red, yellow, and green LEDs.
 * 
 * Note: GPIO pins for the LEDs need to be defined separately.
 */
void turnOffAllLeds() {
    printf("All LEDs turned off.\n");
 80017b8:	4801      	ldr	r0, [pc, #4]	; (80017c0 <turnOffAllLeds+0x8>)
 80017ba:	f009 bd57 	b.w	800b26c <puts>
 80017be:	bf00      	nop
 80017c0:	0800d34c 	.word	0x0800d34c

080017c4 <turnOnLed>:
 * @brief Turn on the specified LED color.
 *
 * @param color The LED color to turn on (RED, YELLOW, or GREEN).
 */
void turnOnLed(LedColor color) {
    switch (color) {
 80017c4:	2801      	cmp	r0, #1
 80017c6:	d003      	beq.n	80017d0 <turnOnLed+0xc>
 80017c8:	2802      	cmp	r0, #2
 80017ca:	d007      	beq.n	80017dc <turnOnLed+0x18>
 80017cc:	b118      	cbz	r0, 80017d6 <turnOnLed+0x12>
            break;
        case GREEN:
            indicateNormalOperation();
            break;
    }
 80017ce:	4770      	bx	lr
    printf("Warning LED turned on.\n");
 80017d0:	4804      	ldr	r0, [pc, #16]	; (80017e4 <turnOnLed+0x20>)
 80017d2:	f009 bd4b 	b.w	800b26c <puts>
    printf("Error LED turned on.\n");
 80017d6:	4804      	ldr	r0, [pc, #16]	; (80017e8 <turnOnLed+0x24>)
 80017d8:	f009 bd48 	b.w	800b26c <puts>
    printf("Normal operation LED turned on.\n");
 80017dc:	4803      	ldr	r0, [pc, #12]	; (80017ec <turnOnLed+0x28>)
 80017de:	f009 bd45 	b.w	800b26c <puts>
 80017e2:	bf00      	nop
 80017e4:	0800d314 	.word	0x0800d314
 80017e8:	0800d2fc 	.word	0x0800d2fc
 80017ec:	0800d32c 	.word	0x0800d32c

080017f0 <ASPEP_start>:

  return (crc == 0U);
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 80017f0:	b570      	push	{r4, r5, r6, lr}
 80017f2:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 80017f4:	6940      	ldr	r0, [r0, #20]
 80017f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80017f8:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 80017fa:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80017fc:	6d65      	ldr	r5, [r4, #84]	; 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 80017fe:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8001802:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001806:	6960      	ldr	r0, [r4, #20]
 8001808:	f104 011c 	add.w	r1, r4, #28
 800180c:	462b      	mov	r3, r5
 800180e:	2204      	movs	r2, #4
#ifdef NULL_PTR_ASP
  }
#endif
}
 8001810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001814:	4718      	bx	r3
 8001816:	bf00      	nop

08001818 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8001818:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
               | (((uint32_t)capabilities->version) << 4U)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 800181a:	780b      	ldrb	r3, [r1, #0]
               | (((uint32_t)capabilities->version) << 4U)
 800181c:	790a      	ldrb	r2, [r1, #4]
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800181e:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8001822:	4c1e      	ldr	r4, [pc, #120]	; (800189c <ASPEP_sendBeacon+0x84>)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8001824:	01db      	lsls	r3, r3, #7
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8001826:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
 800182a:	784a      	ldrb	r2, [r1, #1]
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800182c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001830:	78ca      	ldrb	r2, [r1, #3]
 8001832:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
 8001836:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800183a:	b2da      	uxtb	r2, r3
 800183c:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8001840:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001844:	5ca2      	ldrb	r2, [r4, r2]
 8001846:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 800184a:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800184c:	5ca2      	ldrb	r2, [r4, r2]
 800184e:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8001852:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8001854:	5ca2      	ldrb	r2, [r4, r2]
 8001856:	4c12      	ldr	r4, [pc, #72]	; (80018a0 <ASPEP_sendBeacon+0x88>)
 8001858:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 800185c:	5ca2      	ldrb	r2, [r4, r2]
 800185e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001862:	f043 0305 	orr.w	r3, r3, #5
 8001866:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001868:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800186a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800186c:	b14b      	cbz	r3, 8001882 <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 800186e:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 8001870:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001874:	b913      	cbnz	r3, 800187c <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 8001876:	2302      	movs	r3, #2
 8001878:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 800187c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001880:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8001882:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8001886:	2303      	movs	r3, #3
 8001888:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800188c:	6481      	str	r1, [r0, #72]	; 0x48
 800188e:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8001890:	2204      	movs	r2, #4
 8001892:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 8001894:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8001898:	6940      	ldr	r0, [r0, #20]
 800189a:	4718      	bx	r3
 800189c:	0800d374 	.word	0x0800d374
 80018a0:	0800d364 	.word	0x0800d364

080018a4 <ASPEP_sendPing>:
{
 80018a4:	b530      	push	{r4, r5, lr}
              | (uint32_t)((uint32_t)cBit << 5U)
 80018a6:	ea4f 1c41 	mov.w	ip, r1, lsl #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 80018aa:	f890 e060 	ldrb.w	lr, [r0, #96]	; 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 80018ae:	f890 4063 	ldrb.w	r4, [r0, #99]	; 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80018b2:	4d1e      	ldr	r5, [pc, #120]	; (800192c <ASPEP_sendPing+0x88>)
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80018b4:	ea4c 1c01 	orr.w	ip, ip, r1, lsl #4
              | (uint32_t)((uint32_t)Nbit << 6U)
 80018b8:	f00e 0e01 	and.w	lr, lr, #1
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80018bc:	ea4c 3c02 	orr.w	ip, ip, r2, lsl #12
 80018c0:	ea4c 138e 	orr.w	r3, ip, lr, lsl #6
 80018c4:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
              | (uint32_t)((uint32_t)ipID << 8U)
 80018c8:	f004 040f 	and.w	r4, r4, #15
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80018cc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4c17      	ldr	r4, [pc, #92]	; (8001930 <ASPEP_sendPing+0x8c>)
 80018d4:	f042 0206 	orr.w	r2, r2, #6
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80018d8:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80018dc:	5ca2      	ldrb	r2, [r4, r2]
 80018de:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 80018e2:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80018e4:	5ca2      	ldrb	r2, [r4, r2]
 80018e6:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 80018ea:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80018ec:	5ca2      	ldrb	r2, [r4, r2]
 80018ee:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80018f2:	5ceb      	ldrb	r3, [r5, r3]
 80018f4:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 80018f8:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80018fa:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80018fc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80018fe:	b13b      	cbz	r3, 8001910 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8001900:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8001902:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001906:	b913      	cbnz	r3, 800190e <ASPEP_sendPing+0x6a>
          pHandle->ctrlBuffer.state = pending;
 8001908:	2302      	movs	r3, #2
 800190a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 800190e:	bd30      	pop	{r4, r5, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8001910:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8001914:	2303      	movs	r3, #3
 8001916:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800191a:	6481      	str	r1, [r0, #72]	; 0x48
 800191c:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800191e:	2204      	movs	r2, #4
 8001920:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001922:	6940      	ldr	r0, [r0, #20]
}
 8001924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8001928:	4718      	bx	r3
 800192a:	bf00      	nop
 800192c:	0800d364 	.word	0x0800d364
 8001930:	0800d374 	.word	0x0800d374

08001934 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8001934:	2a0a      	cmp	r2, #10
{
 8001936:	b410      	push	{r4}
 8001938:	4603      	mov	r3, r0
    if (MCTL_SYNC == syncAsync)
 800193a:	d00b      	beq.n	8001954 <ASPEP_getBuffer+0x20>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 800193c:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 8001940:	2a01      	cmp	r2, #1
 8001942:	d921      	bls.n	8001988 <ASPEP_getBuffer+0x54>
 8001944:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8001948:	2a01      	cmp	r2, #1
 800194a:	d911      	bls.n	8001970 <ASPEP_getBuffer+0x3c>
        result = false;
 800194c:	2000      	movs	r0, #0
}
 800194e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001952:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8001954:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 8001958:	2a01      	cmp	r2, #1
 800195a:	d8f7      	bhi.n	800194c <ASPEP_getBuffer+0x18>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 800195c:	6a82      	ldr	r2, [r0, #40]	; 0x28
        pHandle->syncBuffer.state = writeLock;
 800195e:	2401      	movs	r4, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8001960:	3204      	adds	r2, #4
 8001962:	600a      	str	r2, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8001964:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 8001968:	4620      	mov	r0, r4
}
 800196a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800196e:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8001970:	6b82      	ldr	r2, [r0, #56]	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 8001972:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8001974:	f103 0438 	add.w	r4, r3, #56	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 8001978:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 800197c:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 800197e:	641c      	str	r4, [r3, #64]	; 0x40
}
 8001980:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8001984:	600a      	str	r2, [r1, #0]
}
 8001986:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8001988:	6b02      	ldr	r2, [r0, #48]	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 800198a:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 800198c:	f103 0430 	add.w	r4, r3, #48	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 8001990:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8001994:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8001996:	641c      	str	r4, [r3, #64]	; 0x40
}
 8001998:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 800199c:	600a      	str	r2, [r1, #0]
}
 800199e:	4770      	bx	lr

080019a0 <ASPEP_sendPacket>:
{
 80019a0:	b570      	push	{r4, r5, r6, lr}
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80019a2:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
 80019a6:	2c02      	cmp	r4, #2
 80019a8:	d002      	beq.n	80019b0 <ASPEP_sendPacket+0x10>
      result = ASPEP_NOT_CONNECTED;
 80019aa:	2102      	movs	r1, #2
}
 80019ac:	4608      	mov	r0, r1
 80019ae:	bd70      	pop	{r4, r5, r6, pc}
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 80019b0:	ea43 1402 	orr.w	r4, r3, r2, lsl #4
      *header = tmpHeader;
 80019b4:	f841 4c04 	str.w	r4, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 80019b8:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
 80019bc:	2c01      	cmp	r4, #1
 80019be:	d104      	bne.n	80019ca <ASPEP_sendPacket+0x2a>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 80019c0:	f64f 64ca 	movw	r4, #65226	; 0xfeca
 80019c4:	528c      	strh	r4, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 80019c6:	3202      	adds	r2, #2
 80019c8:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 80019ca:	2b0a      	cmp	r3, #10
 80019cc:	d103      	bne.n	80019d6 <ASPEP_sendPacket+0x36>
        if (pSupHandle->MCP_PacketAvailable)
 80019ce:	7c04      	ldrb	r4, [r0, #16]
 80019d0:	b394      	cbz	r4, 8001a38 <ASPEP_sendPacket+0x98>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from master is processed*/
 80019d2:	2400      	movs	r4, #0
 80019d4:	7404      	strb	r4, [r0, #16]
  uint32_t header = *headerPtr;
 80019d6:	f851 4c04 	ldr.w	r4, [r1, #-4]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80019da:	4d35      	ldr	r5, [pc, #212]	; (8001ab0 <ASPEP_sendPacket+0x110>)
 80019dc:	b2e6      	uxtb	r6, r4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80019de:	f3c4 2e07 	ubfx	lr, r4, #8, #8
 80019e2:	5dae      	ldrb	r6, [r5, r6]
 80019e4:	ea8e 0e06 	eor.w	lr, lr, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 80019e8:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80019ea:	f815 600e 	ldrb.w	r6, [r5, lr]
 80019ee:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 80019f2:	ea8e 0e06 	eor.w	lr, lr, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 80019f6:	f1a1 0c04 	sub.w	ip, r1, #4
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80019fa:	f815 e00e 	ldrb.w	lr, [r5, lr]
 80019fe:	f3c4 6503 	ubfx	r5, r4, #24, #4
 8001a02:	ea8e 0e05 	eor.w	lr, lr, r5
 8001a06:	4d2b      	ldr	r5, [pc, #172]	; (8001ab4 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8001a08:	f815 500e 	ldrb.w	r5, [r5, lr]
 8001a0c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8001a10:	b292      	uxth	r2, r2
  *headerPtr |= (uint32_t)crc << 28;
 8001a12:	f841 4c04 	str.w	r4, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a16:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8001a18:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001a1a:	b1e1      	cbz	r1, 8001a56 <ASPEP_sendPacket+0xb6>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a1c:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8001a1e:	2b09      	cmp	r3, #9
 8001a20:	d00d      	beq.n	8001a3e <ASPEP_sendPacket+0x9e>
      else if (MCTL_SYNC == dataType)
 8001a22:	2b0a      	cmp	r3, #10
 8001a24:	d02e      	beq.n	8001a84 <ASPEP_sendPacket+0xe4>
      else if(ASPEP_CTRL == dataType)
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d132      	bne.n	8001a90 <ASPEP_sendPacket+0xf0>
        if (pHandle->ctrlBuffer.state != available)
 8001a2a:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 8001a2e:	bb69      	cbnz	r1, 8001a8c <ASPEP_sendPacket+0xec>
          pHandle->ctrlBuffer.state = pending;
 8001a30:	2302      	movs	r3, #2
 8001a32:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8001a36:	e7b9      	b.n	80019ac <ASPEP_sendPacket+0xc>
          result = MCTL_SYNC_NOT_EXPECTED;
 8001a38:	2101      	movs	r1, #1
}
 8001a3a:	4608      	mov	r0, r1
 8001a3c:	bd70      	pop	{r4, r5, r6, pc}
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8001a3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
        if (NULL == pHandle->asyncNextBuffer)
 8001a40:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8001a42:	6819      	ldr	r1, [r3, #0]
          result = ASPEP_BUFFER_ERROR;
 8001a44:	458c      	cmp	ip, r1
 8001a46:	bf14      	ite	ne
 8001a48:	2103      	movne	r1, #3
 8001a4a:	2100      	moveq	r1, #0
        if (NULL == pHandle->asyncNextBuffer)
 8001a4c:	b36c      	cbz	r4, 8001aaa <ASPEP_sendPacket+0x10a>
        pHandle->lastRequestedAsyncBuff->state = pending;
 8001a4e:	2002      	movs	r0, #2
 8001a50:	7198      	strb	r0, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8001a52:	809a      	strh	r2, [r3, #4]
 8001a54:	e7aa      	b.n	80019ac <ASPEP_sendPacket+0xc>
      if (MCTL_ASYNC == dataType)
 8001a56:	2b09      	cmp	r3, #9
 8001a58:	d022      	beq.n	8001aa0 <ASPEP_sendPacket+0x100>
      else if (MCTL_SYNC == dataType)
 8001a5a:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8001a5c:	f04f 0103 	mov.w	r1, #3
        pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 8001a60:	bf0b      	itete	eq
 8001a62:	f100 0328 	addeq.w	r3, r0, #40	; 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8001a66:	f100 0320 	addne.w	r3, r0, #32
        pHandle->syncBuffer.state = readLock;
 8001a6a:	f880 102e 	strbeq.w	r1, [r0, #46]	; 0x2e
        pHandle->ctrlBuffer.state = readLock;
 8001a6e:	f880 1024 	strbne.w	r1, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8001a72:	6483      	str	r3, [r0, #72]	; 0x48
 8001a74:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8001a76:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001a78:	6940      	ldr	r0, [r0, #20]
 8001a7a:	4661      	mov	r1, ip
 8001a7c:	4798      	blx	r3
 8001a7e:	2100      	movs	r1, #0
}
 8001a80:	4608      	mov	r0, r1
 8001a82:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle -> syncBuffer.state != writeLock)
 8001a84:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d003      	beq.n	8001a94 <ASPEP_sendPacket+0xf4>
          result = ASPEP_BUFFER_ERROR;
 8001a8c:	2103      	movs	r1, #3
 8001a8e:	e78d      	b.n	80019ac <ASPEP_sendPacket+0xc>
  uint8_t result = ASPEP_OK;
 8001a90:	2100      	movs	r1, #0
 8001a92:	e78b      	b.n	80019ac <ASPEP_sendPacket+0xc>
          pHandle->syncBuffer.state = pending;
 8001a94:	2302      	movs	r3, #2
 8001a96:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8001a9a:	8582      	strh	r2, [r0, #44]	; 0x2c
  uint8_t result = ASPEP_OK;
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	e785      	b.n	80019ac <ASPEP_sendPacket+0xc>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8001aa0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001aa2:	2103      	movs	r1, #3
 8001aa4:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8001aa6:	6483      	str	r3, [r0, #72]	; 0x48
 8001aa8:	e7e4      	b.n	8001a74 <ASPEP_sendPacket+0xd4>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8001aaa:	6443      	str	r3, [r0, #68]	; 0x44
 8001aac:	e7cf      	b.n	8001a4e <ASPEP_sendPacket+0xae>
 8001aae:	bf00      	nop
 8001ab0:	0800d374 	.word	0x0800d374
 8001ab4:	0800d364 	.word	0x0800d364

08001ab8 <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8001ab8:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8001aba:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001abe:	2b03      	cmp	r3, #3
{
 8001ac0:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8001ac2:	d013      	beq.n	8001aec <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8001ac4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8001aca:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 8001ace:	2a02      	cmp	r2, #2
 8001ad0:	d013      	beq.n	8001afa <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d11d      	bne.n	8001b12 <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8001ad6:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8001ada:	6d83      	ldr	r3, [r0, #88]	; 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8001adc:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8001ade:	2204      	movs	r2, #4
 8001ae0:	6940      	ldr	r0, [r0, #20]
 8001ae2:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8001aea:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8001aec:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = available;
 8001af0:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 8001af2:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8001af4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (pHandle->syncBuffer.state == pending)
 8001af8:	d10b      	bne.n	8001b12 <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8001afa:	f104 0028 	add.w	r0, r4, #40	; 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8001afe:	6da3      	ldr	r3, [r4, #88]	; 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8001b00:	64a0      	str	r0, [r4, #72]	; 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8001b02:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8001b04:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001b06:	6960      	ldr	r0, [r4, #20]
 8001b08:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8001b10:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8001b12:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8001b14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b16:	b1cb      	cbz	r3, 8001b4c <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8001b18:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8001b1a:	64a3      	str	r3, [r4, #72]	; 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8001b1c:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8001b1e:	6819      	ldr	r1, [r3, #0]
 8001b20:	889a      	ldrh	r2, [r3, #4]
 8001b22:	6960      	ldr	r0, [r4, #20]
 8001b24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b26:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8001b28:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d007      	beq.n	8001b40 <ASPEP_HWDataTransmittedIT+0x88>
 8001b30:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d003      	beq.n	8001b40 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8001b3c:	b662      	cpsie	i
}
 8001b3e:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8001b40:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001b42:	0063      	lsls	r3, r4, #1
 8001b44:	3368      	adds	r3, #104	; 0x68
 8001b46:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8001b48:	6463      	str	r3, [r4, #68]	; 0x44
        {
 8001b4a:	e7f7      	b.n	8001b3c <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 8001b4c:	64a3      	str	r3, [r4, #72]	; 0x48
 8001b4e:	e7f5      	b.n	8001b3c <ASPEP_HWDataTransmittedIT+0x84>

08001b50 <ASPEP_RXframeProcess>:

uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8001b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
    bool validCRCData = true;

    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8001b54:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8001b58:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 8001b5a:	2500      	movs	r5, #0
{
 8001b5c:	4604      	mov	r4, r0
    *packetLength = 0;
 8001b5e:	800d      	strh	r5, [r1, #0]
    if (pHandle->NewPacketAvailable)
 8001b60:	b193      	cbz	r3, 8001b88 <ASPEP_RXframeProcess+0x38>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 8001b62:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8001b66:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
      switch (pHandle->ASPEP_State)
 8001b6a:	2e01      	cmp	r6, #1
 8001b6c:	d054      	beq.n	8001c18 <ASPEP_RXframeProcess+0xc8>
 8001b6e:	2e02      	cmp	r6, #2
 8001b70:	d03e      	beq.n	8001bf0 <ASPEP_RXframeProcess+0xa0>
 8001b72:	2e00      	cmp	r6, #0
 8001b74:	d033      	beq.n	8001bde <ASPEP_RXframeProcess+0x8e>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001b76:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b78:	6960      	ldr	r0, [r4, #20]
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	f104 011c 	add.w	r1, r4, #28
 8001b80:	4798      	blx	r3
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
}
 8001b82:	4628      	mov	r0, r5
 8001b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8001b88:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 8001b8c:	2d00      	cmp	r5, #0
 8001b8e:	d0f8      	beq.n	8001b82 <ASPEP_RXframeProcess+0x32>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8001b90:	042b      	lsls	r3, r5, #16
 8001b92:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001b96:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8001b9a:	4995      	ldr	r1, [pc, #596]	; (8001df0 <ASPEP_RXframeProcess+0x2a0>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8001b9c:	4895      	ldr	r0, [pc, #596]	; (8001df4 <ASPEP_RXframeProcess+0x2a4>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001b9e:	f083 0309 	eor.w	r3, r3, #9
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001ba2:	5cca      	ldrb	r2, [r1, r3]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8001ba4:	f045 030f 	orr.w	r3, r5, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001ba8:	ea82 4515 	eor.w	r5, r2, r5, lsr #16
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8001bac:	5d4a      	ldrb	r2, [r1, r5]
  *headerPtr |= (uint32_t)crc << 28;
 8001bae:	5c82      	ldrb	r2, [r0, r2]
 8001bb0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001bb4:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb6:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8001bb8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d03a      	beq.n	8001c34 <ASPEP_RXframeProcess+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 8001bbe:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8001bc0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001bc4:	b913      	cbnz	r3, 8001bcc <ASPEP_RXframeProcess+0x7c>
          pHandle->ctrlBuffer.state = pending;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8001bcc:	2500      	movs	r5, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8001bce:	6960      	ldr	r0, [r4, #20]
 8001bd0:	6d23      	ldr	r3, [r4, #80]	; 0x50
      pHandle->badPacketFlag = ASPEP_OK;
 8001bd2:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8001bd6:	4798      	blx	r3
}
 8001bd8:	4628      	mov	r0, r5
 8001bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (BEACON == pHandle->rxPacketType)
 8001bde:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001be0:	2b05      	cmp	r3, #5
 8001be2:	f000 8095 	beq.w	8001d10 <ASPEP_RXframeProcess+0x1c0>
          else if (PING == pHandle->rxPacketType)
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	f000 80d7 	beq.w	8001d9a <ASPEP_RXframeProcess+0x24a>
  uint8_t *result = NULL;
 8001bec:	4635      	mov	r5, r6
 8001bee:	e7c2      	b.n	8001b76 <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8001bf0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001bf2:	2b05      	cmp	r3, #5
 8001bf4:	d05f      	beq.n	8001cb6 <ASPEP_RXframeProcess+0x166>
          else if (PING == pHandle->rxPacketType)
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	f000 80d6 	beq.w	8001da8 <ASPEP_RXframeProcess+0x258>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8001bfc:	2b09      	cmp	r3, #9
 8001bfe:	d1ba      	bne.n	8001b76 <ASPEP_RXframeProcess+0x26>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8001c00:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
              *packetLength = pHandle->rxLength;
 8001c04:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
              result = pHandle->rxBuffer;
 8001c08:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8001c0a:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8001c0c:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8001c0e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8001c12:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 8001c14:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8001c16:	e7ae      	b.n	8001b76 <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8001c18:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001c1a:	2b05      	cmp	r3, #5
 8001c1c:	d016      	beq.n	8001c4c <ASPEP_RXframeProcess+0xfc>
          else if (PING == pHandle->rxPacketType)
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d1a9      	bne.n	8001b76 <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8001c22:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8001c26:	4631      	mov	r1, r6
 8001c28:	f7ff fe3c 	bl	80018a4 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001c32:	e7a0      	b.n	8001b76 <ASPEP_RXframeProcess+0x26>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8001c34:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8001c3e:	64a1      	str	r1, [r4, #72]	; 0x48
 8001c40:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8001c42:	2204      	movs	r2, #4
 8001c44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c46:	6960      	ldr	r0, [r4, #20]
 8001c48:	4798      	blx	r3
  return (result);
 8001c4a:	e7bf      	b.n	8001bcc <ASPEP_RXframeProcess+0x7c>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8001c4c:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8001c4e:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001c50:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c54:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001c58:	f894 606e 	ldrb.w	r6, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001c5c:	f894 706f 	ldrb.w	r7, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8001c60:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8001c64:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001c66:	4281      	cmp	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001c68:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001c6c:	bf28      	it	cs
 8001c6e:	4601      	movcs	r1, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c70:	42ab      	cmp	r3, r5
 8001c72:	4698      	mov	r8, r3
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8001c74:	f3c2 5e46 	ubfx	lr, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c78:	bf28      	it	cs
 8001c7a:	46a8      	movcs	r8, r5
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001c7c:	45b4      	cmp	ip, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c7e:	f884 806c 	strb.w	r8, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001c82:	46e0      	mov	r8, ip
 8001c84:	bf28      	it	cs
 8001c86:	46b0      	movcs	r8, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001c88:	45be      	cmp	lr, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001c8a:	f884 806e 	strb.w	r8, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001c8e:	46f0      	mov	r8, lr
 8001c90:	bf28      	it	cs
 8001c92:	46b8      	movcs	r8, r7
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001c94:	42ab      	cmp	r3, r5
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001c96:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001c9a:	f884 806f 	strb.w	r8, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001c9e:	f240 8088 	bls.w	8001db2 <ASPEP_RXframeProcess+0x262>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8001ca8:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8001cac:	4620      	mov	r0, r4
 8001cae:	f7ff fdb3 	bl	8001818 <ASPEP_sendBeacon>
  uint8_t *result = NULL;
 8001cb2:	2500      	movs	r5, #0
 8001cb4:	e75f      	b.n	8001b76 <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8001cb6:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8001cb8:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001cba:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001cbe:	f894 606c 	ldrb.w	r6, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001cc2:	f894 c06e 	ldrb.w	ip, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001cc6:	f894 706f 	ldrb.w	r7, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8001cca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8001cce:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001cd0:	4281      	cmp	r1, r0
 8001cd2:	bf28      	it	cs
 8001cd4:	4601      	movcs	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001cd6:	f3c2 3e86 	ubfx	lr, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001cda:	42b3      	cmp	r3, r6
 8001cdc:	4699      	mov	r9, r3
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8001cde:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001ce2:	bf28      	it	cs
 8001ce4:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001ce6:	45e6      	cmp	lr, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001ce8:	f884 906c 	strb.w	r9, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001cec:	46f1      	mov	r9, lr
 8001cee:	bf28      	it	cs
 8001cf0:	46e1      	movcs	r9, ip
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001cf2:	45b8      	cmp	r8, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001cf4:	f884 906e 	strb.w	r9, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001cf8:	46c1      	mov	r9, r8
 8001cfa:	bf28      	it	cs
 8001cfc:	46b9      	movcs	r9, r7
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001cfe:	42b3      	cmp	r3, r6
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001d00:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001d04:	f884 906f 	strb.w	r9, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001d08:	d964      	bls.n	8001dd4 <ASPEP_RXframeProcess+0x284>
 8001d0a:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8001d0e:	e7cb      	b.n	8001ca8 <ASPEP_RXframeProcess+0x158>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8001d10:	7f65      	ldrb	r5, [r4, #29]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8001d12:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001d14:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001d18:	f894 c06c 	ldrb.w	ip, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001d1c:	f894 e06e 	ldrb.w	lr, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001d20:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8001d24:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8001d28:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001d2a:	42ab      	cmp	r3, r5
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001d2c:	f3c2 3786 	ubfx	r7, r2, #14, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001d30:	bf28      	it	cs
 8001d32:	462b      	movcs	r3, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001d34:	4560      	cmp	r0, ip
 8001d36:	4601      	mov	r1, r0
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8001d38:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001d3c:	bf28      	it	cs
 8001d3e:	4661      	movcs	r1, ip
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001d40:	4577      	cmp	r7, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001d42:	f884 106c 	strb.w	r1, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001d46:	4639      	mov	r1, r7
 8001d48:	bf28      	it	cs
 8001d4a:	4671      	movcs	r1, lr
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001d4c:	45c1      	cmp	r9, r8
 8001d4e:	464e      	mov	r6, r9
 8001d50:	bf28      	it	cs
 8001d52:	4646      	movcs	r6, r8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001d54:	4560      	cmp	r0, ip
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001d56:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001d5a:	f884 106e 	strb.w	r1, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001d5e:	f884 606f 	strb.w	r6, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001d62:	d8a1      	bhi.n	8001ca8 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001d64:	429d      	cmp	r5, r3
 8001d66:	d89f      	bhi.n	8001ca8 <ASPEP_RXframeProcess+0x158>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001d68:	4577      	cmp	r7, lr
 8001d6a:	d89d      	bhi.n	8001ca8 <ASPEP_RXframeProcess+0x158>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8001d6c:	45c1      	cmp	r9, r8
 8001d6e:	d89b      	bhi.n	8001ca8 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001d70:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
 8001d74:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001d78:	4290      	cmp	r0, r2
 8001d7a:	d195      	bne.n	8001ca8 <ASPEP_RXframeProcess+0x158>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001d7c:	1c4a      	adds	r2, r1, #1
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001d7e:	3301      	adds	r3, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001d80:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001d82:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001d84:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8001d86:	01b6      	lsls	r6, r6, #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001d88:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8001d8a:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001d8c:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8001d8e:	81e6      	strh	r6, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001d90:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8001d94:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8001d98:	e786      	b.n	8001ca8 <ASPEP_RXframeProcess+0x158>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8001d9a:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8001d9e:	4631      	mov	r1, r6
 8001da0:	f7ff fd80 	bl	80018a4 <ASPEP_sendPing>
  uint8_t *result = NULL;
 8001da4:	4635      	mov	r5, r6
 8001da6:	e6e6      	b.n	8001b76 <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8001da8:	7f42      	ldrb	r2, [r0, #29]
 8001daa:	2101      	movs	r1, #1
 8001dac:	f7ff fd7a 	bl	80018a4 <ASPEP_sendPing>
 8001db0:	e6e1      	b.n	8001b76 <ASPEP_RXframeProcess+0x26>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001db2:	4288      	cmp	r0, r1
 8001db4:	f63f af75 	bhi.w	8001ca2 <ASPEP_RXframeProcess+0x152>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001db8:	45b4      	cmp	ip, r6
 8001dba:	f63f af72 	bhi.w	8001ca2 <ASPEP_RXframeProcess+0x152>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8001dbe:	45be      	cmp	lr, r7
 8001dc0:	f63f af6f 	bhi.w	8001ca2 <ASPEP_RXframeProcess+0x152>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001dc4:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8001dc8:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	f47f af68 	bne.w	8001ca2 <ASPEP_RXframeProcess+0x152>
 8001dd2:	e769      	b.n	8001ca8 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001dd4:	4288      	cmp	r0, r1
 8001dd6:	d898      	bhi.n	8001d0a <ASPEP_RXframeProcess+0x1ba>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001dd8:	45e6      	cmp	lr, ip
 8001dda:	d896      	bhi.n	8001d0a <ASPEP_RXframeProcess+0x1ba>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8001ddc:	45b8      	cmp	r8, r7
 8001dde:	d894      	bhi.n	8001d0a <ASPEP_RXframeProcess+0x1ba>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001de0:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
 8001de4:	f3c2 1202 	ubfx	r2, r2, #4, #3
              pHandle->ASPEP_State = ASPEP_IDLE;
 8001de8:	1aab      	subs	r3, r5, r2
 8001dea:	425d      	negs	r5, r3
 8001dec:	415d      	adcs	r5, r3
 8001dee:	e78c      	b.n	8001d0a <ASPEP_RXframeProcess+0x1ba>
 8001df0:	0800d374 	.word	0x0800d374
 8001df4:	0800d364 	.word	0x0800d364

08001df8 <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8001df8:	b510      	push	{r4, lr}
    /* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.
      * This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_
      * RXframeProcess
      * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be
      * configured after.*/
    switch (pHandle->ASPEP_TL_State)
 8001dfa:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 8001dfe:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8001e00:	b13b      	cbz	r3, 8001e12 <ASPEP_HWDataReceivedIT+0x1a>
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d104      	bne.n	8001e10 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001e06:	2200      	movs	r2, #0
 8001e08:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8001e0c:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
        break;
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8001e10:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8001e12:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8001e14:	4a1e      	ldr	r2, [pc, #120]	; (8001e90 <ASPEP_HWDataReceivedIT+0x98>)
 8001e16:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001e18:	5cd3      	ldrb	r3, [r2, r3]
 8001e1a:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8001e1e:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001e20:	5cd3      	ldrb	r3, [r2, r3]
 8001e22:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8001e26:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8001e28:	5cd3      	ldrb	r3, [r2, r3]
 8001e2a:	ea83 6111 	eor.w	r1, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8001e2e:	5c53      	ldrb	r3, [r2, r1]
 8001e30:	b95b      	cbnz	r3, 8001e4a <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8001e32:	7f03      	ldrb	r3, [r0, #28]
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	2b06      	cmp	r3, #6
 8001e3a:	6683      	str	r3, [r0, #104]	; 0x68
          switch (pHandle->rxPacketType)
 8001e3c:	d809      	bhi.n	8001e52 <ASPEP_HWDataReceivedIT+0x5a>
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d81e      	bhi.n	8001e80 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8001e42:	2301      	movs	r3, #1
 8001e44:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8001e48:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8001e50:	bd10      	pop	{r4, pc}
 8001e52:	2b09      	cmp	r3, #9
 8001e54:	d1f5      	bne.n	8001e42 <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8001e56:	8b83      	ldrh	r3, [r0, #28]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8001e5e:	b17b      	cbz	r3, 8001e80 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8001e60:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d30f      	bcc.n	8001e88 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8001e68:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 8001e6c:	6981      	ldr	r1, [r0, #24]
 8001e6e:	6940      	ldr	r0, [r0, #20]
 8001e70:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8001e74:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e76:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8001e7e:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8001e86:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8001e8e:	bd10      	pop	{r4, pc}
 8001e90:	0800d374 	.word	0x0800d374

08001e94 <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8001e94:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001e96:	2200      	movs	r2, #0
 8001e98:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001e9c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001e9e:	6940      	ldr	r0, [r0, #20]
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	311c      	adds	r1, #28
 8001ea4:	4718      	bx	r3
 8001ea6:	bf00      	nop

08001ea8 <_write>:
extern void indicateNormalOperation();
extern void turnOffAllLeds();
extern void turnOnLed(LedColor color);

int _write(int file, char *ptr, int len)
{
 8001ea8:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8001eaa:	230a      	movs	r3, #10
{
 8001eac:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8001eae:	4803      	ldr	r0, [pc, #12]	; (8001ebc <_write+0x14>)
 8001eb0:	b292      	uxth	r2, r2
 8001eb2:	f006 f94f 	bl	8008154 <HAL_UART_Transmit>
  return len;
}
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	bd10      	pop	{r4, pc}
 8001eba:	bf00      	nop
 8001ebc:	200009b8 	.word	0x200009b8

08001ec0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001ec0:	b500      	push	{lr}
 8001ec2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ec4:	2238      	movs	r2, #56	; 0x38
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	a806      	add	r0, sp, #24
 8001eca:	f008 fbf6 	bl	800a6ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ece:	2000      	movs	r0, #0
 8001ed0:	e9cd 0000 	strd	r0, r0, [sp]
 8001ed4:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8001ed8:	9004      	str	r0, [sp, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001eda:	f004 fb0b 	bl	80064f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ede:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8001f38 <SystemClock_Config+0x78>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ee2:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ee4:	2103      	movs	r1, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001ee6:	2206      	movs	r2, #6
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ee8:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001eec:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001eee:	2155      	movs	r1, #85	; 0x55
 8001ef0:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ef4:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001ef8:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001efc:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f00:	f004 fb7e 	bl	8006600 <HAL_RCC_OscConfig>
 8001f04:	b108      	cbz	r0, 8001f0a <SystemClock_Config+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f06:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f0a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8001f40 <SystemClock_Config+0x80>
 8001f0e:	ed8d 7b00 	vstr	d7, [sp]
 8001f12:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8001f48 <SystemClock_Config+0x88>
 8001f16:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f18:	2104      	movs	r1, #4
 8001f1a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f1c:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f20:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f22:	f004 fdf1 	bl	8006b08 <HAL_RCC_ClockConfig>
 8001f26:	b108      	cbz	r0, 8001f2c <SystemClock_Config+0x6c>
 8001f28:	b672      	cpsid	i
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <SystemClock_Config+0x6a>
  HAL_RCC_EnableCSS();
 8001f2c:	f004 ff28 	bl	8006d80 <HAL_RCC_EnableCSS>
}
 8001f30:	b015      	add	sp, #84	; 0x54
 8001f32:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f36:	bf00      	nop
 8001f38:	00000001 	.word	0x00000001
 8001f3c:	00010000 	.word	0x00010000
 8001f40:	0000000f 	.word	0x0000000f
 8001f44:	00000003 	.word	0x00000003
	...

08001f50 <main>:
{
 8001f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f54:	ed2d 8b06 	vpush	{d8-d10}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	2400      	movs	r4, #0
{
 8001f5a:	b0af      	sub	sp, #188	; 0xbc
  HAL_Init();
 8001f5c:	f003 f99a 	bl	8005294 <HAL_Init>
  SystemClock_Config();
 8001f60:	f7ff ffae 	bl	8001ec0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
 8001f68:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6c:	4db4      	ldr	r5, [pc, #720]	; (8002240 <main+0x2f0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6e:	9422      	str	r4, [sp, #136]	; 0x88
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f70:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOB, M1_PWM_EN_U_Pin | M1_PWM_EN_V_Pin | M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8001f72:	48b4      	ldr	r0, [pc, #720]	; (8002244 <main+0x2f4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001f7a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	9304      	str	r3, [sp, #16]
 8001f82:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f84:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001f86:	f043 0320 	orr.w	r3, r3, #32
 8001f8a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001f8c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001f8e:	f003 0320 	and.w	r3, r3, #32
 8001f92:	9305      	str	r3, [sp, #20]
 8001f94:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001f9e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	9306      	str	r3, [sp, #24]
 8001fa6:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001faa:	f043 0302 	orr.w	r3, r3, #2
 8001fae:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001fb0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001fb2:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOB, M1_PWM_EN_U_Pin | M1_PWM_EN_V_Pin | M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8001fb6:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOB, M1_PWM_EN_U_Pin | M1_PWM_EN_V_Pin | M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8001fba:	f44f 4160 	mov.w	r1, #57344	; 0xe000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbe:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOB, M1_PWM_EN_U_Pin | M1_PWM_EN_V_Pin | M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8001fc0:	f004 fa92 	bl	80064e8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001fc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fc8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001fcc:	489e      	ldr	r0, [pc, #632]	; (8002248 <main+0x2f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	9420      	str	r4, [sp, #128]	; 0x80
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001fd0:	a91e      	add	r1, sp, #120	; 0x78
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001fd2:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001fd6:	f004 f98f 	bl	80062f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin | M1_PWM_EN_V_Pin | M1_PWM_EN_W_Pin;
 8001fda:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe4:	4897      	ldr	r0, [pc, #604]	; (8002244 <main+0x2f4>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin | M1_PWM_EN_V_Pin | M1_PWM_EN_W_Pin;
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fea:	a91e      	add	r1, sp, #120	; 0x78
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin | M1_PWM_EN_V_Pin | M1_PWM_EN_W_Pin;
 8001fec:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff0:	f004 f982 	bl	80062f8 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ff4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	64ab      	str	r3, [r5, #72]	; 0x48
 8001ffc:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	9302      	str	r3, [sp, #8]
 8002004:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002006:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	64ab      	str	r3, [r5, #72]	; 0x48
 800200e:	6cab      	ldr	r3, [r5, #72]	; 0x48
  hadc1.Instance = ADC1;
 8002010:	4d8e      	ldr	r5, [pc, #568]	; (800224c <main+0x2fc>)
  ADC_MultiModeTypeDef multimode = {0};
 8002012:	9410      	str	r4, [sp, #64]	; 0x40
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002014:	f003 0301 	and.w	r3, r3, #1
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002018:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800201a:	9303      	str	r3, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800201c:	223c      	movs	r2, #60	; 0x3c
 800201e:	a81e      	add	r0, sp, #120	; 0x78
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002020:	9b03      	ldr	r3, [sp, #12]
  ADC_MultiModeTypeDef multimode = {0};
 8002022:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002026:	f008 fb48 	bl	800a6ba <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 800202a:	4621      	mov	r1, r4
 800202c:	2220      	movs	r2, #32
 800202e:	a816      	add	r0, sp, #88	; 0x58
 8002030:	f008 fb43 	bl	800a6ba <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8002034:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002038:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800203c:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  hadc1.Init.GainCompensation = 0;
 8002040:	612c      	str	r4, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002042:	83ac      	strh	r4, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002044:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002048:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800204c:	63ec      	str	r4, [r5, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800204e:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
  hadc1.Instance = ADC1;
 8002052:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002056:	2401      	movs	r4, #1
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002058:	2604      	movs	r6, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800205a:	4628      	mov	r0, r5
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800205c:	616c      	str	r4, [r5, #20]
  hadc1.Init.NbrOfConversion = 1;
 800205e:	622c      	str	r4, [r5, #32]
  hadc1.Instance = ADC1;
 8002060:	602b      	str	r3, [r5, #0]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8002062:	60ef      	str	r7, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002064:	61ae      	str	r6, [r5, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002066:	f003 f949 	bl	80052fc <HAL_ADC_Init>
 800206a:	b108      	cbz	r0, 8002070 <main+0x120>
 800206c:	b672      	cpsid	i
  while (1)
 800206e:	e7fe      	b.n	800206e <main+0x11e>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002070:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002072:	a910      	add	r1, sp, #64	; 0x40
 8002074:	4628      	mov	r0, r5
 8002076:	f003 ffab 	bl	8005fd0 <HAL_ADCEx_MultiModeConfigChannel>
 800207a:	b108      	cbz	r0, 8002080 <main+0x130>
 800207c:	b672      	cpsid	i
  while (1)
 800207e:	e7fe      	b.n	800207e <main+0x12e>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8002080:	ed9f ab67 	vldr	d10, [pc, #412]	; 8002220 <main+0x2d0>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002084:	4b72      	ldr	r3, [pc, #456]	; (8002250 <main+0x300>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002086:	f8ad 009c 	strh.w	r0, [sp, #156]	; 0x9c
  sConfigInjected.InjectedOffset = 0;
 800208a:	e9cd 6022 	strd	r6, r0, [sp, #136]	; 0x88
  sConfigInjected.QueueInjectedContext = DISABLE;
 800208e:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8002092:	f88d 00a8 	strb.w	r0, [sp, #168]	; 0xa8
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002096:	f04f 0a09 	mov.w	sl, #9
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800209a:	f04f 097f 	mov.w	r9, #127	; 0x7f
  sConfigInjected.InjectedNbrOfConversion = 2;
 800209e:	f04f 0802 	mov.w	r8, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80020a2:	a91e      	add	r1, sp, #120	; 0x78
 80020a4:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80020a6:	e9cd 3a1e 	strd	r3, sl, [sp, #120]	; 0x78
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80020aa:	ed8d ab28 	vstr	d10, [sp, #160]	; 0xa0
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80020ae:	9420      	str	r4, [sp, #128]	; 0x80
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80020b0:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
  sConfigInjected.InjectedNbrOfConversion = 2;
 80020b4:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80020b8:	f003 fc90 	bl	80059dc <HAL_ADCEx_InjectedConfigChannel>
 80020bc:	b108      	cbz	r0, 80020c2 <main+0x172>
 80020be:	b672      	cpsid	i
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <main+0x170>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 80020c2:	4a64      	ldr	r2, [pc, #400]	; (8002254 <main+0x304>)
 80020c4:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80020c8:	a91e      	add	r1, sp, #120	; 0x78
 80020ca:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 80020cc:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80020d0:	f003 fc84 	bl	80059dc <HAL_ADCEx_InjectedConfigChannel>
 80020d4:	b108      	cbz	r0, 80020da <main+0x18a>
 80020d6:	b672      	cpsid	i
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <main+0x188>
  sConfig.Channel = ADC_CHANNEL_1;
 80020da:	ed9f 9b53 	vldr	d9, [pc, #332]	; 8002228 <main+0x2d8>
 80020de:	ed9f 8b54 	vldr	d8, [pc, #336]	; 8002230 <main+0x2e0>
 80020e2:	4a5d      	ldr	r2, [pc, #372]	; (8002258 <main+0x308>)
 80020e4:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020e6:	4628      	mov	r0, r5
 80020e8:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_1;
 80020ea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80020ee:	ed8d 9b18 	vstr	d9, [sp, #96]	; 0x60
 80020f2:	ed8d 8b1a 	vstr	d8, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f6:	f003 fa05 	bl	8005504 <HAL_ADC_ConfigChannel>
 80020fa:	4683      	mov	fp, r0
 80020fc:	b108      	cbz	r0, 8002102 <main+0x1b2>
 80020fe:	b672      	cpsid	i
  while (1)
 8002100:	e7fe      	b.n	8002100 <main+0x1b0>
  hadc2.Instance = ADC2;
 8002102:	4d56      	ldr	r5, [pc, #344]	; (800225c <main+0x30c>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002104:	4601      	mov	r1, r0
 8002106:	223c      	movs	r2, #60	; 0x3c
 8002108:	a81e      	add	r0, sp, #120	; 0x78
 800210a:	f008 fad6 	bl	800a6ba <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 800210e:	2220      	movs	r2, #32
 8002110:	4659      	mov	r1, fp
 8002112:	a816      	add	r0, sp, #88	; 0x58
 8002114:	f008 fad1 	bl	800a6ba <memset>
  hadc2.Instance = ADC2;
 8002118:	4b51      	ldr	r3, [pc, #324]	; (8002260 <main+0x310>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800211a:	f8a5 b01c 	strh.w	fp, [r5, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800211e:	4628      	mov	r0, r5
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002120:	e9c5 bb01 	strd	fp, fp, [r5, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002124:	e9c5 b404 	strd	fp, r4, [r5, #16]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002128:	e9c5 bb0b 	strd	fp, fp, [r5, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800212c:	60ef      	str	r7, [r5, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800212e:	61ae      	str	r6, [r5, #24]
  hadc2.Init.NbrOfConversion = 1;
 8002130:	622c      	str	r4, [r5, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002132:	f885 b024 	strb.w	fp, [r5, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002136:	f885 b038 	strb.w	fp, [r5, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800213a:	f8c5 b03c 	str.w	fp, [r5, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800213e:	f885 b040 	strb.w	fp, [r5, #64]	; 0x40
  hadc2.Instance = ADC2;
 8002142:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002144:	f003 f8da 	bl	80052fc <HAL_ADC_Init>
 8002148:	b108      	cbz	r0, 800214e <main+0x1fe>
 800214a:	b672      	cpsid	i
  while (1)
 800214c:	e7fe      	b.n	800214c <main+0x1fc>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 800214e:	4b41      	ldr	r3, [pc, #260]	; (8002254 <main+0x304>)
  sConfigInjected.InjectedOffset = 0;
 8002150:	9023      	str	r0, [sp, #140]	; 0x8c
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002152:	f8ad 009c 	strh.w	r0, [sp, #156]	; 0x9c
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002156:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800215a:	f88d 00a8 	strb.w	r0, [sp, #168]	; 0xa8
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800215e:	a91e      	add	r1, sp, #120	; 0x78
 8002160:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8002162:	ed8d ab28 	vstr	d10, [sp, #160]	; 0xa0
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8002166:	e9cd a41f 	strd	sl, r4, [sp, #124]	; 0x7c
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800216a:	e9cd 9621 	strd	r9, r6, [sp, #132]	; 0x84
  sConfigInjected.InjectedNbrOfConversion = 2;
 800216e:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8002172:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002174:	f003 fc32 	bl	80059dc <HAL_ADCEx_InjectedConfigChannel>
 8002178:	b108      	cbz	r0, 800217e <main+0x22e>
 800217a:	b672      	cpsid	i
  while (1)
 800217c:	e7fe      	b.n	800217c <main+0x22c>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800217e:	4a39      	ldr	r2, [pc, #228]	; (8002264 <main+0x314>)
 8002180:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002184:	a91e      	add	r1, sp, #120	; 0x78
 8002186:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8002188:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800218c:	f003 fc26 	bl	80059dc <HAL_ADCEx_InjectedConfigChannel>
 8002190:	b108      	cbz	r0, 8002196 <main+0x246>
 8002192:	b672      	cpsid	i
  while (1)
 8002194:	e7fe      	b.n	8002194 <main+0x244>
  sConfig.Channel = ADC_CHANNEL_5;
 8002196:	a328      	add	r3, pc, #160	; (adr r3, 8002238 <main+0x2e8>)
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800219c:	a916      	add	r1, sp, #88	; 0x58
 800219e:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_5;
 80021a0:	ed8d 9b18 	vstr	d9, [sp, #96]	; 0x60
 80021a4:	ed8d 8b1a 	vstr	d8, [sp, #104]	; 0x68
 80021a8:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80021ac:	f003 f9aa 	bl	8005504 <HAL_ADC_ConfigChannel>
 80021b0:	b108      	cbz	r0, 80021b6 <main+0x266>
 80021b2:	b672      	cpsid	i
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <main+0x264>
  hcordic.Instance = CORDIC;
 80021b6:	482c      	ldr	r0, [pc, #176]	; (8002268 <main+0x318>)
 80021b8:	4b2c      	ldr	r3, [pc, #176]	; (800226c <main+0x31c>)
 80021ba:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80021bc:	f003 ff6e 	bl	800609c <HAL_CORDIC_Init>
 80021c0:	b108      	cbz	r0, 80021c6 <main+0x276>
 80021c2:	b672      	cpsid	i
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <main+0x274>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021c6:	2400      	movs	r4, #0
  htim1.Instance = TIM1;
 80021c8:	4d29      	ldr	r5, [pc, #164]	; (8002270 <main+0x320>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021ca:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021cc:	4621      	mov	r1, r4
 80021ce:	2234      	movs	r2, #52	; 0x34
 80021d0:	a81e      	add	r0, sp, #120	; 0x78
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021d2:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 80021d6:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021da:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 80021de:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 80021e2:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80021ea:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ee:	9408      	str	r4, [sp, #32]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80021f0:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021f2:	941c      	str	r4, [sp, #112]	; 0x70
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021f4:	f008 fa61 	bl	800a6ba <memset>
  htim1.Instance = TIM1;
 80021f8:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <main+0x324>)
 80021fa:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80021fc:	2620      	movs	r6, #32
 80021fe:	f640 3311 	movw	r3, #2833	; 0xb11
 8002202:	e9c5 6302 	strd	r6, r3, [r5, #8]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER)-1);
 8002206:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002208:	61ac      	str	r4, [r5, #24]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800220a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800220e:	2401      	movs	r4, #1
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002210:	4628      	mov	r0, r5
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8002212:	e9c5 3404 	strd	r3, r4, [r5, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002216:	f004 ffc3 	bl	80071a0 <HAL_TIM_Base_Init>
 800221a:	b368      	cbz	r0, 8002278 <main+0x328>
 800221c:	b672      	cpsid	i
  while (1)
 800221e:	e7fe      	b.n	800221e <main+0x2ce>
 8002220:	00000080 	.word	0x00000080
 8002224:	00000080 	.word	0x00000080
 8002228:	00000004 	.word	0x00000004
 800222c:	0000007f 	.word	0x0000007f
 8002230:	00000004 	.word	0x00000004
 8002234:	00000000 	.word	0x00000000
 8002238:	14f00020 	.word	0x14f00020
 800223c:	00000006 	.word	0x00000006
 8002240:	40021000 	.word	0x40021000
 8002244:	48000400 	.word	0x48000400
 8002248:	48000800 	.word	0x48000800
 800224c:	20000714 	.word	0x20000714
 8002250:	08600004 	.word	0x08600004
 8002254:	3ac04000 	.word	0x3ac04000
 8002258:	04300002 	.word	0x04300002
 800225c:	20000780 	.word	0x20000780
 8002260:	50000100 	.word	0x50000100
 8002264:	10c00010 	.word	0x10c00010
 8002268:	200007ec 	.word	0x200007ec
 800226c:	40020c00 	.word	0x40020c00
 8002270:	200008d4 	.word	0x200008d4
 8002274:	40012c00 	.word	0x40012c00
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002278:	4628      	mov	r0, r5
 800227a:	f005 f81b 	bl	80072b4 <HAL_TIM_PWM_Init>
 800227e:	b108      	cbz	r0, 8002284 <main+0x334>
 8002280:	b672      	cpsid	i
  while (1)
 8002282:	e7fe      	b.n	8002282 <main+0x332>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002284:	2206      	movs	r2, #6
 8002286:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002288:	a910      	add	r1, sp, #64	; 0x40
 800228a:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800228c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002290:	f005 f936 	bl	8007500 <HAL_TIM_SlaveConfigSynchro>
 8002294:	b108      	cbz	r0, 800229a <main+0x34a>
 8002296:	b672      	cpsid	i
  while (1)
 8002298:	e7fe      	b.n	8002298 <main+0x348>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229a:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800229c:	2270      	movs	r2, #112	; 0x70
 800229e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022a0:	a908      	add	r1, sp, #32
 80022a2:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80022a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022a8:	f005 fc12 	bl	8007ad0 <HAL_TIMEx_MasterConfigSynchronization>
 80022ac:	b108      	cbz	r0, 80022b2 <main+0x362>
 80022ae:	b672      	cpsid	i
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <main+0x360>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80022b2:	aa0c      	add	r2, sp, #48	; 0x30
 80022b4:	4621      	mov	r1, r4
 80022b6:	4628      	mov	r0, r5
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80022b8:	2601      	movs	r6, #1
 80022ba:	2701      	movs	r7, #1
 80022bc:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 80022c0:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80022c2:	f005 fc9d 	bl	8007c00 <HAL_TIMEx_ConfigBreakInput>
 80022c6:	4602      	mov	r2, r0
 80022c8:	b108      	cbz	r0, 80022ce <main+0x37e>
 80022ca:	b672      	cpsid	i
  while (1)
 80022cc:	e7fe      	b.n	80022cc <main+0x37c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ce:	f44f 61b1 	mov.w	r1, #1416	; 0x588
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022d2:	901c      	str	r0, [sp, #112]	; 0x70
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022d4:	2060      	movs	r0, #96	; 0x60
 80022d6:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80022da:	2600      	movs	r6, #0
 80022dc:	2700      	movs	r7, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022de:	a916      	add	r1, sp, #88	; 0x58
 80022e0:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022e2:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 80022e6:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022ea:	f005 faf3 	bl	80078d4 <HAL_TIM_PWM_ConfigChannel>
 80022ee:	b108      	cbz	r0, 80022f4 <main+0x3a4>
 80022f0:	b672      	cpsid	i
  while (1)
 80022f2:	e7fe      	b.n	80022f2 <main+0x3a2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022f4:	2204      	movs	r2, #4
 80022f6:	a916      	add	r1, sp, #88	; 0x58
 80022f8:	4628      	mov	r0, r5
 80022fa:	f005 faeb 	bl	80078d4 <HAL_TIM_PWM_ConfigChannel>
 80022fe:	b108      	cbz	r0, 8002304 <main+0x3b4>
 8002300:	b672      	cpsid	i
  while (1)
 8002302:	e7fe      	b.n	8002302 <main+0x3b2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002304:	2208      	movs	r2, #8
 8002306:	a916      	add	r1, sp, #88	; 0x58
 8002308:	4628      	mov	r0, r5
 800230a:	f005 fae3 	bl	80078d4 <HAL_TIM_PWM_ConfigChannel>
 800230e:	b108      	cbz	r0, 8002314 <main+0x3c4>
 8002310:	b672      	cpsid	i
  while (1)
 8002312:	e7fe      	b.n	8002312 <main+0x3c2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002314:	220c      	movs	r2, #12
 8002316:	a916      	add	r1, sp, #88	; 0x58
 8002318:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800231a:	f04f 0870 	mov.w	r8, #112	; 0x70
 800231e:	f44f 6931 	mov.w	r9, #2832	; 0xb10
 8002322:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002326:	f005 fad5 	bl	80078d4 <HAL_TIM_PWM_ConfigChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	b108      	cbz	r0, 8002332 <main+0x3e2>
 800232e:	b672      	cpsid	i
  while (1)
 8002330:	e7fe      	b.n	8002330 <main+0x3e0>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002332:	f44f 6200 	mov.w	r2, #2048	; 0x800
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002336:	932a      	str	r3, [sp, #168]	; 0xa8
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800233c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8002340:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002344:	2300      	movs	r3, #0
 8002346:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 800234a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800234e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002352:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 8002356:	2203      	movs	r2, #3
 8002358:	2300      	movs	r3, #0
 800235a:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800235e:	a91e      	add	r1, sp, #120	; 0x78
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002360:	2200      	movs	r2, #0
 8002362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002366:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002368:	e9cd 6728 	strd	r6, r7, [sp, #160]	; 0xa0
 800236c:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002370:	f005 fbf8 	bl	8007b64 <HAL_TIMEx_ConfigBreakDeadTime>
 8002374:	b108      	cbz	r0, 800237a <main+0x42a>
 8002376:	b672      	cpsid	i
  while (1)
 8002378:	e7fe      	b.n	8002378 <main+0x428>
  htim3.Instance = TIM3;
 800237a:	4c97      	ldr	r4, [pc, #604]	; (80025d8 <main+0x688>)
  HAL_TIM_MspPostInit(&htim1);
 800237c:	4897      	ldr	r0, [pc, #604]	; (80025dc <main+0x68c>)
 800237e:	f002 fcdb 	bl	8004d38 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002382:	2300      	movs	r3, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002384:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002388:	e9c4 3301 	strd	r3, r3, [r4, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 800238c:	931f      	str	r3, [sp, #124]	; 0x7c
 800238e:	9321      	str	r3, [sp, #132]	; 0x84
 8002390:	9323      	str	r3, [sp, #140]	; 0x8c
 8002392:	9325      	str	r3, [sp, #148]	; 0x94
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002394:	9318      	str	r3, [sp, #96]	; 0x60
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002396:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002398:	61a3      	str	r3, [r4, #24]
  htim3.Instance = TIM3;
 800239a:	4b91      	ldr	r3, [pc, #580]	; (80025e0 <main+0x690>)
 800239c:	6023      	str	r3, [r4, #0]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800239e:	2501      	movs	r5, #1
  htim3.Init.Period = M1_PULSE_NBR;
 80023a0:	f240 33ff 	movw	r3, #1023	; 0x3ff
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 80023a4:	270c      	movs	r7, #12
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023a6:	2603      	movs	r6, #3
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80023a8:	a91e      	add	r1, sp, #120	; 0x78
 80023aa:	4620      	mov	r0, r4
  htim3.Init.Period = M1_PULSE_NBR;
 80023ac:	60e3      	str	r3, [r4, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023ae:	961e      	str	r6, [sp, #120]	; 0x78
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023b0:	9520      	str	r5, [sp, #128]	; 0x80
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023b2:	9524      	str	r5, [sp, #144]	; 0x90
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 80023b4:	9722      	str	r7, [sp, #136]	; 0x88
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 80023b6:	9726      	str	r7, [sp, #152]	; 0x98
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80023b8:	f005 f804 	bl	80073c4 <HAL_TIM_Encoder_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	b108      	cbz	r0, 80023c4 <main+0x474>
 80023c0:	b672      	cpsid	i
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <main+0x472>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023c4:	4620      	mov	r0, r4
 80023c6:	a916      	add	r1, sp, #88	; 0x58
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c8:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ca:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023cc:	f005 fb80 	bl	8007ad0 <HAL_TIMEx_MasterConfigSynchronization>
 80023d0:	b108      	cbz	r0, 80023d6 <main+0x486>
 80023d2:	b672      	cpsid	i
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <main+0x484>
  huart2.Instance = USART2;
 80023d6:	4c83      	ldr	r4, [pc, #524]	; (80025e4 <main+0x694>)
  huart2.Init.BaudRate = 115200;
 80023d8:	4983      	ldr	r1, [pc, #524]	; (80025e8 <main+0x698>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023da:	62a0      	str	r0, [r4, #40]	; 0x28
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023dc:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023e0:	e9c4 0704 	strd	r0, r7, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e4:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023e8:	e9c4 0008 	strd	r0, r0, [r4, #32]
  huart2.Init.BaudRate = 115200;
 80023ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023f0:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 115200;
 80023f2:	e9c4 1300 	strd	r1, r3, [r4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023f6:	f005 ff73 	bl	80082e0 <HAL_UART_Init>
 80023fa:	4601      	mov	r1, r0
 80023fc:	b108      	cbz	r0, 8002402 <main+0x4b2>
 80023fe:	b672      	cpsid	i
  while (1)
 8002400:	e7fe      	b.n	8002400 <main+0x4b0>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002402:	4620      	mov	r0, r4
 8002404:	f005 fff6 	bl	80083f4 <HAL_UARTEx_SetTxFifoThreshold>
 8002408:	4601      	mov	r1, r0
 800240a:	b108      	cbz	r0, 8002410 <main+0x4c0>
 800240c:	b672      	cpsid	i
  while (1)
 800240e:	e7fe      	b.n	800240e <main+0x4be>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002410:	4620      	mov	r0, r4
 8002412:	f006 f831 	bl	8008478 <HAL_UARTEx_SetRxFifoThreshold>
 8002416:	b108      	cbz	r0, 800241c <main+0x4cc>
 8002418:	b672      	cpsid	i
  while (1)
 800241a:	e7fe      	b.n	800241a <main+0x4ca>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800241c:	4620      	mov	r0, r4
 800241e:	f005 ffcb 	bl	80083b8 <HAL_UARTEx_DisableFifoMode>
 8002422:	4604      	mov	r4, r0
 8002424:	b108      	cbz	r0, 800242a <main+0x4da>
 8002426:	b672      	cpsid	i
  while (1)
 8002428:	e7fe      	b.n	8002428 <main+0x4d8>
  MX_MotorControl_Init();
 800242a:	f000 ffff 	bl	800342c <MX_MotorControl_Init>
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 800242e:	9722      	str	r7, [sp, #136]	; 0x88
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8002430:	9726      	str	r7, [sp, #152]	; 0x98
  htim4.Instance = TIM4;
 8002432:	4f6e      	ldr	r7, [pc, #440]	; (80025ec <main+0x69c>)
 8002434:	4b6e      	ldr	r3, [pc, #440]	; (80025f0 <main+0x6a0>)
 8002436:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002438:	a91e      	add	r1, sp, #120	; 0x78
  htim4.Init.Period = M2_PULSE_NBR;
 800243a:	f641 73ff 	movw	r3, #8191	; 0x1fff
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800243e:	4638      	mov	r0, r7
  htim4.Init.Period = M2_PULSE_NBR;
 8002440:	60fb      	str	r3, [r7, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002442:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002446:	e9c7 4401 	strd	r4, r4, [r7, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 800244a:	941f      	str	r4, [sp, #124]	; 0x7c
 800244c:	9421      	str	r4, [sp, #132]	; 0x84
 800244e:	9423      	str	r4, [sp, #140]	; 0x8c
 8002450:	9425      	str	r4, [sp, #148]	; 0x94
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002452:	9418      	str	r4, [sp, #96]	; 0x60
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002454:	961e      	str	r6, [sp, #120]	; 0x78
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002456:	9520      	str	r5, [sp, #128]	; 0x80
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002458:	9524      	str	r5, [sp, #144]	; 0x90
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245a:	613c      	str	r4, [r7, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800245c:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800245e:	f004 ffb1 	bl	80073c4 <HAL_TIM_Encoder_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	b108      	cbz	r0, 800246a <main+0x51a>
 8002466:	b672      	cpsid	i
  while (1)
 8002468:	e7fe      	b.n	8002468 <main+0x518>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800246a:	4638      	mov	r0, r7
 800246c:	a916      	add	r1, sp, #88	; 0x58
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800246e:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002470:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002472:	f005 fb2d 	bl	8007ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8002476:	4607      	mov	r7, r0
 8002478:	b108      	cbz	r0, 800247e <main+0x52e>
 800247a:	b672      	cpsid	i
  while (1)
 800247c:	e7fe      	b.n	800247c <main+0x52c>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 800247e:	4631      	mov	r1, r6
 8002480:	462a      	mov	r2, r5
 8002482:	2026      	movs	r0, #38	; 0x26
 8002484:	f003 fe36 	bl	80060f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002488:	2026      	movs	r0, #38	; 0x26
 800248a:	f003 fe71 	bl	8006170 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800248e:	463a      	mov	r2, r7
 8002490:	4631      	mov	r1, r6
 8002492:	200b      	movs	r0, #11
 8002494:	f003 fe2e 	bl	80060f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002498:	200b      	movs	r0, #11
 800249a:	f003 fe69 	bl	8006170 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 800249e:	462a      	mov	r2, r5
 80024a0:	2104      	movs	r1, #4
 80024a2:	2018      	movs	r0, #24
 80024a4:	f003 fe26 	bl	80060f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80024a8:	2018      	movs	r0, #24
 80024aa:	f003 fe61 	bl	8006170 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80024ae:	463a      	mov	r2, r7
 80024b0:	4639      	mov	r1, r7
 80024b2:	2019      	movs	r0, #25
 80024b4:	f003 fe1e 	bl	80060f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80024b8:	2019      	movs	r0, #25
 80024ba:	f003 fe59 	bl	8006170 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80024be:	463a      	mov	r2, r7
 80024c0:	2102      	movs	r1, #2
 80024c2:	2012      	movs	r0, #18
 80024c4:	f003 fe16 	bl	80060f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80024c8:	2012      	movs	r0, #18
 80024ca:	f003 fe51 	bl	8006170 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80024ce:	463a      	mov	r2, r7
 80024d0:	4631      	mov	r1, r6
 80024d2:	201d      	movs	r0, #29
 80024d4:	f003 fe0e 	bl	80060f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024d8:	201d      	movs	r0, #29
 80024da:	f003 fe49 	bl	8006170 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80024de:	463a      	mov	r2, r7
 80024e0:	4631      	mov	r1, r6
 80024e2:	2028      	movs	r0, #40	; 0x28
 80024e4:	f003 fe06 	bl	80060f4 <HAL_NVIC_SetPriority>
  regulator->computeStabilization = computeStabilization;
 80024e8:	4e42      	ldr	r6, [pc, #264]	; (80025f4 <main+0x6a4>)
  encoder->getMecSpeed = getMecSpeed;
 80024ea:	4c43      	ldr	r4, [pc, #268]	; (80025f8 <main+0x6a8>)
 80024ec:	f8df b164 	ldr.w	fp, [pc, #356]	; 8002654 <main+0x704>
 80024f0:	f8df a164 	ldr.w	sl, [pc, #356]	; 8002658 <main+0x708>
 80024f4:	f8df 9164 	ldr.w	r9, [pc, #356]	; 800265c <main+0x70c>
        printf("Computing stabilize algorithm...\r\n");
 80024f8:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8002660 <main+0x710>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024fc:	2028      	movs	r0, #40	; 0x28
 80024fe:	f003 fe37 	bl	8006170 <HAL_NVIC_EnableIRQ>
  regulator->computeStabilization = computeStabilization;
 8002502:	4b3e      	ldr	r3, [pc, #248]	; (80025fc <main+0x6ac>)
  ENC_Init(&ENCODER_M2);
 8002504:	483e      	ldr	r0, [pc, #248]	; (8002600 <main+0x6b0>)
  regulator->computeStabilization = computeStabilization;
 8002506:	6033      	str	r3, [r6, #0]
  regulator->computeSwingUp = computeSwingUp;
 8002508:	4b3e      	ldr	r3, [pc, #248]	; (8002604 <main+0x6b4>)
 800250a:	6073      	str	r3, [r6, #4]
  ENC_Init(&ENCODER_M2);
 800250c:	f006 f878 	bl	8008600 <ENC_Init>
  encoder->getMecSpeed = getMecSpeed;
 8002510:	483d      	ldr	r0, [pc, #244]	; (8002608 <main+0x6b8>)
 8002512:	61e0      	str	r0, [r4, #28]
  encoder->getPendulumAngle = getPendulumAngle;
 8002514:	483d      	ldr	r0, [pc, #244]	; (800260c <main+0x6bc>)
 8002516:	6220      	str	r0, [r4, #32]
  encoder->getLegacyPendulumAngle = getLegacyPendulumAngle;
 8002518:	483d      	ldr	r0, [pc, #244]	; (8002610 <main+0x6c0>)
 800251a:	6260      	str	r0, [r4, #36]	; 0x24
  encoder->calculatePendulumVelocity = calculatePendulumVelocity;
 800251c:	483d      	ldr	r0, [pc, #244]	; (8002614 <main+0x6c4>)
 800251e:	6160      	str	r0, [r4, #20]
  errorHandling->getMotorStatus = getMotorStatus;
 8002520:	493d      	ldr	r1, [pc, #244]	; (8002618 <main+0x6c8>)
  encoder->calculatePendulumAcceleration = calculatePendulumAcceleration;
 8002522:	483e      	ldr	r0, [pc, #248]	; (800261c <main+0x6cc>)
 8002524:	61a0      	str	r0, [r4, #24]
  encoder->pendulum_angle = 0.0f;
 8002526:	2200      	movs	r2, #0
 8002528:	6022      	str	r2, [r4, #0]
  encoder->motor_speed = 0.0f;
 800252a:	60a2      	str	r2, [r4, #8]
  encoder->pendulum_velocity = 0.0f;
 800252c:	60e2      	str	r2, [r4, #12]
  encoder->pendulum_acceleration = 0.0f;
 800252e:	6062      	str	r2, [r4, #4]
  errorHandling->getMotorStatus = getMotorStatus;
 8002530:	4a3b      	ldr	r2, [pc, #236]	; (8002620 <main+0x6d0>)
 8002532:	604a      	str	r2, [r1, #4]
  errorHandling->faultCodeToString = faultCodeToString;
 8002534:	4a3b      	ldr	r2, [pc, #236]	; (8002624 <main+0x6d4>)
  led->indicateError = indicateError;
 8002536:	4b3c      	ldr	r3, [pc, #240]	; (8002628 <main+0x6d8>)
  errorHandling->faultCodeToString = faultCodeToString;
 8002538:	60ca      	str	r2, [r1, #12]
  errorHandling->getCurrentMotorState = getCurrentMotorState;
 800253a:	4a3c      	ldr	r2, [pc, #240]	; (800262c <main+0x6dc>)
 800253c:	608a      	str	r2, [r1, #8]
  led->indicateError = indicateError;
 800253e:	4a3c      	ldr	r2, [pc, #240]	; (8002630 <main+0x6e0>)
 8002540:	601a      	str	r2, [r3, #0]
  led->indicateWarning = indicateWarning;
 8002542:	4a3c      	ldr	r2, [pc, #240]	; (8002634 <main+0x6e4>)
 8002544:	605a      	str	r2, [r3, #4]
  led->indicateNormalOperation = indicateNormalOperation;
 8002546:	4a3c      	ldr	r2, [pc, #240]	; (8002638 <main+0x6e8>)
 8002548:	609a      	str	r2, [r3, #8]
  led->turnOffAllLeds = turnOffAllLeds;
 800254a:	4a3c      	ldr	r2, [pc, #240]	; (800263c <main+0x6ec>)
 800254c:	60da      	str	r2, [r3, #12]
  led->turnOnLed = turnOnLed;
 800254e:	4a3c      	ldr	r2, [pc, #240]	; (8002640 <main+0x6f0>)
 8002550:	611a      	str	r2, [r3, #16]
  MC_StartMotor1();
 8002552:	f000 f889 	bl	8002668 <MC_StartMotor1>
  MC_ProgramSpeedRampMotor1(0,0);
 8002556:	4639      	mov	r1, r7
 8002558:	4638      	mov	r0, r7
 800255a:	f000 f891 	bl	8002680 <MC_ProgramSpeedRampMotor1>
  HAL_Delay(2000);
 800255e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002562:	f002 feb9 	bl	80052d8 <HAL_Delay>
  printf("Aligned\r\n");
 8002566:	4837      	ldr	r0, [pc, #220]	; (8002644 <main+0x6f4>)
 8002568:	f008 fe80 	bl	800b26c <puts>
  int trig = 0;
 800256c:	463b      	mov	r3, r7
 800256e:	4f36      	ldr	r7, [pc, #216]	; (8002648 <main+0x6f8>)
	 encoder.pendulum_velocity = encoder.calculatePendulumVelocity();
 8002570:	6962      	ldr	r2, [r4, #20]
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	4790      	blx	r2
 8002576:	ed84 0a03 	vstr	s0, [r4, #12]
   encoder.pendulum_acceleration = encoder.calculatePendulumAcceleration();
 800257a:	69a2      	ldr	r2, [r4, #24]
 800257c:	4790      	blx	r2
	 if ((angle2 > pre_stabilize_limit) && (angle2 < post_stabilize_limit))
 800257e:	4b33      	ldr	r3, [pc, #204]	; (800264c <main+0x6fc>)
 8002580:	ed9b 7a00 	vldr	s14, [fp]
 8002584:	edd3 7a00 	vldr	s15, [r3]
   encoder.pendulum_acceleration = encoder.calculatePendulumAcceleration();
 8002588:	ed84 0a01 	vstr	s0, [r4, #4]
	 if ((angle2 > pre_stabilize_limit) && (angle2 < post_stabilize_limit))
 800258c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002594:	9b01      	ldr	r3, [sp, #4]
 8002596:	dd1c      	ble.n	80025d2 <main+0x682>
 8002598:	ed9a 7a00 	vldr	s14, [sl]
 800259c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a4:	d515      	bpl.n	80025d2 <main+0x682>
      if (trig == 0){
 80025a6:	b97b      	cbnz	r3, 80025c8 <main+0x678>
        printf("Computing stabilize algorithm...\r\n");
 80025a8:	4640      	mov	r0, r8
 80025aa:	f008 fe5f 	bl	800b26c <puts>
        printf("encoder.pendulum_angle = %f\r\n",encoder.pendulum_angle);
 80025ae:	6820      	ldr	r0, [r4, #0]
 80025b0:	f7fd fff2 	bl	8000598 <__aeabi_f2d>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4825      	ldr	r0, [pc, #148]	; (8002650 <main+0x700>)
 80025ba:	f008 fdd1 	bl	800b160 <iprintf>
        fflush(stdout);
 80025be:	f8d9 3000 	ldr.w	r3, [r9]
 80025c2:	6898      	ldr	r0, [r3, #8]
 80025c4:	f007 ff3c 	bl	800a440 <fflush>
		 regulator.computeStabilization();
 80025c8:	6833      	ldr	r3, [r6, #0]
 80025ca:	4798      	blx	r3
		 start_stabilization = 1;
 80025cc:	603d      	str	r5, [r7, #0]
 80025ce:	2301      	movs	r3, #1
 80025d0:	e7ce      	b.n	8002570 <main+0x620>
    	 start_stabilization = 0;
 80025d2:	2200      	movs	r2, #0
 80025d4:	603a      	str	r2, [r7, #0]
 80025d6:	e7cb      	b.n	8002570 <main+0x620>
 80025d8:	20000920 	.word	0x20000920
 80025dc:	200008d4 	.word	0x200008d4
 80025e0:	40000400 	.word	0x40000400
 80025e4:	200009b8 	.word	0x200009b8
 80025e8:	40004400 	.word	0x40004400
 80025ec:	2000096c 	.word	0x2000096c
 80025f0:	40000800 	.word	0x40000800
 80025f4:	20000a5c 	.word	0x20000a5c
 80025f8:	200006d8 	.word	0x200006d8
 80025fc:	080014bd 	.word	0x080014bd
 8002600:	20000174 	.word	0x20000174
 8002604:	080015c1 	.word	0x080015c1
 8002608:	08000ff1 	.word	0x08000ff1
 800260c:	08001009 	.word	0x08001009
 8002610:	08001079 	.word	0x08001079
 8002614:	080010b9 	.word	0x080010b9
 8002618:	20000700 	.word	0x20000700
 800261c:	0800114d 	.word	0x0800114d
 8002620:	08001339 	.word	0x08001339
 8002624:	080011c1 	.word	0x080011c1
 8002628:	20000a48 	.word	0x20000a48
 800262c:	080014b5 	.word	0x080014b5
 8002630:	08001795 	.word	0x08001795
 8002634:	080017a1 	.word	0x080017a1
 8002638:	080017ad 	.word	0x080017ad
 800263c:	080017b9 	.word	0x080017b9
 8002640:	080017c5 	.word	0x080017c5
 8002644:	0800d474 	.word	0x0800d474
 8002648:	20000a64 	.word	0x20000a64
 800264c:	200006d0 	.word	0x200006d0
 8002650:	0800d4a4 	.word	0x0800d4a4
 8002654:	20000014 	.word	0x20000014
 8002658:	20000010 	.word	0x20000010
 800265c:	200004d4 	.word	0x200004d4
 8002660:	0800d480 	.word	0x0800d480

08002664 <Error_Handler>:
 8002664:	b672      	cpsid	i
  while (1)
 8002666:	e7fe      	b.n	8002666 <Error_Handler+0x2>

08002668 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8002668:	4b01      	ldr	r3, [pc, #4]	; (8002670 <MC_StartMotor1+0x8>)
 800266a:	6818      	ldr	r0, [r3, #0]
 800266c:	f000 b89c 	b.w	80027a8 <MCI_StartMotor>
 8002670:	20001c60 	.word	0x20001c60

08002674 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8002674:	4b01      	ldr	r3, [pc, #4]	; (800267c <MC_StopMotor1+0x8>)
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	f000 b8ac 	b.w	80027d4 <MCI_StopMotor>
 800267c:	20001c60 	.word	0x20001c60

08002680 <MC_ProgramSpeedRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
{
 8002680:	b410      	push	{r4}
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8002682:	4c04      	ldr	r4, [pc, #16]	; (8002694 <MC_ProgramSpeedRampMotor1+0x14>)
{
 8002684:	4603      	mov	r3, r0
 8002686:	460a      	mov	r2, r1
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8002688:	6820      	ldr	r0, [r4, #0]
}
 800268a:	f85d 4b04 	ldr.w	r4, [sp], #4
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 800268e:	4619      	mov	r1, r3
 8002690:	f000 b820 	b.w	80026d4 <MCI_ExecSpeedRamp>
 8002694:	20001c60 	.word	0x20001c60

08002698 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8002698:	4b01      	ldr	r3, [pc, #4]	; (80026a0 <MC_GetSTMStateMotor1+0x8>)
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	f000 b87e 	b.w	800279c <MCI_GetSTMState>
 80026a0:	20001c60 	.word	0x20001c60

080026a4 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */
__weak uint8_t MC_ProfilerCommand (uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return MCP_CMD_UNKNOWN;
}
 80026a4:	2002      	movs	r0, #2
 80026a6:	4770      	bx	lr

080026a8 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop

080026ac <MC_APP_PostMediumFrequencyHook_M1>:
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop

080026b0 <MCI_Init>:
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80026b0:	f04f 0c00 	mov.w	ip, #0
    pHandle->pFOCVars = pFOCVars;
 80026b4:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pPWM = pPWMHandle;
 80026b8:	6083      	str	r3, [r0, #8]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80026ba:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = 0;
 80026be:	f8c0 c00e 	str.w	ip, [r0, #14]
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
 80026c2:	f8a0 c016 	strh.w	ip, [r0, #22]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 80026c6:	f880 c01e 	strb.w	ip, [r0, #30]
    pHandle->DirectCommand = MCI_NO_COMMAND;
 80026ca:	f8a0 c018 	strh.w	ip, [r0, #24]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 80026ce:	f8c0 c01a 	str.w	ip, [r0, #26]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80026d2:	4770      	bx	lr

080026d4 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80026d4:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80026d8:	f240 3301 	movw	r3, #769	; 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80026dc:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 80026e0:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 80026e2:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80026e4:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80026e6:	4770      	bx	lr

080026e8 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80026e8:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80026ec:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80026f0:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 80026f4:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 80026f6:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80026f8:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80026fa:	4770      	bx	lr

080026fc <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 80026fc:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 80026fe:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002700:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8002704:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 8002706:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800270a:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800270c:	b002      	add	sp, #8
 800270e:	4770      	bx	lr

08002710 <MCI_FaultProcessing>:
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8002710:	8b43      	ldrh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 8002712:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8002716:	430b      	orrs	r3, r1
 8002718:	ea23 0302 	bic.w	r3, r3, r2
  pHandle->PastFaults |= hSetErrors;
 800271c:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8002720:	8343      	strh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 8002722:	8381      	strh	r1, [r0, #28]

  return;
}
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop

08002728 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8002728:	7f83      	ldrb	r3, [r0, #30]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d000      	beq.n	8002730 <MCI_ExecBufferedCommands+0x8>
 800272e:	4770      	bx	lr
{
 8002730:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8002732:	7b02      	ldrb	r2, [r0, #12]
 8002734:	2a02      	cmp	r2, #2
 8002736:	4604      	mov	r4, r0
 8002738:	d006      	beq.n	8002748 <MCI_ExecBufferedCommands+0x20>
 800273a:	2a03      	cmp	r2, #3
 800273c:	d026      	beq.n	800278c <MCI_ExecBufferedCommands+0x64>
 800273e:	2a01      	cmp	r2, #1
 8002740:	d015      	beq.n	800276e <MCI_ExecBufferedCommands+0x46>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8002742:	2303      	movs	r3, #3
 8002744:	77a3      	strb	r3, [r4, #30]
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8002746:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002748:	6843      	ldr	r3, [r0, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8002750:	6800      	ldr	r0, [r0, #0]
 8002752:	2104      	movs	r1, #4
 8002754:	f007 fcba 	bl	800a0cc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8002758:	8ae2      	ldrh	r2, [r4, #22]
 800275a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 800275e:	6820      	ldr	r0, [r4, #0]
 8002760:	f007 fcb8 	bl	800a0d4 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8002764:	2800      	cmp	r0, #0
 8002766:	d0ec      	beq.n	8002742 <MCI_ExecBufferedCommands+0x1a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8002768:	2302      	movs	r3, #2
 800276a:	77a3      	strb	r3, [r4, #30]
}
 800276c:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800276e:	6843      	ldr	r3, [r0, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8002776:	6800      	ldr	r0, [r0, #0]
 8002778:	2103      	movs	r1, #3
 800277a:	f007 fca7 	bl	800a0cc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 800277e:	8ae2      	ldrh	r2, [r4, #22]
 8002780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002784:	6820      	ldr	r0, [r4, #0]
 8002786:	f007 fca5 	bl	800a0d4 <STC_ExecRamp>
          break;
 800278a:	e7eb      	b.n	8002764 <MCI_ExecBufferedCommands+0x3c>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800278c:	6842      	ldr	r2, [r0, #4]
 800278e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8002792:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8002796:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 8002798:	e7e6      	b.n	8002768 <MCI_ExecBufferedCommands+0x40>
 800279a:	bf00      	nop

0800279c <MCI_GetSTMState>:
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
  return (pHandle->State);
}
 800279c:	7e40      	ldrb	r0, [r0, #25]
 800279e:	4770      	bx	lr

080027a0 <MCI_GetOccurredFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->PastFaults);
}
 80027a0:	8b80      	ldrh	r0, [r0, #28]
 80027a2:	4770      	bx	lr

080027a4 <MCI_GetCurrentFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->CurrentFaults);
}
 80027a4:	8b40      	ldrh	r0, [r0, #26]
 80027a6:	4770      	bx	lr

080027a8 <MCI_StartMotor>:
{
 80027a8:	b510      	push	{r4, lr}
 80027aa:	4604      	mov	r4, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80027ac:	f7ff fff6 	bl	800279c <MCI_GetSTMState>
 80027b0:	b108      	cbz	r0, 80027b6 <MCI_StartMotor+0xe>
    RetVal = false;
 80027b2:	2000      	movs	r0, #0
}
 80027b4:	bd10      	pop	{r4, pc}
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80027b6:	4620      	mov	r0, r4
 80027b8:	f7ff fff2 	bl	80027a0 <MCI_GetOccurredFaults>
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80027bc:	2800      	cmp	r0, #0
 80027be:	d1f8      	bne.n	80027b2 <MCI_StartMotor+0xa>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7ff ffef 	bl	80027a4 <MCI_GetCurrentFaults>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80027c6:	2800      	cmp	r0, #0
 80027c8:	d1f3      	bne.n	80027b2 <MCI_StartMotor+0xa>
    pHandle->DirectCommand = MCI_START;
 80027ca:	2001      	movs	r0, #1
 80027cc:	7620      	strb	r0, [r4, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80027ce:	77a0      	strb	r0, [r4, #30]
}
 80027d0:	bd10      	pop	{r4, pc}
 80027d2:	bf00      	nop

080027d4 <MCI_StopMotor>:
{
 80027d4:	b538      	push	{r3, r4, r5, lr}
 80027d6:	4605      	mov	r5, r0
  State = MCI_GetSTMState(pHandle);
 80027d8:	f7ff ffe0 	bl	800279c <MCI_GetSTMState>
  if (IDLE == State  || ICLWAIT == State)
 80027dc:	b150      	cbz	r0, 80027f4 <MCI_StopMotor+0x20>
 80027de:	f1b0 040c 	subs.w	r4, r0, #12
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80027e2:	4628      	mov	r0, r5
  if (IDLE == State  || ICLWAIT == State)
 80027e4:	bf18      	it	ne
 80027e6:	2401      	movne	r4, #1
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80027e8:	f7ff ffda 	bl	80027a0 <MCI_GetOccurredFaults>
 80027ec:	b140      	cbz	r0, 8002800 <MCI_StopMotor+0x2c>
    RetVal = false;
 80027ee:	2400      	movs	r4, #0
}
 80027f0:	4620      	mov	r0, r4
 80027f2:	bd38      	pop	{r3, r4, r5, pc}
    status = false;
 80027f4:	4604      	mov	r4, r0
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80027f6:	4628      	mov	r0, r5
 80027f8:	f7ff ffd2 	bl	80027a0 <MCI_GetOccurredFaults>
 80027fc:	2800      	cmp	r0, #0
 80027fe:	d1f6      	bne.n	80027ee <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8002800:	4628      	mov	r0, r5
 8002802:	f7ff ffcf 	bl	80027a4 <MCI_GetCurrentFaults>
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002806:	2800      	cmp	r0, #0
 8002808:	d1f1      	bne.n	80027ee <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800280a:	2c00      	cmp	r4, #0
 800280c:	d0ef      	beq.n	80027ee <MCI_StopMotor+0x1a>
    pHandle->DirectCommand = MCI_STOP;
 800280e:	2305      	movs	r3, #5
 8002810:	762b      	strb	r3, [r5, #24]
    RetVal = true;
 8002812:	e7ed      	b.n	80027f0 <MCI_StopMotor+0x1c>

08002814 <MCI_FaultAcknowledged>:
{
 8002814:	b510      	push	{r4, lr}
 8002816:	4604      	mov	r4, r0
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8002818:	f7ff ffc0 	bl	800279c <MCI_GetSTMState>
 800281c:	280b      	cmp	r0, #11
 800281e:	d001      	beq.n	8002824 <MCI_FaultAcknowledged+0x10>
    RetVal = false;
 8002820:	2000      	movs	r0, #0
}
 8002822:	bd10      	pop	{r4, pc}
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8002824:	4620      	mov	r0, r4
 8002826:	f7ff ffbd 	bl	80027a4 <MCI_GetCurrentFaults>
 800282a:	2800      	cmp	r0, #0
 800282c:	d1f8      	bne.n	8002820 <MCI_FaultAcknowledged+0xc>
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 800282e:	2302      	movs	r3, #2
 8002830:	7623      	strb	r3, [r4, #24]
    pHandle->PastFaults = MC_NO_FAULTS;
 8002832:	83a0      	strh	r0, [r4, #28]
    RetVal = true;
 8002834:	2001      	movs	r0, #1
}
 8002836:	bd10      	pop	{r4, pc}

08002838 <MCI_GetFaultState>:
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8002838:	8b83      	ldrh	r3, [r0, #28]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 800283a:	8b40      	ldrh	r0, [r0, #26]

  return (LocalFaultState);
}
 800283c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop

08002844 <MCI_GetControlMode>:
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8002844:	7fc0      	ldrb	r0, [r0, #31]
 8002846:	4770      	bx	lr

08002848 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8002848:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop

08002850 <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 8002850:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop

08002858 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8002858:	8ac0      	ldrh	r0, [r0, #22]
 800285a:	4770      	bx	lr

0800285c <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 800285c:	6800      	ldr	r0, [r0, #0]
 800285e:	f007 bc7d 	b.w	800a15c <STC_StopRamp>
 8002862:	bf00      	nop

08002864 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8002864:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8002866:	6800      	ldr	r0, [r0, #0]
 8002868:	f007 fc1e 	bl	800a0a8 <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (temp_speed);
}
 800286c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8002870:	f007 bbba 	b.w	8009fe8 <SPD_GetAvrgMecSpeedUnit>

08002874 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8002874:	6800      	ldr	r0, [r0, #0]
 8002876:	f007 bc21 	b.w	800a0bc <STC_GetMecSpeedRefUnit>
 800287a:	bf00      	nop

0800287c <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 800287c:	6842      	ldr	r2, [r0, #4]
 800287e:	6810      	ldr	r0, [r2, #0]
 8002880:	2300      	movs	r3, #0
 8002882:	b282      	uxth	r2, r0
 8002884:	f362 030f 	bfi	r3, r2, #0, #16
 8002888:	0c00      	lsrs	r0, r0, #16
 800288a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800288e:	b082      	sub	sp, #8
#endif
}
 8002890:	4618      	mov	r0, r3
 8002892:	b002      	add	sp, #8
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop

08002898 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 8002898:	6842      	ldr	r2, [r0, #4]
 800289a:	6850      	ldr	r0, [r2, #4]
 800289c:	2300      	movs	r3, #0
 800289e:	b282      	uxth	r2, r0
 80028a0:	f362 030f 	bfi	r3, r2, #0, #16
 80028a4:	0c00      	lsrs	r0, r0, #16
 80028a6:	f360 431f 	bfi	r3, r0, #16, #16
{
 80028aa:	b082      	sub	sp, #8
#endif
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	b002      	add	sp, #8
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop

080028b4 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 80028b4:	6842      	ldr	r2, [r0, #4]
 80028b6:	68d0      	ldr	r0, [r2, #12]
 80028b8:	2300      	movs	r3, #0
 80028ba:	b282      	uxth	r2, r0
 80028bc:	f362 030f 	bfi	r3, r2, #0, #16
 80028c0:	0c00      	lsrs	r0, r0, #16
 80028c2:	f360 431f 	bfi	r3, r0, #16, #16
{
 80028c6:	b082      	sub	sp, #8
#endif
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	b002      	add	sp, #8
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop

080028d0 <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 80028d0:	6842      	ldr	r2, [r0, #4]
 80028d2:	6910      	ldr	r0, [r2, #16]
 80028d4:	2300      	movs	r3, #0
 80028d6:	b282      	uxth	r2, r0
 80028d8:	f362 030f 	bfi	r3, r2, #0, #16
 80028dc:	0c00      	lsrs	r0, r0, #16
 80028de:	f360 431f 	bfi	r3, r0, #16, #16
{
 80028e2:	b082      	sub	sp, #8
#endif
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	b002      	add	sp, #8
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop

080028ec <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 80028ec:	6842      	ldr	r2, [r0, #4]
 80028ee:	f8d2 0016 	ldr.w	r0, [r2, #22]
 80028f2:	2300      	movs	r3, #0
 80028f4:	b282      	uxth	r2, r0
 80028f6:	f362 030f 	bfi	r3, r2, #0, #16
 80028fa:	0c00      	lsrs	r0, r0, #16
 80028fc:	f360 431f 	bfi	r3, r0, #16, #16
{
 8002900:	b082      	sub	sp, #8
#endif
}
 8002902:	4618      	mov	r0, r3
 8002904:	b002      	add	sp, #8
 8002906:	4770      	bx	lr

08002908 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8002908:	6842      	ldr	r2, [r0, #4]
 800290a:	f8d2 001a 	ldr.w	r0, [r2, #26]
 800290e:	2300      	movs	r3, #0
 8002910:	b282      	uxth	r2, r0
 8002912:	f362 030f 	bfi	r3, r2, #0, #16
 8002916:	0c00      	lsrs	r0, r0, #16
 8002918:	f360 431f 	bfi	r3, r0, #16, #16
{
 800291c:	b082      	sub	sp, #8
#endif
}
 800291e:	4618      	mov	r0, r3
 8002920:	b002      	add	sp, #8
 8002922:	4770      	bx	lr

08002924 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8002924:	6843      	ldr	r3, [r0, #4]
#endif
}
 8002926:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 800292a:	4770      	bx	lr

0800292c <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 800292c:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 800292e:	e9d0 0400 	ldrd	r0, r4, [r0]
 8002932:	f007 fc45 	bl	800a1c0 <STC_GetDefaultIqdref>
 8002936:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800293a:	8220      	strh	r0, [r4, #16]
 800293c:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800293e:	bd10      	pop	{r4, pc}

08002940 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8002940:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8002944:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 8002946:	fb13 f201 	smulbb	r2, r3, r1
{
 800294a:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800294e:	fb10 f101 	smulbb	r1, r0, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8002952:	4250      	negs	r0, r2
 8002954:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8002958:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800295c:	b084      	sub	sp, #16
  if (wbeta_tmp > INT16_MAX)
 800295e:	da05      	bge.n	800296c <MCM_Clarke+0x2c>
 8002960:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8002962:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8002966:	da0c      	bge.n	8002982 <MCM_Clarke+0x42>
 8002968:	4a09      	ldr	r2, [pc, #36]	; (8002990 <MCM_Clarke+0x50>)
 800296a:	e001      	b.n	8002970 <MCM_Clarke+0x30>
 800296c:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
  }

  return (Output);
 8002970:	b29b      	uxth	r3, r3
 8002972:	2000      	movs	r0, #0
 8002974:	f363 000f 	bfi	r0, r3, #0, #16
 8002978:	b293      	uxth	r3, r2
 800297a:	f363 401f 	bfi	r0, r3, #16, #16
}
 800297e:	b004      	add	sp, #16
 8002980:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8002982:	4803      	ldr	r0, [pc, #12]	; (8002990 <MCM_Clarke+0x50>)
 8002984:	b20a      	sxth	r2, r1
 8002986:	4282      	cmp	r2, r0
 8002988:	bfb8      	it	lt
 800298a:	4602      	movlt	r2, r0
 800298c:	e7f0      	b.n	8002970 <MCM_Clarke+0x30>
 800298e:	bf00      	nop
 8002990:	ffff8001 	.word	0xffff8001

08002994 <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <MCM_Trig_Functions+0x28>)
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8002996:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 800299a:	f04f 1260 	mov.w	r2, #6291552	; 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 800299e:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 80029a2:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 80029a4:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 80029a6:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
 80029a8:	2000      	movs	r0, #0
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	f362 000f 	bfi	r0, r2, #0, #16
 80029b0:	0c1b      	lsrs	r3, r3, #16
{
 80029b2:	b082      	sub	sp, #8
  return (CosSin.Components); //cstat !UNION-type-punning
 80029b4:	f363 401f 	bfi	r0, r3, #16, #16
}
 80029b8:	b002      	add	sp, #8
 80029ba:	4770      	bx	lr
 80029bc:	40020c00 	.word	0x40020c00

080029c0 <MCM_Park>:
{
 80029c0:	b530      	push	{r4, r5, lr}
 80029c2:	b085      	sub	sp, #20
 80029c4:	4603      	mov	r3, r0
 80029c6:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80029c8:	4608      	mov	r0, r1
 80029ca:	141c      	asrs	r4, r3, #16
{
 80029cc:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80029ce:	f7ff ffe1 	bl	8002994 <MCM_Trig_Functions>
 80029d2:	b22d      	sxth	r5, r5
 80029d4:	fa0f fc80 	sxth.w	ip, r0
 80029d8:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 80029da:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80029de:	fb04 1113 	mls	r1, r4, r3, r1
  if (wqd_tmp > INT16_MAX)
 80029e2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80029e6:	da05      	bge.n	80029f4 <MCM_Park+0x34>
 80029e8:	13ca      	asrs	r2, r1, #15
  else if (wqd_tmp < (-32768))
 80029ea:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 80029ee:	da22      	bge.n	8002a36 <MCM_Park+0x76>
 80029f0:	4914      	ldr	r1, [pc, #80]	; (8002a44 <MCM_Park+0x84>)
 80029f2:	e001      	b.n	80029f8 <MCM_Park+0x38>
 80029f4:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 80029f8:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80029fc:	fb05 4403 	mla	r4, r5, r3, r4
  if (wqd_tmp > INT16_MAX)
 8002a00:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002a04:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 8002a08:	da04      	bge.n	8002a14 <MCM_Park+0x54>
  else if (wqd_tmp < (-32768))
 8002a0a:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8002a0e:	da0c      	bge.n	8002a2a <MCM_Park+0x6a>
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <MCM_Park+0x84>)
 8002a12:	e001      	b.n	8002a18 <MCM_Park+0x58>
 8002a14:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return (Output);
 8002a18:	b28a      	uxth	r2, r1
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f362 000f 	bfi	r0, r2, #0, #16
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	f363 401f 	bfi	r0, r3, #16, #16
}
 8002a26:	b005      	add	sp, #20
 8002a28:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 8002a2a:	4806      	ldr	r0, [pc, #24]	; (8002a44 <MCM_Park+0x84>)
 8002a2c:	b213      	sxth	r3, r2
 8002a2e:	4283      	cmp	r3, r0
 8002a30:	bfb8      	it	lt
 8002a32:	4603      	movlt	r3, r0
 8002a34:	e7f0      	b.n	8002a18 <MCM_Park+0x58>
    hqd_tmp = ((int16_t)wqd_tmp);
 8002a36:	4903      	ldr	r1, [pc, #12]	; (8002a44 <MCM_Park+0x84>)
 8002a38:	b212      	sxth	r2, r2
 8002a3a:	4291      	cmp	r1, r2
 8002a3c:	bfb8      	it	lt
 8002a3e:	4611      	movlt	r1, r2
 8002a40:	e7da      	b.n	80029f8 <MCM_Park+0x38>
 8002a42:	bf00      	nop
 8002a44:	ffff8001 	.word	0xffff8001

08002a48 <MCM_Rev_Park>:
{
 8002a48:	b530      	push	{r4, r5, lr}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8002a50:	4608      	mov	r0, r1
{
 8002a52:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8002a54:	f7ff ff9e 	bl	8002994 <MCM_Trig_Functions>
 8002a58:	1424      	asrs	r4, r4, #16
 8002a5a:	1402      	asrs	r2, r0, #16
 8002a5c:	b22d      	sxth	r5, r5
 8002a5e:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8002a60:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8002a64:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8002a68:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8002a6c:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 8002a70:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8002a74:	2000      	movs	r0, #0
 8002a76:	f363 000f 	bfi	r0, r3, #0, #16
 8002a7a:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8002a7e:	f364 401f 	bfi	r0, r4, #16, #16
}
 8002a82:	b005      	add	sp, #20
 8002a84:	bd30      	pop	{r4, r5, pc}
 8002a86:	bf00      	nop

08002a88 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	dd09      	ble.n	8002aa0 <MCM_Sqrt+0x18>
 8002a8c:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 8002a8e:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <MCM_Sqrt+0x1c>)
 8002a90:	f240 1269 	movw	r2, #361	; 0x169
 8002a94:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8002a96:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8002a98:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002a9a:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 8002a9c:	b662      	cpsie	i
}
 8002a9e:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8002aa0:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8002aa2:	4770      	bx	lr
 8002aa4:	40020c00 	.word	0x40020c00

08002aa8 <FOC_Clear>:
  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8002aa8:	2226      	movs	r2, #38	; 0x26
{
 8002aaa:	b538      	push	{r3, r4, r5, lr}
 8002aac:	fb00 f202 	mul.w	r2, r0, r2
 8002ab0:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 8002ab2:	2400      	movs	r4, #0
 8002ab4:	509c      	str	r4, [r3, r2]
{
 8002ab6:	4605      	mov	r5, r0
 8002ab8:	f102 0108 	add.w	r1, r2, #8
 8002abc:	1898      	adds	r0, r3, r2
 8002abe:	3210      	adds	r2, #16
 8002ac0:	4419      	add	r1, r3
 8002ac2:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002ac4:	4a11      	ldr	r2, [pc, #68]	; (8002b0c <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8002ac6:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002ac8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8002acc:	604c      	str	r4, [r1, #4]
 8002ace:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 8002ad0:	f8c3 4006 	str.w	r4, [r3, #6]
 8002ad4:	f8c3 400a 	str.w	r4, [r3, #10]
 8002ad8:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002adc:	4621      	mov	r1, r4
 8002ade:	f006 f97f 	bl	8008de0 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <FOC_Clear+0x68>)
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002aea:	f006 f979 	bl	8008de0 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <FOC_Clear+0x6c>)
 8002af0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002af4:	f007 fada 	bl	800a0ac <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002af8:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <FOC_Clear+0x70>)
 8002afa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8002afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002b02:	f000 bdfb 	b.w	80036fc <PWMC_SwitchOffPWM>
 8002b06:	bf00      	nop
 8002b08:	20000a9c 	.word	0x20000a9c
 8002b0c:	200003e4 	.word	0x200003e4
 8002b10:	200003e0 	.word	0x200003e0
 8002b14:	200003e8 	.word	0x200003e8
 8002b18:	20000ad0 	.word	0x20000ad0

08002b1c <MCboot>:
  if (MC_NULL == pMCIList)
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	d06e      	beq.n	8002bfe <MCboot+0xe2>
{
 8002b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bMCBootCompleted = (uint8_t )0;
 8002b24:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8002c44 <MCboot+0x128>
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002b28:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8002c48 <MCboot+0x12c>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8002b2c:	4d34      	ldr	r5, [pc, #208]	; (8002c00 <MCboot+0xe4>)
 8002b2e:	4e35      	ldr	r6, [pc, #212]	; (8002c04 <MCboot+0xe8>)
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8002b30:	4f35      	ldr	r7, [pc, #212]	; (8002c08 <MCboot+0xec>)
{
 8002b32:	b083      	sub	sp, #12
    bMCBootCompleted = (uint8_t )0;
 8002b34:	f04f 0800 	mov.w	r8, #0
 8002b38:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002b3a:	4834      	ldr	r0, [pc, #208]	; (8002c0c <MCboot+0xf0>)
 8002b3c:	f8cb 0000 	str.w	r0, [fp]
    bMCBootCompleted = (uint8_t )0;
 8002b40:	f889 8000 	strb.w	r8, [r9]
    R3_2_Init(&PWM_Handle_M1);
 8002b44:	f006 fd88 	bl	8009658 <R3_2_Init>
    ASPEP_start(&aspepOverUartA);
 8002b48:	4831      	ldr	r0, [pc, #196]	; (8002c10 <MCboot+0xf4>)
 8002b4a:	f7fe fe51 	bl	80017f0 <ASPEP_start>
    startTimers();
 8002b4e:	f006 f9ef 	bl	8008f30 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002b52:	4830      	ldr	r0, [pc, #192]	; (8002c14 <MCboot+0xf8>)
 8002b54:	f006 f930 	bl	8008db8 <PID_HandleInit>
    ENC_Init (&ENCODER_M1);
 8002b58:	482f      	ldr	r0, [pc, #188]	; (8002c18 <MCboot+0xfc>)
 8002b5a:	f005 fd51 	bl	8008600 <ENC_Init>
    ENC_Init (&ENCODER_M2);
 8002b5e:	482f      	ldr	r0, [pc, #188]	; (8002c1c <MCboot+0x100>)
 8002b60:	f005 fd4e 	bl	8008600 <ENC_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8002b64:	6829      	ldr	r1, [r5, #0]
 8002b66:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <MCboot+0xfc>)
 8002b68:	4a2d      	ldr	r2, [pc, #180]	; (8002c20 <MCboot+0x104>)
 8002b6a:	4630      	mov	r0, r6
 8002b6c:	f005 fcfc 	bl	8008568 <EAC_Init>
    pEAC[M1] = &EncAlignCtrlM1;
 8002b70:	4b2c      	ldr	r3, [pc, #176]	; (8002c24 <MCboot+0x108>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 8002b72:	4a29      	ldr	r2, [pc, #164]	; (8002c18 <MCboot+0xfc>)
 8002b74:	4927      	ldr	r1, [pc, #156]	; (8002c14 <MCboot+0xf8>)
    pEAC[M1] = &EncAlignCtrlM1;
 8002b76:	601e      	str	r6, [r3, #0]
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 8002b78:	6828      	ldr	r0, [r5, #0]
    RVBS_Init(&BusVoltageSensor_M1);
 8002b7a:	4e2b      	ldr	r6, [pc, #172]	; (8002c28 <MCboot+0x10c>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 8002b7c:	f007 fa7c 	bl	800a078 <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 8002b80:	4827      	ldr	r0, [pc, #156]	; (8002c20 <MCboot+0x104>)
 8002b82:	f007 fb41 	bl	800a208 <VSS_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8002b86:	4829      	ldr	r0, [pc, #164]	; (8002c2c <MCboot+0x110>)
 8002b88:	f006 f916 	bl	8008db8 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8002b8c:	4828      	ldr	r0, [pc, #160]	; (8002c30 <MCboot+0x114>)
 8002b8e:	f006 f913 	bl	8008db8 <PID_HandleInit>
    RVBS_Init(&BusVoltageSensor_M1);
 8002b92:	4630      	mov	r0, r6
 8002b94:	f007 f9b6 	bl	8009f04 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8002b98:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <MCboot+0x118>)
    NTC_Init(&TempSensor_M1);
 8002b9a:	4827      	ldr	r0, [pc, #156]	; (8002c38 <MCboot+0x11c>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60de      	str	r6, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002ba0:	4e26      	ldr	r6, [pc, #152]	; (8002c3c <MCboot+0x120>)
 8002ba2:	609e      	str	r6, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8002ba4:	f006 f8c8 	bl	8008d38 <NTC_Init>
    REMNG_Init(pREMNG[M1]);
 8002ba8:	4825      	ldr	r0, [pc, #148]	; (8002c40 <MCboot+0x124>)
 8002baa:	f007 fa11 	bl	8009fd0 <REMNG_Init>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002bae:	f04f 0a01 	mov.w	sl, #1
    FOC_Clear(M1);
 8002bb2:	4640      	mov	r0, r8
 8002bb4:	f7ff ff78 	bl	8002aa8 <FOC_Clear>
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002bb8:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002bba:	f886 a024 	strb.w	sl, [r6, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002bbe:	f007 faff 	bl	800a1c0 <STC_GetDefaultIqdref>
 8002bc2:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002bc4:	6828      	ldr	r0, [r5, #0]
 8002bc6:	f007 fafb 	bl	800a1c0 <STC_GetDefaultIqdref>
 8002bca:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8002bce:	f8db 3000 	ldr.w	r3, [fp]
 8002bd2:	6829      	ldr	r1, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002bd4:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8002bd6:	4632      	mov	r2, r6
 8002bd8:	4638      	mov	r0, r7
 8002bda:	f7ff fd69 	bl	80026b0 <MCI_Init>
    MCI_ExecSpeedRamp(&Mci[M1],
 8002bde:	6828      	ldr	r0, [r5, #0]
 8002be0:	f007 faea 	bl	800a1b8 <STC_GetMecSpeedRefUnitDefault>
 8002be4:	4642      	mov	r2, r8
 8002be6:	4601      	mov	r1, r0
 8002be8:	4638      	mov	r0, r7
 8002bea:	f7ff fd73 	bl	80026d4 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 8002bee:	6027      	str	r7, [r4, #0]
    MC_APP_BootHook();
 8002bf0:	f7ff fd5a 	bl	80026a8 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 8002bf4:	f889 a000 	strb.w	sl, [r9]
}
 8002bf8:	b003      	add	sp, #12
 8002bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bfe:	4770      	bx	lr
 8002c00:	200003e8 	.word	0x200003e8
 8002c04:	200001f0 	.word	0x200001f0
 8002c08:	20000a70 	.word	0x20000a70
 8002c0c:	200002a0 	.word	0x200002a0
 8002c10:	20000450 	.word	0x20000450
 8002c14:	20000264 	.word	0x20000264
 8002c18:	200000f8 	.word	0x200000f8
 8002c1c:	20000174 	.word	0x20000174
 8002c20:	200003a4 	.word	0x200003a4
 8002c24:	20000acc 	.word	0x20000acc
 8002c28:	20000018 	.word	0x20000018
 8002c2c:	20000238 	.word	0x20000238
 8002c30:	2000020c 	.word	0x2000020c
 8002c34:	200003dc 	.word	0x200003dc
 8002c38:	2000037c 	.word	0x2000037c
 8002c3c:	20000a9c 	.word	0x20000a9c
 8002c40:	20000330 	.word	0x20000330
 8002c44:	20000ac2 	.word	0x20000ac2
 8002c48:	20000ad0 	.word	0x20000ad0

08002c4c <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop

08002c50 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8002c50:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8002c52:	4c08      	ldr	r4, [pc, #32]	; (8002c74 <FOC_CalcCurrRef+0x24>)
 8002c54:	2326      	movs	r3, #38	; 0x26
 8002c56:	fb03 4400 	mla	r4, r3, r0, r4
 8002c5a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002c5e:	b103      	cbz	r3, 8002c62 <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8002c60:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <FOC_CalcCurrRef+0x28>)
 8002c64:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002c68:	f007 fa7c 	bl	800a164 <STC_CalcTorqueReference>
 8002c6c:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8002c6e:	8220      	strh	r0, [r4, #16]
}
 8002c70:	bd10      	pop	{r4, pc}
 8002c72:	bf00      	nop
 8002c74:	20000a9c 	.word	0x20000a9c
 8002c78:	200003e8 	.word	0x200003e8

08002c7c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8002c7c:	4b01      	ldr	r3, [pc, #4]	; (8002c84 <TSK_SetChargeBootCapDelayM1+0x8>)
 8002c7e:	8018      	strh	r0, [r3, #0]
}
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	20000ac4 	.word	0x20000ac4

08002c88 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8002c8a:	8818      	ldrh	r0, [r3, #0]
 8002c8c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002c8e:	fab0 f080 	clz	r0, r0
 8002c92:	0940      	lsrs	r0, r0, #5
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20000ac4 	.word	0x20000ac4

08002c9c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8002c9c:	4b01      	ldr	r3, [pc, #4]	; (8002ca4 <TSK_SetStopPermanencyTimeM1+0x8>)
 8002c9e:	8018      	strh	r0, [r3, #0]
}
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000ac8 	.word	0x20000ac8

08002ca8 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8002caa:	8818      	ldrh	r0, [r3, #0]
 8002cac:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002cae:	fab0 f080 	clz	r0, r0
 8002cb2:	0940      	lsrs	r0, r0, #5
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000ac8 	.word	0x20000ac8

08002cbc <TSK_MediumFrequencyTaskM1>:
{
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8002cc0:	2300      	movs	r3, #0
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8002cc2:	f10d 0106 	add.w	r1, sp, #6
 8002cc6:	48a3      	ldr	r0, [pc, #652]	; (8002f54 <TSK_MediumFrequencyTaskM1+0x298>)
  PQD_CalcElMotorPower(pMPM[M1]);
 8002cc8:	4ea3      	ldr	r6, [pc, #652]	; (8002f58 <TSK_MediumFrequencyTaskM1+0x29c>)
  int16_t wAux = 0;
 8002cca:	f8ad 3006 	strh.w	r3, [sp, #6]
  encoder.motor_speed = encoder.getMecSpeed(&ENCODER_M1);
 8002cce:	4da3      	ldr	r5, [pc, #652]	; (8002f5c <TSK_MediumFrequencyTaskM1+0x2a0>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002cd0:	4ca3      	ldr	r4, [pc, #652]	; (8002f60 <TSK_MediumFrequencyTaskM1+0x2a4>)
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8002cd2:	f005 fcf7 	bl	80086c4 <ENC_CalcAvrgMecSpeedUnit>
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M2, &wAux);
 8002cd6:	f10d 0106 	add.w	r1, sp, #6
 8002cda:	48a2      	ldr	r0, [pc, #648]	; (8002f64 <TSK_MediumFrequencyTaskM1+0x2a8>)
 8002cdc:	f005 fcf2 	bl	80086c4 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8002ce0:	6830      	ldr	r0, [r6, #0]
 8002ce2:	f006 f8f5 	bl	8008ed0 <PQD_CalcElMotorPower>
  encoder.motor_speed = encoder.getMecSpeed(&ENCODER_M1);
 8002ce6:	489b      	ldr	r0, [pc, #620]	; (8002f54 <TSK_MediumFrequencyTaskM1+0x298>)
 8002ce8:	69eb      	ldr	r3, [r5, #28]
 8002cea:	4798      	blx	r3
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002cec:	4620      	mov	r0, r4
  encoder.motor_speed = encoder.getMecSpeed(&ENCODER_M1);
 8002cee:	ed85 0a02 	vstr	s0, [r5, #8]
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002cf2:	f7ff fd57 	bl	80027a4 <MCI_GetCurrentFaults>
 8002cf6:	b118      	cbz	r0, 8002d00 <TSK_MediumFrequencyTaskM1+0x44>
    Mci[M1].State = FAULT_NOW;
 8002cf8:	230a      	movs	r3, #10
 8002cfa:	7663      	strb	r3, [r4, #25]
}
 8002cfc:	b002      	add	sp, #8
 8002cfe:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002d00:	4620      	mov	r0, r4
 8002d02:	f7ff fd4d 	bl	80027a0 <MCI_GetOccurredFaults>
 8002d06:	bb78      	cbnz	r0, 8002d68 <TSK_MediumFrequencyTaskM1+0xac>
      switch (Mci[M1].State)
 8002d08:	7e63      	ldrb	r3, [r4, #25]
 8002d0a:	2b14      	cmp	r3, #20
 8002d0c:	d8f6      	bhi.n	8002cfc <TSK_MediumFrequencyTaskM1+0x40>
 8002d0e:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <TSK_MediumFrequencyTaskM1+0x58>)
 8002d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d14:	08002eb5 	.word	0x08002eb5
 8002d18:	08002cfd 	.word	0x08002cfd
 8002d1c:	08002e6b 	.word	0x08002e6b
 8002d20:	08002cfd 	.word	0x08002cfd
 8002d24:	08002cfd 	.word	0x08002cfd
 8002d28:	08002cfd 	.word	0x08002cfd
 8002d2c:	08002e57 	.word	0x08002e57
 8002d30:	08002cfd 	.word	0x08002cfd
 8002d34:	08002e4b 	.word	0x08002e4b
 8002d38:	08002cfd 	.word	0x08002cfd
 8002d3c:	08002d69 	.word	0x08002d69
 8002d40:	08002e3d 	.word	0x08002e3d
 8002d44:	08002cfd 	.word	0x08002cfd
 8002d48:	08002cfd 	.word	0x08002cfd
 8002d4c:	08002cfd 	.word	0x08002cfd
 8002d50:	08002cfd 	.word	0x08002cfd
 8002d54:	08002de7 	.word	0x08002de7
 8002d58:	08002db5 	.word	0x08002db5
 8002d5c:	08002cfd 	.word	0x08002cfd
 8002d60:	08002cfd 	.word	0x08002cfd
 8002d64:	08002d71 	.word	0x08002d71
      Mci[M1].State = FAULT_OVER;
 8002d68:	230b      	movs	r3, #11
 8002d6a:	7663      	strb	r3, [r4, #25]
}
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002d70:	7e23      	ldrb	r3, [r4, #24]
 8002d72:	2b05      	cmp	r3, #5
 8002d74:	f000 80ae 	beq.w	8002ed4 <TSK_MediumFrequencyTaskM1+0x218>
            if (TSK_StopPermanencyTimeHasElapsedM1())
 8002d78:	f7ff ff96 	bl	8002ca8 <TSK_StopPermanencyTimeHasElapsedM1>
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	d0bd      	beq.n	8002cfc <TSK_MediumFrequencyTaskM1+0x40>
              ENC_Clear(&ENCODER_M1);
 8002d80:	4874      	ldr	r0, [pc, #464]	; (8002f54 <TSK_MediumFrequencyTaskM1+0x298>)
 8002d82:	f005 fc77 	bl	8008674 <ENC_Clear>
              ENC_Clear(&ENCODER_M2);
 8002d86:	4877      	ldr	r0, [pc, #476]	; (8002f64 <TSK_MediumFrequencyTaskM1+0x2a8>)
 8002d88:	f005 fc74 	bl	8008674 <ENC_Clear>
              R3_2_SwitchOnPWM( pwmcHandle[M1] );
 8002d8c:	4b76      	ldr	r3, [pc, #472]	; (8002f68 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	f006 fada 	bl	8009348 <R3_2_SwitchOnPWM>
              FOC_InitAdditionalMethods(M1);
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7ff ff59 	bl	8002c4c <FOC_InitAdditionalMethods>
              STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8002d9a:	4b74      	ldr	r3, [pc, #464]	; (8002f6c <TSK_MediumFrequencyTaskM1+0x2b0>)
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	f007 fa1d 	bl	800a1dc <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8002da2:	486f      	ldr	r0, [pc, #444]	; (8002f60 <TSK_MediumFrequencyTaskM1+0x2a4>)
 8002da4:	f7ff fcc0 	bl	8002728 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8002da8:	2000      	movs	r0, #0
 8002daa:	f7ff ff51 	bl	8002c50 <FOC_CalcCurrRef>
              Mci[M1].State = RUN;
 8002dae:	2306      	movs	r3, #6
 8002db0:	7663      	strb	r3, [r4, #25]
 8002db2:	e7a3      	b.n	8002cfc <TSK_MediumFrequencyTaskM1+0x40>
            if (MCI_STOP == Mci[M1].DirectCommand)
 8002db4:	7e23      	ldrb	r3, [r4, #24]
 8002db6:	2b05      	cmp	r3, #5
 8002db8:	f000 808c 	beq.w	8002ed4 <TSK_MediumFrequencyTaskM1+0x218>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8002dbc:	4d6a      	ldr	r5, [pc, #424]	; (8002f68 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	6828      	ldr	r0, [r5, #0]
 8002dc2:	f000 fc9f 	bl	8003704 <PWMC_CurrentReadingCalibr>
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	d098      	beq.n	8002cfc <TSK_MediumFrequencyTaskM1+0x40>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8002dca:	7e23      	ldrb	r3, [r4, #24]
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	f000 80a0 	beq.w	8002f12 <TSK_MediumFrequencyTaskM1+0x256>
                  R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8002dd2:	6828      	ldr	r0, [r5, #0]
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	f006 fa8f 	bl	80092f8 <R3_2_TurnOnLowSides>
                  TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 8002dda:	2014      	movs	r0, #20
 8002ddc:	f7ff ff4e 	bl	8002c7c <TSK_SetChargeBootCapDelayM1>
                  Mci[M1].State = CHARGE_BOOT_CAP;
 8002de0:	2310      	movs	r3, #16
 8002de2:	7663      	strb	r3, [r4, #25]
 8002de4:	e78a      	b.n	8002cfc <TSK_MediumFrequencyTaskM1+0x40>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002de6:	7e23      	ldrb	r3, [r4, #24]
 8002de8:	2b05      	cmp	r3, #5
 8002dea:	d073      	beq.n	8002ed4 <TSK_MediumFrequencyTaskM1+0x218>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8002dec:	f7ff ff4c 	bl	8002c88 <TSK_ChargeBootCapDelayHasElapsedM1>
 8002df0:	2800      	cmp	r0, #0
 8002df2:	d083      	beq.n	8002cfc <TSK_MediumFrequencyTaskM1+0x40>
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8002df4:	4d5c      	ldr	r5, [pc, #368]	; (8002f68 <TSK_MediumFrequencyTaskM1+0x2ac>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002df6:	4e5d      	ldr	r6, [pc, #372]	; (8002f6c <TSK_MediumFrequencyTaskM1+0x2b0>)
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8002df8:	6828      	ldr	r0, [r5, #0]
 8002dfa:	f006 faf1 	bl	80093e0 <R3_2_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 8002dfe:	4b5c      	ldr	r3, [pc, #368]	; (8002f70 <TSK_MediumFrequencyTaskM1+0x2b4>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002e00:	495c      	ldr	r1, [pc, #368]	; (8002f74 <TSK_MediumFrequencyTaskM1+0x2b8>)
 8002e02:	6830      	ldr	r0, [r6, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002e0a:	f007 f94b 	bl	800a0a4 <STC_SetSpeedSensor>
              ENC_Clear(&ENCODER_M1);
 8002e0e:	4851      	ldr	r0, [pc, #324]	; (8002f54 <TSK_MediumFrequencyTaskM1+0x298>)
 8002e10:	f005 fc30 	bl	8008674 <ENC_Clear>
              ENC_Clear(&ENCODER_M2);
 8002e14:	4853      	ldr	r0, [pc, #332]	; (8002f64 <TSK_MediumFrequencyTaskM1+0x2a8>)
 8002e16:	f005 fc2d 	bl	8008674 <ENC_Clear>
              FOC_Clear( M1 );
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7ff fe44 	bl	8002aa8 <FOC_Clear>
              if (EAC_IsAligned(&EncAlignCtrlM1) == false )
 8002e20:	4855      	ldr	r0, [pc, #340]	; (8002f78 <TSK_MediumFrequencyTaskM1+0x2bc>)
 8002e22:	f005 fbe9 	bl	80085f8 <EAC_IsAligned>
 8002e26:	2800      	cmp	r0, #0
 8002e28:	d17c      	bne.n	8002f24 <TSK_MediumFrequencyTaskM1+0x268>
                EAC_StartAlignment(&EncAlignCtrlM1);
 8002e2a:	4853      	ldr	r0, [pc, #332]	; (8002f78 <TSK_MediumFrequencyTaskM1+0x2bc>)
 8002e2c:	f005 fba4 	bl	8008578 <EAC_StartAlignment>
                Mci[M1].State = ALIGNMENT;
 8002e30:	2302      	movs	r3, #2
 8002e32:	7663      	strb	r3, [r4, #25]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8002e34:	6828      	ldr	r0, [r5, #0]
 8002e36:	f000 fc63 	bl	8003700 <PWMC_SwitchOnPWM>
 8002e3a:	e75f      	b.n	8002cfc <TSK_MediumFrequencyTaskM1+0x40>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8002e3c:	7e23      	ldrb	r3, [r4, #24]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	f47f af5c 	bne.w	8002cfc <TSK_MediumFrequencyTaskM1+0x40>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002e44:	2300      	movs	r3, #0
 8002e46:	8323      	strh	r3, [r4, #24]
 8002e48:	e758      	b.n	8002cfc <TSK_MediumFrequencyTaskM1+0x40>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8002e4a:	f7ff ff2d 	bl	8002ca8 <TSK_StopPermanencyTimeHasElapsedM1>
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	f43f af54 	beq.w	8002cfc <TSK_MediumFrequencyTaskM1+0x40>
 8002e54:	e7f6      	b.n	8002e44 <TSK_MediumFrequencyTaskM1+0x188>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002e56:	7e23      	ldrb	r3, [r4, #24]
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d03b      	beq.n	8002ed4 <TSK_MediumFrequencyTaskM1+0x218>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8002e5c:	4840      	ldr	r0, [pc, #256]	; (8002f60 <TSK_MediumFrequencyTaskM1+0x2a4>)
 8002e5e:	f7ff fc63 	bl	8002728 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8002e62:	2000      	movs	r0, #0
 8002e64:	f7ff fef4 	bl	8002c50 <FOC_CalcCurrRef>
 8002e68:	e748      	b.n	8002cfc <TSK_MediumFrequencyTaskM1+0x40>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002e6a:	7e23      	ldrb	r3, [r4, #24]
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d031      	beq.n	8002ed4 <TSK_MediumFrequencyTaskM1+0x218>
            bool isAligned = EAC_IsAligned(&EncAlignCtrlM1);
 8002e70:	4841      	ldr	r0, [pc, #260]	; (8002f78 <TSK_MediumFrequencyTaskM1+0x2bc>)
 8002e72:	f005 fbc1 	bl	80085f8 <EAC_IsAligned>
 8002e76:	4605      	mov	r5, r0
            bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 8002e78:	483f      	ldr	r0, [pc, #252]	; (8002f78 <TSK_MediumFrequencyTaskM1+0x2bc>)
 8002e7a:	f005 fba5 	bl	80085c8 <EAC_Exec>
 8002e7e:	4606      	mov	r6, r0
            if ((isAligned == false)  && (EACDone == false))
 8002e80:	b90d      	cbnz	r5, 8002e86 <TSK_MediumFrequencyTaskM1+0x1ca>
 8002e82:	2800      	cmp	r0, #0
 8002e84:	d03d      	beq.n	8002f02 <TSK_MediumFrequencyTaskM1+0x246>
              R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8002e86:	4b38      	ldr	r3, [pc, #224]	; (8002f68 <TSK_MediumFrequencyTaskM1+0x2ac>)
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8002e88:	4d38      	ldr	r5, [pc, #224]	; (8002f6c <TSK_MediumFrequencyTaskM1+0x2b0>)
              R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	f006 faa8 	bl	80093e0 <R3_2_SwitchOffPWM>
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8002e90:	6828      	ldr	r0, [r5, #0]
 8002e92:	2103      	movs	r1, #3
 8002e94:	f007 f91a 	bl	800a0cc <STC_SetControlMode>
              STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8002e98:	492e      	ldr	r1, [pc, #184]	; (8002f54 <TSK_MediumFrequencyTaskM1+0x298>)
 8002e9a:	6828      	ldr	r0, [r5, #0]
 8002e9c:	f007 f902 	bl	800a0a4 <STC_SetSpeedSensor>
              FOC_Clear(M1);
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f7ff fe01 	bl	8002aa8 <FOC_Clear>
              TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8002ea6:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002eaa:	f7ff fef7 	bl	8002c9c <TSK_SetStopPermanencyTimeM1>
              Mci[M1].State = WAIT_STOP_MOTOR;
 8002eae:	2314      	movs	r3, #20
 8002eb0:	7663      	strb	r3, [r4, #25]
 8002eb2:	e723      	b.n	8002cfc <TSK_MediumFrequencyTaskM1+0x40>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8002eb4:	7e23      	ldrb	r3, [r4, #24]
 8002eb6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	f47f af1e 	bne.w	8002cfc <TSK_MediumFrequencyTaskM1+0x40>
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8002ec0:	4d29      	ldr	r5, [pc, #164]	; (8002f68 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8002ec2:	6828      	ldr	r0, [r5, #0]
 8002ec4:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
 8002ec8:	b9a9      	cbnz	r1, 8002ef6 <TSK_MediumFrequencyTaskM1+0x23a>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8002eca:	f000 fc1b 	bl	8003704 <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 8002ece:	2311      	movs	r3, #17
 8002ed0:	7663      	strb	r3, [r4, #25]
 8002ed2:	e713      	b.n	8002cfc <TSK_MediumFrequencyTaskM1+0x40>
  R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8002ed4:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	f006 fa82 	bl	80093e0 <R3_2_SwitchOffPWM>
  FOC_Clear(motor);
 8002edc:	2000      	movs	r0, #0
 8002ede:	f7ff fde3 	bl	8002aa8 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8002ee2:	6830      	ldr	r0, [r6, #0]
 8002ee4:	f006 f80e 	bl	8008f04 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8002ee8:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002eec:	f7ff fed6 	bl	8002c9c <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	7663      	strb	r3, [r4, #25]
  return;
 8002ef4:	e702      	b.n	8002cfc <TSK_MediumFrequencyTaskM1+0x40>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8002ef6:	4619      	mov	r1, r3
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8002ef8:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8002efc:	f000 fc02 	bl	8003704 <PWMC_CurrentReadingCalibr>
             R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8002f00:	e767      	b.n	8002dd2 <TSK_MediumFrequencyTaskM1+0x116>
                IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 8002f02:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <TSK_MediumFrequencyTaskM1+0x2b0>)
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	f007 f92d 	bl	800a164 <STC_CalcTorqueReference>
                FOCVars[M1].Iqdref = IqdRef;
 8002f0a:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <TSK_MediumFrequencyTaskM1+0x2b4>)
 8002f0c:	821e      	strh	r6, [r3, #16]
 8002f0e:	8258      	strh	r0, [r3, #18]
            {
 8002f10:	e6f4      	b.n	8002cfc <TSK_MediumFrequencyTaskM1+0x40>
                  FOC_Clear(M1);
 8002f12:	2000      	movs	r0, #0
 8002f14:	f7ff fdc8 	bl	8002aa8 <FOC_Clear>
                  PQD_Clear(pMPM[M1]);
 8002f18:	6830      	ldr	r0, [r6, #0]
 8002f1a:	f005 fff3 	bl	8008f04 <PQD_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	8323      	strh	r3, [r4, #24]
 8002f22:	e6eb      	b.n	8002cfc <TSK_MediumFrequencyTaskM1+0x40>
                STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8002f24:	6830      	ldr	r0, [r6, #0]
 8002f26:	2103      	movs	r1, #3
 8002f28:	f007 f8d0 	bl	800a0cc <STC_SetControlMode>
                STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8002f2c:	4909      	ldr	r1, [pc, #36]	; (8002f54 <TSK_MediumFrequencyTaskM1+0x298>)
 8002f2e:	6830      	ldr	r0, [r6, #0]
 8002f30:	f007 f8b8 	bl	800a0a4 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7ff fe89 	bl	8002c4c <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef( M1 );
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f7ff fe88 	bl	8002c50 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8002f40:	6830      	ldr	r0, [r6, #0]
 8002f42:	f007 f94b 	bl	800a1dc <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8002f46:	4806      	ldr	r0, [pc, #24]	; (8002f60 <TSK_MediumFrequencyTaskM1+0x2a4>)
 8002f48:	f7ff fbee 	bl	8002728 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8002f4c:	2306      	movs	r3, #6
 8002f4e:	7663      	strb	r3, [r4, #25]
 8002f50:	e770      	b.n	8002e34 <TSK_MediumFrequencyTaskM1+0x178>
 8002f52:	bf00      	nop
 8002f54:	200000f8 	.word	0x200000f8
 8002f58:	200003dc 	.word	0x200003dc
 8002f5c:	200006d8 	.word	0x200006d8
 8002f60:	20000a70 	.word	0x20000a70
 8002f64:	20000174 	.word	0x20000174
 8002f68:	20000ad0 	.word	0x20000ad0
 8002f6c:	200003e8 	.word	0x200003e8
 8002f70:	20000a9c 	.word	0x20000a9c
 8002f74:	200003a4 	.word	0x200003a4
 8002f78:	200001f0 	.word	0x200001f0

08002f7c <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 8002f7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <MC_Scheduler+0x78>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d000      	beq.n	8002f86 <MC_Scheduler+0xa>
 8002f84:	4770      	bx	lr
{
 8002f86:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8002f88:	4c1b      	ldr	r4, [pc, #108]	; (8002ff8 <MC_Scheduler+0x7c>)
 8002f8a:	8823      	ldrh	r3, [r4, #0]
 8002f8c:	b193      	cbz	r3, 8002fb4 <MC_Scheduler+0x38>
      hMFTaskCounterM1--;
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8002f92:	4a1a      	ldr	r2, [pc, #104]	; (8002ffc <MC_Scheduler+0x80>)
 8002f94:	8813      	ldrh	r3, [r2, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	b11b      	cbz	r3, 8002fa2 <MC_Scheduler+0x26>
      hBootCapDelayCounterM1--;
 8002f9a:	8813      	ldrh	r3, [r2, #0]
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8002fa2:	4a17      	ldr	r2, [pc, #92]	; (8003000 <MC_Scheduler+0x84>)
 8002fa4:	8813      	ldrh	r3, [r2, #0]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	b11b      	cbz	r3, 8002fb2 <MC_Scheduler+0x36>
      hStopPermanencyCounterM1--;
 8002faa:	8813      	ldrh	r3, [r2, #0]
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	8013      	strh	r3, [r2, #0]
}
 8002fb2:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002fb4:	4d13      	ldr	r5, [pc, #76]	; (8003004 <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 8002fb6:	f7ff fe81 	bl	8002cbc <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8002fba:	f7ff fb77 	bl	80026ac <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002fbe:	4629      	mov	r1, r5
 8002fc0:	f851 0b0c 	ldr.w	r0, [r1], #12
 8002fc4:	6883      	ldr	r3, [r0, #8]
 8002fc6:	4798      	blx	r3
 8002fc8:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8002fca:	b130      	cbz	r0, 8002fda <MC_Scheduler+0x5e>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8002fcc:	4629      	mov	r1, r5
 8002fce:	220a      	movs	r2, #10
 8002fd0:	f851 0b08 	ldr.w	r0, [r1], #8
 8002fd4:	6803      	ldr	r3, [r0, #0]
 8002fd6:	4798      	blx	r3
 8002fd8:	b910      	cbnz	r0, 8002fe0 <MC_Scheduler+0x64>
      hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	8023      	strh	r3, [r4, #0]
 8002fde:	e7d8      	b.n	8002f92 <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	f005 fc6b 	bl	80088bc <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8002fe6:	6828      	ldr	r0, [r5, #0]
 8002fe8:	89ea      	ldrh	r2, [r5, #14]
 8002fea:	6846      	ldr	r6, [r0, #4]
 8002fec:	68a9      	ldr	r1, [r5, #8]
 8002fee:	230a      	movs	r3, #10
 8002ff0:	47b0      	blx	r6
 8002ff2:	e7f2      	b.n	8002fda <MC_Scheduler+0x5e>
 8002ff4:	20000ac2 	.word	0x20000ac2
 8002ff8:	20000ac6 	.word	0x20000ac6
 8002ffc:	20000ac4 	.word	0x20000ac4
 8003000:	20000ac8 	.word	0x20000ac8
 8003004:	2000042c 	.word	0x2000042c

08003008 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8003008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* USER CODE END HighFrequencyTask 0 */

  uint16_t hFOCreturn;
  uint8_t bMotorNbr = 0;
  (void)ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 800300c:	4860      	ldr	r0, [pc, #384]	; (8003190 <TSK_HighFrequencyTask+0x188>)
  (void)ENC_CalcAngle(&ENCODER_M2);   /* if not sensorless then 2nd parameter is MC_NULL*/
	encoder.pendulum_angle = encoder.getPendulumAngle(&ENCODER_M2);
 800300e:	4c61      	ldr	r4, [pc, #388]	; (8003194 <TSK_HighFrequencyTask+0x18c>)
{
 8003010:	b086      	sub	sp, #24
  (void)ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8003012:	f005 fb3d 	bl	8008690 <ENC_CalcAngle>
  (void)ENC_CalcAngle(&ENCODER_M2);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8003016:	4860      	ldr	r0, [pc, #384]	; (8003198 <TSK_HighFrequencyTask+0x190>)
 8003018:	f005 fb3a 	bl	8008690 <ENC_CalcAngle>
	encoder.pendulum_angle = encoder.getPendulumAngle(&ENCODER_M2);
 800301c:	6a23      	ldr	r3, [r4, #32]
 800301e:	485e      	ldr	r0, [pc, #376]	; (8003198 <TSK_HighFrequencyTask+0x190>)
 8003020:	4798      	blx	r3
 8003022:	ed84 0a00 	vstr	s0, [r4]
  //encoder.legacy_pendulum_angle = encoder.getLegacyPendulumAngle(&ENCODER_M2);
  //encoder.calculatePendulumVelocity();

  //encoder.pendulum_velocity = encoder.getPendulumVelocity();
  angle2 = encoder.pendulum_angle;
 8003026:	edd4 7a00 	vldr	s15, [r4]
  //printf("Pendulum angle = %.2f\r\n", angle2);

  if (angle2 >= 70 && angle2 <= 100 || angle2 <= 290 && angle2 >= 250)
 800302a:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800319c <TSK_HighFrequencyTask+0x194>
  angle2 = encoder.pendulum_angle;
 800302e:	4b5c      	ldr	r3, [pc, #368]	; (80031a0 <TSK_HighFrequencyTask+0x198>)
  if (angle2 >= 70 && angle2 <= 100 || angle2 <= 290 && angle2 >= 250)
 8003030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  angle2 = encoder.pendulum_angle;
 8003038:	edc3 7a00 	vstr	s15, [r3]
  if (angle2 >= 70 && angle2 <= 100 || angle2 <= 290 && angle2 >= 250)
 800303c:	db6a      	blt.n	8003114 <TSK_HighFrequencyTask+0x10c>
 800303e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80031a4 <TSK_HighFrequencyTask+0x19c>
 8003042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304a:	d863      	bhi.n	8003114 <TSK_HighFrequencyTask+0x10c>
  {                                           
    stop_algo1 = true;
 800304c:	4b56      	ldr	r3, [pc, #344]	; (80031a8 <TSK_HighFrequencyTask+0x1a0>)
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8003052:	4b56      	ldr	r3, [pc, #344]	; (80031ac <TSK_HighFrequencyTask+0x1a4>)
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8003054:	4f56      	ldr	r7, [pc, #344]	; (80031b0 <TSK_HighFrequencyTask+0x1a8>)
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8003056:	6818      	ldr	r0, [r3, #0]
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003058:	4c56      	ldr	r4, [pc, #344]	; (80031b4 <TSK_HighFrequencyTask+0x1ac>)
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 800305a:	f007 f825 	bl	800a0a8 <STC_GetSpeedSensor>
 800305e:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8003060:	f006 ffbe 	bl	8009fe0 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8003064:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8003066:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8003068:	6838      	ldr	r0, [r7, #0]
 800306a:	f000 f9fd 	bl	8003468 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 800306e:	f001 fc9f 	bl	80049b0 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8003072:	f001 fc4d 	bl	8004910 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8003076:	9803      	ldr	r0, [sp, #12]
 8003078:	f7ff fc62 	bl	8002940 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800307c:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 800307e:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003080:	f7ff fc9e 	bl	80029c0 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003084:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003088:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800308a:	b203      	sxth	r3, r0
 800308c:	1ac9      	subs	r1, r1, r3
 800308e:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <TSK_HighFrequencyTask+0x1b0>)
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	f005 fed7 	bl	8008e44 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8003096:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800309a:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800309e:	1ac9      	subs	r1, r1, r3
 80030a0:	4b46      	ldr	r3, [pc, #280]	; (80031bc <TSK_HighFrequencyTask+0x1b4>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80030a2:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	f005 fecd 	bl	8008e44 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 80030aa:	f8ad 8008 	strh.w	r8, [sp, #8]
 80030ae:	f8ad 000a 	strh.w	r0, [sp, #10]
 80030b2:	9902      	ldr	r1, [sp, #8]
 80030b4:	4842      	ldr	r0, [pc, #264]	; (80031c0 <TSK_HighFrequencyTask+0x1b8>)
 80030b6:	f005 fa27 	bl	8008508 <Circle_Limitation>
 80030ba:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80030bc:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 80030be:	fa0f f883 	sxth.w	r8, r3
 80030c2:	141d      	asrs	r5, r3, #16
 80030c4:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80030c6:	f006 ff93 	bl	8009ff0 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80030ca:	4631      	mov	r1, r6
 80030cc:	9802      	ldr	r0, [sp, #8]
 80030ce:	f7ff fcbb 	bl	8002a48 <MCM_Rev_Park>
 80030d2:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80030d4:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80030d6:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80030d8:	f000 f9c8 	bl	800346c <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80030dc:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80030de:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 80030e0:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80030e2:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 80030e4:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 80030e6:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 80030e8:	f8a4 8016 	strh.w	r8, [r4, #22]
  if(hFOCreturn == MC_DURATION)
 80030ec:	2901      	cmp	r1, #1
  FOCVars[M1].Vqd = Vqd;
 80030ee:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80030f0:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80030f2:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 80030f4:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 80030f8:	8426      	strh	r6, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 80030fa:	d044      	beq.n	8003186 <TSK_HighFrequencyTask+0x17e>
  GLOBAL_TIMESTAMP++;
 80030fc:	4a31      	ldr	r2, [pc, #196]	; (80031c4 <TSK_HighFrequencyTask+0x1bc>)
  if (0U == MCPA_UART_A.Mark)
 80030fe:	4832      	ldr	r0, [pc, #200]	; (80031c8 <TSK_HighFrequencyTask+0x1c0>)
  GLOBAL_TIMESTAMP++;
 8003100:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8003102:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
  GLOBAL_TIMESTAMP++;
 8003106:	3301      	adds	r3, #1
 8003108:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 800310a:	bbb1      	cbnz	r1, 800317a <TSK_HighFrequencyTask+0x172>
}
 800310c:	2000      	movs	r0, #0
 800310e:	b006      	add	sp, #24
 8003110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (angle2 >= 70 && angle2 <= 100 || angle2 <= 290 && angle2 >= 250)
 8003114:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80031cc <TSK_HighFrequencyTask+0x1c4>
 8003118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800311c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003120:	d806      	bhi.n	8003130 <TSK_HighFrequencyTask+0x128>
 8003122:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80031d0 <TSK_HighFrequencyTask+0x1c8>
 8003126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800312a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312e:	da8d      	bge.n	800304c <TSK_HighFrequencyTask+0x44>
  else if (angle2 >= 90 && angle2 <= 110 || angle2 <= 270 && angle2 >= 250)
 8003130:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80031d4 <TSK_HighFrequencyTask+0x1cc>
 8003134:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313c:	da15      	bge.n	800316a <TSK_HighFrequencyTask+0x162>
 800313e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80031d8 <TSK_HighFrequencyTask+0x1d0>
 8003142:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314a:	d882      	bhi.n	8003052 <TSK_HighFrequencyTask+0x4a>
 800314c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80031d0 <TSK_HighFrequencyTask+0x1c8>
 8003150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003158:	f6ff af7b 	blt.w	8003052 <TSK_HighFrequencyTask+0x4a>
    stop_algo1 = false;
 800315c:	4912      	ldr	r1, [pc, #72]	; (80031a8 <TSK_HighFrequencyTask+0x1a0>)
    stop_algo2 = true;
 800315e:	4b1f      	ldr	r3, [pc, #124]	; (80031dc <TSK_HighFrequencyTask+0x1d4>)
    stop_algo1 = false;
 8003160:	2000      	movs	r0, #0
    stop_algo2 = true;
 8003162:	2201      	movs	r2, #1
    stop_algo1 = false;
 8003164:	7008      	strb	r0, [r1, #0]
    stop_algo2 = true;
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	e773      	b.n	8003052 <TSK_HighFrequencyTask+0x4a>
  else if (angle2 >= 90 && angle2 <= 110 || angle2 <= 270 && angle2 >= 250)
 800316a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80031e0 <TSK_HighFrequencyTask+0x1d8>
 800316e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003176:	d9f1      	bls.n	800315c <TSK_HighFrequencyTask+0x154>
 8003178:	e7e1      	b.n	800313e <TSK_HighFrequencyTask+0x136>
    MCPA_dataLog (&MCPA_UART_A);
 800317a:	f005 fc63 	bl	8008a44 <MCPA_dataLog>
}
 800317e:	2000      	movs	r0, #0
 8003180:	b006      	add	sp, #24
 8003182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8003186:	4817      	ldr	r0, [pc, #92]	; (80031e4 <TSK_HighFrequencyTask+0x1dc>)
 8003188:	2200      	movs	r2, #0
 800318a:	f7ff fac1 	bl	8002710 <MCI_FaultProcessing>
 800318e:	e7b5      	b.n	80030fc <TSK_HighFrequencyTask+0xf4>
 8003190:	200000f8 	.word	0x200000f8
 8003194:	200006d8 	.word	0x200006d8
 8003198:	20000174 	.word	0x20000174
 800319c:	428c0000 	.word	0x428c0000
 80031a0:	200006d0 	.word	0x200006d0
 80031a4:	42c80000 	.word	0x42c80000
 80031a8:	20000a68 	.word	0x20000a68
 80031ac:	200003e8 	.word	0x200003e8
 80031b0:	20000ad0 	.word	0x20000ad0
 80031b4:	20000a9c 	.word	0x20000a9c
 80031b8:	200003e4 	.word	0x200003e4
 80031bc:	200003e0 	.word	0x200003e0
 80031c0:	20000044 	.word	0x20000044
 80031c4:	20001cc4 	.word	0x20001cc4
 80031c8:	20000400 	.word	0x20000400
 80031cc:	43910000 	.word	0x43910000
 80031d0:	437a0000 	.word	0x437a0000
 80031d4:	42b40000 	.word	0x42b40000
 80031d8:	43870000 	.word	0x43870000
 80031dc:	20000a69 	.word	0x20000a69
 80031e0:	42dc0000 	.word	0x42dc0000
 80031e4:	20000a70 	.word	0x20000a70

080031e8 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80031e8:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80031ea:	4b22      	ldr	r3, [pc, #136]	; (8003274 <TSK_SafetyTask_PWMOFF+0x8c>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80031ec:	4e22      	ldr	r6, [pc, #136]	; (8003278 <TSK_SafetyTask_PWMOFF+0x90>)
{
 80031ee:	b082      	sub	sp, #8
 80031f0:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80031f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80031f6:	f005 fdb1 	bl	8008d5c <NTC_CalcAvTemp>
 80031fa:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80031fc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003200:	f000 faa4 	bl	800374c <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8003204:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8003208:	4328      	orrs	r0, r5
 800320a:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 800320c:	b344      	cbz	r4, 8003260 <TSK_SafetyTask_PWMOFF+0x78>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 800320e:	481b      	ldr	r0, [pc, #108]	; (800327c <TSK_SafetyTask_PWMOFF+0x94>)
 8003210:	43ea      	mvns	r2, r5
 8003212:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8003216:	b292      	uxth	r2, r2
 8003218:	4629      	mov	r1, r5
 800321a:	9001      	str	r0, [sp, #4]
 800321c:	f7ff fa78 	bl	8002710 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8003220:	9801      	ldr	r0, [sp, #4]
 8003222:	f7ff fb09 	bl	8002838 <MCI_GetFaultState>
 8003226:	b1c8      	cbz	r0, 800325c <TSK_SafetyTask_PWMOFF+0x74>
  {
    /* reset Encoder state */
    if (pEAC[bMotor] != MC_NULL)
 8003228:	4b15      	ldr	r3, [pc, #84]	; (8003280 <TSK_SafetyTask_PWMOFF+0x98>)
 800322a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800322e:	b110      	cbz	r0, 8003236 <TSK_SafetyTask_PWMOFF+0x4e>
    {
      EAC_SetRestartState(pEAC[bMotor], false);
 8003230:	2100      	movs	r1, #0
 8003232:	f005 f9e3 	bl	80085fc <EAC_SetRestartState>
    }
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003236:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800323a:	f000 fa5f 	bl	80036fc <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 800323e:	4811      	ldr	r0, [pc, #68]	; (8003284 <TSK_SafetyTask_PWMOFF+0x9c>)
 8003240:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8003244:	b99b      	cbnz	r3, 800326e <TSK_SafetyTask_PWMOFF+0x86>
    {
      MCPA_flushDataLog (&MCPA_UART_A);
    }
    FOC_Clear(bMotor);
 8003246:	4620      	mov	r0, r4
 8003248:	f7ff fc2e 	bl	8002aa8 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 800324c:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <TSK_SafetyTask_PWMOFF+0xa0>)
 800324e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8003252:	b002      	add	sp, #8
 8003254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8003258:	f005 be54 	b.w	8008f04 <PQD_Clear>
}
 800325c:	b002      	add	sp, #8
 800325e:	bd70      	pop	{r4, r5, r6, pc}
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 8003260:	480a      	ldr	r0, [pc, #40]	; (800328c <TSK_SafetyTask_PWMOFF+0xa4>)
 8003262:	f006 fe81 	bl	8009f68 <RVBS_CalcAvVbus>
 8003266:	f000 000e 	and.w	r0, r0, #14
 800326a:	4305      	orrs	r5, r0
 800326c:	e7cf      	b.n	800320e <TSK_SafetyTask_PWMOFF+0x26>
      MCPA_flushDataLog (&MCPA_UART_A);
 800326e:	f005 fcad 	bl	8008bcc <MCPA_flushDataLog>
 8003272:	e7e8      	b.n	8003246 <TSK_SafetyTask_PWMOFF+0x5e>
 8003274:	200003ec 	.word	0x200003ec
 8003278:	20000ad0 	.word	0x20000ad0
 800327c:	20000a70 	.word	0x20000a70
 8003280:	20000acc 	.word	0x20000acc
 8003284:	20000400 	.word	0x20000400
 8003288:	200003dc 	.word	0x200003dc
 800328c:	20000018 	.word	0x20000018

08003290 <TSK_SafetyTask>:
{
 8003290:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <TSK_SafetyTask+0x1c>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d000      	beq.n	800329c <TSK_SafetyTask+0xc>
}
 800329a:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 800329c:	2000      	movs	r0, #0
 800329e:	f7ff ffa3 	bl	80031e8 <TSK_SafetyTask_PWMOFF>
}
 80032a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 80032a6:	f001 bb03 	b.w	80048b0 <RCM_ExecUserConv>
 80032aa:	bf00      	nop
 80032ac:	20000ac2 	.word	0x20000ac2

080032b0 <MC_RunMotorControlTasks>:
{
 80032b0:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 80032b2:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <MC_RunMotorControlTasks+0x14>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	b903      	cbnz	r3, 80032ba <MC_RunMotorControlTasks+0xa>
}
 80032b8:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 80032ba:	f7ff fe5f 	bl	8002f7c <MC_Scheduler>
    TSK_SafetyTask();
 80032be:	f7ff ffe7 	bl	8003290 <TSK_SafetyTask>
}
 80032c2:	bd08      	pop	{r3, pc}
 80032c4:	20000ac2 	.word	0x20000ac2

080032c8 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80032c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 80032ca:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <TSK_HardwareFaultTask+0x18>)
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	f006 f887 	bl	80093e0 <R3_2_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80032d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 80032d6:	4803      	ldr	r0, [pc, #12]	; (80032e4 <TSK_HardwareFaultTask+0x1c>)
 80032d8:	2200      	movs	r2, #0
 80032da:	2180      	movs	r1, #128	; 0x80
 80032dc:	f7ff ba18 	b.w	8002710 <MCI_FaultProcessing>
 80032e0:	20000ad0 	.word	0x20000ad0
 80032e4:	20000a70 	.word	0x20000a70

080032e8 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 80032e8:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 80032ea:	f7ff f9d5 	bl	8002698 <MC_GetSTMStateMotor1>
 80032ee:	b918      	cbnz	r0, 80032f8 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 80032f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 80032f4:	f7ff b9b8 	b.w	8002668 <MC_StartMotor1>
}
 80032f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 80032fc:	f7ff b9ba 	b.w	8002674 <MC_StopMotor1>

08003300 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8003300:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003302:	4a43      	ldr	r2, [pc, #268]	; (8003410 <mc_lock_pins+0x110>)
 8003304:	4b43      	ldr	r3, [pc, #268]	; (8003414 <mc_lock_pins+0x114>)
 8003306:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003308:	2110      	movs	r1, #16
 800330a:	b08e      	sub	sp, #56	; 0x38
 800330c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800330e:	61d3      	str	r3, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8003310:	69d1      	ldr	r1, [r2, #28]
 8003312:	910d      	str	r1, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003314:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003318:	493f      	ldr	r1, [pc, #252]	; (8003418 <mc_lock_pins+0x118>)
  (void) temp;
 800331a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800331c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800331e:	2080      	movs	r0, #128	; 0x80
 8003320:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003322:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003324:	69dc      	ldr	r4, [r3, #28]
 8003326:	940c      	str	r4, [sp, #48]	; 0x30
  (void) temp;
 8003328:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800332a:	4c3c      	ldr	r4, [pc, #240]	; (800341c <mc_lock_pins+0x11c>)
 800332c:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800332e:	2540      	movs	r5, #64	; 0x40
 8003330:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003332:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003334:	69d4      	ldr	r4, [r2, #28]
 8003336:	940b      	str	r4, [sp, #44]	; 0x2c
  (void) temp;
 8003338:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800333a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800333c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800333e:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003340:	69d2      	ldr	r2, [r2, #28]
 8003342:	920a      	str	r2, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003344:	f44f 7180 	mov.w	r1, #256	; 0x100
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003348:	4a35      	ldr	r2, [pc, #212]	; (8003420 <mc_lock_pins+0x120>)
  (void) temp;
 800334a:	980a      	ldr	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800334c:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800334e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003350:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	9209      	str	r2, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003356:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 800335a:	f44f 7000 	mov.w	r0, #512	; 0x200
  (void) temp;
 800335e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003360:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003362:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003364:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003366:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003368:	4a2e      	ldr	r2, [pc, #184]	; (8003424 <mc_lock_pins+0x124>)
  temp = READ_REG(GPIOx->LCKR);
 800336a:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800336c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003370:	f44f 3188 	mov.w	r1, #69632	; 0x11000
  (void) temp;
 8003374:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003376:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003378:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800337a:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800337c:	69d1      	ldr	r1, [r2, #28]
 800337e:	9107      	str	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003380:	f44f 6080 	mov.w	r0, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003384:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  (void) temp;
 8003388:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800338a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800338c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800338e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003390:	69d9      	ldr	r1, [r3, #28]
 8003392:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003394:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003398:	f44f 31a0 	mov.w	r1, #81920	; 0x14000
  (void) temp;
 800339c:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800339e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80033a0:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80033a2:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80033a4:	69d1      	ldr	r1, [r2, #28]
 80033a6:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80033a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80033ac:	f44f 3190 	mov.w	r1, #73728	; 0x12000
  (void) temp;
 80033b0:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80033b2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80033b4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80033b6:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80033b8:	69d1      	ldr	r1, [r2, #28]
 80033ba:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80033bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80033c0:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  (void) temp;
 80033c4:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80033c6:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80033c8:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80033ca:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80033cc:	69d0      	ldr	r0, [r2, #28]
 80033ce:	9003      	str	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80033d0:	4915      	ldr	r1, [pc, #84]	; (8003428 <mc_lock_pins+0x128>)
  (void) temp;
 80033d2:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80033d4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80033d6:	2002      	movs	r0, #2
 80033d8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80033da:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80033dc:	69d9      	ldr	r1, [r3, #28]
 80033de:	9102      	str	r1, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80033e0:	2001      	movs	r0, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80033e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  (void) temp;
 80033e6:	9c02      	ldr	r4, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80033e8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80033ea:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80033ec:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	9301      	str	r3, [sp, #4]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80033f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80033f6:	f44f 3384 	mov.w	r3, #67584	; 0x10800
  (void) temp;
 80033fa:	9801      	ldr	r0, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80033fc:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80033fe:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003400:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003402:	69d3      	ldr	r3, [r2, #28]
 8003404:	9300      	str	r3, [sp, #0]
  (void) temp;
 8003406:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_EN_U_GPIO_Port, M1_PWM_EN_U_Pin);
LL_GPIO_LockPin(M1_PWM_EN_W_GPIO_Port, M1_PWM_EN_W_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
}
 8003408:	b00e      	add	sp, #56	; 0x38
 800340a:	bc30      	pop	{r4, r5}
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	48000800 	.word	0x48000800
 8003414:	00010010 	.word	0x00010010
 8003418:	00010080 	.word	0x00010080
 800341c:	00010040 	.word	0x00010040
 8003420:	00010100 	.word	0x00010100
 8003424:	48000400 	.word	0x48000400
 8003428:	00010002 	.word	0x00010002

0800342c <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 800342c:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 800342e:	f003 fc7d 	bl	8006d2c <HAL_RCC_GetHCLKFreq>
 8003432:	4b0a      	ldr	r3, [pc, #40]	; (800345c <MX_MotorControl_Init+0x30>)
 8003434:	fba3 3000 	umull	r3, r0, r3, r0
 8003438:	09c0      	lsrs	r0, r0, #7
 800343a:	f002 fea7 	bl	800618c <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 800343e:	4b08      	ldr	r3, [pc, #32]	; (8003460 <MX_MotorControl_Init+0x34>)
 8003440:	2200      	movs	r2, #0
 8003442:	6819      	ldr	r1, [r3, #0]
 8003444:	f04f 30ff 	mov.w	r0, #4294967295
 8003448:	f002 fe54 	bl	80060f4 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 800344c:	4805      	ldr	r0, [pc, #20]	; (8003464 <MX_MotorControl_Init+0x38>)
 800344e:	f7ff fb65 	bl	8002b1c <MCboot>
  mc_lock_pins();
}
 8003452:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8003456:	f7ff bf53 	b.w	8003300 <mc_lock_pins>
 800345a:	bf00      	nop
 800345c:	10624dd3 	.word	0x10624dd3
 8003460:	200004d0 	.word	0x200004d0
 8003464:	20001c60 	.word	0x20001c60

08003468 <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8003468:	6803      	ldr	r3, [r0, #0]
 800346a:	4718      	bx	r3

0800346c <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 800346c:	b510      	push	{r4, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800346e:	f8b0 4060 	ldrh.w	r4, [r0, #96]	; 0x60
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8003472:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
{
 8003474:	b082      	sub	sp, #8
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8003476:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 800347a:	9101      	str	r1, [sp, #4]
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800347c:	fb04 fc0c 	mul.w	ip, r4, ip
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8003480:	b209      	sxth	r1, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8003482:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8003486:	fb03 f101 	mul.w	r1, r3, r1

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 800348a:	eb01 034c 	add.w	r3, r1, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 800348e:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8003492:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 8003496:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 800349a:	f1b3 3fff 	cmp.w	r3, #4294967295
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800349e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 80034a2:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 80034a6:	ea4f 0262 	mov.w	r2, r2, asr #1
    if (wY < 0)
 80034aa:	f2c0 8086 	blt.w	80035ba <PWMC_SetPhaseVoltage+0x14e>
          pHandle->highDuty = (uint16_t)wTimePhA;
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 80034ae:	f1b1 3fff 	cmp.w	r1, #4294967295
 80034b2:	db57      	blt.n	8003564 <PWMC_SetPhaseVoltage+0xf8>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80034b4:	ebbe 0e02 	subs.w	lr, lr, r2
 80034b8:	bf44      	itt	mi
 80034ba:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 80034be:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80034c2:	2900      	cmp	r1, #0
 80034c4:	bfbc      	itt	lt
 80034c6:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 80034ca:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	bfb8      	it	lt
 80034d2:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80034d6:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80034da:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80034de:	bfb8      	it	lt
 80034e0:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_2;
 80034e4:	f04f 0c01 	mov.w	ip, #1
        wTimePhB = wTimePhA + (wZ / 131072);
 80034e8:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80034ec:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        pHandle->Sector = SECTOR_2;
 80034f0:	f880 c06a 	strb.w	ip, [r0, #106]	; 0x6a

        pHandle->lowDuty = (uint16_t)wTimePhB;
 80034f4:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
        pHandle->midDuty = (uint16_t)wTimePhA;
 80034f8:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
        pHandle->highDuty = (uint16_t)wTimePhC;
 80034fc:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 8003500:	f8b0 405e 	ldrh.w	r4, [r0, #94]	; 0x5e
 8003504:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8003508:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800350c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003510:	b292      	uxth	r2, r2
 8003512:	b289      	uxth	r1, r1
 8003514:	b29b      	uxth	r3, r3
 8003516:	2c01      	cmp	r4, #1
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8003518:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800351a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 800351e:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
    if (1U == pHandle->DTTest)
 8003522:	d11a      	bne.n	800355a <PWMC_SetPhaseVoltage+0xee>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 8003524:	f9b0 4050 	ldrsh.w	r4, [r0, #80]	; 0x50
 8003528:	2c00      	cmp	r4, #0
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 800352a:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
 800352e:	bfcc      	ite	gt
 8003530:	1912      	addgt	r2, r2, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8003532:	1b12      	suble	r2, r2, r4
 8003534:	b292      	uxth	r2, r2
 8003536:	87c2      	strh	r2, [r0, #62]	; 0x3e
      }

      if (pHandle->Ib > 0)
 8003538:	f9b0 2052 	ldrsh.w	r2, [r0, #82]	; 0x52
 800353c:	2a00      	cmp	r2, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 800353e:	f9b0 2054 	ldrsh.w	r2, [r0, #84]	; 0x54
        pHandle->CntPhB += pHandle->DTCompCnt;
 8003542:	bfcc      	ite	gt
 8003544:	1909      	addgt	r1, r1, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8003546:	1b09      	suble	r1, r1, r4
      if (pHandle->Ic > 0)
 8003548:	2a00      	cmp	r2, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 800354a:	b289      	uxth	r1, r1
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 800354c:	bfcc      	ite	gt
 800354e:	191b      	addgt	r3, r3, r4
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8003550:	1b1b      	suble	r3, r3, r4
 8003552:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8003556:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800355a:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 800355c:	b002      	add	sp, #8
 800355e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8003562:	4718      	bx	r3
        if ( wX <= 0 )
 8003564:	f1bc 0f00 	cmp.w	ip, #0
 8003568:	dd4f      	ble.n	800360a <PWMC_SetPhaseVoltage+0x19e>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800356a:	ebbc 0e02 	subs.w	lr, ip, r2
 800356e:	bf44      	itt	mi
 8003570:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8003574:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8003578:	2900      	cmp	r1, #0
 800357a:	bfb8      	it	lt
 800357c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_1;
 8003580:	f04f 0300 	mov.w	r3, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 8003584:	bfb8      	it	lt
 8003586:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_1;
 800358a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800358e:	08a2      	lsrs	r2, r4, #2
          wTimePhC = wTimePhB - (wX / 131072);
 8003590:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8003594:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8003598:	bfb8      	it	lt
 800359a:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 800359e:	eb02 41a1 	add.w	r1, r2, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80035a2:	bfb8      	it	lt
 80035a4:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80035a8:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 80035ac:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 80035b0:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhC;
 80035b4:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
 80035b8:	e7a2      	b.n	8003500 <PWMC_SetPhaseVoltage+0x94>
      if (wZ < 0)
 80035ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 80035be:	db75      	blt.n	80036ac <PWMC_SetPhaseVoltage+0x240>
        if (wX <= 0)
 80035c0:	f1bc 0f00 	cmp.w	ip, #0
 80035c4:	dd4a      	ble.n	800365c <PWMC_SetPhaseVoltage+0x1f0>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80035c6:	ebbe 0e0c 	subs.w	lr, lr, ip
 80035ca:	bf48      	it	mi
 80035cc:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 80035d0:	f04f 0202 	mov.w	r2, #2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80035d4:	bf48      	it	mi
 80035d6:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bfb8      	it	lt
 80035de:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 80035e2:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80035e6:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80035ea:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 80035ee:	bfb8      	it	lt
 80035f0:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 80035f4:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80035f8:	eb03 416c 	add.w	r1, r3, ip, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhB;
 80035fc:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhC;
 8003600:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhA;
 8003604:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 8003608:	e77a      	b.n	8003500 <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800360a:	ebbe 0e0c 	subs.w	lr, lr, ip
 800360e:	bf44      	itt	mi
 8003610:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8003614:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8003618:	2b00      	cmp	r3, #0
 800361a:	bfb8      	it	lt
 800361c:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_6;
 8003620:	f04f 0205 	mov.w	r2, #5
          wTimePhC = wTimePhA - (wY / 131072);
 8003624:	bfb8      	it	lt
 8003626:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          pHandle->Sector = SECTOR_6;
 800362a:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
          wTimePhB = wTimePhC + (wX / 131072);
 800362e:	f1bc 0100 	subs.w	r1, ip, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8003632:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8003636:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 800363a:	bfb8      	it	lt
 800363c:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
          wTimePhC = wTimePhA - (wY / 131072);
 8003640:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8003644:	bfb8      	it	lt
 8003646:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 800364a:	eb03 4161 	add.w	r1, r3, r1, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 800364e:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhC;
 8003652:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhB;
 8003656:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
 800365a:	e751      	b.n	8003500 <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800365c:	ebbc 0e02 	subs.w	lr, ip, r2
 8003660:	bf44      	itt	mi
 8003662:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8003666:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 800366a:	2900      	cmp	r1, #0
 800366c:	bfb8      	it	lt
 800366e:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_4;
 8003672:	f04f 0303 	mov.w	r3, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8003676:	bfb8      	it	lt
 8003678:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_4;
 800367c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8003680:	08a2      	lsrs	r2, r4, #2
          wTimePhC = wTimePhB - (wX / 131072);
 8003682:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8003686:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800368a:	bfb8      	it	lt
 800368c:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 8003690:	eb02 41a1 	add.w	r1, r2, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8003694:	bfb8      	it	lt
 8003696:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 800369a:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhC;
 800369e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 80036a2:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhA;
 80036a6:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 80036aa:	e729      	b.n	8003500 <PWMC_SetPhaseVoltage+0x94>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80036ac:	ebbe 0e02 	subs.w	lr, lr, r2
 80036b0:	bf44      	itt	mi
 80036b2:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 80036b6:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80036ba:	2900      	cmp	r1, #0
 80036bc:	bfbc      	itt	lt
 80036be:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 80036c2:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	bfb8      	it	lt
 80036ca:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80036ce:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80036d2:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80036d6:	bfb8      	it	lt
 80036d8:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_5;
 80036dc:	f04f 0c04 	mov.w	ip, #4
        wTimePhB = wTimePhA + (wZ / 131072);
 80036e0:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80036e4:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        pHandle->Sector = SECTOR_5;
 80036e8:	f880 c06a 	strb.w	ip, [r0, #106]	; 0x6a
        pHandle->lowDuty = (uint16_t)wTimePhC;
 80036ec:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
        pHandle->midDuty = (uint16_t)wTimePhA;
 80036f0:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
        pHandle->highDuty = (uint16_t)wTimePhB;
 80036f4:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
 80036f8:	e702      	b.n	8003500 <PWMC_SetPhaseVoltage+0x94>
 80036fa:	bf00      	nop

080036fc <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 80036fc:	6843      	ldr	r3, [r0, #4]
 80036fe:	4718      	bx	r3

08003700 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8003700:	6883      	ldr	r3, [r0, #8]
 8003702:	4718      	bx	r3

08003704 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8003704:	b510      	push	{r4, lr}
 8003706:	4604      	mov	r4, r0
 8003708:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 800370a:	b199      	cbz	r1, 8003734 <PWMC_CurrentReadingCalibr+0x30>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 800370c:	2901      	cmp	r1, #1
 800370e:	d002      	beq.n	8003716 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8003710:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8003712:	b002      	add	sp, #8
 8003714:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8003716:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
 800371a:	b19b      	cbz	r3, 8003744 <PWMC_CurrentReadingCalibr+0x40>
        pHandle->OffCalibrWaitTimeCounter--;
 800371c:	3b01      	subs	r3, #1
 800371e:	b29b      	uxth	r3, r3
 8003720:	9101      	str	r1, [sp, #4]
 8003722:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f2      	bne.n	8003710 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 800372a:	68c3      	ldr	r3, [r0, #12]
 800372c:	4798      	blx	r3
          retVal = true;
 800372e:	9901      	ldr	r1, [sp, #4]
 8003730:	4608      	mov	r0, r1
 8003732:	e7ee      	b.n	8003712 <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 8003734:	f7ff ffe2 	bl	80036fc <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8003738:	4620      	mov	r0, r4
 800373a:	68e3      	ldr	r3, [r4, #12]
 800373c:	4798      	blx	r3
      retVal = true;
 800373e:	2001      	movs	r0, #1
}
 8003740:	b002      	add	sp, #8
 8003742:	bd10      	pop	{r4, pc}
        retVal = true;
 8003744:	4608      	mov	r0, r1
}
 8003746:	b002      	add	sp, #8
 8003748:	bd10      	pop	{r4, pc}
 800374a:	bf00      	nop

0800374c <PWMC_CheckOverCurrent>:
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 800374c:	6983      	ldr	r3, [r0, #24]
 800374e:	4718      	bx	r3

08003750 <RI_SetRegCommandParser>:

static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString(const char_t * srcString, char_t * destString, uint16_t *size, int16_t maxSize);
__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8003750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8003754:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    uint16_t size = 0U;
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8003758:	2300      	movs	r3, #0
    uint8_t accessResult;
    while (rxLength > 0)
 800375a:	429a      	cmp	r2, r3
    uint8_t * txData = pHandle->txBuffer;
 800375c:	e9d0 c501 	ldrd	ip, r5, [r0, #4]
{
 8003760:	b085      	sub	sp, #20
 8003762:	4607      	mov	r7, r0
    pHandle->txLength = 0;
 8003764:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0)
 8003766:	dd65      	ble.n	8003834 <RI_SetRegCommandParser+0xe4>
              uint32_t torque;
              uint16_t duration;

              torque = *(uint32_t *)rawData; //cstat !MISRAC2012-Rule-11.3
              duration = *(uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8003768:	f8df a378 	ldr.w	sl, [pc, #888]	; 8003ae4 <RI_SetRegCommandParser+0x394>
  uint8_t retVal = MCP_CMD_OK;
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	eb05 0901 	add.w	r9, r5, r1
 8003772:	f1c5 0b01 	rsb	fp, r5, #1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8003776:	4664      	mov	r4, ip
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8003778:	b296      	uxth	r6, r2
      accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 800377a:	f834 0b02 	ldrh.w	r0, [r4], #2
    switch (typeID)
 800377e:	f000 0138 	and.w	r1, r0, #56	; 0x38
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8003782:	1eb2      	subs	r2, r6, #2
    uint16_t regID = dataID & REG_MASK;
 8003784:	f020 0307 	bic.w	r3, r0, #7
    switch (typeID)
 8003788:	3908      	subs	r1, #8
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800378a:	fa1f f882 	uxth.w	r8, r2
    uint16_t regID = dataID & REG_MASK;
 800378e:	b29b      	uxth	r3, r3
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8003790:	b212      	sxth	r2, r2
    switch (typeID)
 8003792:	2920      	cmp	r1, #32
 8003794:	d812      	bhi.n	80037bc <RI_SetRegCommandParser+0x6c>
 8003796:	e8df f001 	tbb	[pc, r1]
 800379a:	11b1      	.short	0x11b1
 800379c:	11111111 	.word	0x11111111
 80037a0:	11861111 	.word	0x11861111
 80037a4:	11111111 	.word	0x11111111
 80037a8:	11bd1111 	.word	0x11bd1111
 80037ac:	11111111 	.word	0x11111111
 80037b0:	11651111 	.word	0x11651111
 80037b4:	11111111 	.word	0x11111111
 80037b8:	1111      	.short	0x1111
 80037ba:	27          	.byte	0x27
 80037bb:	00          	.byte	0x00
 80037bc:	2007      	movs	r0, #7
        if ((1U == number_of_item) && (0 == rxLength))
 80037be:	eb05 030b 	add.w	r3, r5, fp
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d031      	beq.n	800382c <RI_SetRegCommandParser+0xdc>
        if (txSyncFreeSpace !=0 )
 80037c8:	454d      	cmp	r5, r9
 80037ca:	f000 80b2 	beq.w	8003932 <RI_SetRegCommandParser+0x1e2>
          *txData = accessResult;
 80037ce:	f805 0b01 	strb.w	r0, [r5], #1
          pHandle->txLength++;
 80037d2:	89fb      	ldrh	r3, [r7, #14]
 80037d4:	3301      	adds	r3, #1
 80037d6:	81fb      	strh	r3, [r7, #14]
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80037d8:	2800      	cmp	r0, #0
 80037da:	f040 80ae 	bne.w	800393a <RI_SetRegCommandParser+0x1ea>
    while (rxLength > 0)
 80037de:	2a00      	cmp	r2, #0
 80037e0:	f340 8283 	ble.w	8003cea <RI_SetRegCommandParser+0x59a>
 80037e4:	46a4      	mov	ip, r4
 80037e6:	e7c6      	b.n	8003776 <RI_SetRegCommandParser+0x26>
        *size = rawSize + 2U;
 80037e8:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 80037ec:	3602      	adds	r6, #2
 80037ee:	b2b6      	uxth	r6, r6
        if (*size > dataAvailable )
 80037f0:	4296      	cmp	r6, r2
 80037f2:	f300 81a1 	bgt.w	8003b38 <RI_SetRegCommandParser+0x3e8>
          switch (regID)
 80037f6:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 80037fa:	f000 81d6 	beq.w	8003baa <RI_SetRegCommandParser+0x45a>
 80037fe:	d91e      	bls.n	800383e <RI_SetRegCommandParser+0xee>
 8003800:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8003804:	f000 81de 	beq.w	8003bc4 <RI_SetRegCommandParser+0x474>
 8003808:	f5b3 6fa5 	cmp.w	r3, #1320	; 0x528
 800380c:	f040 817c 	bne.w	8003b08 <RI_SetRegCommandParser+0x3b8>
              break;
            }

            case MC_REG_ASYNC_UARTA:
            {
              retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8003810:	48b0      	ldr	r0, [pc, #704]	; (8003ad4 <RI_SetRegCommandParser+0x384>)
 8003812:	f10c 0104 	add.w	r1, ip, #4
 8003816:	f005 fa07 	bl	8008c28 <MCPA_cfgLog>
        if ((1U == number_of_item) && (0 == rxLength))
 800381a:	eb05 030b 	add.w	r3, r5, fp
 800381e:	b2db      	uxtb	r3, r3
      rxLength = (int16_t) (rxLength - size);
 8003820:	eba8 0206 	sub.w	r2, r8, r6
        if ((1U == number_of_item) && (0 == rxLength))
 8003824:	2b01      	cmp	r3, #1
      rxData = rxData+size;
 8003826:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8003828:	b212      	sxth	r2, r2
        if ((1U == number_of_item) && (0 == rxLength))
 800382a:	d1cd      	bne.n	80037c8 <RI_SetRegCommandParser+0x78>
 800382c:	2a00      	cmp	r2, #0
 800382e:	d1cb      	bne.n	80037c8 <RI_SetRegCommandParser+0x78>
      if (MCP_CMD_OK == retVal)
 8003830:	2800      	cmp	r0, #0
 8003832:	d17f      	bne.n	8003934 <RI_SetRegCommandParser+0x1e4>
      pHandle->txLength = 0;
 8003834:	2000      	movs	r0, #0
 8003836:	81f8      	strh	r0, [r7, #14]
}
 8003838:	b005      	add	sp, #20
 800383a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800383e:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8003842:	f000 819f 	beq.w	8003b84 <RI_SetRegCommandParser+0x434>
 8003846:	f200 815f 	bhi.w	8003b08 <RI_SetRegCommandParser+0x3b8>
 800384a:	2ba8      	cmp	r3, #168	; 0xa8
 800384c:	d004      	beq.n	8003858 <RI_SetRegCommandParser+0x108>
 800384e:	f240 8156 	bls.w	8003afe <RI_SetRegCommandParser+0x3ae>
 8003852:	2be8      	cmp	r3, #232	; 0xe8
 8003854:	f040 8158 	bne.w	8003b08 <RI_SetRegCommandParser+0x3b8>
      rxLength = (int16_t) (rxLength - size);
 8003858:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 800385c:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 800385e:	b212      	sxth	r2, r2
              retVal = MCP_ERROR_RO_REG;
 8003860:	2004      	movs	r0, #4
 8003862:	e7ac      	b.n	80037be <RI_SetRegCommandParser+0x6e>

  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */

  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003864:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 81d3 	beq.w	8003c14 <RI_SetRegCommandParser+0x4c4>
 800386e:	2a01      	cmp	r2, #1
 8003870:	f340 815c 	ble.w	8003b2c <RI_SetRegCommandParser+0x3dc>
 8003874:	f10c 0003 	add.w	r0, ip, #3
 8003878:	ea6f 0c0c 	mvn.w	ip, ip
 800387c:	e002      	b.n	8003884 <RI_SetRegCommandParser+0x134>
 800387e:	429a      	cmp	r2, r3
 8003880:	f340 814e 	ble.w	8003b20 <RI_SetRegCommandParser+0x3d0>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
 8003884:	eb0c 0300 	add.w	r3, ip, r0
 8003888:	4606      	mov	r6, r0
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800388a:	f910 1b01 	ldrsb.w	r1, [r0], #1
 800388e:	b29b      	uxth	r3, r3
 8003890:	2900      	cmp	r1, #0
 8003892:	d1f4      	bne.n	800387e <RI_SetRegCommandParser+0x12e>
      rxData = rxData+size;
 8003894:	461a      	mov	r2, r3
      rxLength = (int16_t) (rxLength - size);
 8003896:	eba8 0303 	sub.w	r3, r8, r3
      rxData = rxData+size;
 800389a:	4414      	add	r4, r2
      rxLength = (int16_t) (rxLength - size);
 800389c:	b21a      	sxth	r2, r3
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 800389e:	2300      	movs	r3, #0
 80038a0:	7033      	strb	r3, [r6, #0]
        retVal = MCP_ERROR_RO_REG;
 80038a2:	2004      	movs	r0, #4
 80038a4:	e78b      	b.n	80037be <RI_SetRegCommandParser+0x6e>
        uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 80038a6:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 80038aa:	f8bc 1002 	ldrh.w	r1, [ip, #2]
        switch (regID)
 80038ae:	f000 820c 	beq.w	8003cca <RI_SetRegCommandParser+0x57a>
 80038b2:	f200 808e 	bhi.w	80039d2 <RI_SetRegCommandParser+0x282>
 80038b6:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 80038ba:	f000 8211 	beq.w	8003ce0 <RI_SetRegCommandParser+0x590>
 80038be:	d95b      	bls.n	8003978 <RI_SetRegCommandParser+0x228>
 80038c0:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80038c4:	f000 81c8 	beq.w	8003c58 <RI_SetRegCommandParser+0x508>
 80038c8:	d977      	bls.n	80039ba <RI_SetRegCommandParser+0x26a>
 80038ca:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 80038ce:	d046      	beq.n	800395e <RI_SetRegCommandParser+0x20e>
 80038d0:	d93a      	bls.n	8003948 <RI_SetRegCommandParser+0x1f8>
 80038d2:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 80038d6:	d148      	bne.n	800396a <RI_SetRegCommandParser+0x21a>
            currComp = MCI_GetIqdref(pMCIN);
 80038d8:	4650      	mov	r0, sl
 80038da:	9101      	str	r1, [sp, #4]
      rxData = rxData+size;
 80038dc:	f10c 0404 	add.w	r4, ip, #4
            currComp = MCI_GetIqdref(pMCIN);
 80038e0:	f7fe fff6 	bl	80028d0 <MCI_GetIqdref>
            currComp.q = (int16_t)regdata16;
 80038e4:	9901      	ldr	r1, [sp, #4]
            currComp = MCI_GetIqdref(pMCIN);
 80038e6:	9003      	str	r0, [sp, #12]
            currComp.q = (int16_t)regdata16;
 80038e8:	f8ad 100c 	strh.w	r1, [sp, #12]
            MCI_SetCurrentReferences(pMCIN,currComp);
 80038ec:	4650      	mov	r0, sl
 80038ee:	9903      	ldr	r1, [sp, #12]
 80038f0:	f7fe ff04 	bl	80026fc <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 80038f4:	1f32      	subs	r2, r6, #4
 80038f6:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 80038f8:	2000      	movs	r0, #0
 80038fa:	e760      	b.n	80037be <RI_SetRegCommandParser+0x6e>
        switch (regID)
 80038fc:	2b48      	cmp	r3, #72	; 0x48
 80038fe:	f000 8115 	beq.w	8003b2c <RI_SetRegCommandParser+0x3dc>
 8003902:	2b88      	cmp	r3, #136	; 0x88
 8003904:	f000 8120 	beq.w	8003b48 <RI_SetRegCommandParser+0x3f8>
      rxLength = (int16_t) (rxLength - size);
 8003908:	1ef2      	subs	r2, r6, #3
 800390a:	b212      	sxth	r2, r2
      rxData = rxData+size;
 800390c:	f10c 0403 	add.w	r4, ip, #3
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003910:	2005      	movs	r0, #5
            break;
 8003912:	e754      	b.n	80037be <RI_SetRegCommandParser+0x6e>
        switch (regID)
 8003914:	2b58      	cmp	r3, #88	; 0x58
 8003916:	f000 8111 	beq.w	8003b3c <RI_SetRegCommandParser+0x3ec>
 800391a:	2b98      	cmp	r3, #152	; 0x98
 800391c:	f000 8120 	beq.w	8003b60 <RI_SetRegCommandParser+0x410>
 8003920:	2b18      	cmp	r3, #24
 8003922:	f000 810b 	beq.w	8003b3c <RI_SetRegCommandParser+0x3ec>
      rxLength = (int16_t) (rxLength - size);
 8003926:	1fb2      	subs	r2, r6, #6
 8003928:	b212      	sxth	r2, r2
      rxData = rxData+size;
 800392a:	f10c 0406 	add.w	r4, ip, #6
            retVal = MCP_ERROR_UNKNOWN_REG;
 800392e:	2005      	movs	r0, #5
            break;
 8003930:	e745      	b.n	80037be <RI_SetRegCommandParser+0x6e>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003932:	2008      	movs	r0, #8
}
 8003934:	b005      	add	sp, #20
 8003936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 800393a:	2807      	cmp	r0, #7
 800393c:	f040 80ea 	bne.w	8003b14 <RI_SetRegCommandParser+0x3c4>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8003940:	2001      	movs	r0, #1
}
 8003942:	b005      	add	sp, #20
 8003944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003948:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 800394c:	d007      	beq.n	800395e <RI_SetRegCommandParser+0x20e>
 800394e:	d930      	bls.n	80039b2 <RI_SetRegCommandParser+0x262>
 8003950:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003954:	d003      	beq.n	800395e <RI_SetRegCommandParser+0x20e>
 8003956:	d926      	bls.n	80039a6 <RI_SetRegCommandParser+0x256>
 8003958:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 800395c:	d106      	bne.n	800396c <RI_SetRegCommandParser+0x21c>
      rxLength = (int16_t) (rxLength - size);
 800395e:	1f32      	subs	r2, r6, #4
 8003960:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8003962:	f10c 0404 	add.w	r4, ip, #4
            retVal = MCP_ERROR_RO_REG;
 8003966:	2004      	movs	r0, #4
            break;
 8003968:	e729      	b.n	80037be <RI_SetRegCommandParser+0x6e>
 800396a:	d964      	bls.n	8003a36 <RI_SetRegCommandParser+0x2e6>
      rxLength = (int16_t) (rxLength - size);
 800396c:	1f32      	subs	r2, r6, #4
 800396e:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8003970:	f10c 0404 	add.w	r4, ip, #4
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003974:	2005      	movs	r0, #5
            break;
 8003976:	e722      	b.n	80037be <RI_SetRegCommandParser+0x6e>
 8003978:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800397c:	f000 8177 	beq.w	8003c6e <RI_SetRegCommandParser+0x51e>
 8003980:	d94a      	bls.n	8003a18 <RI_SetRegCommandParser+0x2c8>
 8003982:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003986:	f000 8193 	beq.w	8003cb0 <RI_SetRegCommandParser+0x560>
 800398a:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 800398e:	d1ed      	bne.n	800396c <RI_SetRegCommandParser+0x21c>
            PID_SetKI(pPIDIq[motorID], (int16_t)regdata16);
 8003990:	4b51      	ldr	r3, [pc, #324]	; (8003ad8 <RI_SetRegCommandParser+0x388>)
 8003992:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8003994:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	f005 fa17 	bl	8008dcc <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 800399e:	1f32      	subs	r2, r6, #4
 80039a0:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 80039a2:	2000      	movs	r0, #0
            break;
 80039a4:	e70b      	b.n	80037be <RI_SetRegCommandParser+0x6e>
 80039a6:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 80039aa:	f5b0 6ff2 	cmp.w	r0, #1936	; 0x790
 80039ae:	d1dd      	bne.n	800396c <RI_SetRegCommandParser+0x21c>
 80039b0:	e7d5      	b.n	800395e <RI_SetRegCommandParser+0x20e>
 80039b2:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 80039b6:	d0d2      	beq.n	800395e <RI_SetRegCommandParser+0x20e>
 80039b8:	e7d8      	b.n	800396c <RI_SetRegCommandParser+0x21c>
 80039ba:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 80039be:	f000 8140 	beq.w	8003c42 <RI_SetRegCommandParser+0x4f2>
 80039c2:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 80039c6:	d1d1      	bne.n	800396c <RI_SetRegCommandParser+0x21c>
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 80039c8:	4b44      	ldr	r3, [pc, #272]	; (8003adc <RI_SetRegCommandParser+0x38c>)
 80039ca:	b209      	sxth	r1, r1
      rxData = rxData+size;
 80039cc:	f10c 0404 	add.w	r4, ip, #4
 80039d0:	e7e2      	b.n	8003998 <RI_SetRegCommandParser+0x248>
 80039d2:	f241 5210 	movw	r2, #5392	; 0x1510
 80039d6:	4293      	cmp	r3, r2
 80039d8:	f000 8120 	beq.w	8003c1c <RI_SetRegCommandParser+0x4cc>
 80039dc:	d945      	bls.n	8003a6a <RI_SetRegCommandParser+0x31a>
 80039de:	f241 52d0 	movw	r2, #5584	; 0x15d0
 80039e2:	4293      	cmp	r3, r2
 80039e4:	f000 814d 	beq.w	8003c82 <RI_SetRegCommandParser+0x532>
 80039e8:	d92c      	bls.n	8003a44 <RI_SetRegCommandParser+0x2f4>
 80039ea:	f241 6250 	movw	r2, #5712	; 0x1650
 80039ee:	4293      	cmp	r3, r2
 80039f0:	f000 8163 	beq.w	8003cba <RI_SetRegCommandParser+0x56a>
 80039f4:	f641 3258 	movw	r2, #7000	; 0x1b58
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d0b0      	beq.n	800395e <RI_SetRegCommandParser+0x20e>
 80039fc:	f241 6210 	movw	r2, #5648	; 0x1610
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d1b3      	bne.n	800396c <RI_SetRegCommandParser+0x21c>
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8003a04:	4b34      	ldr	r3, [pc, #208]	; (8003ad8 <RI_SetRegCommandParser+0x388>)
      rxData = rxData+size;
 8003a06:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	f005 f9f8 	bl	8008e00 <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8003a10:	1f32      	subs	r2, r6, #4
 8003a12:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003a14:	2000      	movs	r0, #0
            break;
 8003a16:	e6d2      	b.n	80037be <RI_SetRegCommandParser+0x6e>
 8003a18:	2b90      	cmp	r3, #144	; 0x90
 8003a1a:	f000 813f 	beq.w	8003c9c <RI_SetRegCommandParser+0x54c>
 8003a1e:	2bd0      	cmp	r3, #208	; 0xd0
 8003a20:	d1a4      	bne.n	800396c <RI_SetRegCommandParser+0x21c>
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 8003a22:	482f      	ldr	r0, [pc, #188]	; (8003ae0 <RI_SetRegCommandParser+0x390>)
 8003a24:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8003a26:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 8003a2a:	f005 f9cf 	bl	8008dcc <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 8003a2e:	1f32      	subs	r2, r6, #4
 8003a30:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003a32:	2000      	movs	r0, #0
            break;
 8003a34:	e6c3      	b.n	80037be <RI_SetRegCommandParser+0x6e>
 8003a36:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8003a3a:	d090      	beq.n	800395e <RI_SetRegCommandParser+0x20e>
 8003a3c:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8003a40:	d08d      	beq.n	800395e <RI_SetRegCommandParser+0x20e>
 8003a42:	e793      	b.n	800396c <RI_SetRegCommandParser+0x21c>
 8003a44:	f241 5250 	movw	r2, #5456	; 0x1550
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	f000 813a 	beq.w	8003cc2 <RI_SetRegCommandParser+0x572>
 8003a4e:	f241 5290 	movw	r2, #5520	; 0x1590
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d18a      	bne.n	800396c <RI_SetRegCommandParser+0x21c>
            PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 8003a56:	4b21      	ldr	r3, [pc, #132]	; (8003adc <RI_SetRegCommandParser+0x38c>)
      rxData = rxData+size;
 8003a58:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	f005 f9eb 	bl	8008e38 <PID_SetKDDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8003a62:	1f32      	subs	r2, r6, #4
 8003a64:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003a66:	2000      	movs	r0, #0
            break;
 8003a68:	e6a9      	b.n	80037be <RI_SetRegCommandParser+0x6e>
 8003a6a:	f241 4250 	movw	r2, #5200	; 0x1450
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	f000 810b 	beq.w	8003c8a <RI_SetRegCommandParser+0x53a>
 8003a74:	d912      	bls.n	8003a9c <RI_SetRegCommandParser+0x34c>
 8003a76:	f241 4290 	movw	r2, #5264	; 0x1490
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	f000 80d8 	beq.w	8003c30 <RI_SetRegCommandParser+0x4e0>
 8003a80:	f241 42d0 	movw	r2, #5328	; 0x14d0
 8003a84:	4293      	cmp	r3, r2
 8003a86:	f47f af71 	bne.w	800396c <RI_SetRegCommandParser+0x21c>
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8003a8a:	4815      	ldr	r0, [pc, #84]	; (8003ae0 <RI_SetRegCommandParser+0x390>)
      rxData = rxData+size;
 8003a8c:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8003a90:	f005 f9d2 	bl	8008e38 <PID_SetKDDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8003a94:	1f32      	subs	r2, r6, #4
 8003a96:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003a98:	2000      	movs	r0, #0
            break;
 8003a9a:	e690      	b.n	80037be <RI_SetRegCommandParser+0x6e>
 8003a9c:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8003aa0:	d004      	beq.n	8003aac <RI_SetRegCommandParser+0x35c>
 8003aa2:	d909      	bls.n	8003ab8 <RI_SetRegCommandParser+0x368>
 8003aa4:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8003aa8:	f47f af60 	bne.w	800396c <RI_SetRegCommandParser+0x21c>
      rxLength = (int16_t) (rxLength - size);
 8003aac:	1f32      	subs	r2, r6, #4
 8003aae:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8003ab0:	f10c 0404 	add.w	r4, ip, #4
  uint8_t retVal = MCP_CMD_OK;
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	e682      	b.n	80037be <RI_SetRegCommandParser+0x6e>
 8003ab8:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8003abc:	f43f af4f 	beq.w	800395e <RI_SetRegCommandParser+0x20e>
 8003ac0:	d912      	bls.n	8003ae8 <RI_SetRegCommandParser+0x398>
 8003ac2:	f5b3 6f2d 	cmp.w	r3, #2768	; 0xad0
 8003ac6:	f43f af4a 	beq.w	800395e <RI_SetRegCommandParser+0x20e>
 8003aca:	f5b3 6f31 	cmp.w	r3, #2832	; 0xb10
 8003ace:	f43f af46 	beq.w	800395e <RI_SetRegCommandParser+0x20e>
 8003ad2:	e74b      	b.n	800396c <RI_SetRegCommandParser+0x21c>
 8003ad4:	20000400 	.word	0x20000400
 8003ad8:	200003e4 	.word	0x200003e4
 8003adc:	200003e0 	.word	0x200003e0
 8003ae0:	20000264 	.word	0x20000264
 8003ae4:	20000a70 	.word	0x20000a70
 8003ae8:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8003aec:	f5b0 6f21 	cmp.w	r0, #2576	; 0xa10
 8003af0:	f43f af35 	beq.w	800395e <RI_SetRegCommandParser+0x20e>
 8003af4:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8003af8:	f43f af31 	beq.w	800395e <RI_SetRegCommandParser+0x20e>
 8003afc:	e736      	b.n	800396c <RI_SetRegCommandParser+0x21c>
 8003afe:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8003b02:	2828      	cmp	r0, #40	; 0x28
 8003b04:	f43f aea8 	beq.w	8003858 <RI_SetRegCommandParser+0x108>
      rxLength = (int16_t) (rxLength - size);
 8003b08:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 8003b0c:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8003b0e:	b212      	sxth	r2, r2
              retVal = MCP_ERROR_UNKNOWN_REG;
 8003b10:	2005      	movs	r0, #5
              break;
 8003b12:	e654      	b.n	80037be <RI_SetRegCommandParser+0x6e>
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8003b14:	280a      	cmp	r0, #10
 8003b16:	f43f af13 	beq.w	8003940 <RI_SetRegCommandParser+0x1f0>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	e65e      	b.n	80037de <RI_SetRegCommandParser+0x8e>
      rxLength = (int16_t) (rxLength - size);
 8003b20:	eba8 0203 	sub.w	r2, r8, r3
      rxData = rxData+size;
 8003b24:	441c      	add	r4, r3
      rxLength = (int16_t) (rxLength - size);
 8003b26:	b212      	sxth	r2, r2
        retVal = MCP_ERROR_RO_REG;
 8003b28:	2004      	movs	r0, #4
 8003b2a:	e648      	b.n	80037be <RI_SetRegCommandParser+0x6e>
      rxLength = (int16_t) (rxLength - size);
 8003b2c:	1ef2      	subs	r2, r6, #3
 8003b2e:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8003b30:	f10c 0403 	add.w	r4, ip, #3
            retVal = MCP_ERROR_RO_REG;
 8003b34:	2004      	movs	r0, #4
 8003b36:	e642      	b.n	80037be <RI_SetRegCommandParser+0x6e>
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 8003b38:	200a      	movs	r0, #10
 8003b3a:	e640      	b.n	80037be <RI_SetRegCommandParser+0x6e>
      rxLength = (int16_t) (rxLength - size);
 8003b3c:	1fb2      	subs	r2, r6, #6
 8003b3e:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8003b40:	f10c 0406 	add.w	r4, ip, #6
            retVal = MCP_ERROR_RO_REG;
 8003b44:	2004      	movs	r0, #4
 8003b46:	e63a      	b.n	80037be <RI_SetRegCommandParser+0x6e>
            uint8_t regdata8 = *data;
 8003b48:	f89c 3002 	ldrb.w	r3, [ip, #2]
            if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d045      	beq.n	8003bdc <RI_SetRegCommandParser+0x48c>
            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d051      	beq.n	8003bf8 <RI_SetRegCommandParser+0x4a8>
      rxLength = (int16_t) (rxLength - size);
 8003b54:	1ef2      	subs	r2, r6, #3
 8003b56:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8003b58:	f10c 0403 	add.w	r4, ip, #3
  uint8_t retVal = MCP_CMD_OK;
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	e62e      	b.n	80037be <RI_SetRegCommandParser+0x6e>
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8003b60:	f9bc 3002 	ldrsh.w	r3, [ip, #2]
 8003b64:	4a62      	ldr	r2, [pc, #392]	; (8003cf0 <RI_SetRegCommandParser+0x5a0>)
 8003b66:	fb82 2103 	smull	r2, r1, r2, r3
 8003b6a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003b6e:	2200      	movs	r2, #0
 8003b70:	4650      	mov	r0, sl
 8003b72:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8003b74:	f10c 0406 	add.w	r4, ip, #6
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8003b78:	f7fe fdac 	bl	80026d4 <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8003b7c:	1fb2      	subs	r2, r6, #6
 8003b7e:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003b80:	2000      	movs	r0, #0
            break;
 8003b82:	e61c      	b.n	80037be <RI_SetRegCommandParser+0x6e>
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8003b84:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003b88:	4959      	ldr	r1, [pc, #356]	; (8003cf0 <RI_SetRegCommandParser+0x5a0>)
 8003b8a:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 8003b8e:	fb81 0103 	smull	r0, r1, r1, r3
 8003b92:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003b96:	4650      	mov	r0, sl
 8003b98:	b209      	sxth	r1, r1
 8003b9a:	f7fe fd9b 	bl	80026d4 <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8003b9e:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 8003ba2:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8003ba4:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003ba6:	2000      	movs	r0, #0
              break;
 8003ba8:	e609      	b.n	80037be <RI_SetRegCommandParser+0x6e>
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8003baa:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 8003bae:	f9bc 1004 	ldrsh.w	r1, [ip, #4]
 8003bb2:	4650      	mov	r0, sl
 8003bb4:	f7fe fd98 	bl	80026e8 <MCI_ExecTorqueRamp>
      rxLength = (int16_t) (rxLength - size);
 8003bb8:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 8003bbc:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8003bbe:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003bc0:	2000      	movs	r0, #0
              break;
 8003bc2:	e5fc      	b.n	80037be <RI_SetRegCommandParser+0x6e>
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8003bc4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8003bc8:	9103      	str	r1, [sp, #12]
              MCI_SetCurrentReferences(pMCIN, currComp);
 8003bca:	4650      	mov	r0, sl
 8003bcc:	f7fe fd96 	bl	80026fc <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 8003bd0:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 8003bd4:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8003bd6:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003bd8:	2000      	movs	r0, #0
 8003bda:	e5f0      	b.n	80037be <RI_SetRegCommandParser+0x6e>
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8003bdc:	4650      	mov	r0, sl
      rxData = rxData+size;
 8003bde:	f10c 0403 	add.w	r4, ip, #3
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8003be2:	f7fe fe9f 	bl	8002924 <MCI_GetTeref>
 8003be6:	2200      	movs	r2, #0
 8003be8:	4601      	mov	r1, r0
 8003bea:	4650      	mov	r0, sl
 8003bec:	f7fe fd7c 	bl	80026e8 <MCI_ExecTorqueRamp>
      rxLength = (int16_t) (rxLength - size);
 8003bf0:	1ef2      	subs	r2, r6, #3
 8003bf2:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	e5e2      	b.n	80037be <RI_SetRegCommandParser+0x6e>
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8003bf8:	4650      	mov	r0, sl
      rxData = rxData+size;
 8003bfa:	f10c 0403 	add.w	r4, ip, #3
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8003bfe:	f7fe fe39 	bl	8002874 <MCI_GetMecSpeedRefUnit>
 8003c02:	2200      	movs	r2, #0
 8003c04:	4601      	mov	r1, r0
 8003c06:	4650      	mov	r0, sl
 8003c08:	f7fe fd64 	bl	80026d4 <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8003c0c:	1ef2      	subs	r2, r6, #3
 8003c0e:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003c10:	2000      	movs	r0, #0
 8003c12:	e5d4      	b.n	80037be <RI_SetRegCommandParser+0x6e>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003c14:	2201      	movs	r2, #1
  const char_t *tempsrcString = srcString;
 8003c16:	4626      	mov	r6, r4
  *size= 1U ; /* /0 is the min String size */
 8003c18:	4613      	mov	r3, r2
 8003c1a:	e63c      	b.n	8003896 <RI_SetRegCommandParser+0x146>
            PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 8003c1c:	4b35      	ldr	r3, [pc, #212]	; (8003cf4 <RI_SetRegCommandParser+0x5a4>)
      rxData = rxData+size;
 8003c1e:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	f005 f8e0 	bl	8008de8 <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8003c28:	1f32      	subs	r2, r6, #4
 8003c2a:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003c2c:	2000      	movs	r0, #0
            break;
 8003c2e:	e5c6      	b.n	80037be <RI_SetRegCommandParser+0x6e>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8003c30:	4831      	ldr	r0, [pc, #196]	; (8003cf8 <RI_SetRegCommandParser+0x5a8>)
      rxData = rxData+size;
 8003c32:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8003c36:	f005 f8e3 	bl	8008e00 <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8003c3a:	1f32      	subs	r2, r6, #4
 8003c3c:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003c3e:	2000      	movs	r0, #0
            break;
 8003c40:	e5bd      	b.n	80037be <RI_SetRegCommandParser+0x6e>
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 8003c42:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <RI_SetRegCommandParser+0x5a4>)
 8003c44:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8003c46:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	f005 f8bc 	bl	8008dc8 <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 8003c50:	1f32      	subs	r2, r6, #4
 8003c52:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003c54:	2000      	movs	r0, #0
            break;
 8003c56:	e5b2      	b.n	80037be <RI_SetRegCommandParser+0x6e>
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 8003c58:	4b26      	ldr	r3, [pc, #152]	; (8003cf4 <RI_SetRegCommandParser+0x5a4>)
 8003c5a:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8003c5c:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	f005 f8e1 	bl	8008e28 <PID_SetKD>
      rxLength = (int16_t) (rxLength - size);
 8003c66:	1f32      	subs	r2, r6, #4
 8003c68:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003c6a:	2000      	movs	r0, #0
            break;
 8003c6c:	e5a7      	b.n	80037be <RI_SetRegCommandParser+0x6e>
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 8003c6e:	4822      	ldr	r0, [pc, #136]	; (8003cf8 <RI_SetRegCommandParser+0x5a8>)
 8003c70:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8003c72:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 8003c76:	f005 f8d7 	bl	8008e28 <PID_SetKD>
      rxLength = (int16_t) (rxLength - size);
 8003c7a:	1f32      	subs	r2, r6, #4
 8003c7c:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003c7e:	2000      	movs	r0, #0
            break;
 8003c80:	e59d      	b.n	80037be <RI_SetRegCommandParser+0x6e>
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8003c82:	4b1e      	ldr	r3, [pc, #120]	; (8003cfc <RI_SetRegCommandParser+0x5ac>)
      rxData = rxData+size;
 8003c84:	f10c 0404 	add.w	r4, ip, #4
 8003c88:	e7cb      	b.n	8003c22 <RI_SetRegCommandParser+0x4d2>
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8003c8a:	481b      	ldr	r0, [pc, #108]	; (8003cf8 <RI_SetRegCommandParser+0x5a8>)
      rxData = rxData+size;
 8003c8c:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8003c90:	f005 f8aa 	bl	8008de8 <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8003c94:	1f32      	subs	r2, r6, #4
 8003c96:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003c98:	2000      	movs	r0, #0
            break;
 8003c9a:	e590      	b.n	80037be <RI_SetRegCommandParser+0x6e>
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8003c9c:	4816      	ldr	r0, [pc, #88]	; (8003cf8 <RI_SetRegCommandParser+0x5a8>)
 8003c9e:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8003ca0:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8003ca4:	f005 f890 	bl	8008dc8 <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 8003ca8:	1f32      	subs	r2, r6, #4
 8003caa:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003cac:	2000      	movs	r0, #0
            break;
 8003cae:	e586      	b.n	80037be <RI_SetRegCommandParser+0x6e>
            PID_SetKP(pPIDIq[motorID], (int16_t)regdata16);
 8003cb0:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <RI_SetRegCommandParser+0x5ac>)
 8003cb2:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8003cb4:	f10c 0404 	add.w	r4, ip, #4
 8003cb8:	e7c7      	b.n	8003c4a <RI_SetRegCommandParser+0x4fa>
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8003cba:	4b10      	ldr	r3, [pc, #64]	; (8003cfc <RI_SetRegCommandParser+0x5ac>)
      rxData = rxData+size;
 8003cbc:	f10c 0404 	add.w	r4, ip, #4
 8003cc0:	e6cc      	b.n	8003a5c <RI_SetRegCommandParser+0x30c>
            PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <RI_SetRegCommandParser+0x5a4>)
      rxData = rxData+size;
 8003cc4:	f10c 0404 	add.w	r4, ip, #4
 8003cc8:	e69f      	b.n	8003a0a <RI_SetRegCommandParser+0x2ba>
            currComp = MCI_GetIqdref(pMCIN);
 8003cca:	4650      	mov	r0, sl
 8003ccc:	9101      	str	r1, [sp, #4]
      rxData = rxData+size;
 8003cce:	f10c 0404 	add.w	r4, ip, #4
            currComp = MCI_GetIqdref(pMCIN);
 8003cd2:	f7fe fdfd 	bl	80028d0 <MCI_GetIqdref>
            currComp.d = (int16_t)regdata16;
 8003cd6:	9901      	ldr	r1, [sp, #4]
            currComp = MCI_GetIqdref(pMCIN);
 8003cd8:	9003      	str	r0, [sp, #12]
            currComp.d = (int16_t)regdata16;
 8003cda:	f8ad 100e 	strh.w	r1, [sp, #14]
 8003cde:	e605      	b.n	80038ec <RI_SetRegCommandParser+0x19c>
            PID_SetKD(pPIDIq[motorID], (int16_t)regdata16);
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <RI_SetRegCommandParser+0x5ac>)
 8003ce2:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8003ce4:	f10c 0404 	add.w	r4, ip, #4
 8003ce8:	e7ba      	b.n	8003c60 <RI_SetRegCommandParser+0x510>
 8003cea:	9800      	ldr	r0, [sp, #0]
 8003cec:	e5a0      	b.n	8003830 <RI_SetRegCommandParser+0xe0>
 8003cee:	bf00      	nop
 8003cf0:	2aaaaaab 	.word	0x2aaaaaab
 8003cf4:	200003e0 	.word	0x200003e0
 8003cf8:	20000264 	.word	0x20000264
 8003cfc:	200003e4 	.word	0x200003e4

08003d00 <RI_GetRegCommandParser>:
{
 8003d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t rxLength = pHandle->rxLength;
 8003d04:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t * rxData = pHandle->rxBuffer;
 8003d08:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8003d0c:	6885      	ldr	r5, [r0, #8]
    pHandle->txLength = 0;
 8003d0e:	2300      	movs	r3, #0
{
 8003d10:	b091      	sub	sp, #68	; 0x44
    pHandle->txLength = 0;
 8003d12:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0U)
 8003d14:	f1b8 0f00 	cmp.w	r8, #0
 8003d18:	f000 82fd 	beq.w	8004316 <RI_GetRegCommandParser+0x616>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8003d1c:	4eaa      	ldr	r6, [pc, #680]	; (8003fc8 <RI_GetRegCommandParser+0x2c8>)
 8003d1e:	4607      	mov	r7, r0
 8003d20:	b209      	sxth	r1, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8003d22:	464c      	mov	r4, r9
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8003d24:	f834 3b02 	ldrh.w	r3, [r4], #2
    switch (typeID)
 8003d28:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003d2c:	3a08      	subs	r2, #8
    uint16_t regID = dataID & REG_MASK;
 8003d2e:	f023 0307 	bic.w	r3, r3, #7
 8003d32:	b29b      	uxth	r3, r3
    switch (typeID)
 8003d34:	2a20      	cmp	r2, #32
 8003d36:	d812      	bhi.n	8003d5e <RI_GetRegCommandParser+0x5e>
 8003d38:	e8df f002 	tbb	[pc, r2]
 8003d3c:	111111af 	.word	0x111111af
 8003d40:	11111111 	.word	0x11111111
 8003d44:	11111167 	.word	0x11111167
 8003d48:	11111111 	.word	0x11111111
 8003d4c:	111111ba 	.word	0x111111ba
 8003d50:	11111111 	.word	0x11111111
 8003d54:	1111112b 	.word	0x1111112b
 8003d58:	11111111 	.word	0x11111111
 8003d5c:	15          	.byte	0x15
 8003d5d:	00          	.byte	0x00
 8003d5e:	2007      	movs	r0, #7
}
 8003d60:	b011      	add	sp, #68	; 0x44
 8003d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rawData++;
 8003d66:	2be8      	cmp	r3, #232	; 0xe8
 8003d68:	f105 0202 	add.w	r2, r5, #2
        switch (regID)
 8003d6c:	f000 82ca 	beq.w	8004304 <RI_GetRegCommandParser+0x604>
 8003d70:	f200 80cb 	bhi.w	8003f0a <RI_GetRegCommandParser+0x20a>
 8003d74:	2b68      	cmp	r3, #104	; 0x68
 8003d76:	f000 827c 	beq.w	8004272 <RI_GetRegCommandParser+0x572>
 8003d7a:	2ba8      	cmp	r3, #168	; 0xa8
 8003d7c:	f040 80b2 	bne.w	8003ee4 <RI_GetRegCommandParser+0x1e4>
            *rawSize = sizeof(ApplicationConfig_reg_t);
 8003d80:	230e      	movs	r3, #14
            if ((*rawSize) +2  > freeSpace)
 8003d82:	290f      	cmp	r1, #15
            *rawSize = sizeof(ApplicationConfig_reg_t);
 8003d84:	802b      	strh	r3, [r5, #0]
            if ((*rawSize) +2  > freeSpace)
 8003d86:	f300 8252 	bgt.w	800422e <RI_GetRegCommandParser+0x52e>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003d8a:	2008      	movs	r0, #8
}
 8003d8c:	b011      	add	sp, #68	; 0x44
 8003d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (regID)
 8003d92:	2ba0      	cmp	r3, #160	; 0xa0
 8003d94:	f000 821b 	beq.w	80041ce <RI_GetRegCommandParser+0x4ce>
 8003d98:	f200 80d3 	bhi.w	8003f42 <RI_GetRegCommandParser+0x242>
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	f000 822f 	beq.w	8004200 <RI_GetRegCommandParser+0x500>
 8003da2:	2b60      	cmp	r3, #96	; 0x60
 8003da4:	f040 8082 	bne.w	8003eac <RI_GetRegCommandParser+0x1ac>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003da8:	4b88      	ldr	r3, [pc, #544]	; (8003fcc <RI_GetRegCommandParser+0x2cc>)
 8003daa:	f993 0000 	ldrsb.w	r0, [r3]
 8003dae:	2800      	cmp	r0, #0
 8003db0:	f000 8250 	beq.w	8004254 <RI_GetRegCommandParser+0x554>
 8003db4:	2901      	cmp	r1, #1
 8003db6:	f340 81ff 	ble.w	80041b8 <RI_GetRegCommandParser+0x4b8>
 8003dba:	469e      	mov	lr, r3
 8003dbc:	46ac      	mov	ip, r5
 8003dbe:	f1c5 0201 	rsb	r2, r5, #1
 8003dc2:	e002      	b.n	8003dca <RI_GetRegCommandParser+0xca>
 8003dc4:	428b      	cmp	r3, r1
 8003dc6:	f280 81f7 	bge.w	80041b8 <RI_GetRegCommandParser+0x4b8>
    *tempdestString = *tempsrcString;
 8003dca:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003dce:	f91e 0f01 	ldrsb.w	r0, [lr, #1]!
 8003dd2:	eb0c 0302 	add.w	r3, ip, r2
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d1f3      	bne.n	8003dc4 <RI_GetRegCommandParser+0xc4>
        txData = txData+size;
 8003ddc:	4618      	mov	r0, r3
    *tempdestString = (int8_t)0;
 8003dde:	2200      	movs	r2, #0
        if (freeSpace >= 2U)
 8003de0:	fa1f fa81 	uxth.w	sl, r1
    *tempdestString = (int8_t)0;
 8003de4:	f88c 2000 	strb.w	r2, [ip]
        pHandle->txLength += size;
 8003de8:	f8b7 c00e 	ldrh.w	ip, [r7, #14]
    while (rxLength > 0U)
 8003dec:	eb09 0208 	add.w	r2, r9, r8
        pHandle->txLength += size;
 8003df0:	449c      	add	ip, r3
        freeSpaceS16 = freeSpaceS16-size;
 8003df2:	ebaa 0103 	sub.w	r1, sl, r3
    while (rxLength > 0U)
 8003df6:	b292      	uxth	r2, r2
 8003df8:	b2a3      	uxth	r3, r4
 8003dfa:	4293      	cmp	r3, r2
        pHandle->txLength += size;
 8003dfc:	f8a7 c00e 	strh.w	ip, [r7, #14]
        txData = txData+size;
 8003e00:	4405      	add	r5, r0
        freeSpaceS16 = freeSpaceS16-size;
 8003e02:	b209      	sxth	r1, r1
    while (rxLength > 0U)
 8003e04:	d18e      	bne.n	8003d24 <RI_GetRegCommandParser+0x24>
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8003e06:	2000      	movs	r0, #0
 8003e08:	e7aa      	b.n	8003d60 <RI_GetRegCommandParser+0x60>
        if (freeSpace >= 2U)
 8003e0a:	fa1f fa81 	uxth.w	sl, r1
 8003e0e:	f1ba 0f01 	cmp.w	sl, #1
 8003e12:	d9ba      	bls.n	8003d8a <RI_GetRegCommandParser+0x8a>
          switch (regID)
 8003e14:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8003e18:	f000 82d5 	beq.w	80043c6 <RI_GetRegCommandParser+0x6c6>
 8003e1c:	d81d      	bhi.n	8003e5a <RI_GetRegCommandParser+0x15a>
 8003e1e:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8003e22:	f000 82ea 	beq.w	80043fa <RI_GetRegCommandParser+0x6fa>
 8003e26:	f240 8160 	bls.w	80040ea <RI_GetRegCommandParser+0x3ea>
 8003e2a:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8003e2e:	f000 8294 	beq.w	800435a <RI_GetRegCommandParser+0x65a>
 8003e32:	f240 8147 	bls.w	80040c4 <RI_GetRegCommandParser+0x3c4>
 8003e36:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8003e3a:	f000 8286 	beq.w	800434a <RI_GetRegCommandParser+0x64a>
 8003e3e:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8003e42:	f040 8131 	bne.w	80040a8 <RI_GetRegCommandParser+0x3a8>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8003e46:	4862      	ldr	r0, [pc, #392]	; (8003fd0 <RI_GetRegCommandParser+0x2d0>)
 8003e48:	f7fe fd34 	bl	80028b4 <MCI_GetIqd>
 8003e4c:	900a      	str	r0, [sp, #40]	; 0x28
 8003e4e:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8003e52:	8028      	strh	r0, [r5, #0]
              break;
 8003e54:	2002      	movs	r0, #2
          *size = 2;
 8003e56:	4603      	mov	r3, r0
              break;
 8003e58:	e7c6      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 8003e5a:	f241 4250 	movw	r2, #5200	; 0x1450
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	f000 82aa 	beq.w	80043b8 <RI_GetRegCommandParser+0x6b8>
 8003e64:	f240 80cf 	bls.w	8004006 <RI_GetRegCommandParser+0x306>
 8003e68:	f241 5290 	movw	r2, #5520	; 0x1590
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	f000 827e 	beq.w	800436e <RI_GetRegCommandParser+0x66e>
 8003e72:	f240 80b5 	bls.w	8003fe0 <RI_GetRegCommandParser+0x2e0>
 8003e76:	f241 6210 	movw	r2, #5648	; 0x1610
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	f000 8275 	beq.w	800436a <RI_GetRegCommandParser+0x66a>
 8003e80:	f241 6250 	movw	r2, #5712	; 0x1650
 8003e84:	4293      	cmp	r3, r2
 8003e86:	f040 8091 	bne.w	8003fac <RI_GetRegCommandParser+0x2ac>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 8003e8a:	4b52      	ldr	r3, [pc, #328]	; (8003fd4 <RI_GetRegCommandParser+0x2d4>)
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	f004 ffd1 	bl	8008e34 <PID_GetKDDivisorPOW2>
 8003e92:	8028      	strh	r0, [r5, #0]
 8003e94:	2002      	movs	r0, #2
          *size = 2;
 8003e96:	4603      	mov	r3, r0
 8003e98:	e7a6      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
        if (freeSpace > 0U)
 8003e9a:	2900      	cmp	r1, #0
 8003e9c:	f43f af75 	beq.w	8003d8a <RI_GetRegCommandParser+0x8a>
          switch (regID)
 8003ea0:	2b48      	cmp	r3, #72	; 0x48
 8003ea2:	f000 818b 	beq.w	80041bc <RI_GetRegCommandParser+0x4bc>
 8003ea6:	2b88      	cmp	r3, #136	; 0x88
 8003ea8:	f000 817d 	beq.w	80041a6 <RI_GetRegCommandParser+0x4a6>
 8003eac:	2005      	movs	r0, #5
 8003eae:	e757      	b.n	8003d60 <RI_GetRegCommandParser+0x60>
        if (freeSpace >= 4U)
 8003eb0:	fa1f fa81 	uxth.w	sl, r1
 8003eb4:	f1ba 0f03 	cmp.w	sl, #3
 8003eb8:	f67f af67 	bls.w	8003d8a <RI_GetRegCommandParser+0x8a>
          switch (regID)
 8003ebc:	2b98      	cmp	r3, #152	; 0x98
 8003ebe:	f000 81d4 	beq.w	800426a <RI_GetRegCommandParser+0x56a>
 8003ec2:	f200 8160 	bhi.w	8004186 <RI_GetRegCommandParser+0x486>
 8003ec6:	2b18      	cmp	r3, #24
 8003ec8:	f000 81c8 	beq.w	800425c <RI_GetRegCommandParser+0x55c>
 8003ecc:	2b58      	cmp	r3, #88	; 0x58
 8003ece:	d1ed      	bne.n	8003eac <RI_GetRegCommandParser+0x1ac>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003ed0:	483f      	ldr	r0, [pc, #252]	; (8003fd0 <RI_GetRegCommandParser+0x2d0>)
 8003ed2:	f7fe fcc7 	bl	8002864 <MCI_GetAvrgMecSpeedUnit>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003ed6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003eda:	0040      	lsls	r0, r0, #1
 8003edc:	6028      	str	r0, [r5, #0]
 8003ede:	2004      	movs	r0, #4
          *size = 4;
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	e781      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 8003ee4:	2b28      	cmp	r3, #40	; 0x28
 8003ee6:	d1e1      	bne.n	8003eac <RI_GetRegCommandParser+0x1ac>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003ee8:	230a      	movs	r3, #10
            if (((*rawSize) + 2U) > freeSpace)
 8003eea:	290b      	cmp	r1, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003eec:	802b      	strh	r3, [r5, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8003eee:	f67f af4c 	bls.w	8003d8a <RI_GetRegCommandParser+0x8a>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003ef2:	4b39      	ldr	r3, [pc, #228]	; (8003fd8 <RI_GetRegCommandParser+0x2d8>)
        if (freeSpace >= 2U)
 8003ef4:	fa1f fa81 	uxth.w	sl, r1
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003ef8:	6819      	ldr	r1, [r3, #0]
 8003efa:	6011      	str	r1, [r2, #0]
        if (freeSpace >= 2U)
 8003efc:	200c      	movs	r0, #12
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003efe:	6859      	ldr	r1, [r3, #4]
 8003f00:	891b      	ldrh	r3, [r3, #8]
 8003f02:	8113      	strh	r3, [r2, #8]
 8003f04:	6051      	str	r1, [r2, #4]
        *size = (*rawSize) + 2U;
 8003f06:	4603      	mov	r3, r0
 8003f08:	e76e      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 8003f0a:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8003f0e:	f000 81ed 	beq.w	80042ec <RI_GetRegCommandParser+0x5ec>
 8003f12:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8003f16:	d133      	bne.n	8003f80 <RI_GetRegCommandParser+0x280>
            *rawSize = 4;
 8003f18:	2304      	movs	r3, #4
 8003f1a:	802b      	strh	r3, [r5, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8003f1c:	482c      	ldr	r0, [pc, #176]	; (8003fd0 <RI_GetRegCommandParser+0x2d0>)
        if (freeSpace >= 2U)
 8003f1e:	fa1f fa81 	uxth.w	sl, r1
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8003f22:	f7fe fcd5 	bl	80028d0 <MCI_GetIqdref>
 8003f26:	8068      	strh	r0, [r5, #2]
 8003f28:	9003      	str	r0, [sp, #12]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003f2a:	4829      	ldr	r0, [pc, #164]	; (8003fd0 <RI_GetRegCommandParser+0x2d0>)
 8003f2c:	f7fe fcd0 	bl	80028d0 <MCI_GetIqdref>
 8003f30:	9002      	str	r0, [sp, #8]
 8003f32:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 8003f36:	882b      	ldrh	r3, [r5, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003f38:	80a8      	strh	r0, [r5, #4]
        *size = (*rawSize) + 2U;
 8003f3a:	3302      	adds	r3, #2
 8003f3c:	b29b      	uxth	r3, r3
        txData = txData+size;
 8003f3e:	4618      	mov	r0, r3
 8003f40:	e752      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 8003f42:	2be0      	cmp	r3, #224	; 0xe0
 8003f44:	d1b2      	bne.n	8003eac <RI_GetRegCommandParser+0x1ac>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8003f46:	4b25      	ldr	r3, [pc, #148]	; (8003fdc <RI_GetRegCommandParser+0x2dc>)
 8003f48:	681b      	ldr	r3, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003f4a:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
 8003f4e:	2800      	cmp	r0, #0
 8003f50:	f000 8180 	beq.w	8004254 <RI_GetRegCommandParser+0x554>
 8003f54:	2901      	cmp	r1, #1
 8003f56:	f340 812f 	ble.w	80041b8 <RI_GetRegCommandParser+0x4b8>
 8003f5a:	f103 0e24 	add.w	lr, r3, #36	; 0x24
 8003f5e:	46ac      	mov	ip, r5
 8003f60:	f1c5 0201 	rsb	r2, r5, #1
 8003f64:	e002      	b.n	8003f6c <RI_GetRegCommandParser+0x26c>
 8003f66:	428b      	cmp	r3, r1
 8003f68:	f280 8126 	bge.w	80041b8 <RI_GetRegCommandParser+0x4b8>
    *tempdestString = *tempsrcString;
 8003f6c:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003f70:	f91e 0f01 	ldrsb.w	r0, [lr, #1]!
 8003f74:	eb0c 0302 	add.w	r3, ip, r2
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	d1f3      	bne.n	8003f66 <RI_GetRegCommandParser+0x266>
 8003f7e:	e72d      	b.n	8003ddc <RI_GetRegCommandParser+0xdc>
 8003f80:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8003f84:	d192      	bne.n	8003eac <RI_GetRegCommandParser+0x1ac>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8003f86:	4812      	ldr	r0, [pc, #72]	; (8003fd0 <RI_GetRegCommandParser+0x2d0>)
        if (freeSpace >= 2U)
 8003f88:	fa1f fa81 	uxth.w	sl, r1
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8003f8c:	f7fe fc5c 	bl	8002848 <MCI_GetLastRampFinalSpeed>
 8003f90:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003f94:	0040      	lsls	r0, r0, #1
 8003f96:	f8c5 0002 	str.w	r0, [r5, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003f9a:	480d      	ldr	r0, [pc, #52]	; (8003fd0 <RI_GetRegCommandParser+0x2d0>)
 8003f9c:	f7fe fc5c 	bl	8002858 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8003fa0:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003fa2:	80e8      	strh	r0, [r5, #6]
        if (freeSpace >= 2U)
 8003fa4:	2008      	movs	r0, #8
            *rawSize = 6;
 8003fa6:	802b      	strh	r3, [r5, #0]
        *size = (*rawSize) + 2U;
 8003fa8:	4603      	mov	r3, r0
 8003faa:	e71d      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 8003fac:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	f47f af7b 	bne.w	8003eac <RI_GetRegCommandParser+0x1ac>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 8003fb6:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <RI_GetRegCommandParser+0x2d4>)
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	f004 ff13 	bl	8008de4 <PID_GetKPDivisorPOW2>
 8003fbe:	8028      	strh	r0, [r5, #0]
 8003fc0:	2002      	movs	r0, #2
          *size = 2;
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	e710      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 8003fc6:	bf00      	nop
 8003fc8:	200003f4 	.word	0x200003f4
 8003fcc:	0800d4c4 	.word	0x0800d4c4
 8003fd0:	20000a70 	.word	0x20000a70
 8003fd4:	200003e4 	.word	0x200003e4
 8003fd8:	0800d558 	.word	0x0800d558
 8003fdc:	200003f8 	.word	0x200003f8
 8003fe0:	f241 5210 	movw	r2, #5392	; 0x1510
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	f000 820a 	beq.w	80043fe <RI_GetRegCommandParser+0x6fe>
 8003fea:	d93c      	bls.n	8004066 <RI_GetRegCommandParser+0x366>
 8003fec:	f241 5250 	movw	r2, #5456	; 0x1550
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	f47f af5b 	bne.w	8003eac <RI_GetRegCommandParser+0x1ac>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8003ff6:	4bb2      	ldr	r3, [pc, #712]	; (80042c0 <RI_GetRegCommandParser+0x5c0>)
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	f004 fefb 	bl	8008df4 <PID_GetKIDivisorPOW2>
 8003ffe:	8028      	strh	r0, [r5, #0]
 8004000:	2002      	movs	r0, #2
          *size = 2;
 8004002:	4603      	mov	r3, r0
 8004004:	e6f0      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 8004006:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 800400a:	f000 81b9 	beq.w	8004380 <RI_GetRegCommandParser+0x680>
 800400e:	d919      	bls.n	8004044 <RI_GetRegCommandParser+0x344>
 8004010:	f5b3 6f31 	cmp.w	r3, #2832	; 0xb10
 8004014:	f000 81ad 	beq.w	8004372 <RI_GetRegCommandParser+0x672>
 8004018:	d909      	bls.n	800402e <RI_GetRegCommandParser+0x32e>
 800401a:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 800401e:	d003      	beq.n	8004028 <RI_GetRegCommandParser+0x328>
 8004020:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8004024:	f47f af42 	bne.w	8003eac <RI_GetRegCommandParser+0x1ac>
 8004028:	2002      	movs	r0, #2
 800402a:	4603      	mov	r3, r0
 800402c:	e6dc      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 800402e:	f5b3 6f2d 	cmp.w	r3, #2768	; 0xad0
 8004032:	f47f af3b 	bne.w	8003eac <RI_GetRegCommandParser+0x1ac>
              *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) pEncoder[motorID]); //cstat !MISRAC2012-Rule-11.3
 8004036:	48a3      	ldr	r0, [pc, #652]	; (80042c4 <RI_GetRegCommandParser+0x5c4>)
 8004038:	f005 ffd2 	bl	8009fe0 <SPD_GetElAngle>
 800403c:	8028      	strh	r0, [r5, #0]
 800403e:	2002      	movs	r0, #2
          *size = 2;
 8004040:	4603      	mov	r3, r0
 8004042:	e6d1      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 8004044:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8004048:	f000 8175 	beq.w	8004336 <RI_GetRegCommandParser+0x636>
 800404c:	d91c      	bls.n	8004088 <RI_GetRegCommandParser+0x388>
 800404e:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8004052:	f47f af2b 	bne.w	8003eac <RI_GetRegCommandParser+0x1ac>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8004056:	489c      	ldr	r0, [pc, #624]	; (80042c8 <RI_GetRegCommandParser+0x5c8>)
 8004058:	f7fe fc56 	bl	8002908 <MCI_GetValphabeta>
 800405c:	9005      	str	r0, [sp, #20]
 800405e:	8028      	strh	r0, [r5, #0]
 8004060:	2002      	movs	r0, #2
          *size = 2;
 8004062:	4603      	mov	r3, r0
 8004064:	e6c0      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 8004066:	f241 4290 	movw	r2, #5264	; 0x1490
 800406a:	4293      	cmp	r3, r2
 800406c:	f000 815c 	beq.w	8004328 <RI_GetRegCommandParser+0x628>
 8004070:	f241 42d0 	movw	r2, #5328	; 0x14d0
 8004074:	4293      	cmp	r3, r2
 8004076:	f47f af19 	bne.w	8003eac <RI_GetRegCommandParser+0x1ac>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 800407a:	4894      	ldr	r0, [pc, #592]	; (80042cc <RI_GetRegCommandParser+0x5cc>)
 800407c:	f004 feda 	bl	8008e34 <PID_GetKDDivisorPOW2>
 8004080:	8028      	strh	r0, [r5, #0]
 8004082:	2002      	movs	r0, #2
          *size = 2;
 8004084:	4603      	mov	r3, r0
 8004086:	e6af      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 8004088:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 800408c:	f000 818a 	beq.w	80043a4 <RI_GetRegCommandParser+0x6a4>
 8004090:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8004094:	f47f af0a 	bne.w	8003eac <RI_GetRegCommandParser+0x1ac>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8004098:	488b      	ldr	r0, [pc, #556]	; (80042c8 <RI_GetRegCommandParser+0x5c8>)
 800409a:	f7fe fc27 	bl	80028ec <MCI_GetVqd>
 800409e:	9007      	str	r0, [sp, #28]
 80040a0:	8028      	strh	r0, [r5, #0]
 80040a2:	2002      	movs	r0, #2
          *size = 2;
 80040a4:	4603      	mov	r3, r0
 80040a6:	e69f      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 80040a8:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 80040ac:	f47f aefe 	bne.w	8003eac <RI_GetRegCommandParser+0x1ac>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 80040b0:	4885      	ldr	r0, [pc, #532]	; (80042c8 <RI_GetRegCommandParser+0x5c8>)
 80040b2:	f7fe fbf1 	bl	8002898 <MCI_GetIalphabeta>
 80040b6:	900c      	str	r0, [sp, #48]	; 0x30
 80040b8:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80040bc:	8028      	strh	r0, [r5, #0]
              break;
 80040be:	2002      	movs	r0, #2
          *size = 2;
 80040c0:	4603      	mov	r3, r0
              break;
 80040c2:	e691      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 80040c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80040c8:	f000 8164 	beq.w	8004394 <RI_GetRegCommandParser+0x694>
 80040cc:	d921      	bls.n	8004112 <RI_GetRegCommandParser+0x412>
 80040ce:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80040d2:	f47f aeeb 	bne.w	8003eac <RI_GetRegCommandParser+0x1ac>
              *regdata16 = MCI_GetIab(pMCIN).b;
 80040d6:	487c      	ldr	r0, [pc, #496]	; (80042c8 <RI_GetRegCommandParser+0x5c8>)
 80040d8:	f7fe fbd0 	bl	800287c <MCI_GetIab>
 80040dc:	900e      	str	r0, [sp, #56]	; 0x38
 80040de:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80040e2:	8028      	strh	r0, [r5, #0]
              break;
 80040e4:	2002      	movs	r0, #2
          *size = 2;
 80040e6:	4603      	mov	r3, r0
              break;
 80040e8:	e67e      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 80040ea:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 80040ee:	f000 8182 	beq.w	80043f6 <RI_GetRegCommandParser+0x6f6>
 80040f2:	d92a      	bls.n	800414a <RI_GetRegCommandParser+0x44a>
 80040f4:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 80040f8:	f000 817b 	beq.w	80043f2 <RI_GetRegCommandParser+0x6f2>
 80040fc:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8004100:	d117      	bne.n	8004132 <RI_GetRegCommandParser+0x432>
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 8004102:	4b6f      	ldr	r3, [pc, #444]	; (80042c0 <RI_GetRegCommandParser+0x5c0>)
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	f004 fe67 	bl	8008dd8 <PID_GetKI>
 800410a:	8028      	strh	r0, [r5, #0]
              break;
 800410c:	2002      	movs	r0, #2
          *size = 2;
 800410e:	4603      	mov	r3, r0
              break;
 8004110:	e66a      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 8004112:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 8004116:	f000 8165 	beq.w	80043e4 <RI_GetRegCommandParser+0x6e4>
 800411a:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 800411e:	f47f aec5 	bne.w	8003eac <RI_GetRegCommandParser+0x1ac>
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8004122:	4b6b      	ldr	r3, [pc, #428]	; (80042d0 <RI_GetRegCommandParser+0x5d0>)
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	f004 fe35 	bl	8008d94 <NTC_GetAvTemp_C>
 800412a:	8028      	strh	r0, [r5, #0]
              break;
 800412c:	2002      	movs	r0, #2
          *size = 2;
 800412e:	4603      	mov	r3, r0
              break;
 8004130:	e65a      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 8004132:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8004136:	f47f aeb9 	bne.w	8003eac <RI_GetRegCommandParser+0x1ac>
              *regdata16 = PID_GetKD(pPIDIq[motorID]);
 800413a:	4b66      	ldr	r3, [pc, #408]	; (80042d4 <RI_GetRegCommandParser+0x5d4>)
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	f004 fe75 	bl	8008e2c <PID_GetKD>
 8004142:	8028      	strh	r0, [r5, #0]
              break;
 8004144:	2002      	movs	r0, #2
          *size = 2;
 8004146:	4603      	mov	r3, r0
              break;
 8004148:	e64e      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 800414a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800414e:	f000 8142 	beq.w	80043d6 <RI_GetRegCommandParser+0x6d6>
 8004152:	d90b      	bls.n	800416c <RI_GetRegCommandParser+0x46c>
 8004154:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004158:	f47f aea8 	bne.w	8003eac <RI_GetRegCommandParser+0x1ac>
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 800415c:	4b5d      	ldr	r3, [pc, #372]	; (80042d4 <RI_GetRegCommandParser+0x5d4>)
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	f004 fe36 	bl	8008dd0 <PID_GetKP>
 8004164:	8028      	strh	r0, [r5, #0]
              break;
 8004166:	2002      	movs	r0, #2
          *size = 2;
 8004168:	4603      	mov	r3, r0
              break;
 800416a:	e63d      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 800416c:	2b90      	cmp	r3, #144	; 0x90
 800416e:	f000 80d4 	beq.w	800431a <RI_GetRegCommandParser+0x61a>
 8004172:	2bd0      	cmp	r3, #208	; 0xd0
 8004174:	f47f ae9a 	bne.w	8003eac <RI_GetRegCommandParser+0x1ac>
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 8004178:	4854      	ldr	r0, [pc, #336]	; (80042cc <RI_GetRegCommandParser+0x5cc>)
 800417a:	f004 fe2d 	bl	8008dd8 <PID_GetKI>
 800417e:	8028      	strh	r0, [r5, #0]
              break;
 8004180:	2002      	movs	r0, #2
          *size = 2;
 8004182:	4603      	mov	r3, r0
              break;
 8004184:	e630      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 8004186:	f641 3258 	movw	r2, #7000	; 0x1b58
 800418a:	4293      	cmp	r3, r2
 800418c:	f47f ae8e 	bne.w	8003eac <RI_GetRegCommandParser+0x1ac>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8004190:	4b51      	ldr	r3, [pc, #324]	; (80042d8 <RI_GetRegCommandParser+0x5d8>)
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	f004 feba 	bl	8008f0c <PQD_GetAvrgElMotorPowerW>
 8004198:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 800419c:	9b01      	ldr	r3, [sp, #4]
 800419e:	602b      	str	r3, [r5, #0]
 80041a0:	2004      	movs	r0, #4
          *size = 4;
 80041a2:	4603      	mov	r3, r0
 80041a4:	e620      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 80041a6:	4848      	ldr	r0, [pc, #288]	; (80042c8 <RI_GetRegCommandParser+0x5c8>)
        if (freeSpace >= 2U)
 80041a8:	fa1f fa81 	uxth.w	sl, r1
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 80041ac:	f7fe fb4a 	bl	8002844 <MCI_GetControlMode>
 80041b0:	7028      	strb	r0, [r5, #0]
              break;
 80041b2:	2001      	movs	r0, #1
          *size = 1;
 80041b4:	4603      	mov	r3, r0
              break;
 80041b6:	e617      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
    retVal = MCP_ERROR_STRING_FORMAT;
 80041b8:	2006      	movs	r0, #6
 80041ba:	e5d1      	b.n	8003d60 <RI_GetRegCommandParser+0x60>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 80041bc:	4842      	ldr	r0, [pc, #264]	; (80042c8 <RI_GetRegCommandParser+0x5c8>)
        if (freeSpace >= 2U)
 80041be:	fa1f fa81 	uxth.w	sl, r1
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 80041c2:	f7fe faeb 	bl	800279c <MCI_GetSTMState>
 80041c6:	7028      	strb	r0, [r5, #0]
        if (freeSpace >= 2U)
 80041c8:	2001      	movs	r0, #1
          *size = 1;
 80041ca:	4603      	mov	r3, r0
 80041cc:	e60c      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 80041ce:	4b43      	ldr	r3, [pc, #268]	; (80042dc <RI_GetRegCommandParser+0x5dc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80041d2:	f993 0000 	ldrsb.w	r0, [r3]
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d03c      	beq.n	8004254 <RI_GetRegCommandParser+0x554>
 80041da:	2901      	cmp	r1, #1
 80041dc:	ddec      	ble.n	80041b8 <RI_GetRegCommandParser+0x4b8>
 80041de:	469e      	mov	lr, r3
 80041e0:	46ac      	mov	ip, r5
 80041e2:	f1c5 0201 	rsb	r2, r5, #1
 80041e6:	e001      	b.n	80041ec <RI_GetRegCommandParser+0x4ec>
 80041e8:	428b      	cmp	r3, r1
 80041ea:	dae5      	bge.n	80041b8 <RI_GetRegCommandParser+0x4b8>
    *tempdestString = *tempsrcString;
 80041ec:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80041f0:	f91e 0f01 	ldrsb.w	r0, [lr, #1]!
 80041f4:	eb0c 0302 	add.w	r3, ip, r2
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d1f4      	bne.n	80041e8 <RI_GetRegCommandParser+0x4e8>
 80041fe:	e5ed      	b.n	8003ddc <RI_GetRegCommandParser+0xdc>
 8004200:	4b37      	ldr	r3, [pc, #220]	; (80042e0 <RI_GetRegCommandParser+0x5e0>)
 8004202:	f993 0000 	ldrsb.w	r0, [r3]
 8004206:	b328      	cbz	r0, 8004254 <RI_GetRegCommandParser+0x554>
 8004208:	2901      	cmp	r1, #1
 800420a:	ddd5      	ble.n	80041b8 <RI_GetRegCommandParser+0x4b8>
 800420c:	469e      	mov	lr, r3
 800420e:	46ac      	mov	ip, r5
 8004210:	f1c5 0201 	rsb	r2, r5, #1
 8004214:	e001      	b.n	800421a <RI_GetRegCommandParser+0x51a>
 8004216:	428b      	cmp	r3, r1
 8004218:	dace      	bge.n	80041b8 <RI_GetRegCommandParser+0x4b8>
    *tempdestString = *tempsrcString;
 800421a:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800421e:	f91e 0f01 	ldrsb.w	r0, [lr, #1]!
 8004222:	eb0c 0302 	add.w	r3, ip, r2
 8004226:	b29b      	uxth	r3, r3
 8004228:	2800      	cmp	r0, #0
 800422a:	d1f4      	bne.n	8004216 <RI_GetRegCommandParser+0x516>
 800422c:	e5d6      	b.n	8003ddc <RI_GetRegCommandParser+0xdc>
              memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 800422e:	4b2d      	ldr	r3, [pc, #180]	; (80042e4 <RI_GetRegCommandParser+0x5e4>)
 8004230:	681b      	ldr	r3, [r3, #0]
        if (freeSpace >= 2U)
 8004232:	fa1f fa81 	uxth.w	sl, r1
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8004236:	f8d3 c000 	ldr.w	ip, [r3]
 800423a:	6859      	ldr	r1, [r3, #4]
 800423c:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8004240:	f8c2 e008 	str.w	lr, [r2, #8]
 8004244:	f8c2 c000 	str.w	ip, [r2]
 8004248:	6051      	str	r1, [r2, #4]
 800424a:	899b      	ldrh	r3, [r3, #12]
 800424c:	8193      	strh	r3, [r2, #12]
        if (freeSpace >= 2U)
 800424e:	2010      	movs	r0, #16
        *size = (*rawSize) + 2U;
 8004250:	4603      	mov	r3, r0
 8004252:	e5c9      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8004254:	2001      	movs	r0, #1
 8004256:	46ac      	mov	ip, r5
  *size= 1U ; /* /0 is the min String size */
 8004258:	4603      	mov	r3, r0
 800425a:	e5c0      	b.n	8003dde <RI_GetRegCommandParser+0xde>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 800425c:	481a      	ldr	r0, [pc, #104]	; (80042c8 <RI_GetRegCommandParser+0x5c8>)
 800425e:	f7fe faeb 	bl	8002838 <MCI_GetFaultState>
 8004262:	6028      	str	r0, [r5, #0]
 8004264:	2004      	movs	r0, #4
          *size = 4;
 8004266:	4603      	mov	r3, r0
 8004268:	e5be      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 800426a:	4817      	ldr	r0, [pc, #92]	; (80042c8 <RI_GetRegCommandParser+0x5c8>)
 800426c:	f7fe fb02 	bl	8002874 <MCI_GetMecSpeedRefUnit>
 8004270:	e631      	b.n	8003ed6 <RI_GetRegCommandParser+0x1d6>
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8004272:	233c      	movs	r3, #60	; 0x3c
            if (((*rawSize) + 2U) > freeSpace)
 8004274:	293d      	cmp	r1, #61	; 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8004276:	802b      	strh	r3, [r5, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8004278:	f67f ad87 	bls.w	8003d8a <RI_GetRegCommandParser+0x8a>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 800427c:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <RI_GetRegCommandParser+0x5e8>)
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f103 0b30 	add.w	fp, r3, #48	; 0x30
 8004284:	f8d3 e000 	ldr.w	lr, [r3]
 8004288:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800428c:	6898      	ldr	r0, [r3, #8]
 800428e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8004292:	f8c2 a00c 	str.w	sl, [r2, #12]
 8004296:	3310      	adds	r3, #16
 8004298:	455b      	cmp	r3, fp
 800429a:	f8c2 e000 	str.w	lr, [r2]
 800429e:	f8c2 c004 	str.w	ip, [r2, #4]
 80042a2:	6090      	str	r0, [r2, #8]
 80042a4:	f102 0210 	add.w	r2, r2, #16
 80042a8:	d1ec      	bne.n	8004284 <RI_GetRegCommandParser+0x584>
 80042aa:	6818      	ldr	r0, [r3, #0]
        if (freeSpace >= 2U)
 80042ac:	fa1f fa81 	uxth.w	sl, r1
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80042b0:	6859      	ldr	r1, [r3, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	6010      	str	r0, [r2, #0]
        if (freeSpace >= 2U)
 80042b6:	203e      	movs	r0, #62	; 0x3e
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80042b8:	6093      	str	r3, [r2, #8]
 80042ba:	6051      	str	r1, [r2, #4]
        *size = (*rawSize) + 2U;
 80042bc:	4603      	mov	r3, r0
 80042be:	e593      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
 80042c0:	200003e0 	.word	0x200003e0
 80042c4:	200000f8 	.word	0x200000f8
 80042c8:	20000a70 	.word	0x20000a70
 80042cc:	20000264 	.word	0x20000264
 80042d0:	200003ec 	.word	0x200003ec
 80042d4:	200003e4 	.word	0x200003e4
 80042d8:	200003dc 	.word	0x200003dc
 80042dc:	200003fc 	.word	0x200003fc
 80042e0:	0800d4d4 	.word	0x0800d4d4
 80042e4:	200003f0 	.word	0x200003f0
 80042e8:	200003f8 	.word	0x200003f8
            *rawSize = 4;
 80042ec:	2304      	movs	r3, #4
 80042ee:	802b      	strh	r3, [r5, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 80042f0:	4844      	ldr	r0, [pc, #272]	; (8004404 <RI_GetRegCommandParser+0x704>)
        if (freeSpace >= 2U)
 80042f2:	fa1f fa81 	uxth.w	sl, r1
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 80042f6:	f7fe faab 	bl	8002850 <MCI_GetLastRampFinalTorque>
 80042fa:	8068      	strh	r0, [r5, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 80042fc:	4841      	ldr	r0, [pc, #260]	; (8004404 <RI_GetRegCommandParser+0x704>)
 80042fe:	f7fe faab 	bl	8002858 <MCI_GetLastRampFinalDuration>
 8004302:	e618      	b.n	8003f36 <RI_GetRegCommandParser+0x236>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8004304:	230e      	movs	r3, #14
            if (((*rawSize) + 2U) > freeSpace)
 8004306:	290f      	cmp	r1, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8004308:	802b      	strh	r3, [r5, #0]
            if (((*rawSize) + 2U) > freeSpace)
 800430a:	f67f ad3e 	bls.w	8003d8a <RI_GetRegCommandParser+0x8a>
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 800430e:	6833      	ldr	r3, [r6, #0]
        if (freeSpace >= 2U)
 8004310:	fa1f fa81 	uxth.w	sl, r1
 8004314:	e78f      	b.n	8004236 <RI_GetRegCommandParser+0x536>
  uint8_t retVal = MCP_CMD_NOK;
 8004316:	2001      	movs	r0, #1
 8004318:	e522      	b.n	8003d60 <RI_GetRegCommandParser+0x60>
              *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 800431a:	483b      	ldr	r0, [pc, #236]	; (8004408 <RI_GetRegCommandParser+0x708>)
 800431c:	f004 fd58 	bl	8008dd0 <PID_GetKP>
 8004320:	8028      	strh	r0, [r5, #0]
 8004322:	2002      	movs	r0, #2
          *size = 2;
 8004324:	4603      	mov	r3, r0
 8004326:	e55f      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 8004328:	4837      	ldr	r0, [pc, #220]	; (8004408 <RI_GetRegCommandParser+0x708>)
 800432a:	f004 fd63 	bl	8008df4 <PID_GetKIDivisorPOW2>
 800432e:	8028      	strh	r0, [r5, #0]
 8004330:	2002      	movs	r0, #2
          *size = 2;
 8004332:	4603      	mov	r3, r0
 8004334:	e558      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8004336:	4833      	ldr	r0, [pc, #204]	; (8004404 <RI_GetRegCommandParser+0x704>)
 8004338:	f7fe fad8 	bl	80028ec <MCI_GetVqd>
 800433c:	9006      	str	r0, [sp, #24]
 800433e:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8004342:	8028      	strh	r0, [r5, #0]
 8004344:	2002      	movs	r0, #2
          *size = 2;
 8004346:	4603      	mov	r3, r0
 8004348:	e54e      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 800434a:	482e      	ldr	r0, [pc, #184]	; (8004404 <RI_GetRegCommandParser+0x704>)
 800434c:	f7fe fab2 	bl	80028b4 <MCI_GetIqd>
 8004350:	900b      	str	r0, [sp, #44]	; 0x2c
 8004352:	8028      	strh	r0, [r5, #0]
              break;
 8004354:	2002      	movs	r0, #2
          *size = 2;
 8004356:	4603      	mov	r3, r0
              break;
 8004358:	e546      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 800435a:	482a      	ldr	r0, [pc, #168]	; (8004404 <RI_GetRegCommandParser+0x704>)
 800435c:	f7fe fa9c 	bl	8002898 <MCI_GetIalphabeta>
 8004360:	900d      	str	r0, [sp, #52]	; 0x34
 8004362:	8028      	strh	r0, [r5, #0]
              break;
 8004364:	2002      	movs	r0, #2
          *size = 2;
 8004366:	4603      	mov	r3, r0
              break;
 8004368:	e53e      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 800436a:	4b28      	ldr	r3, [pc, #160]	; (800440c <RI_GetRegCommandParser+0x70c>)
 800436c:	e644      	b.n	8003ff8 <RI_GetRegCommandParser+0x2f8>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 800436e:	4b28      	ldr	r3, [pc, #160]	; (8004410 <RI_GetRegCommandParser+0x710>)
 8004370:	e58c      	b.n	8003e8c <RI_GetRegCommandParser+0x18c>
              *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) pEncoder[motorID]); //cstat !MISRAC2012-Rule-11.3
 8004372:	4828      	ldr	r0, [pc, #160]	; (8004414 <RI_GetRegCommandParser+0x714>)
 8004374:	f005 fe76 	bl	800a064 <SPD_GetS16Speed>
 8004378:	8028      	strh	r0, [r5, #0]
 800437a:	2002      	movs	r0, #2
          *size = 2;
 800437c:	4603      	mov	r3, r0
 800437e:	e533      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8004380:	4820      	ldr	r0, [pc, #128]	; (8004404 <RI_GetRegCommandParser+0x704>)
 8004382:	f7fe fac1 	bl	8002908 <MCI_GetValphabeta>
 8004386:	9004      	str	r0, [sp, #16]
 8004388:	f3c0 400f 	ubfx	r0, r0, #16, #16
 800438c:	8028      	strh	r0, [r5, #0]
 800438e:	2002      	movs	r0, #2
          *size = 2;
 8004390:	4603      	mov	r3, r0
 8004392:	e529      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8004394:	481b      	ldr	r0, [pc, #108]	; (8004404 <RI_GetRegCommandParser+0x704>)
 8004396:	f7fe fa71 	bl	800287c <MCI_GetIab>
 800439a:	900f      	str	r0, [sp, #60]	; 0x3c
 800439c:	8028      	strh	r0, [r5, #0]
              break;
 800439e:	2002      	movs	r0, #2
          *size = 2;
 80043a0:	4603      	mov	r3, r0
              break;
 80043a2:	e521      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 80043a4:	4817      	ldr	r0, [pc, #92]	; (8004404 <RI_GetRegCommandParser+0x704>)
 80043a6:	f7fe fa93 	bl	80028d0 <MCI_GetIqdref>
 80043aa:	9008      	str	r0, [sp, #32]
 80043ac:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80043b0:	8028      	strh	r0, [r5, #0]
 80043b2:	2002      	movs	r0, #2
          *size = 2;
 80043b4:	4603      	mov	r3, r0
 80043b6:	e517      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 80043b8:	4813      	ldr	r0, [pc, #76]	; (8004408 <RI_GetRegCommandParser+0x708>)
 80043ba:	f004 fd13 	bl	8008de4 <PID_GetKPDivisorPOW2>
 80043be:	8028      	strh	r0, [r5, #0]
 80043c0:	2002      	movs	r0, #2
          *size = 2;
 80043c2:	4603      	mov	r3, r0
 80043c4:	e510      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 80043c6:	480f      	ldr	r0, [pc, #60]	; (8004404 <RI_GetRegCommandParser+0x704>)
 80043c8:	f7fe fa82 	bl	80028d0 <MCI_GetIqdref>
 80043cc:	9009      	str	r0, [sp, #36]	; 0x24
 80043ce:	8028      	strh	r0, [r5, #0]
              break;
 80043d0:	2002      	movs	r0, #2
          *size = 2;
 80043d2:	4603      	mov	r3, r0
              break;
 80043d4:	e508      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 80043d6:	480c      	ldr	r0, [pc, #48]	; (8004408 <RI_GetRegCommandParser+0x708>)
 80043d8:	f004 fd28 	bl	8008e2c <PID_GetKD>
 80043dc:	8028      	strh	r0, [r5, #0]
              break;
 80043de:	2002      	movs	r0, #2
          *size = 2;
 80043e0:	4603      	mov	r3, r0
              break;
 80043e2:	e501      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 80043e4:	480c      	ldr	r0, [pc, #48]	; (8004418 <RI_GetRegCommandParser+0x718>)
 80043e6:	f004 f889 	bl	80084fc <VBS_GetAvBusVoltage_V>
 80043ea:	8028      	strh	r0, [r5, #0]
              break;
 80043ec:	2002      	movs	r0, #2
          *size = 2;
 80043ee:	4603      	mov	r3, r0
              break;
 80043f0:	e4fa      	b.n	8003de8 <RI_GetRegCommandParser+0xe8>
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 80043f2:	4b07      	ldr	r3, [pc, #28]	; (8004410 <RI_GetRegCommandParser+0x710>)
 80043f4:	e6b3      	b.n	800415e <RI_GetRegCommandParser+0x45e>
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 80043f6:	4b05      	ldr	r3, [pc, #20]	; (800440c <RI_GetRegCommandParser+0x70c>)
 80043f8:	e684      	b.n	8004104 <RI_GetRegCommandParser+0x404>
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 80043fa:	4b05      	ldr	r3, [pc, #20]	; (8004410 <RI_GetRegCommandParser+0x710>)
 80043fc:	e69e      	b.n	800413c <RI_GetRegCommandParser+0x43c>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 80043fe:	4b04      	ldr	r3, [pc, #16]	; (8004410 <RI_GetRegCommandParser+0x710>)
 8004400:	e5da      	b.n	8003fb8 <RI_GetRegCommandParser+0x2b8>
 8004402:	bf00      	nop
 8004404:	20000a70 	.word	0x20000a70
 8004408:	20000264 	.word	0x20000264
 800440c:	200003e4 	.word	0x200003e4
 8004410:	200003e0 	.word	0x200003e0
 8004414:	200000f8 	.word	0x200000f8
 8004418:	20000018 	.word	0x20000018

0800441c <RI_GetIDSize>:

  return (retVal);
}
uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 800441c:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8004420:	3808      	subs	r0, #8
 8004422:	b2c0      	uxtb	r0, r0
 8004424:	2810      	cmp	r0, #16
 8004426:	bf9a      	itte	ls
 8004428:	4b01      	ldrls	r3, [pc, #4]	; (8004430 <RI_GetIDSize+0x14>)
 800442a:	5c18      	ldrbls	r0, [r3, r0]
 800442c:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 800442e:	4770      	bx	lr
 8004430:	0800d630 	.word	0x0800d630

08004434 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[vmotorID];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8004434:	f000 0338 	and.w	r3, r0, #56	; 0x38
 8004438:	2b10      	cmp	r3, #16
 800443a:	d003      	beq.n	8004444 <RI_GetPtrReg+0x10>
            break;
          }

          default:
          {
            *dataPtr = &nullData16;
 800443c:	4b41      	ldr	r3, [pc, #260]	; (8004544 <RI_GetPtrReg+0x110>)
 800443e:	600b      	str	r3, [r1, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8004440:	2005      	movs	r0, #5
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
}
 8004442:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8004444:	f020 0007 	bic.w	r0, r0, #7
 8004448:	f5b0 6f19 	cmp.w	r0, #2448	; 0x990
 800444c:	b283      	uxth	r3, r0
 800444e:	d050      	beq.n	80044f2 <RI_GetPtrReg+0xbe>
 8004450:	d80f      	bhi.n	8004472 <RI_GetPtrReg+0x3e>
 8004452:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8004456:	d052      	beq.n	80044fe <RI_GetPtrReg+0xca>
 8004458:	d922      	bls.n	80044a0 <RI_GetPtrReg+0x6c>
 800445a:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 800445e:	d054      	beq.n	800450a <RI_GetPtrReg+0xd6>
 8004460:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8004464:	d113      	bne.n	800448e <RI_GetPtrReg+0x5a>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8004466:	4b38      	ldr	r3, [pc, #224]	; (8004548 <RI_GetPtrReg+0x114>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	3310      	adds	r3, #16
  uint8_t retVal = MCP_CMD_OK;
 800446c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 800446e:	600b      	str	r3, [r1, #0]
            break;
 8004470:	4770      	bx	lr
 8004472:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8004476:	d04e      	beq.n	8004516 <RI_GetPtrReg+0xe2>
 8004478:	d91e      	bls.n	80044b8 <RI_GetPtrReg+0x84>
 800447a:	f5b3 6f2d 	cmp.w	r3, #2768	; 0xad0
 800447e:	d05c      	beq.n	800453a <RI_GetPtrReg+0x106>
 8004480:	f5b3 6f31 	cmp.w	r3, #2832	; 0xb10
 8004484:	d1da      	bne.n	800443c <RI_GetPtrReg+0x8>
            *dataPtr = &(pEncoder[vmotorID]->_Super.hAvrMecSpeedUnit);
 8004486:	4b31      	ldr	r3, [pc, #196]	; (800454c <RI_GetPtrReg+0x118>)
 8004488:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800448a:	2000      	movs	r0, #0
            break;
 800448c:	4770      	bx	lr
 800448e:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8004492:	d1d3      	bne.n	800443c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8004494:	4b2c      	ldr	r3, [pc, #176]	; (8004548 <RI_GetPtrReg+0x114>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	330c      	adds	r3, #12
  uint8_t retVal = MCP_CMD_OK;
 800449a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 800449c:	600b      	str	r3, [r1, #0]
            break;
 800449e:	4770      	bx	lr
 80044a0:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80044a4:	d03d      	beq.n	8004522 <RI_GetPtrReg+0xee>
 80044a6:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 80044aa:	d111      	bne.n	80044d0 <RI_GetPtrReg+0x9c>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80044ac:	4b26      	ldr	r3, [pc, #152]	; (8004548 <RI_GetPtrReg+0x114>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	3304      	adds	r3, #4
  uint8_t retVal = MCP_CMD_OK;
 80044b2:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80044b4:	600b      	str	r3, [r1, #0]
            break;
 80044b6:	4770      	bx	lr
 80044b8:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 80044bc:	d037      	beq.n	800452e <RI_GetPtrReg+0xfa>
 80044be:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 80044c2:	d10d      	bne.n	80044e0 <RI_GetPtrReg+0xac>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 80044c4:	4b20      	ldr	r3, [pc, #128]	; (8004548 <RI_GetPtrReg+0x114>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	331a      	adds	r3, #26
  uint8_t retVal = MCP_CMD_OK;
 80044ca:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 80044cc:	600b      	str	r3, [r1, #0]
            break;
 80044ce:	4770      	bx	lr
 80044d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80044d4:	d1b2      	bne.n	800443c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80044d6:	4b1c      	ldr	r3, [pc, #112]	; (8004548 <RI_GetPtrReg+0x114>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80044dc:	2000      	movs	r0, #0
             break;
 80044de:	4770      	bx	lr
 80044e0:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 80044e4:	d1aa      	bne.n	800443c <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 80044e6:	4b18      	ldr	r3, [pc, #96]	; (8004548 <RI_GetPtrReg+0x114>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	3316      	adds	r3, #22
  uint8_t retVal = MCP_CMD_OK;
 80044ec:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 80044ee:	600b      	str	r3, [r1, #0]
            break;
 80044f0:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 80044f2:	4b15      	ldr	r3, [pc, #84]	; (8004548 <RI_GetPtrReg+0x114>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	3312      	adds	r3, #18
  uint8_t retVal = MCP_CMD_OK;
 80044f8:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 80044fa:	600b      	str	r3, [r1, #0]
            break;
 80044fc:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 80044fe:	4b12      	ldr	r3, [pc, #72]	; (8004548 <RI_GetPtrReg+0x114>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	3306      	adds	r3, #6
  uint8_t retVal = MCP_CMD_OK;
 8004504:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8004506:	600b      	str	r3, [r1, #0]
            break;
 8004508:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 800450a:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <RI_GetPtrReg+0x114>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	330e      	adds	r3, #14
  uint8_t retVal = MCP_CMD_OK;
 8004510:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8004512:	600b      	str	r3, [r1, #0]
            break;
 8004514:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8004516:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <RI_GetPtrReg+0x114>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	331c      	adds	r3, #28
  uint8_t retVal = MCP_CMD_OK;
 800451c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 800451e:	600b      	str	r3, [r1, #0]
            break;
 8004520:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8004522:	4b09      	ldr	r3, [pc, #36]	; (8004548 <RI_GetPtrReg+0x114>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	3302      	adds	r3, #2
  uint8_t retVal = MCP_CMD_OK;
 8004528:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 800452a:	600b      	str	r3, [r1, #0]
            break;
 800452c:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 800452e:	4b06      	ldr	r3, [pc, #24]	; (8004548 <RI_GetPtrReg+0x114>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	3318      	adds	r3, #24
  uint8_t retVal = MCP_CMD_OK;
 8004534:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8004536:	600b      	str	r3, [r1, #0]
            break;
 8004538:	4770      	bx	lr
            *dataPtr = &(pEncoder[vmotorID]->_Super.hElAngle);
 800453a:	4b05      	ldr	r3, [pc, #20]	; (8004550 <RI_GetPtrReg+0x11c>)
 800453c:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800453e:	2000      	movs	r0, #0
            break;
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20001c64 	.word	0x20001c64
 8004548:	20000a70 	.word	0x20000a70
 800454c:	20000104 	.word	0x20000104
 8004550:	200000fc 	.word	0x200000fc

08004554 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004554:	4a6f      	ldr	r2, [pc, #444]	; (8004714 <RCM_RegisterRegConv+0x1c0>)
{
 8004556:	b530      	push	{r4, r5, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004558:	6814      	ldr	r4, [r2, #0]
{
 800455a:	4601      	mov	r1, r0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800455c:	2c00      	cmp	r4, #0
 800455e:	f000 8088 	beq.w	8004672 <RCM_RegisterRegConv+0x11e>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004562:	f890 c004 	ldrb.w	ip, [r0, #4]
 8004566:	7923      	ldrb	r3, [r4, #4]
 8004568:	459c      	cmp	ip, r3
 800456a:	d01f      	beq.n	80045ac <RCM_RegisterRegConv+0x58>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800456c:	6853      	ldr	r3, [r2, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 8097 	beq.w	80046a2 <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004574:	791c      	ldrb	r4, [r3, #4]
 8004576:	4564      	cmp	r4, ip
  uint8_t handle = 255U;
 8004578:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800457c:	f000 8083 	beq.w	8004686 <RCM_RegisterRegConv+0x132>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004580:	6894      	ldr	r4, [r2, #8]
 8004582:	2c00      	cmp	r4, #0
 8004584:	f000 80ad 	beq.w	80046e2 <RCM_RegisterRegConv+0x18e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004588:	7923      	ldrb	r3, [r4, #4]
 800458a:	4563      	cmp	r3, ip
 800458c:	f000 8082 	beq.w	8004694 <RCM_RegisterRegConv+0x140>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004590:	68d3      	ldr	r3, [r2, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80ae 	beq.w	80046f4 <RCM_RegisterRegConv+0x1a0>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004598:	791c      	ldrb	r4, [r3, #4]
 800459a:	4564      	cmp	r4, ip
 800459c:	f000 808c 	beq.w	80046b8 <RCM_RegisterRegConv+0x164>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 80045a0:	2803      	cmp	r0, #3
 80045a2:	bf88      	it	hi
 80045a4:	20ff      	movhi	r0, #255	; 0xff
 80045a6:	f240 80b1 	bls.w	800470c <RCM_RegisterRegConv+0x1b8>
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
}
 80045aa:	bd30      	pop	{r4, r5, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80045ac:	6803      	ldr	r3, [r0, #0]
 80045ae:	6820      	ldr	r0, [r4, #0]
 80045b0:	4283      	cmp	r3, r0
 80045b2:	d1db      	bne.n	800456c <RCM_RegisterRegConv+0x18>
    uint8_t i = 0;
 80045b4:	2000      	movs	r0, #0
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80045b6:	4c58      	ldr	r4, [pc, #352]	; (8004718 <RCM_RegisterRegConv+0x1c4>)
      RCM_handle_array [handle] = regConv;
 80045b8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045bc:	689a      	ldr	r2, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80045be:	2500      	movs	r5, #0
 80045c0:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 80045c4:	07d5      	lsls	r5, r2, #31
 80045c6:	d422      	bmi.n	800460e <RCM_RegisterRegConv+0xba>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80045c8:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80045ca:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80045cc:	f022 0204 	bic.w	r2, r2, #4
 80045d0:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80045d2:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80045d4:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80045d6:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80045d8:	f022 0220 	bic.w	r2, r2, #32
 80045dc:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80045de:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80045e6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80045ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80045ee:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	2a00      	cmp	r2, #0
 80045f4:	dbfc      	blt.n	80045f0 <RCM_RegisterRegConv+0x9c>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80045f6:	681a      	ldr	r2, [r3, #0]
        while (0U == LL_ADC_IsActiveFlag_ADRDY(regConv->regADC))
 80045f8:	07d4      	lsls	r4, r2, #31
 80045fa:	d408      	bmi.n	800460e <RCM_RegisterRegConv+0xba>
  MODIFY_REG(ADCx->CR,
 80045fc:	4c47      	ldr	r4, [pc, #284]	; (800471c <RCM_RegisterRegConv+0x1c8>)
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	4022      	ands	r2, r4
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	07d2      	lsls	r2, r2, #31
 800460c:	d5f7      	bpl.n	80045fe <RCM_RegisterRegConv+0xaa>
      RCM_NoInj_array[handle].enable = false;
 800460e:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8004612:	4c43      	ldr	r4, [pc, #268]	; (8004720 <RCM_RegisterRegConv+0x1cc>)
 8004614:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004618:	2200      	movs	r2, #0
 800461a:	f804 200c 	strb.w	r2, [r4, ip]
      RCM_NoInj_array[handle].prev = handle;
 800461e:	4464      	add	r4, ip
 8004620:	f360 0207 	bfi	r2, r0, #0, #8
 8004624:	f360 220f 	bfi	r2, r0, #8, #8
 8004628:	80a2      	strh	r2, [r4, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800462a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800462c:	f022 020f 	bic.w	r2, r2, #15
 8004630:	631a      	str	r2, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8004632:	790c      	ldrb	r4, [r1, #4]
 8004634:	2c09      	cmp	r4, #9
 8004636:	d846      	bhi.n	80046c6 <RCM_RegisterRegConv+0x172>
 8004638:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800463c:	06a2      	lsls	r2, r4, #26
 800463e:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 8004642:	2501      	movs	r5, #1
 8004644:	fa05 f404 	lsl.w	r4, r5, r4
 8004648:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800464a:	0dd4      	lsrs	r4, r2, #23
  MODIFY_REG(*preg,
 800464c:	6889      	ldr	r1, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800464e:	f004 0404 	and.w	r4, r4, #4
 8004652:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8004654:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004658:	fa01 fc02 	lsl.w	ip, r1, r2
 800465c:	f04f 0e07 	mov.w	lr, #7
 8004660:	58e1      	ldr	r1, [r4, r3]
 8004662:	fa0e f202 	lsl.w	r2, lr, r2
 8004666:	ea21 0202 	bic.w	r2, r1, r2
 800466a:	ea42 020c 	orr.w	r2, r2, ip
 800466e:	50e2      	str	r2, [r4, r3]
}
 8004670:	bd30      	pop	{r4, r5, pc}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004672:	6853      	ldr	r3, [r2, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d041      	beq.n	80046fc <RCM_RegisterRegConv+0x1a8>
 8004678:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 800467c:	4620      	mov	r0, r4
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800467e:	791c      	ldrb	r4, [r3, #4]
 8004680:	4564      	cmp	r4, ip
 8004682:	f47f af7d 	bne.w	8004580 <RCM_RegisterRegConv+0x2c>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004686:	681c      	ldr	r4, [r3, #0]
 8004688:	680b      	ldr	r3, [r1, #0]
 800468a:	429c      	cmp	r4, r3
 800468c:	f47f af78 	bne.w	8004580 <RCM_RegisterRegConv+0x2c>
      i++;
 8004690:	2001      	movs	r0, #1
 8004692:	e790      	b.n	80045b6 <RCM_RegisterRegConv+0x62>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004694:	6824      	ldr	r4, [r4, #0]
 8004696:	680b      	ldr	r3, [r1, #0]
 8004698:	429c      	cmp	r4, r3
 800469a:	f47f af79 	bne.w	8004590 <RCM_RegisterRegConv+0x3c>
      i++;
 800469e:	2002      	movs	r0, #2
 80046a0:	e789      	b.n	80045b6 <RCM_RegisterRegConv+0x62>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80046a2:	6894      	ldr	r4, [r2, #8]
      i++;
 80046a4:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80046a6:	2c00      	cmp	r4, #0
 80046a8:	f47f af6e 	bne.w	8004588 <RCM_RegisterRegConv+0x34>
 80046ac:	68d3      	ldr	r3, [r2, #12]
 80046ae:	b36b      	cbz	r3, 800470c <RCM_RegisterRegConv+0x1b8>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80046b0:	791d      	ldrb	r5, [r3, #4]
 80046b2:	790c      	ldrb	r4, [r1, #4]
 80046b4:	42a5      	cmp	r5, r4
 80046b6:	d129      	bne.n	800470c <RCM_RegisterRegConv+0x1b8>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80046b8:	681c      	ldr	r4, [r3, #0]
 80046ba:	680b      	ldr	r3, [r1, #0]
 80046bc:	429c      	cmp	r4, r3
 80046be:	f47f af6f 	bne.w	80045a0 <RCM_RegisterRegConv+0x4c>
      i++;
 80046c2:	2003      	movs	r0, #3
 80046c4:	e777      	b.n	80045b6 <RCM_RegisterRegConv+0x62>
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80046c6:	2203      	movs	r2, #3
 80046c8:	f06f 051d 	mvn.w	r5, #29
 80046cc:	fb12 5504 	smlabb	r5, r2, r4, r5
 80046d0:	2201      	movs	r2, #1
 80046d2:	40a2      	lsls	r2, r4
 80046d4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 80046d8:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 80046dc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80046e0:	e7b3      	b.n	800464a <RCM_RegisterRegConv+0xf6>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80046e2:	2804      	cmp	r0, #4
 80046e4:	d910      	bls.n	8004708 <RCM_RegisterRegConv+0x1b4>
 80046e6:	68d3      	ldr	r3, [r2, #12]
 80046e8:	b113      	cbz	r3, 80046f0 <RCM_RegisterRegConv+0x19c>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80046ea:	7918      	ldrb	r0, [r3, #4]
 80046ec:	4584      	cmp	ip, r0
 80046ee:	d00f      	beq.n	8004710 <RCM_RegisterRegConv+0x1bc>
 80046f0:	680b      	ldr	r3, [r1, #0]
 80046f2:	e7d4      	b.n	800469e <RCM_RegisterRegConv+0x14a>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80046f4:	2804      	cmp	r0, #4
 80046f6:	680b      	ldr	r3, [r1, #0]
 80046f8:	d8e3      	bhi.n	80046c2 <RCM_RegisterRegConv+0x16e>
 80046fa:	e75c      	b.n	80045b6 <RCM_RegisterRegConv+0x62>
 80046fc:	6894      	ldr	r4, [r2, #8]
 80046fe:	b11c      	cbz	r4, 8004708 <RCM_RegisterRegConv+0x1b4>
 8004700:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 8004704:	4618      	mov	r0, r3
 8004706:	e73f      	b.n	8004588 <RCM_RegisterRegConv+0x34>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004708:	4620      	mov	r0, r4
 800470a:	e7cf      	b.n	80046ac <RCM_RegisterRegConv+0x158>
 800470c:	680b      	ldr	r3, [r1, #0]
 800470e:	e752      	b.n	80045b6 <RCM_RegisterRegConv+0x62>
      i++;
 8004710:	2002      	movs	r0, #2
 8004712:	e7d1      	b.n	80046b8 <RCM_RegisterRegConv+0x164>
 8004714:	20001ca8 	.word	0x20001ca8
 8004718:	20001c68 	.word	0x20001c68
 800471c:	7fffffc0 	.word	0x7fffffc0
 8004720:	20001c88 	.word	0x20001c88

08004724 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8004724:	4b5e      	ldr	r3, [pc, #376]	; (80048a0 <RCM_ExecRegularConv+0x17c>)
 8004726:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 800472a:	b510      	push	{r4, lr}
  if (false == RCM_NoInj_array [handle].enable)
 800472c:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8004730:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 8004734:	2a00      	cmp	r2, #0
 8004736:	d13c      	bne.n	80047b2 <RCM_ExecRegularConv+0x8e>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8004738:	7819      	ldrb	r1, [r3, #0]
 800473a:	b9a9      	cbnz	r1, 8004768 <RCM_ExecRegularConv+0x44>
  uint8_t LastEnable = RCM_MAX_CONV;
 800473c:	2204      	movs	r2, #4
      if (true == RCM_NoInj_array [i].enable)
 800473e:	7999      	ldrb	r1, [r3, #6]
 8004740:	2900      	cmp	r1, #0
 8004742:	d07e      	beq.n	8004842 <RCM_ExecRegularConv+0x11e>
      {
        if (RCM_NoInj_array[i].next > handle)
 8004744:	7ad9      	ldrb	r1, [r3, #11]
 8004746:	4288      	cmp	r0, r1
 8004748:	f0c0 809a 	bcc.w	8004880 <RCM_ExecRegularConv+0x15c>
      if (true == RCM_NoInj_array [i].enable)
 800474c:	7b1a      	ldrb	r2, [r3, #12]
 800474e:	2a00      	cmp	r2, #0
 8004750:	f000 8099 	beq.w	8004886 <RCM_ExecRegularConv+0x162>
        if (RCM_NoInj_array[i].next > handle)
 8004754:	7c59      	ldrb	r1, [r3, #17]
 8004756:	4288      	cmp	r0, r1
 8004758:	f0c0 809f 	bcc.w	800489a <RCM_ExecRegularConv+0x176>
      if (true == RCM_NoInj_array [i].enable)
 800475c:	7c9a      	ldrb	r2, [r3, #18]
 800475e:	2a00      	cmp	r2, #0
 8004760:	f040 8095 	bne.w	800488e <RCM_ExecRegularConv+0x16a>
      }
      else
      {
        /* nothing to do */
      }
      i++;
 8004764:	2202      	movs	r2, #2
 8004766:	e073      	b.n	8004850 <RCM_ExecRegularConv+0x12c>
        if (RCM_NoInj_array[i].next > handle)
 8004768:	7959      	ldrb	r1, [r3, #5]
 800476a:	4281      	cmp	r1, r0
 800476c:	d9e7      	bls.n	800473e <RCM_ExecRegularConv+0x1a>
      if (true == RCM_NoInj_array [i].enable)
 800476e:	4696      	mov	lr, r2
          RCM_NoInj_array[handle].next = formerNext;
 8004770:	eb0c 0400 	add.w	r4, ip, r0
 8004774:	eb03 0444 	add.w	r4, r3, r4, lsl #1
          RCM_NoInj_array[i].next = handle;
 8004778:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
          RCM_NoInj_array[handle].prev = i;
 800477c:	7122      	strb	r2, [r4, #4]
          RCM_NoInj_array[handle].next = formerNext;
 800477e:	7161      	strb	r1, [r4, #5]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004780:	4c48      	ldr	r4, [pc, #288]	; (80048a4 <RCM_ExecRegularConv+0x180>)
          RCM_NoInj_array[formerNext].prev = handle;
 8004782:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array[i].next = handle;
 8004786:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 800478a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800478e:	7822      	ldrb	r2, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 8004790:	f88e 0005 	strb.w	r0, [lr, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8004794:	7108      	strb	r0, [r1, #4]
    RCM_NoInj_array[handle].enable = true;
 8004796:	eb0c 0100 	add.w	r1, ip, r0
 800479a:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800479e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array[handle].enable = true;
 80047a2:	f823 e011 	strh.w	lr, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80047a6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80047aa:	7852      	ldrb	r2, [r2, #1]
 80047ac:	4572      	cmp	r2, lr
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 80047ae:	bf18      	it	ne
 80047b0:	7020      	strbne	r0, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 80047b2:	4a3d      	ldr	r2, [pc, #244]	; (80048a8 <RCM_ExecRegularConv+0x184>)
 80047b4:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 80047b8:	2a00      	cmp	r2, #0
 80047ba:	d132      	bne.n	8004822 <RCM_ExecRegularConv+0xfe>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80047bc:	4a3b      	ldr	r2, [pc, #236]	; (80048ac <RCM_ExecRegularConv+0x188>)
 80047be:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80047c2:	7914      	ldrb	r4, [r2, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80047c4:	6811      	ldr	r1, [r2, #0]
 80047c6:	2c09      	cmp	r4, #9
 80047c8:	d930      	bls.n	800482c <RCM_ExecRegularConv+0x108>
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80047ca:	2203      	movs	r2, #3
 80047cc:	f06f 0e1d 	mvn.w	lr, #29
 80047d0:	fb12 ee04 	smlabb	lr, r2, r4, lr
 80047d4:	2201      	movs	r2, #1
 80047d6:	40a2      	lsls	r2, r4
 80047d8:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 80047dc:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80047e0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 80047e4:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80047e6:	0d12      	lsrs	r2, r2, #20
 80047e8:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 80047ec:	f424 64f8 	bic.w	r4, r4, #1984	; 0x7c0
 80047f0:	4322      	orrs	r2, r4
 80047f2:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80047f4:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80047f6:	688a      	ldr	r2, [r1, #8]
 80047f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047fc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004800:	f042 0204 	orr.w	r2, r2, #4
 8004804:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8004806:	680a      	ldr	r2, [r1, #0]
 8004808:	0752      	lsls	r2, r2, #29
 800480a:	d5fc      	bpl.n	8004806 <RCM_ExecRegularConv+0xe2>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 800480c:	eb0c 0200 	add.w	r2, ip, r0
 8004810:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8004814:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004816:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8004818:	4922      	ldr	r1, [pc, #136]	; (80048a4 <RCM_ExecRegularConv+0x180>)
 800481a:	7954      	ldrb	r4, [r2, #5]
 800481c:	700c      	strb	r4, [r1, #0]
    RCM_NoInj_array[handle].status = valid;
 800481e:	2102      	movs	r1, #2
 8004820:	7051      	strb	r1, [r2, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8004822:	4460      	add	r0, ip
 8004824:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  return retVal;
}
 8004828:	8858      	ldrh	r0, [r3, #2]
 800482a:	bd10      	pop	{r4, pc}
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800482c:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8004830:	06a2      	lsls	r2, r4, #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004832:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8004836:	f04f 0e01 	mov.w	lr, #1
 800483a:	fa0e f404 	lsl.w	r4, lr, r4
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800483e:	4322      	orrs	r2, r4
 8004840:	e7d0      	b.n	80047e4 <RCM_ExecRegularConv+0xc0>
      if (true == RCM_NoInj_array [i].enable)
 8004842:	7b19      	ldrb	r1, [r3, #12]
 8004844:	2900      	cmp	r1, #0
 8004846:	d185      	bne.n	8004754 <RCM_ExecRegularConv+0x30>
 8004848:	7c99      	ldrb	r1, [r3, #18]
 800484a:	bb01      	cbnz	r1, 800488e <RCM_ExecRegularConv+0x16a>
       if (LastEnable != RCM_MAX_CONV )
 800484c:	2a04      	cmp	r2, #4
 800484e:	d013      	beq.n	8004878 <RCM_ExecRegularConv+0x154>
         formerNext = RCM_NoInj_array[LastEnable].next;
 8004850:	eb02 0142 	add.w	r1, r2, r2, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8004854:	eb0c 0400 	add.w	r4, ip, r0
 8004858:	eb03 0444 	add.w	r4, r3, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 800485c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8004860:	7122      	strb	r2, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 8004862:	794a      	ldrb	r2, [r1, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8004864:	7162      	strb	r2, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8004866:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800486a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800486e:	4c0d      	ldr	r4, [pc, #52]	; (80048a4 <RCM_ExecRegularConv+0x180>)
         RCM_NoInj_array[formerNext].prev = handle;
 8004870:	7110      	strb	r0, [r2, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8004872:	7148      	strb	r0, [r1, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004874:	7822      	ldrb	r2, [r4, #0]
 8004876:	e78e      	b.n	8004796 <RCM_ExecRegularConv+0x72>
         RCM_currentHandle = handle;
 8004878:	4c0a      	ldr	r4, [pc, #40]	; (80048a4 <RCM_ExecRegularConv+0x180>)
 800487a:	4602      	mov	r2, r0
 800487c:	7020      	strb	r0, [r4, #0]
    while (i < RCM_MAX_CONV)
 800487e:	e78a      	b.n	8004796 <RCM_ExecRegularConv+0x72>
      i++;
 8004880:	2201      	movs	r2, #1
      if (true == RCM_NoInj_array [i].enable)
 8004882:	4696      	mov	lr, r2
 8004884:	e774      	b.n	8004770 <RCM_ExecRegularConv+0x4c>
 8004886:	7c9a      	ldrb	r2, [r3, #18]
 8004888:	b90a      	cbnz	r2, 800488e <RCM_ExecRegularConv+0x16a>
      i++;
 800488a:	2201      	movs	r2, #1
 800488c:	e7e0      	b.n	8004850 <RCM_ExecRegularConv+0x12c>
        if (RCM_NoInj_array[i].next > handle)
 800488e:	7dd9      	ldrb	r1, [r3, #23]
 8004890:	4281      	cmp	r1, r0
      i++;
 8004892:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array[i].next > handle)
 8004896:	d9db      	bls.n	8004850 <RCM_ExecRegularConv+0x12c>
 8004898:	e769      	b.n	800476e <RCM_ExecRegularConv+0x4a>
      i++;
 800489a:	2202      	movs	r2, #2
 800489c:	e767      	b.n	800476e <RCM_ExecRegularConv+0x4a>
 800489e:	bf00      	nop
 80048a0:	20001c88 	.word	0x20001c88
 80048a4:	20001ca4 	.word	0x20001ca4
 80048a8:	200002a0 	.word	0x200002a0
 80048ac:	20001ca8 	.word	0x20001ca8

080048b0 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 80048b0:	b570      	push	{r4, r5, r6, lr}
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80048b2:	4c12      	ldr	r4, [pc, #72]	; (80048fc <RCM_ExecUserConv+0x4c>)
 80048b4:	7823      	ldrb	r3, [r4, #0]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d000      	beq.n	80048bc <RCM_ExecUserConv+0xc>
    else
    {
      /* Nothing to do */
    }
  }
}
 80048ba:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80048bc:	4b10      	ldr	r3, [pc, #64]	; (8004900 <RCM_ExecUserConv+0x50>)
 80048be:	781d      	ldrb	r5, [r3, #0]
 80048c0:	4628      	mov	r0, r5
 80048c2:	f7ff ff2f 	bl	8004724 <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80048c6:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <RCM_ExecUserConv+0x54>)
 80048c8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80048cc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80048d0:	4a0d      	ldr	r2, [pc, #52]	; (8004908 <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80048d2:	785b      	ldrb	r3, [r3, #1]
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80048d4:	8010      	strh	r0, [r2, #0]
 80048d6:	4601      	mov	r1, r0
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80048d8:	b10b      	cbz	r3, 80048de <RCM_ExecUserConv+0x2e>
      RCM_UserConvState = RCM_USERCONV_EOC;
 80048da:	2302      	movs	r3, #2
 80048dc:	7023      	strb	r3, [r4, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 80048de:	4b0b      	ldr	r3, [pc, #44]	; (800490c <RCM_ExecUserConv+0x5c>)
 80048e0:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
 80048e4:	2e00      	cmp	r6, #0
 80048e6:	d0e8      	beq.n	80048ba <RCM_ExecUserConv+0xa>
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80048e8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80048ec:	4628      	mov	r0, r5
 80048ee:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 80048f0:	2300      	movs	r3, #0
 80048f2:	7023      	strb	r3, [r4, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80048f4:	4633      	mov	r3, r6
}
 80048f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80048fa:	4718      	bx	r3
 80048fc:	20001ca1 	.word	0x20001ca1
 8004900:	20001ca0 	.word	0x20001ca0
 8004904:	20001c88 	.word	0x20001c88
 8004908:	20001ca2 	.word	0x20001ca2
 800490c:	20001c68 	.word	0x20001c68

08004910 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8004910:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <RCM_ExecNextConv+0x94>)
 8004912:	4825      	ldr	r0, [pc, #148]	; (80049a8 <RCM_ExecNextConv+0x98>)
 8004914:	781a      	ldrb	r2, [r3, #0]
 8004916:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800491a:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800491e:	b3a3      	cbz	r3, 800498a <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004920:	4b22      	ldr	r3, [pc, #136]	; (80049ac <RCM_ExecNextConv+0x9c>)
{
 8004922:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004928:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800492a:	2404      	movs	r4, #4
 800492c:	600c      	str	r4, [r1, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 800492e:	f893 c004 	ldrb.w	ip, [r3, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8004932:	f1bc 0f09 	cmp.w	ip, #9
 8004936:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 800493a:	d927      	bls.n	800498c <RCM_ExecNextConv+0x7c>
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 800493c:	2303      	movs	r3, #3
 800493e:	f06f 041d 	mvn.w	r4, #29
 8004942:	fb13 440c 	smlabb	r4, r3, ip, r4
 8004946:	2301      	movs	r3, #1
 8004948:	fa03 f30c 	lsl.w	r3, r3, ip
 800494c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8004950:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8004954:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000

    (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8004958:	4472      	add	r2, lr
 800495a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  MODIFY_REG(*preg,
 800495e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004960:	0d1b      	lsrs	r3, r3, #20
 8004962:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004966:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 800496a:	4313      	orrs	r3, r2
 800496c:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800496e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8004970:	688b      	ldr	r3, [r1, #8]
 8004972:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004976:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800497a:	f04f 0c01 	mov.w	ip, #1
 800497e:	f043 0304 	orr.w	r3, r3, #4
 8004982:	608b      	str	r3, [r1, #8]
 8004984:	f880 c001 	strb.w	ip, [r0, #1]
  }
  else
  {
    /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8004988:	bd10      	pop	{r4, pc}
 800498a:	4770      	bx	lr
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 800498c:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8004990:	ea4f 638c 	mov.w	r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8004994:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8004998:	2401      	movs	r4, #1
 800499a:	fa04 fc0c 	lsl.w	ip, r4, ip
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 800499e:	ea43 030c 	orr.w	r3, r3, ip
 80049a2:	e7d9      	b.n	8004958 <RCM_ExecNextConv+0x48>
 80049a4:	20001ca4 	.word	0x20001ca4
 80049a8:	20001c88 	.word	0x20001c88
 80049ac:	20001ca8 	.word	0x20001ca8

080049b0 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 80049b0:	b510      	push	{r4, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
 80049b2:	4814      	ldr	r0, [pc, #80]	; (8004a04 <RCM_ReadOngoingConv+0x54>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80049b4:	4a14      	ldr	r2, [pc, #80]	; (8004a08 <RCM_ReadOngoingConv+0x58>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 80049b6:	7803      	ldrb	r3, [r0, #0]
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80049b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80049bc:	6814      	ldr	r4, [r2, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80049be:	6822      	ldr	r2, [r4, #0]
 80049c0:	f012 0f04 	tst.w	r2, #4
  status = RCM_NoInj_array[RCM_currentHandle].status;
 80049c4:	ea4f 0143 	mov.w	r1, r3, lsl #1
 80049c8:	4a10      	ldr	r2, [pc, #64]	; (8004a0c <RCM_ReadOngoingConv+0x5c>)
 80049ca:	d008      	beq.n	80049de <RCM_ReadOngoingConv+0x2e>
 80049cc:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 80049d0:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 80049d4:	f89c e001 	ldrb.w	lr, [ip, #1]
 80049d8:	f01e 0ffd 	tst.w	lr, #253	; 0xfd
 80049dc:	d105      	bne.n	80049ea <RCM_ReadOngoingConv+0x3a>
    RCM_NoInj_array[RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 80049de:	440b      	add	r3, r1
 80049e0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80049e4:	7953      	ldrb	r3, [r2, #5]
 80049e6:	7003      	strb	r3, [r0, #0]
}
 80049e8:	bd10      	pop	{r4, pc}
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 80049ea:	440b      	add	r3, r1
 80049ec:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80049f0:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80049f2:	7953      	ldrb	r3, [r2, #5]
 80049f4:	f8ac 4002 	strh.w	r4, [ip, #2]
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 80049f8:	2402      	movs	r4, #2
 80049fa:	f88c 4001 	strb.w	r4, [ip, #1]
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 80049fe:	7003      	strb	r3, [r0, #0]
}
 8004a00:	bd10      	pop	{r4, pc}
 8004a02:	bf00      	nop
 8004a04:	20001ca4 	.word	0x20001ca4
 8004a08:	20001ca8 	.word	0x20001ca8
 8004a0c:	20001c88 	.word	0x20001c88

08004a10 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a10:	4b0e      	ldr	r3, [pc, #56]	; (8004a4c <HAL_MspInit+0x3c>)
{
 8004a12:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	661a      	str	r2, [r3, #96]	; 0x60
 8004a1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8004a1e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a20:	f002 0201 	and.w	r2, r2, #1
 8004a24:	9200      	str	r2, [sp, #0]
 8004a26:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a2e:	659a      	str	r2, [r3, #88]	; 0x58
 8004a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a36:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004a38:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a3a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004a3c:	f001 fb48 	bl	80060d0 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a40:	b003      	add	sp, #12
 8004a42:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8004a46:	f001 bdd3 	b.w	80065f0 <HAL_PWREx_DisableUCPDDeadBattery>
 8004a4a:	bf00      	nop
 8004a4c:	40021000 	.word	0x40021000

08004a50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004a50:	b510      	push	{r4, lr}
 8004a52:	4604      	mov	r4, r0
 8004a54:	b09e      	sub	sp, #120	; 0x78
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a56:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a58:	2244      	movs	r2, #68	; 0x44
 8004a5a:	a80d      	add	r0, sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a5c:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8004a60:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
 8004a64:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a66:	f005 fe28 	bl	800a6ba <memset>
  if(hadc->Instance==ADC1)
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a70:	d004      	beq.n	8004a7c <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8004a72:	4a4d      	ldr	r2, [pc, #308]	; (8004ba8 <HAL_ADC_MspInit+0x158>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d047      	beq.n	8004b08 <HAL_ADC_MspInit+0xb8>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004a78:	b01e      	add	sp, #120	; 0x78
 8004a7a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004a7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8004a80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a84:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004a86:	920d      	str	r2, [sp, #52]	; 0x34
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8004a88:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a8a:	f002 f981 	bl	8006d90 <HAL_RCCEx_PeriphCLKConfig>
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	f040 8084 	bne.w	8004b9c <HAL_ADC_MspInit+0x14c>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004a94:	4a45      	ldr	r2, [pc, #276]	; (8004bac <HAL_ADC_MspInit+0x15c>)
 8004a96:	6813      	ldr	r3, [r2, #0]
 8004a98:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004a9a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004a9c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004a9e:	d109      	bne.n	8004ab4 <HAL_ADC_MspInit+0x64>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004aa0:	4b43      	ldr	r3, [pc, #268]	; (8004bb0 <HAL_ADC_MspInit+0x160>)
 8004aa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004aa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004aa8:	64da      	str	r2, [r3, #76]	; 0x4c
 8004aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ab0:	9301      	str	r3, [sp, #4]
 8004ab2:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ab4:	4b3e      	ldr	r3, [pc, #248]	; (8004bb0 <HAL_ADC_MspInit+0x160>)
 8004ab6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ab8:	f042 0201 	orr.w	r2, r2, #1
 8004abc:	64da      	str	r2, [r3, #76]	; 0x4c
 8004abe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ac0:	f002 0201 	and.w	r2, r2, #1
 8004ac4:	9202      	str	r2, [sp, #8]
 8004ac6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ac8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004aca:	f042 0202 	orr.w	r2, r2, #2
 8004ace:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_CURR_AMPL_U_Pin;
 8004ad8:	2203      	movs	r2, #3
 8004ada:	2303      	movs	r3, #3
 8004adc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae0:	2400      	movs	r4, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ae2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae4:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ae6:	a908      	add	r1, sp, #32
 8004ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    HAL_GPIO_Init(M1_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8004aec:	f001 fc04 	bl	80062f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8004af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004af4:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8004af6:	482f      	ldr	r0, [pc, #188]	; (8004bb4 <HAL_ADC_MspInit+0x164>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af8:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8004afa:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8004afc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8004b00:	f001 fbfa 	bl	80062f8 <HAL_GPIO_Init>
}
 8004b04:	b01e      	add	sp, #120	; 0x78
 8004b06:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004b08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8004b0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b10:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004b12:	920d      	str	r2, [sp, #52]	; 0x34
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8004b14:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b16:	f002 f93b 	bl	8006d90 <HAL_RCCEx_PeriphCLKConfig>
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	d141      	bne.n	8004ba2 <HAL_ADC_MspInit+0x152>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004b1e:	4a23      	ldr	r2, [pc, #140]	; (8004bac <HAL_ADC_MspInit+0x15c>)
 8004b20:	6813      	ldr	r3, [r2, #0]
 8004b22:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004b24:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004b26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004b28:	d109      	bne.n	8004b3e <HAL_ADC_MspInit+0xee>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004b2a:	4b21      	ldr	r3, [pc, #132]	; (8004bb0 <HAL_ADC_MspInit+0x160>)
 8004b2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b32:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b3a:	9304      	str	r3, [sp, #16]
 8004b3c:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b3e:	4b1c      	ldr	r3, [pc, #112]	; (8004bb0 <HAL_ADC_MspInit+0x160>)
 8004b40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b4a:	f002 0201 	and.w	r2, r2, #1
 8004b4e:	9205      	str	r2, [sp, #20]
 8004b50:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b54:	f042 0204 	orr.w	r2, r2, #4
 8004b58:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b5c:	f002 0204 	and.w	r2, r2, #4
 8004b60:	9206      	str	r2, [sp, #24]
 8004b62:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b66:	f042 0202 	orr.w	r2, r2, #2
 8004b6a:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin;
 8004b74:	2280      	movs	r2, #128	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b76:	2400      	movs	r4, #0
    HAL_GPIO_Init(M1_CURR_AMPL_W_GPIO_Port, &GPIO_InitStruct);
 8004b78:	a908      	add	r1, sp, #32
 8004b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b84:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b86:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(M1_CURR_AMPL_W_GPIO_Port, &GPIO_InitStruct);
 8004b88:	f001 fbb6 	bl	80062f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin;
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(M1_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8004b94:	4808      	ldr	r0, [pc, #32]	; (8004bb8 <HAL_ADC_MspInit+0x168>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b96:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8004b98:	a908      	add	r1, sp, #32
 8004b9a:	e7a7      	b.n	8004aec <HAL_ADC_MspInit+0x9c>
      Error_Handler();
 8004b9c:	f7fd fd62 	bl	8002664 <Error_Handler>
 8004ba0:	e778      	b.n	8004a94 <HAL_ADC_MspInit+0x44>
      Error_Handler();
 8004ba2:	f7fd fd5f 	bl	8002664 <Error_Handler>
 8004ba6:	e7ba      	b.n	8004b1e <HAL_ADC_MspInit+0xce>
 8004ba8:	50000100 	.word	0x50000100
 8004bac:	20001cb8 	.word	0x20001cb8
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	48000400 	.word	0x48000400
 8004bb8:	48000800 	.word	0x48000800

08004bbc <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <HAL_CORDIC_MspInit+0x2c>)
 8004bbe:	6802      	ldr	r2, [r0, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d000      	beq.n	8004bc6 <HAL_CORDIC_MspInit+0xa>
 8004bc4:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004bc6:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 8004bca:	f042 0208 	orr.w	r2, r2, #8
 8004bce:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8004bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 8004bd6:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8004be2:	b002      	add	sp, #8
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40020c00 	.word	0x40020c00
 8004bec:	00000000 	.word	0x00000000

08004bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004bf0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8004bf2:	4a1b      	ldr	r2, [pc, #108]	; (8004c60 <HAL_TIM_Base_MspInit+0x70>)
 8004bf4:	6801      	ldr	r1, [r0, #0]
{
 8004bf6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf8:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8004bfa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bfc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004c00:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004c04:	9306      	str	r3, [sp, #24]
  if(htim_base->Instance==TIM1)
 8004c06:	d001      	beq.n	8004c0c <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004c08:	b008      	add	sp, #32
 8004c0a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c10:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8004c14:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8004c58 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8004c1a:	4812      	ldr	r0, [pc, #72]	; (8004c64 <HAL_TIM_Base_MspInit+0x74>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c20:	661a      	str	r2, [r3, #96]	; 0x60
 8004c22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c24:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004c28:	9200      	str	r2, [sp, #0]
 8004c2a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c2e:	f042 0202 	orr.w	r2, r2, #2
 8004c32:	64da      	str	r2, [r3, #76]	; 0x4c
 8004c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c3c:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004c3e:	2306      	movs	r3, #6
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8004c40:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8004c42:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c46:	9c01      	ldr	r4, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c48:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004c4a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8004c4c:	f001 fb54 	bl	80062f8 <HAL_GPIO_Init>
}
 8004c50:	b008      	add	sp, #32
 8004c52:	bd10      	pop	{r4, pc}
 8004c54:	f3af 8000 	nop.w
 8004c58:	00001000 	.word	0x00001000
 8004c5c:	00000012 	.word	0x00000012
 8004c60:	40012c00 	.word	0x40012c00
 8004c64:	48000400 	.word	0x48000400

08004c68 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004c68:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM3)
 8004c6a:	6803      	ldr	r3, [r0, #0]
 8004c6c:	4a2c      	ldr	r2, [pc, #176]	; (8004d20 <HAL_TIM_Encoder_MspInit+0xb8>)
{
 8004c6e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c70:	2400      	movs	r4, #0
  if(htim_encoder->Instance==TIM3)
 8004c72:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c74:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004c78:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004c7c:	9408      	str	r4, [sp, #32]
  if(htim_encoder->Instance==TIM3)
 8004c7e:	d004      	beq.n	8004c8a <HAL_TIM_Encoder_MspInit+0x22>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM4)
 8004c80:	4a28      	ldr	r2, [pc, #160]	; (8004d24 <HAL_TIM_Encoder_MspInit+0xbc>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d020      	beq.n	8004cc8 <HAL_TIM_Encoder_MspInit+0x60>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004c86:	b00a      	add	sp, #40	; 0x28
 8004c88:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c8a:	4b27      	ldr	r3, [pc, #156]	; (8004d28 <HAL_TIM_Encoder_MspInit+0xc0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c8c:	4827      	ldr	r0, [pc, #156]	; (8004d2c <HAL_TIM_Encoder_MspInit+0xc4>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c90:	f042 0202 	orr.w	r2, r2, #2
 8004c94:	659a      	str	r2, [r3, #88]	; 0x58
 8004c96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c98:	f002 0202 	and.w	r2, r2, #2
 8004c9c:	9200      	str	r2, [sp, #0]
 8004c9e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ca0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ca2:	f042 0204 	orr.w	r2, r2, #4
 8004ca6:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8004caa:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8004d18 <HAL_TIM_Encoder_MspInit+0xb0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cb4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004cb6:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8004cb8:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cbc:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004cbe:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cc0:	f001 fb1a 	bl	80062f8 <HAL_GPIO_Init>
}
 8004cc4:	b00a      	add	sp, #40	; 0x28
 8004cc6:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004cc8:	4b17      	ldr	r3, [pc, #92]	; (8004d28 <HAL_TIM_Encoder_MspInit+0xc0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cca:	4819      	ldr	r0, [pc, #100]	; (8004d30 <HAL_TIM_Encoder_MspInit+0xc8>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ccc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004cce:	f042 0204 	orr.w	r2, r2, #4
 8004cd2:	659a      	str	r2, [r3, #88]	; 0x58
 8004cd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004cd6:	f002 0204 	and.w	r2, r2, #4
 8004cda:	9202      	str	r2, [sp, #8]
 8004cdc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ce0:	f042 0202 	orr.w	r2, r2, #2
 8004ce4:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004cee:	22c0      	movs	r2, #192	; 0xc0
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cf6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cfc:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cfe:	f001 fafb 	bl	80062f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004d02:	4622      	mov	r2, r4
 8004d04:	4621      	mov	r1, r4
 8004d06:	201e      	movs	r0, #30
 8004d08:	f001 f9f4 	bl	80060f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004d0c:	201e      	movs	r0, #30
 8004d0e:	f001 fa2f 	bl	8006170 <HAL_NVIC_EnableIRQ>
}
 8004d12:	b00a      	add	sp, #40	; 0x28
 8004d14:	bd10      	pop	{r4, pc}
 8004d16:	bf00      	nop
 8004d18:	000000c0 	.word	0x000000c0
 8004d1c:	00000002 	.word	0x00000002
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	48000800 	.word	0x48000800
 8004d30:	48000400 	.word	0x48000400
 8004d34:	00000000 	.word	0x00000000

08004d38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004d38:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8004d3a:	4a1b      	ldr	r2, [pc, #108]	; (8004da8 <HAL_TIM_MspPostInit+0x70>)
 8004d3c:	6801      	ldr	r1, [r0, #0]
{
 8004d3e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d40:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8004d42:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d44:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004d48:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004d4c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8004d4e:	d002      	beq.n	8004d56 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004d50:	b009      	add	sp, #36	; 0x24
 8004d52:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d5a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8004d5e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8004d98 <HAL_TIM_MspPostInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d64:	f042 0201 	orr.w	r2, r2, #1
 8004d68:	64da      	str	r2, [r3, #76]	; 0x4c
 8004d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8004d6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004d70:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8004da0 <HAL_TIM_MspPostInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d7a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004d7c:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8004d82:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d86:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004d88:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d8a:	f001 fab5 	bl	80062f8 <HAL_GPIO_Init>
}
 8004d8e:	b009      	add	sp, #36	; 0x24
 8004d90:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d94:	f3af 8000 	nop.w
 8004d98:	00000700 	.word	0x00000700
 8004d9c:	00000002 	.word	0x00000002
 8004da0:	00000002 	.word	0x00000002
 8004da4:	00000002 	.word	0x00000002
 8004da8:	40012c00 	.word	0x40012c00

08004dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	4604      	mov	r4, r0
 8004db0:	b098      	sub	sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004db2:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004db4:	2244      	movs	r2, #68	; 0x44
 8004db6:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004db8:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8004dbc:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8004dc0:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004dc2:	f005 fc7a 	bl	800a6ba <memset>
  if(huart->Instance==USART2)
 8004dc6:	4b31      	ldr	r3, [pc, #196]	; (8004e8c <HAL_UART_MspInit+0xe0>)
 8004dc8:	6822      	ldr	r2, [r4, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d001      	beq.n	8004dd2 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004dce:	b018      	add	sp, #96	; 0x60
 8004dd0:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004dd2:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004dd4:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004dd6:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004dd8:	f001 ffda 	bl	8006d90 <HAL_RCCEx_PeriphCLKConfig>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d14c      	bne.n	8004e7a <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004de0:	4b2b      	ldr	r3, [pc, #172]	; (8004e90 <HAL_UART_MspInit+0xe4>)
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004de2:	4e2c      	ldr	r6, [pc, #176]	; (8004e94 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004de4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004de6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004dea:	659a      	str	r2, [r3, #88]	; 0x58
 8004dec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004dee:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004df2:	9200      	str	r2, [sp, #0]
 8004df4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004df6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004df8:	f042 0201 	orr.w	r2, r2, #1
 8004dfc:	64da      	str	r2, [r3, #76]	; 0x4c
 8004dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004e06:	220c      	movs	r2, #12
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e0e:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e10:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004e12:	2300      	movs	r3, #0
 8004e14:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e18:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e1a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e20:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e22:	f001 fa69 	bl	80062f8 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004e26:	491c      	ldr	r1, [pc, #112]	; (8004e98 <HAL_UART_MspInit+0xec>)
 8004e28:	221a      	movs	r2, #26
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e2a:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004e2c:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004e30:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e32:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e34:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e38:	e9c6 2304 	strd	r2, r3, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004e3c:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e40:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004e42:	f001 f9c3 	bl	80061cc <HAL_DMA_Init>
 8004e46:	b9f0      	cbnz	r0, 8004e86 <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004e48:	4d14      	ldr	r5, [pc, #80]	; (8004e9c <HAL_UART_MspInit+0xf0>)
 8004e4a:	4915      	ldr	r1, [pc, #84]	; (8004ea0 <HAL_UART_MspInit+0xf4>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004e4c:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004e4e:	221b      	movs	r2, #27
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e50:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004e52:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004e56:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e58:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e5a:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e5c:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e60:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e64:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004e68:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e6a:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004e6c:	f001 f9ae 	bl	80061cc <HAL_DMA_Init>
 8004e70:	b930      	cbnz	r0, 8004e80 <HAL_UART_MspInit+0xd4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004e72:	67a5      	str	r5, [r4, #120]	; 0x78
 8004e74:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8004e76:	b018      	add	sp, #96	; 0x60
 8004e78:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8004e7a:	f7fd fbf3 	bl	8002664 <Error_Handler>
 8004e7e:	e7af      	b.n	8004de0 <HAL_UART_MspInit+0x34>
      Error_Handler();
 8004e80:	f7fd fbf0 	bl	8002664 <Error_Handler>
 8004e84:	e7f5      	b.n	8004e72 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8004e86:	f7fd fbed 	bl	8002664 <Error_Handler>
 8004e8a:	e7dd      	b.n	8004e48 <HAL_UART_MspInit+0x9c>
 8004e8c:	40004400 	.word	0x40004400
 8004e90:	40021000 	.word	0x40021000
 8004e94:	20000814 	.word	0x20000814
 8004e98:	40020008 	.word	0x40020008
 8004e9c:	20000874 	.word	0x20000874
 8004ea0:	4002001c 	.word	0x4002001c

08004ea4 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004ea4:	4801      	ldr	r0, [pc, #4]	; (8004eac <TIM4_IRQHandler+0x8>)
 8004ea6:	f002 bbdb 	b.w	8007660 <HAL_TIM_IRQHandler>
 8004eaa:	bf00      	nop
 8004eac:	2000096c 	.word	0x2000096c

08004eb0 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8004eb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004eb4:	2240      	movs	r2, #64	; 0x40
 8004eb6:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  (void)TSK_HighFrequencyTask();
 8004eb8:	f7fe b8a6 	b.w	8003008 <TSK_HighFrequencyTask>

08004ebc <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004ebc:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    ( void )R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8004ebe:	4804      	ldr	r0, [pc, #16]	; (8004ed0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004ec0:	f06f 0201 	mvn.w	r2, #1
 8004ec4:	611a      	str	r2, [r3, #16]
 8004ec6:	f004 be25 	b.w	8009b14 <R3_2_TIMx_UP_IRQHandler>
 8004eca:	bf00      	nop
 8004ecc:	40012c00 	.word	0x40012c00
 8004ed0:	200002a0 	.word	0x200002a0

08004ed4 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8004ed4:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8004ed6:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	0611      	lsls	r1, r2, #24
 8004edc:	d505      	bpl.n	8004eea <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004ede:	f06f 0280 	mvn.w	r2, #128	; 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    ( void )R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8004ee2:	480a      	ldr	r0, [pc, #40]	; (8004f0c <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8004ee4:	611a      	str	r2, [r3, #16]
 8004ee6:	f004 fe81 	bl	8009bec <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8004eea:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004eec:	691a      	ldr	r2, [r3, #16]
 8004eee:	05d2      	lsls	r2, r2, #23
 8004ef0:	d505      	bpl.n	8004efe <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8004ef2:	f46f 7280 	mvn.w	r2, #256	; 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    ( void )R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 8004ef6:	4805      	ldr	r0, [pc, #20]	; (8004f0c <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8004ef8:	611a      	str	r2, [r3, #16]
 8004efa:	f004 fe53 	bl	8009ba4 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8004efe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8004f02:	f7fe b83b 	b.w	8002f7c <MC_Scheduler>
 8004f06:	bf00      	nop
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	200002a0 	.word	0x200002a0

08004f10 <TIM3_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) != 0U)
 8004f10:	4806      	ldr	r0, [pc, #24]	; (8004f2c <TIM3_IRQHandler+0x1c>)
 8004f12:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	07d1      	lsls	r1, r2, #31
 8004f18:	d502      	bpl.n	8004f20 <TIM3_IRQHandler+0x10>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004f1a:	691a      	ldr	r2, [r3, #16]
  {
    if (LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx) != 0U)
 8004f1c:	07d2      	lsls	r2, r2, #31
 8004f1e:	d400      	bmi.n	8004f22 <TIM3_IRQHandler+0x12>
    /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8004f20:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004f22:	f06f 0201 	mvn.w	r2, #1
 8004f26:	611a      	str	r2, [r3, #16]
      (void)ENC_IRQHandler(&ENCODER_M1);
 8004f28:	f003 bcbe 	b.w	80088a8 <ENC_IRQHandler>
 8004f2c:	200000f8 	.word	0x200000f8

08004f30 <DMA1_Channel1_IRQHandler>:
  }
}

__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel )
{
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR, (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2) )) == (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2))) ? 1UL : 0UL));
 8004f30:	4b04      	ldr	r3, [pc, #16]	; (8004f44 <DMA1_Channel1_IRQHandler+0x14>)
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	0792      	lsls	r2, r2, #30
 8004f36:	d400      	bmi.n	8004f3a <DMA1_Channel1_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

}
 8004f38:	4770      	bx	lr
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8004f3a:	2202      	movs	r2, #2
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8004f3c:	4802      	ldr	r0, [pc, #8]	; (8004f48 <DMA1_Channel1_IRQHandler+0x18>)
 8004f3e:	605a      	str	r2, [r3, #4]
 8004f40:	f7fc bf5a 	b.w	8001df8 <ASPEP_HWDataReceivedIT>
 8004f44:	40020000 	.word	0x40020000
 8004f48:	20000450 	.word	0x20000450

08004f4c <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8004f4c:	4b33      	ldr	r3, [pc, #204]	; (800501c <USART2_IRQHandler+0xd0>)
 8004f4e:	69da      	ldr	r2, [r3, #28]
 8004f50:	0650      	lsls	r0, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 8004f52:	b510      	push	{r4, lr}
 8004f54:	d509      	bpl.n	8004f6a <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004f56:	4932      	ldr	r1, [pc, #200]	; (8005020 <USART2_IRQHandler+0xd4>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel( DMA_TX_A, DMACH_TX_A );
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8004f58:	4832      	ldr	r0, [pc, #200]	; (8005024 <USART2_IRQHandler+0xd8>)
 8004f5a:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004f5c:	2440      	movs	r4, #64	; 0x40
 8004f5e:	f022 0201 	bic.w	r2, r2, #1
 8004f62:	61ca      	str	r2, [r1, #28]
 8004f64:	621c      	str	r4, [r3, #32]
 8004f66:	f7fc fda7 	bl	8001ab8 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004f6a:	492c      	ldr	r1, [pc, #176]	; (800501c <USART2_IRQHandler+0xd0>)
 8004f6c:	69ca      	ldr	r2, [r1, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8004f6e:	69cb      	ldr	r3, [r1, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8004f70:	69c8      	ldr	r0, [r1, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004f72:	f002 0c08 	and.w	ip, r2, #8
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8004f76:	f003 0302 	and.w	r3, r3, #2
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8004f7a:	688a      	ldr	r2, [r1, #8]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8004f7c:	ea43 030c 	orr.w	r3, r3, ip
 8004f80:	f000 0004 	and.w	r0, r0, #4
 8004f84:	4303      	orrs	r3, r0
  test2 = LL_USART_IsActiveFlag_FE (USARTA);
  test3 = LL_USART_IsActiveFlag_NE (USARTA);
  mask = LL_USART_IsEnabledIT_ERROR (USARTA);

  test1 = ( ( test1 | test2 | test3 ) & mask );
  if ( 0U == test1 )
 8004f86:	f002 0201 	and.w	r2, r2, #1
 8004f8a:	bf08      	it	eq
 8004f8c:	2200      	moveq	r2, #0
 8004f8e:	b19a      	cbz	r2, 8004fb8 <USART2_IRQHandler+0x6c>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF|USART_ICR_ORECF|USART_ICR_NECF);
 8004f90:	230e      	movs	r3, #14
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8004f92:	4a25      	ldr	r2, [pc, #148]	; (8005028 <USART2_IRQHandler+0xdc>)
 8004f94:	620b      	str	r3, [r1, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f96:	e852 3f00 	ldrex	r3, [r2]
 8004f9a:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9e:	e842 3100 	strex	r1, r3, [r2]
 8004fa2:	2900      	cmp	r1, #0
 8004fa4:	d1f7      	bne.n	8004f96 <USART2_IRQHandler+0x4a>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004fa6:	4a1d      	ldr	r2, [pc, #116]	; (800501c <USART2_IRQHandler+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	e852 3f00 	ldrex	r3, [r2]
 8004fac:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	e842 3100 	strex	r1, r3, [r2]
 8004fb4:	2900      	cmp	r1, #0
 8004fb6:	d1f7      	bne.n	8004fa8 <USART2_IRQHandler+0x5c>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004fb8:	4a18      	ldr	r2, [pc, #96]	; (800501c <USART2_IRQHandler+0xd0>)
 8004fba:	69d3      	ldr	r3, [r2, #28]
 8004fbc:	06d9      	lsls	r1, r3, #27
 8004fbe:	d52a      	bpl.n	8005016 <USART2_IRQHandler+0xca>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004fc0:	6813      	ldr	r3, [r2, #0]
 8004fc2:	06db      	lsls	r3, r3, #27
 8004fc4:	d528      	bpl.n	8005018 <USART2_IRQHandler+0xcc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004fca:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	e842 3100 	strex	r1, r3, [r2]
 8004fd2:	2900      	cmp	r1, #0
 8004fd4:	d1f7      	bne.n	8004fc6 <USART2_IRQHandler+0x7a>
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8004fd6:	4b14      	ldr	r3, [pc, #80]	; (8005028 <USART2_IRQHandler+0xdc>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004fdc:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	e843 2100 	strex	r1, r2, [r3]
 8004fe4:	2900      	cmp	r1, #0
 8004fe6:	d1f7      	bne.n	8004fd8 <USART2_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	e853 2f00 	ldrex	r2, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	e843 2100 	strex	r1, r2, [r3]
 8004ff4:	2900      	cmp	r1, #0
 8004ff6:	d1f7      	bne.n	8004fe8 <USART2_IRQHandler+0x9c>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8004ff8:	4a08      	ldr	r2, [pc, #32]	; (800501c <USART2_IRQHandler+0xd0>)
 8004ffa:	6a52      	ldr	r2, [r2, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8005000:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	e843 2100 	strex	r1, r2, [r3]
 8005008:	2900      	cmp	r1, #0
 800500a:	d1f7      	bne.n	8004ffc <USART2_IRQHandler+0xb0>
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 800500c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 8005010:	4804      	ldr	r0, [pc, #16]	; (8005024 <USART2_IRQHandler+0xd8>)
 8005012:	f7fc bf3f 	b.w	8001e94 <ASPEP_HWDMAReset>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8005016:	6813      	ldr	r3, [r2, #0]
}
 8005018:	bd10      	pop	{r4, pc}
 800501a:	bf00      	nop
 800501c:	40004400 	.word	0x40004400
 8005020:	40020000 	.word	0x40020000
 8005024:	20000450 	.word	0x20000450
 8005028:	40004408 	.word	0x40004408

0800502c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800502c:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 800502e:	f7fe f94b 	bl	80032c8 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 8005032:	e7fe      	b.n	8005032 <HardFault_Handler+0x6>

08005034 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8005034:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8005036:	4c0a      	ldr	r4, [pc, #40]	; (8005060 <SysTick_Handler+0x2c>)
 8005038:	7823      	ldrb	r3, [r4, #0]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d006      	beq.n	800504c <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 800503e:	3301      	adds	r3, #1
 8005040:	b2db      	uxtb	r3, r3
 8005042:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8005044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8005048:	f7fe b932 	b.w	80032b0 <MC_RunMotorControlTasks>
    HAL_IncTick();
 800504c:	f000 f932 	bl	80052b4 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8005050:	f001 f8b8 	bl	80061c4 <HAL_SYSTICK_IRQHandler>
 8005054:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8005056:	7023      	strb	r3, [r4, #0]
}
 8005058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 800505c:	f7fe b928 	b.w	80032b0 <MC_RunMotorControlTasks>
 8005060:	200004c4 	.word	0x200004c4

08005064 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8005064:	4b04      	ldr	r3, [pc, #16]	; (8005078 <EXTI15_10_IRQHandler+0x14>)
 8005066:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if (  0U == LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 8005068:	0492      	lsls	r2, r2, #18
 800506a:	d400      	bmi.n	800506e <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    ( void )UI_HandleStartStopButton_cb ();
  }

}
 800506c:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800506e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005072:	615a      	str	r2, [r3, #20]
    ( void )UI_HandleStartStopButton_cb ();
 8005074:	f7fe b938 	b.w	80032e8 <UI_HandleStartStopButton_cb>
 8005078:	40010400 	.word	0x40010400

0800507c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800507c:	2001      	movs	r0, #1
 800507e:	4770      	bx	lr

08005080 <_kill>:

int _kill(int pid, int sig)
{
 8005080:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005082:	f005 f915 	bl	800a2b0 <__errno>
 8005086:	2316      	movs	r3, #22
 8005088:	6003      	str	r3, [r0, #0]
  return -1;
}
 800508a:	f04f 30ff 	mov.w	r0, #4294967295
 800508e:	bd08      	pop	{r3, pc}

08005090 <_exit>:

void _exit (int status)
{
 8005090:	b508      	push	{r3, lr}
  errno = EINVAL;
 8005092:	f005 f90d 	bl	800a2b0 <__errno>
 8005096:	2316      	movs	r3, #22
 8005098:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800509a:	e7fe      	b.n	800509a <_exit+0xa>

0800509c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800509c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800509e:	1e16      	subs	r6, r2, #0
 80050a0:	dd07      	ble.n	80050b2 <_read+0x16>
 80050a2:	460c      	mov	r4, r1
 80050a4:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80050a6:	f3af 8000 	nop.w
 80050aa:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050ae:	42a5      	cmp	r5, r4
 80050b0:	d1f9      	bne.n	80050a6 <_read+0xa>
  }

  return len;
}
 80050b2:	4630      	mov	r0, r6
 80050b4:	bd70      	pop	{r4, r5, r6, pc}
 80050b6:	bf00      	nop

080050b8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80050b8:	f04f 30ff 	mov.w	r0, #4294967295
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop

080050c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80050c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050c4:	604b      	str	r3, [r1, #4]
  return 0;
}
 80050c6:	2000      	movs	r0, #0
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop

080050cc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80050cc:	2001      	movs	r0, #1
 80050ce:	4770      	bx	lr

080050d0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80050d0:	2000      	movs	r0, #0
 80050d2:	4770      	bx	lr

080050d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050d4:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050d6:	4c0c      	ldr	r4, [pc, #48]	; (8005108 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050d8:	4b0c      	ldr	r3, [pc, #48]	; (800510c <_sbrk+0x38>)
 80050da:	490d      	ldr	r1, [pc, #52]	; (8005110 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80050dc:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050de:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 80050e0:	b12a      	cbz	r2, 80050ee <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050e2:	4410      	add	r0, r2
 80050e4:	4288      	cmp	r0, r1
 80050e6:	d807      	bhi.n	80050f8 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80050e8:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 80050ea:	4610      	mov	r0, r2
 80050ec:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80050ee:	4a09      	ldr	r2, [pc, #36]	; (8005114 <_sbrk+0x40>)
 80050f0:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80050f2:	4410      	add	r0, r2
 80050f4:	4288      	cmp	r0, r1
 80050f6:	d9f7      	bls.n	80050e8 <_sbrk+0x14>
    errno = ENOMEM;
 80050f8:	f005 f8da 	bl	800a2b0 <__errno>
 80050fc:	230c      	movs	r3, #12
    return (void *)-1;
 80050fe:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8005102:	6003      	str	r3, [r0, #0]
}
 8005104:	4610      	mov	r0, r2
 8005106:	bd10      	pop	{r4, pc}
 8005108:	20001cbc 	.word	0x20001cbc
 800510c:	20008000 	.word	0x20008000
 8005110:	00000400 	.word	0x00000400
 8005114:	20001cd8 	.word	0x20001cd8

08005118 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8005118:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800511a:	2340      	movs	r3, #64	; 0x40
{
 800511c:	b470      	push	{r4, r5, r6}
 800511e:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8005124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	e842 3100 	strex	r1, r3, [r2]
 800512c:	2900      	cmp	r1, #0
 800512e:	d1f7      	bne.n	8005120 <UASPEP_INIT+0x8>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8005130:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	e851 3f00 	ldrex	r3, [r1]
 8005138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	e841 3400 	strex	r4, r3, [r1]
 8005140:	2c00      	cmp	r4, #0
 8005142:	d1f7      	bne.n	8005134 <UASPEP_INIT+0x1c>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8005144:	6901      	ldr	r1, [r0, #16]
 8005146:	4e17      	ldr	r6, [pc, #92]	; (80051a4 <UASPEP_INIT+0x8c>)
 8005148:	6883      	ldr	r3, [r0, #8]
 800514a:	5c74      	ldrb	r4, [r6, r1]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 800514c:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800514e:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8005150:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8005154:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8005156:	68c3      	ldr	r3, [r0, #12]
 8005158:	5cf1      	ldrb	r1, [r6, r3]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800515a:	2340      	movs	r3, #64	; 0x40
 800515c:	6213      	str	r3, [r2, #32]
 800515e:	586b      	ldr	r3, [r5, r1]
 8005160:	f043 0302 	orr.w	r3, r3, #2
 8005164:	506b      	str	r3, [r5, r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8005166:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	e851 3f00 	ldrex	r3, [r1]
 800516e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	e841 3400 	strex	r4, r3, [r1]
 8005176:	2c00      	cmp	r4, #0
 8005178:	d1f7      	bne.n	800516a <UASPEP_INIT+0x52>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800517a:	68c3      	ldr	r3, [r0, #12]
 800517c:	5cf0      	ldrb	r0, [r6, r3]
 800517e:	4405      	add	r5, r0
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8005180:	f102 0124 	add.w	r1, r2, #36	; 0x24
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8005184:	2340      	movs	r3, #64	; 0x40
 8005186:	60a9      	str	r1, [r5, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8005188:	f102 0108 	add.w	r1, r2, #8
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800518c:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8005192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005196:	e841 3200 	strex	r2, r3, [r1]
 800519a:	2a00      	cmp	r2, #0
 800519c:	d1f7      	bne.n	800518e <UASPEP_INIT+0x76>
}
 800519e:	bc70      	pop	{r4, r5, r6}
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	0800d644 	.word	0x0800d644

080051a8 <UASPEP_SEND_PACKET>:
  }
#endif
}

bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 80051a8:	b430      	push	{r4, r5}
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80051aa:	6903      	ldr	r3, [r0, #16]
 80051ac:	4d0c      	ldr	r5, [pc, #48]	; (80051e0 <UASPEP_SEND_PACKET+0x38>)
 80051ae:	6884      	ldr	r4, [r0, #8]
 80051b0:	5ceb      	ldrb	r3, [r5, r3]
 80051b2:	58e0      	ldr	r0, [r4, r3]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 80051b4:	07c0      	lsls	r0, r0, #31
 80051b6:	eb04 0c03 	add.w	ip, r4, r3
 80051ba:	d40e      	bmi.n	80051da <UASPEP_SEND_PACKET+0x32>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80051bc:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80051c0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80051c4:	0c09      	lsrs	r1, r1, #16
 80051c6:	0409      	lsls	r1, r1, #16
 80051c8:	4311      	orrs	r1, r2
 80051ca:	f8cc 1004 	str.w	r1, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80051ce:	58e2      	ldr	r2, [r4, r3]
  {
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
 80051d0:	2001      	movs	r0, #1
 80051d2:	4302      	orrs	r2, r0
 80051d4:	50e2      	str	r2, [r4, r3]
  else
  {
    result = false;
  }
  return result;
}
 80051d6:	bc30      	pop	{r4, r5}
 80051d8:	4770      	bx	lr
    result = false;
 80051da:	2000      	movs	r0, #0
}
 80051dc:	bc30      	pop	{r4, r5}
 80051de:	4770      	bx	lr
 80051e0:	0800d644 	.word	0x0800d644

080051e4 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 80051e4:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80051e6:	68c3      	ldr	r3, [r0, #12]
 80051e8:	4d0b      	ldr	r5, [pc, #44]	; (8005218 <UASPEP_RECEIVE_BUFFER+0x34>)
 80051ea:	6844      	ldr	r4, [r0, #4]
 80051ec:	5ce8      	ldrb	r0, [r5, r3]
 80051ee:	5825      	ldr	r5, [r4, r0]
 80051f0:	eb04 0c00 	add.w	ip, r4, r0
 80051f4:	f025 0501 	bic.w	r5, r5, #1
 80051f8:	5025      	str	r5, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80051fa:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80051fe:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8005202:	0c1b      	lsrs	r3, r3, #16
 8005204:	041b      	lsls	r3, r3, #16
 8005206:	431a      	orrs	r2, r3
 8005208:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800520c:	5823      	ldr	r3, [r4, r0]
 800520e:	f043 0301 	orr.w	r3, r3, #1
 8005212:	5023      	str	r3, [r4, r0]
  LL_DMA_DisableChannel(pHandle->rxDMA, pHandle->rxChannel);
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);
  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8005214:	bc30      	pop	{r4, r5}
 8005216:	4770      	bx	lr
 8005218:	0800d644 	.word	0x0800d644

0800521c <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 800521c:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800521e:	2310      	movs	r3, #16
 8005220:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005222:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8005226:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	e842 3100 	strex	r1, r3, [r2]
 800522e:	2900      	cmp	r1, #0
 8005230:	d1f7      	bne.n	8005222 <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8005232:	4770      	bx	lr

08005234 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005234:	4a03      	ldr	r2, [pc, #12]	; (8005244 <SystemInit+0x10>)
 8005236:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800523a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800523e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005242:	4770      	bx	lr
 8005244:	e000ed00 	.word	0xe000ed00

08005248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005248:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800524a:	4b0f      	ldr	r3, [pc, #60]	; (8005288 <HAL_InitTick+0x40>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	b90b      	cbnz	r3, 8005254 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005250:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8005252:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005254:	490d      	ldr	r1, [pc, #52]	; (800528c <HAL_InitTick+0x44>)
 8005256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800525a:	4605      	mov	r5, r0
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	6808      	ldr	r0, [r1, #0]
 8005262:	fbb0 f0f3 	udiv	r0, r0, r3
 8005266:	f000 ff91 	bl	800618c <HAL_SYSTICK_Config>
 800526a:	4604      	mov	r4, r0
 800526c:	2800      	cmp	r0, #0
 800526e:	d1ef      	bne.n	8005250 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005270:	2d0f      	cmp	r5, #15
 8005272:	d8ed      	bhi.n	8005250 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005274:	4602      	mov	r2, r0
 8005276:	4629      	mov	r1, r5
 8005278:	f04f 30ff 	mov.w	r0, #4294967295
 800527c:	f000 ff3a 	bl	80060f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005280:	4b03      	ldr	r3, [pc, #12]	; (8005290 <HAL_InitTick+0x48>)
 8005282:	4620      	mov	r0, r4
 8005284:	601d      	str	r5, [r3, #0]
}
 8005286:	bd38      	pop	{r3, r4, r5, pc}
 8005288:	200004cc 	.word	0x200004cc
 800528c:	200004c8 	.word	0x200004c8
 8005290:	200004d0 	.word	0x200004d0

08005294 <HAL_Init>:
{
 8005294:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005296:	2003      	movs	r0, #3
 8005298:	f000 ff1a 	bl	80060d0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800529c:	2004      	movs	r0, #4
 800529e:	f7ff ffd3 	bl	8005248 <HAL_InitTick>
 80052a2:	b110      	cbz	r0, 80052aa <HAL_Init+0x16>
    status = HAL_ERROR;
 80052a4:	2401      	movs	r4, #1
}
 80052a6:	4620      	mov	r0, r4
 80052a8:	bd10      	pop	{r4, pc}
 80052aa:	4604      	mov	r4, r0
    HAL_MspInit();
 80052ac:	f7ff fbb0 	bl	8004a10 <HAL_MspInit>
}
 80052b0:	4620      	mov	r0, r4
 80052b2:	bd10      	pop	{r4, pc}

080052b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80052b4:	4a03      	ldr	r2, [pc, #12]	; (80052c4 <HAL_IncTick+0x10>)
 80052b6:	4904      	ldr	r1, [pc, #16]	; (80052c8 <HAL_IncTick+0x14>)
 80052b8:	6813      	ldr	r3, [r2, #0]
 80052ba:	6809      	ldr	r1, [r1, #0]
 80052bc:	440b      	add	r3, r1
 80052be:	6013      	str	r3, [r2, #0]
}
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	20001cc0 	.word	0x20001cc0
 80052c8:	200004cc 	.word	0x200004cc

080052cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80052cc:	4b01      	ldr	r3, [pc, #4]	; (80052d4 <HAL_GetTick+0x8>)
 80052ce:	6818      	ldr	r0, [r3, #0]
}
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20001cc0 	.word	0x20001cc0

080052d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80052dc:	f7ff fff6 	bl	80052cc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052e0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80052e2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80052e4:	d002      	beq.n	80052ec <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80052e6:	4b04      	ldr	r3, [pc, #16]	; (80052f8 <HAL_Delay+0x20>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80052ec:	f7ff ffee 	bl	80052cc <HAL_GetTick>
 80052f0:	1b43      	subs	r3, r0, r5
 80052f2:	42a3      	cmp	r3, r4
 80052f4:	d3fa      	bcc.n	80052ec <HAL_Delay+0x14>
  {
  }
}
 80052f6:	bd38      	pop	{r3, r4, r5, pc}
 80052f8:	200004cc 	.word	0x200004cc

080052fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80052fc:	b530      	push	{r4, r5, lr}
 80052fe:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005300:	2300      	movs	r3, #0
 8005302:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005304:	2800      	cmp	r0, #0
 8005306:	f000 80c9 	beq.w	800549c <HAL_ADC_Init+0x1a0>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800530a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800530c:	4604      	mov	r4, r0
 800530e:	2d00      	cmp	r5, #0
 8005310:	f000 8092 	beq.w	8005438 <HAL_ADC_Init+0x13c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005314:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005316:	6893      	ldr	r3, [r2, #8]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	d505      	bpl.n	8005328 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800531c:	6893      	ldr	r3, [r2, #8]
 800531e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005322:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005326:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005328:	6893      	ldr	r3, [r2, #8]
 800532a:	00dd      	lsls	r5, r3, #3
 800532c:	d419      	bmi.n	8005362 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800532e:	4b70      	ldr	r3, [pc, #448]	; (80054f0 <HAL_ADC_Init+0x1f4>)
 8005330:	4870      	ldr	r0, [pc, #448]	; (80054f4 <HAL_ADC_Init+0x1f8>)
 8005332:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8005334:	6891      	ldr	r1, [r2, #8]
 8005336:	099b      	lsrs	r3, r3, #6
 8005338:	fba0 0303 	umull	r0, r3, r0, r3
 800533c:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8005340:	099b      	lsrs	r3, r3, #6
 8005342:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005346:	3301      	adds	r3, #1
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800534e:	6091      	str	r1, [r2, #8]
 8005350:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005352:	9b01      	ldr	r3, [sp, #4]
 8005354:	b12b      	cbz	r3, 8005362 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8005356:	9b01      	ldr	r3, [sp, #4]
 8005358:	3b01      	subs	r3, #1
 800535a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800535c:	9b01      	ldr	r3, [sp, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f9      	bne.n	8005356 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005362:	6893      	ldr	r3, [r2, #8]
 8005364:	00d8      	lsls	r0, r3, #3
 8005366:	d459      	bmi.n	800541c <HAL_ADC_Init+0x120>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005368:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800536a:	f043 0310 	orr.w	r3, r3, #16
 800536e:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005370:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005372:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005374:	4303      	orrs	r3, r0
 8005376:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005378:	6893      	ldr	r3, [r2, #8]
 800537a:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800537e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005380:	d153      	bne.n	800542a <HAL_ADC_Init+0x12e>
 8005382:	06d9      	lsls	r1, r3, #27
 8005384:	d451      	bmi.n	800542a <HAL_ADC_Init+0x12e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005386:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005388:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800538c:	f043 0302 	orr.w	r3, r3, #2
 8005390:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005392:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005394:	07db      	lsls	r3, r3, #31
 8005396:	d40e      	bmi.n	80053b6 <HAL_ADC_Init+0xba>
 8005398:	4b57      	ldr	r3, [pc, #348]	; (80054f8 <HAL_ADC_Init+0x1fc>)
 800539a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800539e:	6889      	ldr	r1, [r1, #8]
 80053a0:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053a2:	430b      	orrs	r3, r1
 80053a4:	07dd      	lsls	r5, r3, #31
 80053a6:	d406      	bmi.n	80053b6 <HAL_ADC_Init+0xba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80053a8:	4954      	ldr	r1, [pc, #336]	; (80054fc <HAL_ADC_Init+0x200>)
 80053aa:	6865      	ldr	r5, [r4, #4]
 80053ac:	688b      	ldr	r3, [r1, #8]
 80053ae:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80053b2:	432b      	orrs	r3, r5
 80053b4:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80053b6:	68e5      	ldr	r5, [r4, #12]
 80053b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80053ba:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 80053be:	432b      	orrs	r3, r5
 80053c0:	68a5      	ldr	r5, [r4, #8]
 80053c2:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80053c4:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80053c6:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 80053c8:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80053cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80053d0:	d05f      	beq.n	8005492 <HAL_ADC_Init+0x196>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80053d2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80053d4:	b121      	cbz	r1, 80053e0 <HAL_ADC_Init+0xe4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80053d6:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80053d8:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80053dc:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80053de:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80053e0:	68d5      	ldr	r5, [r2, #12]
 80053e2:	4947      	ldr	r1, [pc, #284]	; (8005500 <HAL_ADC_Init+0x204>)
 80053e4:	4029      	ands	r1, r5
 80053e6:	430b      	orrs	r3, r1
 80053e8:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80053ea:	6913      	ldr	r3, [r2, #16]
 80053ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053ee:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80053f2:	430b      	orrs	r3, r1
 80053f4:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80053f6:	6893      	ldr	r3, [r2, #8]
 80053f8:	0759      	lsls	r1, r3, #29
 80053fa:	d523      	bpl.n	8005444 <HAL_ADC_Init+0x148>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80053fc:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80053fe:	6963      	ldr	r3, [r4, #20]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d04e      	beq.n	80054a2 <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005404:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005406:	f023 030f 	bic.w	r3, r3, #15
 800540a:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800540c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800540e:	f023 0303 	bic.w	r3, r3, #3
 8005412:	f043 0301 	orr.w	r3, r3, #1
 8005416:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8005418:	b003      	add	sp, #12
 800541a:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800541c:	6893      	ldr	r3, [r2, #8]
 800541e:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005422:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005426:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005428:	d0ab      	beq.n	8005382 <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800542a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 800542c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800542e:	f043 0310 	orr.w	r3, r3, #16
 8005432:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8005434:	b003      	add	sp, #12
 8005436:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8005438:	f7ff fb0a 	bl	8004a50 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800543c:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 800543e:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8005442:	e767      	b.n	8005314 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005444:	6893      	ldr	r3, [r2, #8]
 8005446:	071b      	lsls	r3, r3, #28
 8005448:	d4d9      	bmi.n	80053fe <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800544a:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800544c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005450:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005452:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005456:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005458:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800545c:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005460:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8005462:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005464:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005466:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8005468:	bb19      	cbnz	r1, 80054b2 <HAL_ADC_Init+0x1b6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800546a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800546e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005470:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005474:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005478:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800547c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8005480:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005484:	2b01      	cmp	r3, #1
 8005486:	d021      	beq.n	80054cc <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005488:	6913      	ldr	r3, [r2, #16]
 800548a:	f023 0301 	bic.w	r3, r3, #1
 800548e:	6113      	str	r3, [r2, #16]
 8005490:	e7b5      	b.n	80053fe <HAL_ADC_Init+0x102>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005492:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005494:	3901      	subs	r1, #1
 8005496:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800549a:	e79a      	b.n	80053d2 <HAL_ADC_Init+0xd6>
    return HAL_ERROR;
 800549c:	2001      	movs	r0, #1
}
 800549e:	b003      	add	sp, #12
 80054a0:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80054a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80054a4:	6a23      	ldr	r3, [r4, #32]
 80054a6:	f021 010f 	bic.w	r1, r1, #15
 80054aa:	3b01      	subs	r3, #1
 80054ac:	430b      	orrs	r3, r1
 80054ae:	6313      	str	r3, [r2, #48]	; 0x30
 80054b0:	e7ac      	b.n	800540c <HAL_ADC_Init+0x110>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80054b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b6:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80054b8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80054bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80054c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054c4:	430b      	orrs	r3, r1
 80054c6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80054ca:	e7d9      	b.n	8005480 <HAL_ADC_Init+0x184>
        MODIFY_REG(hadc->Instance->CFGR2,
 80054cc:	6911      	ldr	r1, [r2, #16]
 80054ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80054d0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80054d2:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 80054d6:	f021 0104 	bic.w	r1, r1, #4
 80054da:	432b      	orrs	r3, r5
 80054dc:	430b      	orrs	r3, r1
 80054de:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80054e0:	430b      	orrs	r3, r1
 80054e2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80054e4:	430b      	orrs	r3, r1
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	6113      	str	r3, [r2, #16]
 80054ec:	e787      	b.n	80053fe <HAL_ADC_Init+0x102>
 80054ee:	bf00      	nop
 80054f0:	200004c8 	.word	0x200004c8
 80054f4:	053e2d63 	.word	0x053e2d63
 80054f8:	50000100 	.word	0x50000100
 80054fc:	50000300 	.word	0x50000300
 8005500:	fff04007 	.word	0xfff04007

08005504 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005504:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005506:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 800550a:	b083      	sub	sp, #12
 800550c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800550e:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8005510:	f04f 0000 	mov.w	r0, #0
 8005514:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8005516:	f000 8145 	beq.w	80057a4 <HAL_ADC_ConfigChannel+0x2a0>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800551a:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 800551c:	2001      	movs	r0, #1
 800551e:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005522:	68a2      	ldr	r2, [r4, #8]
 8005524:	0755      	lsls	r5, r2, #29
 8005526:	d44c      	bmi.n	80055c2 <HAL_ADC_ConfigChannel+0xbe>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005528:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(*preg,
 800552a:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800552c:	ea4f 1e90 	mov.w	lr, r0, lsr #6
 8005530:	f00e 0e0c 	and.w	lr, lr, #12
 8005534:	f104 0c30 	add.w	ip, r4, #48	; 0x30
  MODIFY_REG(*preg,
 8005538:	f000 001f 	and.w	r0, r0, #31
 800553c:	f85e 500c 	ldr.w	r5, [lr, ip]
 8005540:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8005544:	261f      	movs	r6, #31
 8005546:	4082      	lsls	r2, r0
 8005548:	fa06 f000 	lsl.w	r0, r6, r0
 800554c:	ea25 0000 	bic.w	r0, r5, r0
 8005550:	4302      	orrs	r2, r0
 8005552:	f84e 200c 	str.w	r2, [lr, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005556:	68a2      	ldr	r2, [r4, #8]
 8005558:	0750      	lsls	r0, r2, #29
 800555a:	d543      	bpl.n	80055e4 <HAL_ADC_ConfigChannel+0xe0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800555c:	68a2      	ldr	r2, [r4, #8]
 800555e:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005560:	68a2      	ldr	r2, [r4, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005562:	f012 0f01 	tst.w	r2, #1
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005566:	4602      	mov	r2, r0
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005568:	d10c      	bne.n	8005584 <HAL_ADC_ConfigChannel+0x80>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800556a:	4dc2      	ldr	r5, [pc, #776]	; (8005874 <HAL_ADC_ConfigChannel+0x370>)
 800556c:	68ce      	ldr	r6, [r1, #12]
 800556e:	42ae      	cmp	r6, r5
 8005570:	f000 80c1 	beq.w	80056f6 <HAL_ADC_ConfigChannel+0x1f2>
    CLEAR_BIT(ADCx->DIFSEL,
 8005574:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8005578:	f3c0 0012 	ubfx	r0, r0, #0, #19
 800557c:	ea21 0100 	bic.w	r1, r1, r0
 8005580:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005584:	49bc      	ldr	r1, [pc, #752]	; (8005878 <HAL_ADC_ConfigChannel+0x374>)
 8005586:	420a      	tst	r2, r1
 8005588:	d02a      	beq.n	80055e0 <HAL_ADC_ConfigChannel+0xdc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800558a:	49bc      	ldr	r1, [pc, #752]	; (800587c <HAL_ADC_ConfigChannel+0x378>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800558c:	4dbc      	ldr	r5, [pc, #752]	; (8005880 <HAL_ADC_ConfigChannel+0x37c>)
 800558e:	6888      	ldr	r0, [r1, #8]
 8005590:	42aa      	cmp	r2, r5
 8005592:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8005596:	d01d      	beq.n	80055d4 <HAL_ADC_ConfigChannel+0xd0>
 8005598:	4dba      	ldr	r5, [pc, #744]	; (8005884 <HAL_ADC_ConfigChannel+0x380>)
 800559a:	42aa      	cmp	r2, r5
 800559c:	d01a      	beq.n	80055d4 <HAL_ADC_ConfigChannel+0xd0>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800559e:	4dba      	ldr	r5, [pc, #744]	; (8005888 <HAL_ADC_ConfigChannel+0x384>)
 80055a0:	42aa      	cmp	r2, r5
 80055a2:	f040 8131 	bne.w	8005808 <HAL_ADC_ConfigChannel+0x304>
 80055a6:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80055aa:	d119      	bne.n	80055e0 <HAL_ADC_ConfigChannel+0xdc>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055ac:	4ab7      	ldr	r2, [pc, #732]	; (800588c <HAL_ADC_ConfigChannel+0x388>)
 80055ae:	4294      	cmp	r4, r2
 80055b0:	d016      	beq.n	80055e0 <HAL_ADC_ConfigChannel+0xdc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80055b2:	688a      	ldr	r2, [r1, #8]
 80055b4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80055b8:	4316      	orrs	r6, r2
 80055ba:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 80055be:	608e      	str	r6, [r1, #8]
}
 80055c0:	e003      	b.n	80055ca <HAL_ADC_ConfigChannel+0xc6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055c4:	f042 0220 	orr.w	r2, r2, #32
 80055c8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80055d0:	b003      	add	sp, #12
 80055d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80055d4:	0202      	lsls	r2, r0, #8
 80055d6:	d403      	bmi.n	80055e0 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80055d8:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80055dc:	f000 80f5 	beq.w	80057ca <HAL_ADC_ConfigChannel+0x2c6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055e0:	2000      	movs	r0, #0
 80055e2:	e7f2      	b.n	80055ca <HAL_ADC_ConfigChannel+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80055e4:	68a2      	ldr	r2, [r4, #8]
 80055e6:	f012 0208 	ands.w	r2, r2, #8
 80055ea:	f040 8082 	bne.w	80056f2 <HAL_ADC_ConfigChannel+0x1ee>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80055ee:	6888      	ldr	r0, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80055f0:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80055f2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80055f6:	f000 811b 	beq.w	8005830 <HAL_ADC_ConfigChannel+0x32c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80055fa:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 80055fe:	f104 0714 	add.w	r7, r4, #20
 8005602:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8005606:	f3c6 5604 	ubfx	r6, r6, #20, #5
 800560a:	f85c 5007 	ldr.w	r5, [ip, r7]
 800560e:	f04f 0e07 	mov.w	lr, #7
 8005612:	40b0      	lsls	r0, r6
 8005614:	fa0e f606 	lsl.w	r6, lr, r6
 8005618:	ea25 0506 	bic.w	r5, r5, r6
 800561c:	4328      	orrs	r0, r5
 800561e:	f84c 0007 	str.w	r0, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005622:	6960      	ldr	r0, [r4, #20]
 8005624:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005628:	6160      	str	r0, [r4, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800562a:	690f      	ldr	r7, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800562c:	68e5      	ldr	r5, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800562e:	2f04      	cmp	r7, #4
 8005630:	d02f      	beq.n	8005692 <HAL_ADC_ConfigChannel+0x18e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005632:	f104 0060 	add.w	r0, r4, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005636:	f3c5 05c1 	ubfx	r5, r5, #3, #2
  MODIFY_REG(*preg,
 800563a:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
 800563e:	f8df c25c 	ldr.w	ip, [pc, #604]	; 800589c <HAL_ADC_ConfigChannel+0x398>
 8005642:	006e      	lsls	r6, r5, #1
 8005644:	680d      	ldr	r5, [r1, #0]
 8005646:	ea0e 0c0c 	and.w	ip, lr, ip
 800564a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800564e:	ea45 0c0c 	orr.w	ip, r5, ip
 8005652:	694d      	ldr	r5, [r1, #20]
 8005654:	40b5      	lsls	r5, r6
 8005656:	ea45 050c 	orr.w	r5, r5, ip
 800565a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800565e:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005662:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8005664:	698e      	ldr	r6, [r1, #24]
 8005666:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
 800566a:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 800566e:	4335      	orrs	r5, r6
 8005670:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005674:	7f0d      	ldrb	r5, [r1, #28]
 8005676:	690e      	ldr	r6, [r1, #16]
 8005678:	2d01      	cmp	r5, #1
  MODIFY_REG(*preg,
 800567a:	f850 5026 	ldr.w	r5, [r0, r6, lsl #2]
 800567e:	bf08      	it	eq
 8005680:	f04f 7200 	moveq.w	r2, #33554432	; 0x2000000
 8005684:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8005688:	432a      	orrs	r2, r5
 800568a:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 800568e:	6808      	ldr	r0, [r1, #0]
}
 8005690:	e766      	b.n	8005560 <HAL_ADC_ConfigChannel+0x5c>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005692:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005694:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005696:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005698:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800569c:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056a0:	2d00      	cmp	r5, #0
 80056a2:	f040 80fd 	bne.w	80058a0 <HAL_ADC_ConfigChannel+0x39c>
 80056a6:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80056aa:	42aa      	cmp	r2, r5
 80056ac:	f000 8171 	beq.w	8005992 <HAL_ADC_ConfigChannel+0x48e>
 80056b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056b2:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056b4:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80056b8:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80056bc:	f104 0764 	add.w	r7, r4, #100	; 0x64
 80056c0:	42ae      	cmp	r6, r5
 80056c2:	f000 8154 	beq.w	800596e <HAL_ADC_ConfigChannel+0x46a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80056c6:	6896      	ldr	r6, [r2, #8]
 80056c8:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056ca:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80056ce:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80056d2:	42ae      	cmp	r6, r5
 80056d4:	f000 8139 	beq.w	800594a <HAL_ADC_ConfigChannel+0x446>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80056d8:	68d6      	ldr	r6, [r2, #12]
 80056da:	68d6      	ldr	r6, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056dc:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80056e0:	f3c6 6284 	ubfx	r2, r6, #26, #5
 80056e4:	4295      	cmp	r5, r2
 80056e6:	f47f af3b 	bne.w	8005560 <HAL_ADC_ConfigChannel+0x5c>
  MODIFY_REG(*preg,
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056f0:	603a      	str	r2, [r7, #0]
 80056f2:	6808      	ldr	r0, [r1, #0]
}
 80056f4:	e734      	b.n	8005560 <HAL_ADC_ConfigChannel+0x5c>
    SET_BIT(ADCx->DIFSEL,
 80056f6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80056fa:	f3c0 0512 	ubfx	r5, r0, #0, #19
 80056fe:	432a      	orrs	r2, r5
 8005700:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005704:	2d00      	cmp	r5, #0
 8005706:	d050      	beq.n	80057aa <HAL_ADC_ConfigChannel+0x2a6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005708:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800570c:	2a00      	cmp	r2, #0
 800570e:	f000 80f8 	beq.w	8005902 <HAL_ADC_ConfigChannel+0x3fe>
  return __builtin_clz(value);
 8005712:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005716:	3201      	adds	r2, #1
 8005718:	f002 021f 	and.w	r2, r2, #31
 800571c:	2a09      	cmp	r2, #9
 800571e:	f240 80f0 	bls.w	8005902 <HAL_ADC_ConfigChannel+0x3fe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005722:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8005726:	2a00      	cmp	r2, #0
 8005728:	f000 814f 	beq.w	80059ca <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800572c:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005730:	3201      	adds	r2, #1
 8005732:	0692      	lsls	r2, r2, #26
 8005734:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005738:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800573c:	2d00      	cmp	r5, #0
 800573e:	f000 8149 	beq.w	80059d4 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8005742:	fab5 f585 	clz	r5, r5
 8005746:	3501      	adds	r5, #1
 8005748:	f005 051f 	and.w	r5, r5, #31
 800574c:	2601      	movs	r6, #1
 800574e:	fa06 f505 	lsl.w	r5, r6, r5
 8005752:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005754:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005758:	2800      	cmp	r0, #0
 800575a:	f000 8139 	beq.w	80059d0 <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 800575e:	fab0 f080 	clz	r0, r0
 8005762:	1c42      	adds	r2, r0, #1
 8005764:	f002 001f 	and.w	r0, r2, #31
 8005768:	f06f 061d 	mvn.w	r6, #29
 800576c:	2203      	movs	r2, #3
 800576e:	fb12 6200 	smlabb	r2, r2, r0, r6
 8005772:	0512      	lsls	r2, r2, #20
 8005774:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005778:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800577a:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 800577c:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800577e:	f006 0604 	and.w	r6, r6, #4
 8005782:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 8005786:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800578a:	fa00 f702 	lsl.w	r7, r0, r2
 800578e:	f04f 0c07 	mov.w	ip, #7
 8005792:	5970      	ldr	r0, [r6, r5]
 8005794:	fa0c f202 	lsl.w	r2, ip, r2
 8005798:	ea20 0202 	bic.w	r2, r0, r2
 800579c:	433a      	orrs	r2, r7
 800579e:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80057a0:	680a      	ldr	r2, [r1, #0]
}
 80057a2:	e6ef      	b.n	8005584 <HAL_ADC_ConfigChannel+0x80>
  __HAL_LOCK(hadc);
 80057a4:	2002      	movs	r0, #2
}
 80057a6:	b003      	add	sp, #12
 80057a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80057aa:	0e80      	lsrs	r0, r0, #26
 80057ac:	3001      	adds	r0, #1
 80057ae:	f000 061f 	and.w	r6, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057b2:	2e09      	cmp	r6, #9
 80057b4:	d850      	bhi.n	8005858 <HAL_ADC_ConfigChannel+0x354>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80057b6:	0685      	lsls	r5, r0, #26
 80057b8:	2201      	movs	r2, #1
 80057ba:	40b2      	lsls	r2, r6
 80057bc:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80057c0:	4315      	orrs	r5, r2
 80057c2:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80057c6:	0512      	lsls	r2, r2, #20
 80057c8:	e7d6      	b.n	8005778 <HAL_ADC_ConfigChannel+0x274>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80057ca:	492c      	ldr	r1, [pc, #176]	; (800587c <HAL_ADC_ConfigChannel+0x378>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057cc:	4830      	ldr	r0, [pc, #192]	; (8005890 <HAL_ADC_ConfigChannel+0x38c>)
 80057ce:	688a      	ldr	r2, [r1, #8]
 80057d0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80057d4:	4316      	orrs	r6, r2
 80057d6:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 80057da:	608e      	str	r6, [r1, #8]
 80057dc:	6802      	ldr	r2, [r0, #0]
 80057de:	492d      	ldr	r1, [pc, #180]	; (8005894 <HAL_ADC_ConfigChannel+0x390>)
 80057e0:	0992      	lsrs	r2, r2, #6
 80057e2:	fba1 1202 	umull	r1, r2, r1, r2
 80057e6:	0992      	lsrs	r2, r2, #6
 80057e8:	3201      	adds	r2, #1
 80057ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80057ee:	0092      	lsls	r2, r2, #2
 80057f0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80057f2:	9a01      	ldr	r2, [sp, #4]
 80057f4:	2a00      	cmp	r2, #0
 80057f6:	f43f aef3 	beq.w	80055e0 <HAL_ADC_ConfigChannel+0xdc>
            wait_loop_index--;
 80057fa:	9a01      	ldr	r2, [sp, #4]
 80057fc:	3a01      	subs	r2, #1
 80057fe:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005800:	9a01      	ldr	r2, [sp, #4]
 8005802:	2a00      	cmp	r2, #0
 8005804:	d1f9      	bne.n	80057fa <HAL_ADC_ConfigChannel+0x2f6>
 8005806:	e6eb      	b.n	80055e0 <HAL_ADC_ConfigChannel+0xdc>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005808:	4d23      	ldr	r5, [pc, #140]	; (8005898 <HAL_ADC_ConfigChannel+0x394>)
 800580a:	42aa      	cmp	r2, r5
 800580c:	f47f aee8 	bne.w	80055e0 <HAL_ADC_ConfigChannel+0xdc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005810:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8005814:	f47f aee4 	bne.w	80055e0 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_VREFINT_INSTANCE(hadc))
 8005818:	4a1c      	ldr	r2, [pc, #112]	; (800588c <HAL_ADC_ConfigChannel+0x388>)
 800581a:	4294      	cmp	r4, r2
 800581c:	f43f aee0 	beq.w	80055e0 <HAL_ADC_ConfigChannel+0xdc>
 8005820:	688a      	ldr	r2, [r1, #8]
 8005822:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005826:	4332      	orrs	r2, r6
 8005828:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800582c:	608a      	str	r2, [r1, #8]
}
 800582e:	e6cc      	b.n	80055ca <HAL_ADC_ConfigChannel+0xc6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005830:	0df5      	lsrs	r5, r6, #23
 8005832:	f104 0014 	add.w	r0, r4, #20
 8005836:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 800583a:	f3c6 5604 	ubfx	r6, r6, #20, #5
 800583e:	582f      	ldr	r7, [r5, r0]
 8005840:	f04f 0c07 	mov.w	ip, #7
 8005844:	fa0c f606 	lsl.w	r6, ip, r6
 8005848:	ea27 0606 	bic.w	r6, r7, r6
 800584c:	502e      	str	r6, [r5, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800584e:	6960      	ldr	r0, [r4, #20]
 8005850:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005854:	6160      	str	r0, [r4, #20]
}
 8005856:	e6e8      	b.n	800562a <HAL_ADC_ConfigChannel+0x126>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005858:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 800585c:	0685      	lsls	r5, r0, #26
 800585e:	3a1e      	subs	r2, #30
 8005860:	2001      	movs	r0, #1
 8005862:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005866:	0512      	lsls	r2, r2, #20
 8005868:	fa00 f606 	lsl.w	r6, r0, r6
 800586c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005870:	4335      	orrs	r5, r6
 8005872:	e781      	b.n	8005778 <HAL_ADC_ConfigChannel+0x274>
 8005874:	407f0000 	.word	0x407f0000
 8005878:	80080000 	.word	0x80080000
 800587c:	50000300 	.word	0x50000300
 8005880:	c3210000 	.word	0xc3210000
 8005884:	90c00010 	.word	0x90c00010
 8005888:	c7520000 	.word	0xc7520000
 800588c:	50000100 	.word	0x50000100
 8005890:	200004c8 	.word	0x200004c8
 8005894:	053e2d63 	.word	0x053e2d63
 8005898:	cb840000 	.word	0xcb840000
 800589c:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80058a4:	b11d      	cbz	r5, 80058ae <HAL_ADC_ConfigChannel+0x3aa>
  return __builtin_clz(value);
 80058a6:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80058aa:	42aa      	cmp	r2, r5
 80058ac:	d071      	beq.n	8005992 <HAL_ADC_ConfigChannel+0x48e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80058ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058b0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058b2:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80058b6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80058ba:	f104 0764 	add.w	r7, r4, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058be:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80058c2:	b11d      	cbz	r5, 80058cc <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 80058c4:	fab5 f585 	clz	r5, r5
 80058c8:	42ae      	cmp	r6, r5
 80058ca:	d050      	beq.n	800596e <HAL_ADC_ConfigChannel+0x46a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80058cc:	6895      	ldr	r5, [r2, #8]
 80058ce:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058d0:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80058d4:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80058dc:	b11d      	cbz	r5, 80058e6 <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 80058de:	fab5 f585 	clz	r5, r5
 80058e2:	42ae      	cmp	r6, r5
 80058e4:	d031      	beq.n	800594a <HAL_ADC_ConfigChannel+0x446>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80058e6:	68d5      	ldr	r5, [r2, #12]
 80058e8:	68d5      	ldr	r5, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058ea:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80058ee:	f3c5 6284 	ubfx	r2, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f2:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80058f6:	2d00      	cmp	r5, #0
 80058f8:	f43f ae32 	beq.w	8005560 <HAL_ADC_ConfigChannel+0x5c>
  return __builtin_clz(value);
 80058fc:	fab5 f585 	clz	r5, r5
 8005900:	e6f0      	b.n	80056e4 <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005902:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8005906:	2a00      	cmp	r2, #0
 8005908:	d059      	beq.n	80059be <HAL_ADC_ConfigChannel+0x4ba>
  return __builtin_clz(value);
 800590a:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800590e:	3201      	adds	r2, #1
 8005910:	0692      	lsls	r2, r2, #26
 8005912:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005916:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800591a:	2d00      	cmp	r5, #0
 800591c:	d04d      	beq.n	80059ba <HAL_ADC_ConfigChannel+0x4b6>
  return __builtin_clz(value);
 800591e:	fab5 f585 	clz	r5, r5
 8005922:	3501      	adds	r5, #1
 8005924:	f005 051f 	and.w	r5, r5, #31
 8005928:	2601      	movs	r6, #1
 800592a:	fa06 f505 	lsl.w	r5, r6, r5
 800592e:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005930:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005934:	2800      	cmp	r0, #0
 8005936:	d045      	beq.n	80059c4 <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 8005938:	fab0 f080 	clz	r0, r0
 800593c:	3001      	adds	r0, #1
 800593e:	f000 001f 	and.w	r0, r0, #31
 8005942:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005946:	0502      	lsls	r2, r0, #20
 8005948:	e716      	b.n	8005778 <HAL_ADC_ConfigChannel+0x274>
  MODIFY_REG(*preg,
 800594a:	6838      	ldr	r0, [r7, #0]
 800594c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005950:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005952:	68d0      	ldr	r0, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005954:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005956:	f102 070c 	add.w	r7, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800595a:	68d2      	ldr	r2, [r2, #12]
 800595c:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005960:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005964:	2d00      	cmp	r5, #0
 8005966:	d1c4      	bne.n	80058f2 <HAL_ADC_ConfigChannel+0x3ee>
 8005968:	f3c0 6584 	ubfx	r5, r0, #26, #5
 800596c:	e6ba      	b.n	80056e4 <HAL_ADC_ConfigChannel+0x1e0>
  MODIFY_REG(*preg,
 800596e:	6838      	ldr	r0, [r7, #0]
 8005970:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005974:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005976:	6890      	ldr	r0, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005978:	6808      	ldr	r0, [r1, #0]
 800597a:	6896      	ldr	r6, [r2, #8]
 800597c:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005980:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005984:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005988:	2d00      	cmp	r5, #0
 800598a:	d1a5      	bne.n	80058d8 <HAL_ADC_ConfigChannel+0x3d4>
 800598c:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005990:	e69f      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x1ce>
  MODIFY_REG(*preg,
 8005992:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005994:	4622      	mov	r2, r4
 8005996:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800599a:	f842 0f60 	str.w	r0, [r2, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800599e:	6e60      	ldr	r0, [r4, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059a0:	6808      	ldr	r0, [r1, #0]
 80059a2:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80059a4:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059a8:	f104 0764 	add.w	r7, r4, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80059ac:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059b0:	2d00      	cmp	r5, #0
 80059b2:	d184      	bne.n	80058be <HAL_ADC_ConfigChannel+0x3ba>
 80059b4:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80059b8:	e682      	b.n	80056c0 <HAL_ADC_ConfigChannel+0x1bc>
 80059ba:	2502      	movs	r5, #2
 80059bc:	e7b7      	b.n	800592e <HAL_ADC_ConfigChannel+0x42a>
 80059be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80059c2:	e7a8      	b.n	8005916 <HAL_ADC_ConfigChannel+0x412>
 80059c4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80059c8:	e6d6      	b.n	8005778 <HAL_ADC_ConfigChannel+0x274>
 80059ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80059ce:	e6b3      	b.n	8005738 <HAL_ADC_ConfigChannel+0x234>
 80059d0:	4a01      	ldr	r2, [pc, #4]	; (80059d8 <HAL_ADC_ConfigChannel+0x4d4>)
 80059d2:	e6d1      	b.n	8005778 <HAL_ADC_ConfigChannel+0x274>
 80059d4:	2502      	movs	r5, #2
 80059d6:	e6bc      	b.n	8005752 <HAL_ADC_ConfigChannel+0x24e>
 80059d8:	fe500000 	.word	0xfe500000

080059dc <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80059dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80059e0:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 80059e4:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80059e6:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80059e8:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 80059ea:	9201      	str	r2, [sp, #4]
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80059ec:	6942      	ldr	r2, [r0, #20]
  __HAL_LOCK(hadc);
 80059ee:	f000 8166 	beq.w	8005cbe <HAL_ADCEx_InjectedConfigChannel+0x2e2>
 80059f2:	2301      	movs	r3, #1
 80059f4:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80059f8:	b1e2      	cbz	r2, 8005a34 <HAL_ADCEx_InjectedConfigChannel+0x58>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 80059fa:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d019      	beq.n	8005a34 <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005a00:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8005a02:	2c00      	cmp	r4, #0
 8005a04:	f040 8119 	bne.w	8005c3a <HAL_ADCEx_InjectedConfigChannel+0x25e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005a08:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005a0a:	2a00      	cmp	r2, #0
 8005a0c:	f000 8222 	beq.w	8005e54 <HAL_ADCEx_InjectedConfigChannel+0x478>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005a10:	1e5d      	subs	r5, r3, #1
 8005a12:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005a14:	f002 037c 	and.w	r3, r2, #124	; 0x7c
 8005a18:	432b      	orrs	r3, r5
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005a1a:	4323      	orrs	r3, r4
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005a1c:	e9d1 2400 	ldrd	r2, r4, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8005a20:	6685      	str	r5, [r0, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005a22:	f004 051f 	and.w	r5, r4, #31
 8005a26:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8005a2a:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005a2c:	431c      	orrs	r4, r3
 8005a2e:	6644      	str	r4, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005a30:	6803      	ldr	r3, [r0, #0]
 8005a32:	e005      	b.n	8005a40 <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005a34:	684b      	ldr	r3, [r1, #4]
 8005a36:	2b09      	cmp	r3, #9
 8005a38:	f000 80eb 	beq.w	8005c12 <HAL_ADCEx_InjectedConfigChannel+0x236>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005a3c:	680a      	ldr	r2, [r1, #0]
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005a3e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005a40:	689c      	ldr	r4, [r3, #8]
 8005a42:	0727      	lsls	r7, r4, #28
 8005a44:	d410      	bmi.n	8005a68 <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8005a46:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8005a4a:	2c00      	cmp	r4, #0
 8005a4c:	f040 80d8 	bne.w	8005c00 <HAL_ADCEx_InjectedConfigChannel+0x224>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005a50:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8005a54:	68dd      	ldr	r5, [r3, #12]
 8005a56:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8005a5a:	0524      	lsls	r4, r4, #20
 8005a5c:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8005a60:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8005a64:	432c      	orrs	r4, r5
 8005a66:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a68:	689c      	ldr	r4, [r3, #8]
 8005a6a:	f014 0404 	ands.w	r4, r4, #4
 8005a6e:	d058      	beq.n	8005b22 <HAL_ADCEx_InjectedConfigChannel+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005a70:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a72:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a74:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a76:	07ee      	lsls	r6, r5, #31
 8005a78:	d40c      	bmi.n	8005a94 <HAL_ADCEx_InjectedConfigChannel+0xb8>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005a7a:	4dac      	ldr	r5, [pc, #688]	; (8005d2c <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8005a7c:	68ce      	ldr	r6, [r1, #12]
 8005a7e:	42ae      	cmp	r6, r5
 8005a80:	f000 8100 	beq.w	8005c84 <HAL_ADCEx_InjectedConfigChannel+0x2a8>
    CLEAR_BIT(ADCx->DIFSEL,
 8005a84:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005a88:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005a8c:	ea21 0105 	bic.w	r1, r1, r5
 8005a90:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8005a94:	49a6      	ldr	r1, [pc, #664]	; (8005d30 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8005a96:	420a      	tst	r2, r1
 8005a98:	d019      	beq.n	8005ace <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005a9a:	4ea6      	ldr	r6, [pc, #664]	; (8005d34 <HAL_ADCEx_InjectedConfigChannel+0x358>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8005a9c:	4da6      	ldr	r5, [pc, #664]	; (8005d38 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8005a9e:	68b1      	ldr	r1, [r6, #8]
 8005aa0:	42aa      	cmp	r2, r5
 8005aa2:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8005aa6:	d019      	beq.n	8005adc <HAL_ADCEx_InjectedConfigChannel+0x100>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005aa8:	4da4      	ldr	r5, [pc, #656]	; (8005d3c <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8005aaa:	42aa      	cmp	r2, r5
 8005aac:	d016      	beq.n	8005adc <HAL_ADCEx_InjectedConfigChannel+0x100>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8005aae:	4da4      	ldr	r5, [pc, #656]	; (8005d40 <HAL_ADCEx_InjectedConfigChannel+0x364>)
 8005ab0:	42aa      	cmp	r2, r5
 8005ab2:	f040 810d 	bne.w	8005cd0 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005ab6:	01cd      	lsls	r5, r1, #7
 8005ab8:	d409      	bmi.n	8005ace <HAL_ADCEx_InjectedConfigChannel+0xf2>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005aba:	4aa2      	ldr	r2, [pc, #648]	; (8005d44 <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d006      	beq.n	8005ace <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005ac0:	68b3      	ldr	r3, [r6, #8]
 8005ac2:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005ac6:	431f      	orrs	r7, r3
 8005ac8:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8005acc:	60b7      	str	r7, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	b002      	add	sp, #8
 8005ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005adc:	020a      	lsls	r2, r1, #8
 8005ade:	d4f6      	bmi.n	8005ace <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ae4:	d1f3      	bne.n	8005ace <HAL_ADCEx_InjectedConfigChannel+0xf2>
 8005ae6:	4a93      	ldr	r2, [pc, #588]	; (8005d34 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8005ae8:	6893      	ldr	r3, [r2, #8]
 8005aea:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005aee:	431f      	orrs	r7, r3
 8005af0:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8005af4:	4b94      	ldr	r3, [pc, #592]	; (8005d48 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8005af6:	6097      	str	r7, [r2, #8]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a94      	ldr	r2, [pc, #592]	; (8005d4c <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8005afc:	099b      	lsrs	r3, r3, #6
 8005afe:	fba2 2303 	umull	r2, r3, r2, r3
 8005b02:	099b      	lsrs	r3, r3, #6
 8005b04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	3318      	adds	r3, #24
 8005b0c:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8005b0e:	9b01      	ldr	r3, [sp, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0dc      	beq.n	8005ace <HAL_ADCEx_InjectedConfigChannel+0xf2>
          wait_loop_index--;
 8005b14:	9b01      	ldr	r3, [sp, #4]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8005b1a:	9b01      	ldr	r3, [sp, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1f9      	bne.n	8005b14 <HAL_ADCEx_InjectedConfigChannel+0x138>
 8005b20:	e7d5      	b.n	8005ace <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b22:	689d      	ldr	r5, [r3, #8]
 8005b24:	f015 0508 	ands.w	r5, r5, #8
 8005b28:	d1a4      	bne.n	8005a74 <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005b2a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8005b2c:	2c00      	cmp	r4, #0
 8005b2e:	f040 809a 	bne.w	8005c66 <HAL_ADCEx_InjectedConfigChannel+0x28a>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005b32:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8005b36:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005b38:	68dc      	ldr	r4, [r3, #12]
 8005b3a:	bf0c      	ite	eq
 8005b3c:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005b40:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 8005b44:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b46:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8005b48:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 8005b4c:	2e01      	cmp	r6, #1
      MODIFY_REG(hadc->Instance->CFGR2,
 8005b4e:	691e      	ldr	r6, [r3, #16]
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8005b50:	f000 80e0 	beq.w	8005d14 <HAL_ADCEx_InjectedConfigChannel+0x338>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8005b54:	f026 0602 	bic.w	r6, r6, #2
 8005b58:	611e      	str	r6, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005b5a:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005b5c:	0dd7      	lsrs	r7, r2, #23
 8005b5e:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8005b62:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8005b66:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8005b6a:	f000 80c4 	beq.w	8005cf6 <HAL_ADCEx_InjectedConfigChannel+0x31a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005b6e:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8005b72:	f04f 0e07 	mov.w	lr, #7
 8005b76:	4096      	lsls	r6, r2
 8005b78:	fa0e fe02 	lsl.w	lr, lr, r2
 8005b7c:	f857 200c 	ldr.w	r2, [r7, ip]
 8005b80:	ea22 020e 	bic.w	r2, r2, lr
 8005b84:	4316      	orrs	r6, r2
 8005b86:	f847 600c 	str.w	r6, [r7, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005b8a:	695a      	ldr	r2, [r3, #20]
 8005b8c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005b90:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005b92:	690f      	ldr	r7, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005b94:	68de      	ldr	r6, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005b96:	2f04      	cmp	r7, #4
 8005b98:	f000 80e0 	beq.w	8005d5c <HAL_ADCEx_InjectedConfigChannel+0x380>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005b9c:	f3c6 06c1 	ubfx	r6, r6, #3, #2
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ba0:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8005ba4:	ea4f 0e46 	mov.w	lr, r6, lsl #1
  MODIFY_REG(*preg,
 8005ba8:	680e      	ldr	r6, [r1, #0]
 8005baa:	f852 8027 	ldr.w	r8, [r2, r7, lsl #2]
 8005bae:	f006 4cf8 	and.w	ip, r6, #2080374784	; 0x7c000000
 8005bb2:	4e67      	ldr	r6, [pc, #412]	; (8005d50 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 8005bb4:	ea08 0606 	and.w	r6, r8, r6
 8005bb8:	ea4c 0c06 	orr.w	ip, ip, r6
 8005bbc:	694e      	ldr	r6, [r1, #20]
 8005bbe:	fa06 f60e 	lsl.w	r6, r6, lr
 8005bc2:	ea46 060c 	orr.w	r6, r6, ip
 8005bc6:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8005bca:	f842 6027 	str.w	r6, [r2, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bce:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 8005bd2:	698f      	ldr	r7, [r1, #24]
 8005bd4:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 8005bd8:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 8005bdc:	433e      	orrs	r6, r7
 8005bde:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005be2:	7f0e      	ldrb	r6, [r1, #28]
 8005be4:	690f      	ldr	r7, [r1, #16]
 8005be6:	2e01      	cmp	r6, #1
  MODIFY_REG(*preg,
 8005be8:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8005bec:	bf08      	it	eq
 8005bee:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8005bf2:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 8005bf6:	4335      	orrs	r5, r6
 8005bf8:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8005bfc:	680a      	ldr	r2, [r1, #0]
}
 8005bfe:	e739      	b.n	8005a74 <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 8005c00:	68dc      	ldr	r4, [r3, #12]
 8005c02:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 8005c06:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8005c0a:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8005c0e:	60dc      	str	r4, [r3, #12]
 8005c10:	e72a      	b.n	8005a68 <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005c12:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005c14:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d056      	beq.n	8005cc8 <HAL_ADCEx_InjectedConfigChannel+0x2ec>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005c1a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005c1c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005c20:	0c55      	lsrs	r5, r2, #17
 8005c22:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8005c26:	4323      	orrs	r3, r4
 8005c28:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8005c2a:	6803      	ldr	r3, [r0, #0]
 8005c2c:	4e49      	ldr	r6, [pc, #292]	; (8005d54 <HAL_ADCEx_InjectedConfigChannel+0x378>)
 8005c2e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005c30:	4034      	ands	r4, r6
 8005c32:	432c      	orrs	r4, r5
 8005c34:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8005c36:	6645      	str	r5, [r0, #100]	; 0x64
 8005c38:	e702      	b.n	8005a40 <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005c3a:	680a      	ldr	r2, [r1, #0]
 8005c3c:	684b      	ldr	r3, [r1, #4]
 8005c3e:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8005c42:	f003 031f 	and.w	r3, r3, #31
 8005c46:	409d      	lsls	r5, r3
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005c48:	6e43      	ldr	r3, [r0, #100]	; 0x64
    hadc->InjectionConfig.ChannelCount--;
 8005c4a:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005c4c:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 8005c4e:	6684      	str	r4, [r0, #104]	; 0x68
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005c50:	6803      	ldr	r3, [r0, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005c52:	6645      	str	r5, [r0, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005c54:	2c00      	cmp	r4, #0
 8005c56:	f47f aef3 	bne.w	8005a40 <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005c5a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005c5c:	4e3d      	ldr	r6, [pc, #244]	; (8005d54 <HAL_ADCEx_InjectedConfigChannel+0x378>)
 8005c5e:	4034      	ands	r4, r6
 8005c60:	4325      	orrs	r5, r4
 8005c62:	64dd      	str	r5, [r3, #76]	; 0x4c
 8005c64:	e6ec      	b.n	8005a40 <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8005c66:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005c68:	2c00      	cmp	r4, #0
 8005c6a:	f43f af62 	beq.w	8005b32 <HAL_ADCEx_InjectedConfigChannel+0x156>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005c6e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8005c72:	2c01      	cmp	r4, #1
 8005c74:	f000 8158 	beq.w	8005f28 <HAL_ADCEx_InjectedConfigChannel+0x54c>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005c78:	68dc      	ldr	r4, [r3, #12]
 8005c7a:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8005c7e:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c80:	462c      	mov	r4, r5
 8005c82:	e761      	b.n	8005b48 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    SET_BIT(ADCx->DIFSEL,
 8005c84:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8005c88:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8005c8c:	4335      	orrs	r5, r6
 8005c8e:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005c92:	2e00      	cmp	r6, #0
 8005c94:	f040 80a7 	bne.w	8005de6 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8005c98:	0e92      	lsrs	r2, r2, #26
 8005c9a:	1c55      	adds	r5, r2, #1
 8005c9c:	f005 0c1f 	and.w	ip, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ca0:	f1bc 0f09 	cmp.w	ip, #9
 8005ca4:	f200 80d9 	bhi.w	8005e5a <HAL_ADCEx_InjectedConfigChannel+0x47e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005ca8:	06ad      	lsls	r5, r5, #26
 8005caa:	2201      	movs	r2, #1
 8005cac:	fa02 f20c 	lsl.w	r2, r2, ip
 8005cb0:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005cb4:	4315      	orrs	r5, r2
 8005cb6:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8005cba:	0512      	lsls	r2, r2, #20
 8005cbc:	e0db      	b.n	8005e76 <HAL_ADCEx_InjectedConfigChannel+0x49a>
  __HAL_LOCK(hadc);
 8005cbe:	2402      	movs	r4, #2
}
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	b002      	add	sp, #8
 8005cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8005cc8:	0c55      	lsrs	r5, r2, #17
 8005cca:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8005cce:	e7ac      	b.n	8005c2a <HAL_ADCEx_InjectedConfigChannel+0x24e>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8005cd0:	4d21      	ldr	r5, [pc, #132]	; (8005d58 <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 8005cd2:	42aa      	cmp	r2, r5
 8005cd4:	f47f aefb 	bne.w	8005ace <HAL_ADCEx_InjectedConfigChannel+0xf2>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005cd8:	0249      	lsls	r1, r1, #9
 8005cda:	f53f aef8 	bmi.w	8005ace <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_VREFINT_INSTANCE(hadc))
 8005cde:	4a19      	ldr	r2, [pc, #100]	; (8005d44 <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	f43f aef4 	beq.w	8005ace <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005ce6:	68b3      	ldr	r3, [r6, #8]
 8005ce8:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005cec:	431f      	orrs	r7, r3
 8005cee:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 8005cf2:	60b7      	str	r7, [r6, #8]
}
 8005cf4:	e6eb      	b.n	8005ace <HAL_ADCEx_InjectedConfigChannel+0xf2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005cf6:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8005cfa:	f04f 0c07 	mov.w	ip, #7
 8005cfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8005d02:	59ba      	ldr	r2, [r7, r6]
 8005d04:	ea22 020c 	bic.w	r2, r2, ip
 8005d08:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005d0a:	695a      	ldr	r2, [r3, #20]
 8005d0c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005d10:	615a      	str	r2, [r3, #20]
}
 8005d12:	e73e      	b.n	8005b92 <HAL_ADCEx_InjectedConfigChannel+0x1b6>
      MODIFY_REG(hadc->Instance->CFGR2,
 8005d14:	f426 7cff 	bic.w	ip, r6, #510	; 0x1fe
 8005d18:	e9d1 670d 	ldrd	r6, r7, [r1, #52]	; 0x34
 8005d1c:	433e      	orrs	r6, r7
 8005d1e:	ea46 060c 	orr.w	r6, r6, ip
 8005d22:	f046 0602 	orr.w	r6, r6, #2
 8005d26:	611e      	str	r6, [r3, #16]
 8005d28:	e717      	b.n	8005b5a <HAL_ADCEx_InjectedConfigChannel+0x17e>
 8005d2a:	bf00      	nop
 8005d2c:	407f0000 	.word	0x407f0000
 8005d30:	80080000 	.word	0x80080000
 8005d34:	50000300 	.word	0x50000300
 8005d38:	c3210000 	.word	0xc3210000
 8005d3c:	90c00010 	.word	0x90c00010
 8005d40:	c7520000 	.word	0xc7520000
 8005d44:	50000100 	.word	0x50000100
 8005d48:	200004c8 	.word	0x200004c8
 8005d4c:	053e2d63 	.word	0x053e2d63
 8005d50:	03fff000 	.word	0x03fff000
 8005d54:	04104000 	.word	0x04104000
 8005d58:	cb840000 	.word	0xcb840000
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005d5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005d5e:	680a      	ldr	r2, [r1, #0]
 8005d60:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8005d62:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005d66:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005d6a:	2e00      	cmp	r6, #0
 8005d6c:	f000 809a 	beq.w	8005ea4 <HAL_ADCEx_InjectedConfigChannel+0x4c8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d70:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005d74:	b126      	cbz	r6, 8005d80 <HAL_ADCEx_InjectedConfigChannel+0x3a4>
  return __builtin_clz(value);
 8005d76:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005d7a:	42b5      	cmp	r5, r6
 8005d7c:	f000 80d9 	beq.w	8005f32 <HAL_ADCEx_InjectedConfigChannel+0x556>
 8005d80:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8005d82:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d84:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005d88:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8005d8c:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d90:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005d94:	b126      	cbz	r6, 8005da0 <HAL_ADCEx_InjectedConfigChannel+0x3c4>
  return __builtin_clz(value);
 8005d96:	fab6 f686 	clz	r6, r6
 8005d9a:	42b7      	cmp	r7, r6
 8005d9c:	f000 80de 	beq.w	8005f5c <HAL_ADCEx_InjectedConfigChannel+0x580>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005da0:	68ae      	ldr	r6, [r5, #8]
 8005da2:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005da4:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005da8:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dac:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005db0:	b126      	cbz	r6, 8005dbc <HAL_ADCEx_InjectedConfigChannel+0x3e0>
  return __builtin_clz(value);
 8005db2:	fab6 f686 	clz	r6, r6
 8005db6:	42b7      	cmp	r7, r6
 8005db8:	f000 80e5 	beq.w	8005f86 <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005dbc:	68ee      	ldr	r6, [r5, #12]
 8005dbe:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005dc0:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005dc2:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc6:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005dca:	2e00      	cmp	r6, #0
 8005dcc:	f43f ae52 	beq.w	8005a74 <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 8005dd0:	fab6 f686 	clz	r6, r6
 8005dd4:	42be      	cmp	r6, r7
 8005dd6:	f47f ae4d 	bne.w	8005a74 <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 8005dda:	682a      	ldr	r2, [r5, #0]
 8005ddc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005de0:	602a      	str	r2, [r5, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8005de2:	680a      	ldr	r2, [r1, #0]
}
 8005de4:	e646      	b.n	8005a74 <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de6:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8005dea:	2d00      	cmp	r5, #0
 8005dec:	d076      	beq.n	8005edc <HAL_ADCEx_InjectedConfigChannel+0x500>
  return __builtin_clz(value);
 8005dee:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005df2:	3501      	adds	r5, #1
 8005df4:	f005 051f 	and.w	r5, r5, #31
 8005df8:	2d09      	cmp	r5, #9
 8005dfa:	d96f      	bls.n	8005edc <HAL_ADCEx_InjectedConfigChannel+0x500>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfc:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8005e00:	2d00      	cmp	r5, #0
 8005e02:	f000 80e0 	beq.w	8005fc6 <HAL_ADCEx_InjectedConfigChannel+0x5ea>
  return __builtin_clz(value);
 8005e06:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005e0a:	3501      	adds	r5, #1
 8005e0c:	06ad      	lsls	r5, r5, #26
 8005e0e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e12:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005e16:	2e00      	cmp	r6, #0
 8005e18:	f000 80d3 	beq.w	8005fc2 <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 8005e1c:	fab6 f686 	clz	r6, r6
 8005e20:	3601      	adds	r6, #1
 8005e22:	f006 061f 	and.w	r6, r6, #31
 8005e26:	2701      	movs	r7, #1
 8005e28:	fa07 f606 	lsl.w	r6, r7, r6
 8005e2c:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e2e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005e32:	2a00      	cmp	r2, #0
 8005e34:	f000 80c3 	beq.w	8005fbe <HAL_ADCEx_InjectedConfigChannel+0x5e2>
  return __builtin_clz(value);
 8005e38:	fab2 f282 	clz	r2, r2
 8005e3c:	3201      	adds	r2, #1
 8005e3e:	f002 061f 	and.w	r6, r2, #31
 8005e42:	f06f 071d 	mvn.w	r7, #29
 8005e46:	2203      	movs	r2, #3
 8005e48:	fb12 7206 	smlabb	r2, r2, r6, r7
 8005e4c:	0512      	lsls	r2, r2, #20
 8005e4e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005e52:	e010      	b.n	8005e76 <HAL_ADCEx_InjectedConfigChannel+0x49a>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8005e54:	3b01      	subs	r3, #1
 8005e56:	461d      	mov	r5, r3
 8005e58:	e5e0      	b.n	8005a1c <HAL_ADCEx_InjectedConfigChannel+0x40>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005e5a:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8005e5e:	06ad      	lsls	r5, r5, #26
 8005e60:	3a1e      	subs	r2, #30
 8005e62:	2601      	movs	r6, #1
 8005e64:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005e68:	0512      	lsls	r2, r2, #20
 8005e6a:	fa06 fc0c 	lsl.w	ip, r6, ip
 8005e6e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005e72:	ea45 050c 	orr.w	r5, r5, ip
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e76:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005e78:	0dd7      	lsrs	r7, r2, #23
  MODIFY_REG(*preg,
 8005e7a:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005e7c:	f007 0704 	and.w	r7, r7, #4
 8005e80:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8005e84:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8005e88:	fa05 fc02 	lsl.w	ip, r5, r2
 8005e8c:	f04f 0e07 	mov.w	lr, #7
 8005e90:	59bd      	ldr	r5, [r7, r6]
 8005e92:	fa0e f202 	lsl.w	r2, lr, r2
 8005e96:	ea25 0202 	bic.w	r2, r5, r2
 8005e9a:	ea42 020c 	orr.w	r2, r2, ip
 8005e9e:	51ba      	str	r2, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8005ea0:	680a      	ldr	r2, [r1, #0]
}
 8005ea2:	e5f7      	b.n	8005a94 <HAL_ADCEx_InjectedConfigChannel+0xb8>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005ea4:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ea8:	42b5      	cmp	r5, r6
 8005eaa:	d042      	beq.n	8005f32 <HAL_ADCEx_InjectedConfigChannel+0x556>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005eac:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8005eae:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005eb0:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005eb4:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8005eb8:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 8005ebc:	42b7      	cmp	r7, r6
 8005ebe:	d04d      	beq.n	8005f5c <HAL_ADCEx_InjectedConfigChannel+0x580>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ec0:	68af      	ldr	r7, [r5, #8]
 8005ec2:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ec4:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005ec8:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8005ecc:	42b7      	cmp	r7, r6
 8005ece:	d05a      	beq.n	8005f86 <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ed0:	68ef      	ldr	r7, [r5, #12]
 8005ed2:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ed4:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005ed6:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8005eda:	e77b      	b.n	8005dd4 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005edc:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8005ee0:	2d00      	cmp	r5, #0
 8005ee2:	d066      	beq.n	8005fb2 <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 8005ee4:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005ee8:	3501      	adds	r5, #1
 8005eea:	06ad      	lsls	r5, r5, #26
 8005eec:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef0:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005ef4:	2e00      	cmp	r6, #0
 8005ef6:	d05a      	beq.n	8005fae <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return __builtin_clz(value);
 8005ef8:	fab6 f686 	clz	r6, r6
 8005efc:	3601      	adds	r6, #1
 8005efe:	f006 061f 	and.w	r6, r6, #31
 8005f02:	2701      	movs	r7, #1
 8005f04:	fa07 f606 	lsl.w	r6, r7, r6
 8005f08:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005f0e:	2a00      	cmp	r2, #0
 8005f10:	d052      	beq.n	8005fb8 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
  return __builtin_clz(value);
 8005f12:	fab2 fc82 	clz	ip, r2
 8005f16:	f10c 0c01 	add.w	ip, ip, #1
 8005f1a:	f00c 0c1f 	and.w	ip, ip, #31
 8005f1e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8005f22:	ea4f 520c 	mov.w	r2, ip, lsl #20
 8005f26:	e7a6      	b.n	8005e76 <HAL_ADCEx_InjectedConfigChannel+0x49a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f28:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 8005f2a:	f046 0620 	orr.w	r6, r6, #32
 8005f2e:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 8005f30:	e60a      	b.n	8005b48 <HAL_ADCEx_InjectedConfigChannel+0x16c>
  MODIFY_REG(*preg,
 8005f32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f34:	461d      	mov	r5, r3
 8005f36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f3a:	f845 2f60 	str.w	r2, [r5, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005f40:	680a      	ldr	r2, [r1, #0]
 8005f42:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8005f44:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005f48:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f4c:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005f50:	2e00      	cmp	r6, #0
 8005f52:	f47f af1d 	bne.w	8005d90 <HAL_ADCEx_InjectedConfigChannel+0x3b4>
 8005f56:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8005f5a:	e7af      	b.n	8005ebc <HAL_ADCEx_InjectedConfigChannel+0x4e0>
  MODIFY_REG(*preg,
 8005f5c:	f8dc 2000 	ldr.w	r2, [ip]
 8005f60:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f64:	f8cc 2000 	str.w	r2, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f68:	68aa      	ldr	r2, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005f6a:	680a      	ldr	r2, [r1, #0]
 8005f6c:	68af      	ldr	r7, [r5, #8]
 8005f6e:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005f72:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f76:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005f7a:	2e00      	cmp	r6, #0
 8005f7c:	f47f af16 	bne.w	8005dac <HAL_ADCEx_InjectedConfigChannel+0x3d0>
 8005f80:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8005f84:	e7a2      	b.n	8005ecc <HAL_ADCEx_InjectedConfigChannel+0x4f0>
  MODIFY_REG(*preg,
 8005f86:	f8dc 2000 	ldr.w	r2, [ip]
 8005f8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f8e:	f8cc 2000 	str.w	r2, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f92:	68ea      	ldr	r2, [r5, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005f94:	680a      	ldr	r2, [r1, #0]
 8005f96:	68ef      	ldr	r7, [r5, #12]
 8005f98:	f3c2 0612 	ubfx	r6, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f9c:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005f9e:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005fa2:	2e00      	cmp	r6, #0
 8005fa4:	f47f af0f 	bne.w	8005dc6 <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 8005fa8:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8005fac:	e712      	b.n	8005dd4 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
 8005fae:	2602      	movs	r6, #2
 8005fb0:	e7aa      	b.n	8005f08 <HAL_ADCEx_InjectedConfigChannel+0x52c>
 8005fb2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8005fb6:	e79b      	b.n	8005ef0 <HAL_ADCEx_InjectedConfigChannel+0x514>
 8005fb8:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8005fbc:	e75b      	b.n	8005e76 <HAL_ADCEx_InjectedConfigChannel+0x49a>
 8005fbe:	4a03      	ldr	r2, [pc, #12]	; (8005fcc <HAL_ADCEx_InjectedConfigChannel+0x5f0>)
 8005fc0:	e759      	b.n	8005e76 <HAL_ADCEx_InjectedConfigChannel+0x49a>
 8005fc2:	2602      	movs	r6, #2
 8005fc4:	e732      	b.n	8005e2c <HAL_ADCEx_InjectedConfigChannel+0x450>
 8005fc6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8005fca:	e722      	b.n	8005e12 <HAL_ADCEx_InjectedConfigChannel+0x436>
 8005fcc:	fe500000 	.word	0xfe500000

08005fd0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005fd0:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005fd2:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005fd6:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8005fd8:	2a01      	cmp	r2, #1
{
 8005fda:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8005fdc:	d04f      	beq.n	800607e <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005fde:	6804      	ldr	r4, [r0, #0]
 8005fe0:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005fe2:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005fe4:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005fe6:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005fea:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8005fec:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005ff0:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005ff2:	d008      	beq.n	8006006 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ff4:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ff6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ffa:	f041 0120 	orr.w	r1, r1, #32
 8005ffe:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8006000:	b01c      	add	sp, #112	; 0x70
 8006002:	bcf0      	pop	{r4, r5, r6, r7}
 8006004:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006006:	4a23      	ldr	r2, [pc, #140]	; (8006094 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8006008:	6890      	ldr	r0, [r2, #8]
 800600a:	0740      	lsls	r0, r0, #29
 800600c:	d50b      	bpl.n	8006026 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800600e:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006010:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006012:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8006016:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006018:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8006020:	b01c      	add	sp, #112	; 0x70
 8006022:	bcf0      	pop	{r4, r5, r6, r7}
 8006024:	4770      	bx	lr
 8006026:	68a0      	ldr	r0, [r4, #8]
 8006028:	0746      	lsls	r6, r0, #29
 800602a:	d4f1      	bmi.n	8006010 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800602c:	b1d5      	cbz	r5, 8006064 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800602e:	4e1a      	ldr	r6, [pc, #104]	; (8006098 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8006030:	684f      	ldr	r7, [r1, #4]
 8006032:	68b0      	ldr	r0, [r6, #8]
 8006034:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8006038:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 800603c:	4338      	orrs	r0, r7
 800603e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8006042:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006044:	68a4      	ldr	r4, [r4, #8]
 8006046:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006048:	4320      	orrs	r0, r4
 800604a:	f010 0001 	ands.w	r0, r0, #1
 800604e:	d114      	bne.n	800607a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 8006050:	688a      	ldr	r2, [r1, #8]
 8006052:	4315      	orrs	r5, r2
 8006054:	68b2      	ldr	r2, [r6, #8]
 8006056:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800605a:	f022 020f 	bic.w	r2, r2, #15
 800605e:	4315      	orrs	r5, r2
 8006060:	60b5      	str	r5, [r6, #8]
 8006062:	e7da      	b.n	800601a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006064:	4d0c      	ldr	r5, [pc, #48]	; (8006098 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8006066:	68a9      	ldr	r1, [r5, #8]
 8006068:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800606c:	60a9      	str	r1, [r5, #8]
 800606e:	68a1      	ldr	r1, [r4, #8]
 8006070:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006072:	4308      	orrs	r0, r1
 8006074:	f010 0001 	ands.w	r0, r0, #1
 8006078:	d005      	beq.n	8006086 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800607a:	2000      	movs	r0, #0
 800607c:	e7cd      	b.n	800601a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 800607e:	2002      	movs	r0, #2
}
 8006080:	b01c      	add	sp, #112	; 0x70
 8006082:	bcf0      	pop	{r4, r5, r6, r7}
 8006084:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006086:	68aa      	ldr	r2, [r5, #8]
 8006088:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800608c:	f022 020f 	bic.w	r2, r2, #15
 8006090:	60aa      	str	r2, [r5, #8]
 8006092:	e7c2      	b.n	800601a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8006094:	50000100 	.word	0x50000100
 8006098:	50000300 	.word	0x50000300

0800609c <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 800609c:	b1b0      	cbz	r0, 80060cc <HAL_CORDIC_Init+0x30>
{
 800609e:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80060a0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80060a4:	4604      	mov	r4, r0
 80060a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80060aa:	b153      	cbz	r3, 80060c2 <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80060ac:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80060ae:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80060b0:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 80060b2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 80060b6:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 80060ba:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80060be:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 80060c0:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 80060c2:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 80060c6:	f7fe fd79 	bl	8004bbc <HAL_CORDIC_MspInit>
 80060ca:	e7ef      	b.n	80060ac <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 80060cc:	2001      	movs	r0, #1
}
 80060ce:	4770      	bx	lr

080060d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060d0:	4907      	ldr	r1, [pc, #28]	; (80060f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80060d2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060d4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060d6:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060de:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060e0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060e2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80060ea:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	e000ed00 	.word	0xe000ed00

080060f4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060f4:	4b1c      	ldr	r3, [pc, #112]	; (8006168 <HAL_NVIC_SetPriority+0x74>)
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060fc:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060fe:	f1c3 0e07 	rsb	lr, r3, #7
 8006102:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006106:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800610a:	bf28      	it	cs
 800610c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006110:	f1bc 0f06 	cmp.w	ip, #6
 8006114:	d91b      	bls.n	800614e <HAL_NVIC_SetPriority+0x5a>
 8006116:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006118:	f04f 3cff 	mov.w	ip, #4294967295
 800611c:	fa0c fc03 	lsl.w	ip, ip, r3
 8006120:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006124:	f04f 3cff 	mov.w	ip, #4294967295
 8006128:	fa0c fc0e 	lsl.w	ip, ip, lr
 800612c:	ea21 010c 	bic.w	r1, r1, ip
 8006130:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8006132:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006134:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006138:	db0c      	blt.n	8006154 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800613a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800613e:	0109      	lsls	r1, r1, #4
 8006140:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006144:	b2c9      	uxtb	r1, r1
 8006146:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800614a:	f85d fb04 	ldr.w	pc, [sp], #4
 800614e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006150:	4613      	mov	r3, r2
 8006152:	e7e7      	b.n	8006124 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006154:	4b05      	ldr	r3, [pc, #20]	; (800616c <HAL_NVIC_SetPriority+0x78>)
 8006156:	f000 000f 	and.w	r0, r0, #15
 800615a:	0109      	lsls	r1, r1, #4
 800615c:	4403      	add	r3, r0
 800615e:	b2c9      	uxtb	r1, r1
 8006160:	7619      	strb	r1, [r3, #24]
 8006162:	f85d fb04 	ldr.w	pc, [sp], #4
 8006166:	bf00      	nop
 8006168:	e000ed00 	.word	0xe000ed00
 800616c:	e000ecfc 	.word	0xe000ecfc

08006170 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006170:	2800      	cmp	r0, #0
 8006172:	db08      	blt.n	8006186 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006174:	4a04      	ldr	r2, [pc, #16]	; (8006188 <HAL_NVIC_EnableIRQ+0x18>)
 8006176:	0941      	lsrs	r1, r0, #5
 8006178:	2301      	movs	r3, #1
 800617a:	f000 001f 	and.w	r0, r0, #31
 800617e:	fa03 f000 	lsl.w	r0, r3, r0
 8006182:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006186:	4770      	bx	lr
 8006188:	e000e100 	.word	0xe000e100

0800618c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800618c:	3801      	subs	r0, #1
 800618e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006192:	d210      	bcs.n	80061b6 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006194:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006196:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800619a:	4c08      	ldr	r4, [pc, #32]	; (80061bc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800619c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800619e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80061a2:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061a6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061a8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061aa:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061ac:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80061ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061b2:	6119      	str	r1, [r3, #16]
 80061b4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80061b6:	2001      	movs	r0, #1
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	e000ed00 	.word	0xe000ed00

080061c0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop

080061c4 <HAL_SYSTICK_IRQHandler>:
{
 80061c4:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80061c6:	f7ff fffb 	bl	80061c0 <HAL_SYSTICK_Callback>
}
 80061ca:	bd08      	pop	{r3, pc}

080061cc <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d078      	beq.n	80062c2 <HAL_DMA_Init+0xf6>
{
 80061d0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80061d2:	4b3d      	ldr	r3, [pc, #244]	; (80062c8 <HAL_DMA_Init+0xfc>)
 80061d4:	6804      	ldr	r4, [r0, #0]
 80061d6:	429c      	cmp	r4, r3
 80061d8:	d95f      	bls.n	800629a <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80061da:	4a3c      	ldr	r2, [pc, #240]	; (80062cc <HAL_DMA_Init+0x100>)
 80061dc:	4b3c      	ldr	r3, [pc, #240]	; (80062d0 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 80061de:	493d      	ldr	r1, [pc, #244]	; (80062d4 <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80061e0:	4422      	add	r2, r4
 80061e2:	fba3 3202 	umull	r3, r2, r3, r2
 80061e6:	0912      	lsrs	r2, r2, #4
 80061e8:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061ea:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80061ec:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 80061ee:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 80061f2:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061f4:	69c6      	ldr	r6, [r0, #28]
 80061f6:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061fa:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 80061fc:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061fe:	430b      	orrs	r3, r1
 8006200:	6941      	ldr	r1, [r0, #20]
 8006202:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006204:	6981      	ldr	r1, [r0, #24]
 8006206:	430b      	orrs	r3, r1
 8006208:	4333      	orrs	r3, r6
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800620a:	fa5f fc84 	uxtb.w	ip, r4
 800620e:	4e30      	ldr	r6, [pc, #192]	; (80062d0 <HAL_DMA_Init+0x104>)
  tmp = hdma->Instance->CCR;
 8006210:	6821      	ldr	r1, [r4, #0]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006212:	f1ac 0c08 	sub.w	ip, ip, #8
 8006216:	fba6 6c0c 	umull	r6, ip, r6, ip
          hdma->Init.Mode                | hdma->Init.Priority;
 800621a:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800621c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8006220:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8006224:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8006226:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 8006228:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800622a:	4e2b      	ldr	r6, [pc, #172]	; (80062d8 <HAL_DMA_Init+0x10c>)
 800622c:	4b26      	ldr	r3, [pc, #152]	; (80062c8 <HAL_DMA_Init+0xfc>)
 800622e:	492b      	ldr	r1, [pc, #172]	; (80062dc <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006230:	f3cc 1c04 	ubfx	ip, ip, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006234:	429c      	cmp	r4, r3
 8006236:	bf98      	it	ls
 8006238:	4631      	movls	r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800623a:	f04f 0e01 	mov.w	lr, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800623e:	4c28      	ldr	r4, [pc, #160]	; (80062e0 <HAL_DMA_Init+0x114>)
 8006240:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006242:	fa0e f30c 	lsl.w	r3, lr, ip
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006246:	1854      	adds	r4, r2, r1
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006248:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800624c:	6503      	str	r3, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800624e:	6484      	str	r4, [r0, #72]	; 0x48
 8006250:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006254:	d02a      	beq.n	80062ac <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006256:	6845      	ldr	r5, [r0, #4]
 8006258:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800625a:	3d01      	subs	r5, #1
 800625c:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800625e:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006262:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006266:	d827      	bhi.n	80062b8 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006268:	4b1e      	ldr	r3, [pc, #120]	; (80062e4 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800626a:	491f      	ldr	r1, [pc, #124]	; (80062e8 <HAL_DMA_Init+0x11c>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800626c:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800626e:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006270:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006272:	f004 041f 	and.w	r4, r4, #31
 8006276:	fa0e f404 	lsl.w	r4, lr, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800627a:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800627c:	e9c0 3115 	strd	r3, r1, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006280:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006282:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006284:	4b19      	ldr	r3, [pc, #100]	; (80062ec <HAL_DMA_Init+0x120>)
 8006286:	645c      	str	r4, [r3, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006288:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 800628a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800628c:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 800628e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8006292:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 8006296:	4618      	mov	r0, r3
}
 8006298:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800629a:	4a15      	ldr	r2, [pc, #84]	; (80062f0 <HAL_DMA_Init+0x124>)
 800629c:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 800629e:	4915      	ldr	r1, [pc, #84]	; (80062f4 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80062a0:	4422      	add	r2, r4
 80062a2:	fba3 3202 	umull	r3, r2, r3, r2
 80062a6:	0912      	lsrs	r2, r2, #4
 80062a8:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 80062aa:	e79e      	b.n	80061ea <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80062ac:	2400      	movs	r4, #0
 80062ae:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80062b0:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062b4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 80062b8:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 80062ba:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80062be:	65c3      	str	r3, [r0, #92]	; 0x5c
 80062c0:	e7e2      	b.n	8006288 <HAL_DMA_Init+0xbc>
    return HAL_ERROR;
 80062c2:	2001      	movs	r0, #1
}
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	40020407 	.word	0x40020407
 80062cc:	bffdfbf8 	.word	0xbffdfbf8
 80062d0:	cccccccd 	.word	0xcccccccd
 80062d4:	40020400 	.word	0x40020400
 80062d8:	40020800 	.word	0x40020800
 80062dc:	40020820 	.word	0x40020820
 80062e0:	40020880 	.word	0x40020880
 80062e4:	1000823f 	.word	0x1000823f
 80062e8:	40020940 	.word	0x40020940
 80062ec:	40020900 	.word	0x40020900
 80062f0:	bffdfff8 	.word	0xbffdfff8
 80062f4:	40020000 	.word	0x40020000

080062f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80062fc:	680c      	ldr	r4, [r1, #0]
{
 80062fe:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006300:	2c00      	cmp	r4, #0
 8006302:	f000 8083 	beq.w	800640c <HAL_GPIO_Init+0x114>
 8006306:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800630a:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 80064e4 <HAL_GPIO_Init+0x1ec>
  uint32_t position = 0x00U;
 800630e:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006310:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006314:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006316:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 800631a:	ea15 0804 	ands.w	r8, r5, r4
 800631e:	d06f      	beq.n	8006400 <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006320:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8006324:	f007 0203 	and.w	r2, r7, #3
 8006328:	1e51      	subs	r1, r2, #1
 800632a:	2901      	cmp	r1, #1
 800632c:	d971      	bls.n	8006412 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800632e:	2a03      	cmp	r2, #3
 8006330:	f040 80b0 	bne.w	8006494 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006334:	fa02 f20c 	lsl.w	r2, r2, ip
 8006338:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 800633a:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800633c:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800633e:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006340:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 8006344:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006346:	d05b      	beq.n	8006400 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006348:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 800634c:	f042 0201 	orr.w	r2, r2, #1
 8006350:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
 8006354:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8006358:	f002 0201 	and.w	r2, r2, #1
 800635c:	9203      	str	r2, [sp, #12]
 800635e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006360:	f023 0203 	bic.w	r2, r3, #3
 8006364:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006368:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800636c:	f003 0503 	and.w	r5, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8006370:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006372:	00ad      	lsls	r5, r5, #2
 8006374:	260f      	movs	r6, #15
 8006376:	fa06 fe05 	lsl.w	lr, r6, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800637a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800637e:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006382:	d019      	beq.n	80063b8 <HAL_GPIO_Init+0xc0>
 8006384:	4e51      	ldr	r6, [pc, #324]	; (80064cc <HAL_GPIO_Init+0x1d4>)
 8006386:	42b0      	cmp	r0, r6
 8006388:	f000 808f 	beq.w	80064aa <HAL_GPIO_Init+0x1b2>
 800638c:	4e50      	ldr	r6, [pc, #320]	; (80064d0 <HAL_GPIO_Init+0x1d8>)
 800638e:	42b0      	cmp	r0, r6
 8006390:	f000 808f 	beq.w	80064b2 <HAL_GPIO_Init+0x1ba>
 8006394:	4e4f      	ldr	r6, [pc, #316]	; (80064d4 <HAL_GPIO_Init+0x1dc>)
 8006396:	42b0      	cmp	r0, r6
 8006398:	f000 8081 	beq.w	800649e <HAL_GPIO_Init+0x1a6>
 800639c:	4e4e      	ldr	r6, [pc, #312]	; (80064d8 <HAL_GPIO_Init+0x1e0>)
 800639e:	42b0      	cmp	r0, r6
 80063a0:	f000 808d 	beq.w	80064be <HAL_GPIO_Init+0x1c6>
 80063a4:	4e4d      	ldr	r6, [pc, #308]	; (80064dc <HAL_GPIO_Init+0x1e4>)
 80063a6:	42b0      	cmp	r0, r6
 80063a8:	bf0c      	ite	eq
 80063aa:	f04f 0e05 	moveq.w	lr, #5
 80063ae:	f04f 0e06 	movne.w	lr, #6
 80063b2:	fa0e f505 	lsl.w	r5, lr, r5
 80063b6:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063b8:	6091      	str	r1, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063ba:	4a49      	ldr	r2, [pc, #292]	; (80064e0 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80063bc:	4948      	ldr	r1, [pc, #288]	; (80064e0 <HAL_GPIO_Init+0x1e8>)
        temp = EXTI->RTSR1;
 80063be:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 80063c0:	ea6f 0508 	mvn.w	r5, r8
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063c4:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 80063c6:	bf54      	ite	pl
 80063c8:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80063ca:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR1 = temp;
 80063ce:	608a      	str	r2, [r1, #8]

        temp = EXTI->FTSR1;
 80063d0:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063d2:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80063d4:	4942      	ldr	r1, [pc, #264]	; (80064e0 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 80063d6:	bf54      	ite	pl
 80063d8:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80063da:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 80063de:	60ca      	str	r2, [r1, #12]

        temp = EXTI->EMR1;
 80063e0:	6849      	ldr	r1, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80063e2:	4a3f      	ldr	r2, [pc, #252]	; (80064e0 <HAL_GPIO_Init+0x1e8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063e4:	03be      	lsls	r6, r7, #14
        temp &= ~(iocurrent);
 80063e6:	bf54      	ite	pl
 80063e8:	4029      	andpl	r1, r5
          temp |= iocurrent;
 80063ea:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR1 = temp;
 80063ee:	6051      	str	r1, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80063f0:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063f2:	03f9      	lsls	r1, r7, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80063f4:	493a      	ldr	r1, [pc, #232]	; (80064e0 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 80063f6:	bf54      	ite	pl
 80063f8:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80063fa:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR1 = temp;
 80063fe:	600a      	str	r2, [r1, #0]
      }
    }

    position++;
 8006400:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006402:	fa34 f203 	lsrs.w	r2, r4, r3
 8006406:	f10c 0c02 	add.w	ip, ip, #2
 800640a:	d184      	bne.n	8006316 <HAL_GPIO_Init+0x1e>
  }
}
 800640c:	b005      	add	sp, #20
 800640e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8006412:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006414:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006418:	f04f 0e03 	mov.w	lr, #3
 800641c:	fa0e fe0c 	lsl.w	lr, lr, ip
 8006420:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006424:	fa06 f60c 	lsl.w	r6, r6, ip
 8006428:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 800642a:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800642c:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 8006430:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006434:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006438:	f3c7 1500 	ubfx	r5, r7, #4, #1
 800643c:	409d      	lsls	r5, r3
 800643e:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 8006442:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8006444:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006446:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800644a:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800644e:	fa05 f50c 	lsl.w	r5, r5, ip
 8006452:	ea45 050e 	orr.w	r5, r5, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006456:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8006458:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800645a:	fa02 f20c 	lsl.w	r2, r2, ip
 800645e:	f47f af6c 	bne.w	800633a <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 8006462:	08dd      	lsrs	r5, r3, #3
 8006464:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8006468:	9501      	str	r5, [sp, #4]
 800646a:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800646c:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8006470:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006472:	f003 0e07 	and.w	lr, r3, #7
 8006476:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800647a:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800647c:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006480:	fa06 fe0e 	lsl.w	lr, r6, lr
 8006484:	9e00      	ldr	r6, [sp, #0]
 8006486:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 800648a:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800648c:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8006490:	6235      	str	r5, [r6, #32]
 8006492:	e752      	b.n	800633a <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006494:	2103      	movs	r1, #3
 8006496:	fa01 f10c 	lsl.w	r1, r1, ip
 800649a:	43c9      	mvns	r1, r1
 800649c:	e7d2      	b.n	8006444 <HAL_GPIO_Init+0x14c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800649e:	f04f 0e03 	mov.w	lr, #3
 80064a2:	fa0e f505 	lsl.w	r5, lr, r5
 80064a6:	4329      	orrs	r1, r5
 80064a8:	e786      	b.n	80063b8 <HAL_GPIO_Init+0xc0>
 80064aa:	fa0b f505 	lsl.w	r5, fp, r5
 80064ae:	4329      	orrs	r1, r5
 80064b0:	e782      	b.n	80063b8 <HAL_GPIO_Init+0xc0>
 80064b2:	f04f 0e02 	mov.w	lr, #2
 80064b6:	fa0e f505 	lsl.w	r5, lr, r5
 80064ba:	4329      	orrs	r1, r5
 80064bc:	e77c      	b.n	80063b8 <HAL_GPIO_Init+0xc0>
 80064be:	f04f 0e04 	mov.w	lr, #4
 80064c2:	fa0e f505 	lsl.w	r5, lr, r5
 80064c6:	4329      	orrs	r1, r5
 80064c8:	e776      	b.n	80063b8 <HAL_GPIO_Init+0xc0>
 80064ca:	bf00      	nop
 80064cc:	48000400 	.word	0x48000400
 80064d0:	48000800 	.word	0x48000800
 80064d4:	48000c00 	.word	0x48000c00
 80064d8:	48001000 	.word	0x48001000
 80064dc:	48001400 	.word	0x48001400
 80064e0:	40010400 	.word	0x40010400
 80064e4:	40021000 	.word	0x40021000

080064e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064e8:	b10a      	cbz	r2, 80064ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064ea:	6181      	str	r1, [r0, #24]
 80064ec:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064ee:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop

080064f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80064f4:	b410      	push	{r4}
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80064f6:	4a3b      	ldr	r2, [pc, #236]	; (80065e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80064f8:	b970      	cbnz	r0, 8006518 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80064fa:	6813      	ldr	r3, [r2, #0]
 80064fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006504:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006508:	d023      	beq.n	8006552 <HAL_PWREx_ControlVoltageScaling+0x5e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800650a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 800650e:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006512:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8006516:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006518:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800651c:	d009      	beq.n	8006532 <HAL_PWREx_ControlVoltageScaling+0x3e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800651e:	6813      	ldr	r3, [r2, #0]
}
 8006520:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006524:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006528:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 800652c:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800652e:	6013      	str	r3, [r2, #0]
}
 8006530:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006532:	6813      	ldr	r3, [r2, #0]
 8006534:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800653c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006540:	d02f      	beq.n	80065a2 <HAL_PWREx_ControlVoltageScaling+0xae>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8006546:	2000      	movs	r0, #0
}
 8006548:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800654c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8006550:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006552:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006556:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800655a:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800655c:	4c22      	ldr	r4, [pc, #136]	; (80065e8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800655e:	4823      	ldr	r0, [pc, #140]	; (80065ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006560:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8006564:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006568:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	2132      	movs	r1, #50	; 0x32
 800656e:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006572:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006574:	fba0 0303 	umull	r0, r3, r0, r3
 8006578:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800657a:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800657c:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006580:	d506      	bpl.n	8006590 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8006582:	e000      	b.n	8006586 <HAL_PWREx_ControlVoltageScaling+0x92>
 8006584:	b123      	cbz	r3, 8006590 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8006586:	6951      	ldr	r1, [r2, #20]
 8006588:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800658a:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800658e:	d4f9      	bmi.n	8006584 <HAL_PWREx_ControlVoltageScaling+0x90>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006590:	4b14      	ldr	r3, [pc, #80]	; (80065e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	055c      	lsls	r4, r3, #21
  return HAL_OK;
 8006596:	bf54      	ite	pl
 8006598:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 800659a:	2003      	movmi	r0, #3
}
 800659c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065a0:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80065aa:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065ac:	4c0e      	ldr	r4, [pc, #56]	; (80065e8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80065ae:	480f      	ldr	r0, [pc, #60]	; (80065ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80065b0:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80065b4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80065b8:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	2132      	movs	r1, #50	; 0x32
 80065be:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065c2:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065c4:	fba0 0303 	umull	r0, r3, r0, r3
 80065c8:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065ca:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065cc:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065d0:	d5de      	bpl.n	8006590 <HAL_PWREx_ControlVoltageScaling+0x9c>
 80065d2:	e001      	b.n	80065d8 <HAL_PWREx_ControlVoltageScaling+0xe4>
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0db      	beq.n	8006590 <HAL_PWREx_ControlVoltageScaling+0x9c>
 80065d8:	6951      	ldr	r1, [r2, #20]
 80065da:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80065dc:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065e0:	d5d6      	bpl.n	8006590 <HAL_PWREx_ControlVoltageScaling+0x9c>
 80065e2:	e7f7      	b.n	80065d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
 80065e4:	40007000 	.word	0x40007000
 80065e8:	200004c8 	.word	0x200004c8
 80065ec:	431bde83 	.word	0x431bde83

080065f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80065f0:	4a02      	ldr	r2, [pc, #8]	; (80065fc <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80065f2:	6893      	ldr	r3, [r2, #8]
 80065f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065f8:	6093      	str	r3, [r2, #8]
}
 80065fa:	4770      	bx	lr
 80065fc:	40007000 	.word	0x40007000

08006600 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006600:	2800      	cmp	r0, #0
 8006602:	f000 81c3 	beq.w	800698c <HAL_RCC_OscConfig+0x38c>
{
 8006606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800660a:	6803      	ldr	r3, [r0, #0]
 800660c:	07d9      	lsls	r1, r3, #31
{
 800660e:	b082      	sub	sp, #8
 8006610:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006612:	d52d      	bpl.n	8006670 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006614:	49a6      	ldr	r1, [pc, #664]	; (80068b0 <HAL_RCC_OscConfig+0x2b0>)
 8006616:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006618:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800661a:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800661e:	2a0c      	cmp	r2, #12
 8006620:	f000 810a 	beq.w	8006838 <HAL_RCC_OscConfig+0x238>
 8006624:	2a08      	cmp	r2, #8
 8006626:	f000 810c 	beq.w	8006842 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800662a:	6863      	ldr	r3, [r4, #4]
 800662c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006630:	f000 8133 	beq.w	800689a <HAL_RCC_OscConfig+0x29a>
 8006634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006638:	f000 819b 	beq.w	8006972 <HAL_RCC_OscConfig+0x372>
 800663c:	4d9c      	ldr	r5, [pc, #624]	; (80068b0 <HAL_RCC_OscConfig+0x2b0>)
 800663e:	682a      	ldr	r2, [r5, #0]
 8006640:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006644:	602a      	str	r2, [r5, #0]
 8006646:	682a      	ldr	r2, [r5, #0]
 8006648:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800664c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800664e:	2b00      	cmp	r3, #0
 8006650:	f040 8128 	bne.w	80068a4 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006654:	f7fe fe3a 	bl	80052cc <HAL_GetTick>
 8006658:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800665a:	e005      	b.n	8006668 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800665c:	f7fe fe36 	bl	80052cc <HAL_GetTick>
 8006660:	1b80      	subs	r0, r0, r6
 8006662:	2864      	cmp	r0, #100	; 0x64
 8006664:	f200 8142 	bhi.w	80068ec <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006668:	682b      	ldr	r3, [r5, #0]
 800666a:	039f      	lsls	r7, r3, #14
 800666c:	d4f6      	bmi.n	800665c <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	079e      	lsls	r6, r3, #30
 8006672:	d528      	bpl.n	80066c6 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006674:	4a8e      	ldr	r2, [pc, #568]	; (80068b0 <HAL_RCC_OscConfig+0x2b0>)
 8006676:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006678:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800667a:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800667e:	2b0c      	cmp	r3, #12
 8006680:	f000 80ec 	beq.w	800685c <HAL_RCC_OscConfig+0x25c>
 8006684:	2b04      	cmp	r3, #4
 8006686:	f000 80ee 	beq.w	8006866 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800668a:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800668c:	4d88      	ldr	r5, [pc, #544]	; (80068b0 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 811d 	beq.w	80068ce <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8006694:	682b      	ldr	r3, [r5, #0]
 8006696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800669a:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800669c:	f7fe fe16 	bl	80052cc <HAL_GetTick>
 80066a0:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066a2:	e005      	b.n	80066b0 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066a4:	f7fe fe12 	bl	80052cc <HAL_GetTick>
 80066a8:	1b80      	subs	r0, r0, r6
 80066aa:	2802      	cmp	r0, #2
 80066ac:	f200 811e 	bhi.w	80068ec <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066b0:	682b      	ldr	r3, [r5, #0]
 80066b2:	0558      	lsls	r0, r3, #21
 80066b4:	d5f6      	bpl.n	80066a4 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066b6:	686b      	ldr	r3, [r5, #4]
 80066b8:	6922      	ldr	r2, [r4, #16]
 80066ba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80066be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80066c2:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	071a      	lsls	r2, r3, #28
 80066c8:	d519      	bpl.n	80066fe <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066ca:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066cc:	4d78      	ldr	r5, [pc, #480]	; (80068b0 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 809e 	beq.w	8006810 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 80066d4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80066d8:	f043 0301 	orr.w	r3, r3, #1
 80066dc:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e0:	f7fe fdf4 	bl	80052cc <HAL_GetTick>
 80066e4:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066e6:	e005      	b.n	80066f4 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066e8:	f7fe fdf0 	bl	80052cc <HAL_GetTick>
 80066ec:	1b80      	subs	r0, r0, r6
 80066ee:	2802      	cmp	r0, #2
 80066f0:	f200 80fc 	bhi.w	80068ec <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066f4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80066f8:	079f      	lsls	r7, r3, #30
 80066fa:	d5f5      	bpl.n	80066e8 <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	0759      	lsls	r1, r3, #29
 8006700:	d541      	bpl.n	8006786 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006702:	4b6b      	ldr	r3, [pc, #428]	; (80068b0 <HAL_RCC_OscConfig+0x2b0>)
 8006704:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006706:	00d2      	lsls	r2, r2, #3
 8006708:	f100 80f4 	bmi.w	80068f4 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800670c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800670e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006712:	659a      	str	r2, [r3, #88]	; 0x58
 8006714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800671a:	9301      	str	r3, [sp, #4]
 800671c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800671e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006720:	4e64      	ldr	r6, [pc, #400]	; (80068b4 <HAL_RCC_OscConfig+0x2b4>)
 8006722:	6833      	ldr	r3, [r6, #0]
 8006724:	05df      	lsls	r7, r3, #23
 8006726:	f140 8113 	bpl.w	8006950 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800672a:	68a3      	ldr	r3, [r4, #8]
 800672c:	2b01      	cmp	r3, #1
 800672e:	f000 80e3 	beq.w	80068f8 <HAL_RCC_OscConfig+0x2f8>
 8006732:	2b05      	cmp	r3, #5
 8006734:	f000 8169 	beq.w	8006a0a <HAL_RCC_OscConfig+0x40a>
 8006738:	4e5d      	ldr	r6, [pc, #372]	; (80068b0 <HAL_RCC_OscConfig+0x2b0>)
 800673a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800673e:	f022 0201 	bic.w	r2, r2, #1
 8006742:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8006746:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800674a:	f022 0204 	bic.w	r2, r2, #4
 800674e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006752:	2b00      	cmp	r3, #0
 8006754:	f040 80d7 	bne.w	8006906 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006758:	f7fe fdb8 	bl	80052cc <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800675c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006760:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006762:	e005      	b.n	8006770 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006764:	f7fe fdb2 	bl	80052cc <HAL_GetTick>
 8006768:	1bc0      	subs	r0, r0, r7
 800676a:	4540      	cmp	r0, r8
 800676c:	f200 80be 	bhi.w	80068ec <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006770:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8006774:	079a      	lsls	r2, r3, #30
 8006776:	d4f5      	bmi.n	8006764 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006778:	b125      	cbz	r5, 8006784 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800677a:	4a4d      	ldr	r2, [pc, #308]	; (80068b0 <HAL_RCC_OscConfig+0x2b0>)
 800677c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800677e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006782:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	069b      	lsls	r3, r3, #26
 8006788:	d518      	bpl.n	80067bc <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800678a:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800678c:	4d48      	ldr	r5, [pc, #288]	; (80068b0 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 80ca 	beq.w	8006928 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8006794:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006798:	f043 0301 	orr.w	r3, r3, #1
 800679c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a0:	f7fe fd94 	bl	80052cc <HAL_GetTick>
 80067a4:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80067a6:	e005      	b.n	80067b4 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067a8:	f7fe fd90 	bl	80052cc <HAL_GetTick>
 80067ac:	1b80      	subs	r0, r0, r6
 80067ae:	2802      	cmp	r0, #2
 80067b0:	f200 809c 	bhi.w	80068ec <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80067b4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80067b8:	079f      	lsls	r7, r3, #30
 80067ba:	d5f5      	bpl.n	80067a8 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80067bc:	69e0      	ldr	r0, [r4, #28]
 80067be:	b318      	cbz	r0, 8006808 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067c0:	4d3b      	ldr	r5, [pc, #236]	; (80068b0 <HAL_RCC_OscConfig+0x2b0>)
 80067c2:	68ab      	ldr	r3, [r5, #8]
 80067c4:	f003 030c 	and.w	r3, r3, #12
 80067c8:	2b0c      	cmp	r3, #12
 80067ca:	f000 812c 	beq.w	8006a26 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ce:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80067d0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80067d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067d6:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80067d8:	f000 80da 	beq.w	8006990 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80067dc:	68eb      	ldr	r3, [r5, #12]
 80067de:	f023 0303 	bic.w	r3, r3, #3
 80067e2:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80067e4:	68eb      	ldr	r3, [r5, #12]
 80067e6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80067ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ee:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f0:	f7fe fd6c 	bl	80052cc <HAL_GetTick>
 80067f4:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067f6:	e004      	b.n	8006802 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067f8:	f7fe fd68 	bl	80052cc <HAL_GetTick>
 80067fc:	1b00      	subs	r0, r0, r4
 80067fe:	2802      	cmp	r0, #2
 8006800:	d874      	bhi.n	80068ec <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006802:	682b      	ldr	r3, [r5, #0]
 8006804:	019b      	lsls	r3, r3, #6
 8006806:	d4f7      	bmi.n	80067f8 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8006808:	2000      	movs	r0, #0
}
 800680a:	b002      	add	sp, #8
 800680c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8006810:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006814:	f023 0301 	bic.w	r3, r3, #1
 8006818:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800681c:	f7fe fd56 	bl	80052cc <HAL_GetTick>
 8006820:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006822:	e004      	b.n	800682e <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006824:	f7fe fd52 	bl	80052cc <HAL_GetTick>
 8006828:	1b80      	subs	r0, r0, r6
 800682a:	2802      	cmp	r0, #2
 800682c:	d85e      	bhi.n	80068ec <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800682e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006832:	0798      	lsls	r0, r3, #30
 8006834:	d4f6      	bmi.n	8006824 <HAL_RCC_OscConfig+0x224>
 8006836:	e761      	b.n	80066fc <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006838:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800683c:	2903      	cmp	r1, #3
 800683e:	f47f aef4 	bne.w	800662a <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006842:	4a1b      	ldr	r2, [pc, #108]	; (80068b0 <HAL_RCC_OscConfig+0x2b0>)
 8006844:	6812      	ldr	r2, [r2, #0]
 8006846:	0392      	lsls	r2, r2, #14
 8006848:	f57f af12 	bpl.w	8006670 <HAL_RCC_OscConfig+0x70>
 800684c:	6862      	ldr	r2, [r4, #4]
 800684e:	2a00      	cmp	r2, #0
 8006850:	f47f af0e 	bne.w	8006670 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8006854:	2001      	movs	r0, #1
}
 8006856:	b002      	add	sp, #8
 8006858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800685c:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006860:	2a02      	cmp	r2, #2
 8006862:	f47f af12 	bne.w	800668a <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006866:	4b12      	ldr	r3, [pc, #72]	; (80068b0 <HAL_RCC_OscConfig+0x2b0>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	055d      	lsls	r5, r3, #21
 800686c:	d502      	bpl.n	8006874 <HAL_RCC_OscConfig+0x274>
 800686e:	68e3      	ldr	r3, [r4, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0ef      	beq.n	8006854 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006874:	4a0e      	ldr	r2, [pc, #56]	; (80068b0 <HAL_RCC_OscConfig+0x2b0>)
 8006876:	6920      	ldr	r0, [r4, #16]
 8006878:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800687a:	490f      	ldr	r1, [pc, #60]	; (80068b8 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800687c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006880:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006884:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006886:	6808      	ldr	r0, [r1, #0]
 8006888:	f7fe fcde 	bl	8005248 <HAL_InitTick>
 800688c:	2800      	cmp	r0, #0
 800688e:	d1e1      	bne.n	8006854 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	071a      	lsls	r2, r3, #28
 8006894:	f57f af33 	bpl.w	80066fe <HAL_RCC_OscConfig+0xfe>
 8006898:	e717      	b.n	80066ca <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800689a:	4a05      	ldr	r2, [pc, #20]	; (80068b0 <HAL_RCC_OscConfig+0x2b0>)
 800689c:	6813      	ldr	r3, [r2, #0]
 800689e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068a2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80068a4:	f7fe fd12 	bl	80052cc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068a8:	4e01      	ldr	r6, [pc, #4]	; (80068b0 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80068aa:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068ac:	e00b      	b.n	80068c6 <HAL_RCC_OscConfig+0x2c6>
 80068ae:	bf00      	nop
 80068b0:	40021000 	.word	0x40021000
 80068b4:	40007000 	.word	0x40007000
 80068b8:	200004d0 	.word	0x200004d0
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068bc:	f7fe fd06 	bl	80052cc <HAL_GetTick>
 80068c0:	1b40      	subs	r0, r0, r5
 80068c2:	2864      	cmp	r0, #100	; 0x64
 80068c4:	d812      	bhi.n	80068ec <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068c6:	6833      	ldr	r3, [r6, #0]
 80068c8:	039b      	lsls	r3, r3, #14
 80068ca:	d5f7      	bpl.n	80068bc <HAL_RCC_OscConfig+0x2bc>
 80068cc:	e6cf      	b.n	800666e <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 80068ce:	682b      	ldr	r3, [r5, #0]
 80068d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80068d6:	f7fe fcf9 	bl	80052cc <HAL_GetTick>
 80068da:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068dc:	682b      	ldr	r3, [r5, #0]
 80068de:	0559      	lsls	r1, r3, #21
 80068e0:	d5d6      	bpl.n	8006890 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068e2:	f7fe fcf3 	bl	80052cc <HAL_GetTick>
 80068e6:	1b80      	subs	r0, r0, r6
 80068e8:	2802      	cmp	r0, #2
 80068ea:	d9f7      	bls.n	80068dc <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 80068ec:	2003      	movs	r0, #3
}
 80068ee:	b002      	add	sp, #8
 80068f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 80068f4:	2500      	movs	r5, #0
 80068f6:	e713      	b.n	8006720 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068f8:	4a65      	ldr	r2, [pc, #404]	; (8006a90 <HAL_RCC_OscConfig+0x490>)
 80068fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80068fe:	f043 0301 	orr.w	r3, r3, #1
 8006902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8006906:	f7fe fce1 	bl	80052cc <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800690a:	4f61      	ldr	r7, [pc, #388]	; (8006a90 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 800690c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800690e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006912:	e004      	b.n	800691e <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006914:	f7fe fcda 	bl	80052cc <HAL_GetTick>
 8006918:	1b80      	subs	r0, r0, r6
 800691a:	4540      	cmp	r0, r8
 800691c:	d8e6      	bhi.n	80068ec <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800691e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006922:	0799      	lsls	r1, r3, #30
 8006924:	d5f6      	bpl.n	8006914 <HAL_RCC_OscConfig+0x314>
 8006926:	e727      	b.n	8006778 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8006928:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800692c:	f023 0301 	bic.w	r3, r3, #1
 8006930:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8006934:	f7fe fcca 	bl	80052cc <HAL_GetTick>
 8006938:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800693a:	e004      	b.n	8006946 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800693c:	f7fe fcc6 	bl	80052cc <HAL_GetTick>
 8006940:	1b80      	subs	r0, r0, r6
 8006942:	2802      	cmp	r0, #2
 8006944:	d8d2      	bhi.n	80068ec <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006946:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800694a:	0798      	lsls	r0, r3, #30
 800694c:	d4f6      	bmi.n	800693c <HAL_RCC_OscConfig+0x33c>
 800694e:	e735      	b.n	80067bc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006950:	6833      	ldr	r3, [r6, #0]
 8006952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006956:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006958:	f7fe fcb8 	bl	80052cc <HAL_GetTick>
 800695c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800695e:	6833      	ldr	r3, [r6, #0]
 8006960:	05d8      	lsls	r0, r3, #23
 8006962:	f53f aee2 	bmi.w	800672a <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006966:	f7fe fcb1 	bl	80052cc <HAL_GetTick>
 800696a:	1bc0      	subs	r0, r0, r7
 800696c:	2802      	cmp	r0, #2
 800696e:	d9f6      	bls.n	800695e <HAL_RCC_OscConfig+0x35e>
 8006970:	e7bc      	b.n	80068ec <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006972:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006976:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006988:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800698a:	e78b      	b.n	80068a4 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 800698c:	2001      	movs	r0, #1
}
 800698e:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8006990:	f7fe fc9c 	bl	80052cc <HAL_GetTick>
 8006994:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006996:	e004      	b.n	80069a2 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006998:	f7fe fc98 	bl	80052cc <HAL_GetTick>
 800699c:	1b80      	subs	r0, r0, r6
 800699e:	2802      	cmp	r0, #2
 80069a0:	d8a4      	bhi.n	80068ec <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069a2:	682b      	ldr	r3, [r5, #0]
 80069a4:	0199      	lsls	r1, r3, #6
 80069a6:	d4f7      	bmi.n	8006998 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069a8:	68e9      	ldr	r1, [r5, #12]
 80069aa:	4b3a      	ldr	r3, [pc, #232]	; (8006a94 <HAL_RCC_OscConfig+0x494>)
 80069ac:	6a22      	ldr	r2, [r4, #32]
 80069ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069b0:	4e37      	ldr	r6, [pc, #220]	; (8006a90 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069b2:	400b      	ands	r3, r1
 80069b4:	4313      	orrs	r3, r2
 80069b6:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 80069ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80069be:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80069c2:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80069c6:	3801      	subs	r0, #1
 80069c8:	0849      	lsrs	r1, r1, #1
 80069ca:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80069ce:	3901      	subs	r1, #1
 80069d0:	0852      	lsrs	r2, r2, #1
 80069d2:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80069d6:	3a01      	subs	r2, #1
 80069d8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80069dc:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80069de:	682b      	ldr	r3, [r5, #0]
 80069e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069e4:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069e6:	68eb      	ldr	r3, [r5, #12]
 80069e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ec:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80069ee:	f7fe fc6d 	bl	80052cc <HAL_GetTick>
 80069f2:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069f4:	e005      	b.n	8006a02 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f6:	f7fe fc69 	bl	80052cc <HAL_GetTick>
 80069fa:	1b00      	subs	r0, r0, r4
 80069fc:	2802      	cmp	r0, #2
 80069fe:	f63f af75 	bhi.w	80068ec <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a02:	6833      	ldr	r3, [r6, #0]
 8006a04:	019a      	lsls	r2, r3, #6
 8006a06:	d5f6      	bpl.n	80069f6 <HAL_RCC_OscConfig+0x3f6>
 8006a08:	e6fe      	b.n	8006808 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a0a:	4b21      	ldr	r3, [pc, #132]	; (8006a90 <HAL_RCC_OscConfig+0x490>)
 8006a0c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006a10:	f042 0204 	orr.w	r2, r2, #4
 8006a14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006a18:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006a1c:	f042 0201 	orr.w	r2, r2, #1
 8006a20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a24:	e76f      	b.n	8006906 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a26:	2801      	cmp	r0, #1
 8006a28:	f43f aeef 	beq.w	800680a <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8006a2c:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a2e:	6a22      	ldr	r2, [r4, #32]
 8006a30:	f003 0103 	and.w	r1, r3, #3
 8006a34:	4291      	cmp	r1, r2
 8006a36:	f47f af0d 	bne.w	8006854 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006a3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a40:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a42:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8006a46:	f47f af05 	bne.w	8006854 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a4a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006a4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a50:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006a54:	f47f aefe 	bne.w	8006854 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a58:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006a5a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a5e:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8006a62:	f47f aef7 	bne.w	8006854 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a66:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006a68:	0852      	lsrs	r2, r2, #1
 8006a6a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8006a6e:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a70:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8006a74:	f47f aeee 	bne.w	8006854 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a78:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006a7a:	0852      	lsrs	r2, r2, #1
 8006a7c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8006a80:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a82:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 8006a86:	bf14      	ite	ne
 8006a88:	2001      	movne	r0, #1
 8006a8a:	2000      	moveq	r0, #0
 8006a8c:	e6bd      	b.n	800680a <HAL_RCC_OscConfig+0x20a>
 8006a8e:	bf00      	nop
 8006a90:	40021000 	.word	0x40021000
 8006a94:	019f800c 	.word	0x019f800c

08006a98 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006a98:	4b18      	ldr	r3, [pc, #96]	; (8006afc <HAL_RCC_GetSysClockFreq+0x64>)
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	f002 020c 	and.w	r2, r2, #12
 8006aa0:	2a04      	cmp	r2, #4
 8006aa2:	d027      	beq.n	8006af4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006aa4:	689a      	ldr	r2, [r3, #8]
 8006aa6:	f002 020c 	and.w	r2, r2, #12
 8006aaa:	2a08      	cmp	r2, #8
 8006aac:	d024      	beq.n	8006af8 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006aae:	689a      	ldr	r2, [r3, #8]
 8006ab0:	f002 020c 	and.w	r2, r2, #12
 8006ab4:	2a0c      	cmp	r2, #12
 8006ab6:	d001      	beq.n	8006abc <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8006ab8:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8006aba:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006abc:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006abe:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ac0:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8006ac4:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ac6:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8006aca:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ace:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ad0:	bf0c      	ite	eq
 8006ad2:	4b0b      	ldreq	r3, [pc, #44]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ad4:	4b0b      	ldrne	r3, [pc, #44]	; (8006b04 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006ad6:	fbb3 f2f2 	udiv	r2, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ada:	4b08      	ldr	r3, [pc, #32]	; (8006afc <HAL_RCC_GetSysClockFreq+0x64>)
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ae2:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ae6:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ae8:	fb02 f000 	mul.w	r0, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006aec:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8006aee:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8006af2:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8006af4:	4803      	ldr	r0, [pc, #12]	; (8006b04 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006af6:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8006af8:	4801      	ldr	r0, [pc, #4]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x68>)
 8006afa:	4770      	bx	lr
 8006afc:	40021000 	.word	0x40021000
 8006b00:	016e3600 	.word	0x016e3600
 8006b04:	00f42400 	.word	0x00f42400

08006b08 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	f000 80ee 	beq.w	8006cea <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b0e:	4a7f      	ldr	r2, [pc, #508]	; (8006d0c <HAL_RCC_ClockConfig+0x204>)
{
 8006b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b14:	6813      	ldr	r3, [r2, #0]
 8006b16:	f003 030f 	and.w	r3, r3, #15
 8006b1a:	428b      	cmp	r3, r1
 8006b1c:	460d      	mov	r5, r1
 8006b1e:	4604      	mov	r4, r0
 8006b20:	d20c      	bcs.n	8006b3c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b22:	6813      	ldr	r3, [r2, #0]
 8006b24:	f023 030f 	bic.w	r3, r3, #15
 8006b28:	430b      	orrs	r3, r1
 8006b2a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b2c:	6813      	ldr	r3, [r2, #0]
 8006b2e:	f003 030f 	and.w	r3, r3, #15
 8006b32:	428b      	cmp	r3, r1
 8006b34:	d002      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8006b36:	2001      	movs	r0, #1
}
 8006b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	07df      	lsls	r7, r3, #31
 8006b40:	d563      	bpl.n	8006c0a <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b42:	6862      	ldr	r2, [r4, #4]
 8006b44:	2a03      	cmp	r2, #3
 8006b46:	f000 809a 	beq.w	8006c7e <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b4a:	4b71      	ldr	r3, [pc, #452]	; (8006d10 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b4c:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b4e:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b50:	f000 8091 	beq.w	8006c76 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b54:	055b      	lsls	r3, r3, #21
 8006b56:	d5ee      	bpl.n	8006b36 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006b58:	f7ff ff9e 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8006b5c:	4b6d      	ldr	r3, [pc, #436]	; (8006d14 <HAL_RCC_ClockConfig+0x20c>)
 8006b5e:	4298      	cmp	r0, r3
 8006b60:	f200 80c5 	bhi.w	8006cee <HAL_RCC_ClockConfig+0x1e6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b64:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006b66:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b6a:	4e69      	ldr	r6, [pc, #420]	; (8006d10 <HAL_RCC_ClockConfig+0x208>)
 8006b6c:	68b3      	ldr	r3, [r6, #8]
 8006b6e:	f023 0303 	bic.w	r3, r3, #3
 8006b72:	431a      	orrs	r2, r3
 8006b74:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8006b76:	f7fe fba9 	bl	80052cc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b7a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006b7e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b80:	e004      	b.n	8006b8c <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b82:	f7fe fba3 	bl	80052cc <HAL_GetTick>
 8006b86:	1bc0      	subs	r0, r0, r7
 8006b88:	4540      	cmp	r0, r8
 8006b8a:	d871      	bhi.n	8006c70 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b8c:	68b3      	ldr	r3, [r6, #8]
 8006b8e:	6862      	ldr	r2, [r4, #4]
 8006b90:	f003 030c 	and.w	r3, r3, #12
 8006b94:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006b98:	d1f3      	bne.n	8006b82 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	079f      	lsls	r7, r3, #30
 8006b9e:	d436      	bmi.n	8006c0e <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8006ba0:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8006ba4:	d103      	bne.n	8006bae <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006ba6:	68b3      	ldr	r3, [r6, #8]
 8006ba8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bac:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bae:	4e57      	ldr	r6, [pc, #348]	; (8006d0c <HAL_RCC_ClockConfig+0x204>)
 8006bb0:	6833      	ldr	r3, [r6, #0]
 8006bb2:	f003 030f 	and.w	r3, r3, #15
 8006bb6:	42ab      	cmp	r3, r5
 8006bb8:	d846      	bhi.n	8006c48 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	075a      	lsls	r2, r3, #29
 8006bbe:	d506      	bpl.n	8006bce <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bc0:	4953      	ldr	r1, [pc, #332]	; (8006d10 <HAL_RCC_ClockConfig+0x208>)
 8006bc2:	68e0      	ldr	r0, [r4, #12]
 8006bc4:	688a      	ldr	r2, [r1, #8]
 8006bc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bca:	4302      	orrs	r2, r0
 8006bcc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bce:	071b      	lsls	r3, r3, #28
 8006bd0:	d507      	bpl.n	8006be2 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bd2:	4a4f      	ldr	r2, [pc, #316]	; (8006d10 <HAL_RCC_ClockConfig+0x208>)
 8006bd4:	6921      	ldr	r1, [r4, #16]
 8006bd6:	6893      	ldr	r3, [r2, #8]
 8006bd8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006bdc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006be0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006be2:	f7ff ff59 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
 8006be6:	4a4a      	ldr	r2, [pc, #296]	; (8006d10 <HAL_RCC_ClockConfig+0x208>)
 8006be8:	4c4b      	ldr	r4, [pc, #300]	; (8006d18 <HAL_RCC_ClockConfig+0x210>)
 8006bea:	6892      	ldr	r2, [r2, #8]
 8006bec:	494b      	ldr	r1, [pc, #300]	; (8006d1c <HAL_RCC_ClockConfig+0x214>)
 8006bee:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8006bf6:	484a      	ldr	r0, [pc, #296]	; (8006d20 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006bf8:	f002 021f 	and.w	r2, r2, #31
 8006bfc:	40d3      	lsrs	r3, r2
 8006bfe:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8006c00:	6800      	ldr	r0, [r0, #0]
}
 8006c02:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8006c06:	f7fe bb1f 	b.w	8005248 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c0a:	079e      	lsls	r6, r3, #30
 8006c0c:	d5cf      	bpl.n	8006bae <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c0e:	0758      	lsls	r0, r3, #29
 8006c10:	d504      	bpl.n	8006c1c <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c12:	493f      	ldr	r1, [pc, #252]	; (8006d10 <HAL_RCC_ClockConfig+0x208>)
 8006c14:	688a      	ldr	r2, [r1, #8]
 8006c16:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006c1a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c1c:	0719      	lsls	r1, r3, #28
 8006c1e:	d506      	bpl.n	8006c2e <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006c20:	4a3b      	ldr	r2, [pc, #236]	; (8006d10 <HAL_RCC_ClockConfig+0x208>)
 8006c22:	6893      	ldr	r3, [r2, #8]
 8006c24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c28:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c2c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c2e:	4a38      	ldr	r2, [pc, #224]	; (8006d10 <HAL_RCC_ClockConfig+0x208>)
 8006c30:	68a1      	ldr	r1, [r4, #8]
 8006c32:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c34:	4e35      	ldr	r6, [pc, #212]	; (8006d0c <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c3a:	430b      	orrs	r3, r1
 8006c3c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c3e:	6833      	ldr	r3, [r6, #0]
 8006c40:	f003 030f 	and.w	r3, r3, #15
 8006c44:	42ab      	cmp	r3, r5
 8006c46:	d9b8      	bls.n	8006bba <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c48:	6833      	ldr	r3, [r6, #0]
 8006c4a:	f023 030f 	bic.w	r3, r3, #15
 8006c4e:	432b      	orrs	r3, r5
 8006c50:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006c52:	f7fe fb3b 	bl	80052cc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c56:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006c5a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c5c:	6833      	ldr	r3, [r6, #0]
 8006c5e:	f003 030f 	and.w	r3, r3, #15
 8006c62:	42ab      	cmp	r3, r5
 8006c64:	d0a9      	beq.n	8006bba <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c66:	f7fe fb31 	bl	80052cc <HAL_GetTick>
 8006c6a:	1bc0      	subs	r0, r0, r7
 8006c6c:	4540      	cmp	r0, r8
 8006c6e:	d9f5      	bls.n	8006c5c <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8006c70:	2003      	movs	r0, #3
}
 8006c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c76:	039a      	lsls	r2, r3, #14
 8006c78:	f53f af6e 	bmi.w	8006b58 <HAL_RCC_ClockConfig+0x50>
 8006c7c:	e75b      	b.n	8006b36 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c7e:	4924      	ldr	r1, [pc, #144]	; (8006d10 <HAL_RCC_ClockConfig+0x208>)
 8006c80:	6808      	ldr	r0, [r1, #0]
 8006c82:	0180      	lsls	r0, r0, #6
 8006c84:	f57f af57 	bpl.w	8006b36 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c88:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c8a:	68c8      	ldr	r0, [r1, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c8c:	68c9      	ldr	r1, [r1, #12]
      if(pllfreq > 80000000U)
 8006c8e:	4f21      	ldr	r7, [pc, #132]	; (8006d14 <HAL_RCC_ClockConfig+0x20c>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c90:	f006 0603 	and.w	r6, r6, #3
  switch (pllsource)
 8006c94:	2e03      	cmp	r6, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c96:	f3c0 1003 	ubfx	r0, r0, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c9a:	bf0c      	ite	eq
 8006c9c:	4e21      	ldreq	r6, [pc, #132]	; (8006d24 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c9e:	4e22      	ldrne	r6, [pc, #136]	; (8006d28 <HAL_RCC_ClockConfig+0x220>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ca0:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ca2:	fbb6 f0f0 	udiv	r0, r6, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ca6:	4e1a      	ldr	r6, [pc, #104]	; (8006d10 <HAL_RCC_ClockConfig+0x208>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ca8:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8006cac:	fb00 f101 	mul.w	r1, r0, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006cb0:	68f0      	ldr	r0, [r6, #12]
 8006cb2:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8006cba:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8006cbe:	42b9      	cmp	r1, r7
 8006cc0:	d920      	bls.n	8006d04 <HAL_RCC_ClockConfig+0x1fc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006cc2:	68b1      	ldr	r1, [r6, #8]
 8006cc4:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8006cc8:	d005      	beq.n	8006cd6 <HAL_RCC_ClockConfig+0x1ce>
 8006cca:	f013 0902 	ands.w	r9, r3, #2
 8006cce:	f43f af4c 	beq.w	8006b6a <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006cd2:	68a3      	ldr	r3, [r4, #8]
 8006cd4:	b9b3      	cbnz	r3, 8006d04 <HAL_RCC_ClockConfig+0x1fc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006cd6:	490e      	ldr	r1, [pc, #56]	; (8006d10 <HAL_RCC_ClockConfig+0x208>)
 8006cd8:	688b      	ldr	r3, [r1, #8]
 8006cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce2:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006ce4:	f04f 0980 	mov.w	r9, #128	; 0x80
 8006ce8:	e73f      	b.n	8006b6a <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8006cea:	2001      	movs	r0, #1
}
 8006cec:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006cee:	4a08      	ldr	r2, [pc, #32]	; (8006d10 <HAL_RCC_ClockConfig+0x208>)
 8006cf0:	6893      	ldr	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006cf2:	f04f 0980 	mov.w	r9, #128	; 0x80
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006cf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cfa:	ea43 0309 	orr.w	r3, r3, r9
 8006cfe:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d00:	6862      	ldr	r2, [r4, #4]
 8006d02:	e732      	b.n	8006b6a <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006d04:	f04f 0900 	mov.w	r9, #0
 8006d08:	e72f      	b.n	8006b6a <HAL_RCC_ClockConfig+0x62>
 8006d0a:	bf00      	nop
 8006d0c:	40022000 	.word	0x40022000
 8006d10:	40021000 	.word	0x40021000
 8006d14:	04c4b400 	.word	0x04c4b400
 8006d18:	0800d64c 	.word	0x0800d64c
 8006d1c:	200004c8 	.word	0x200004c8
 8006d20:	200004d0 	.word	0x200004d0
 8006d24:	016e3600 	.word	0x016e3600
 8006d28:	00f42400 	.word	0x00f42400

08006d2c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8006d2c:	4b01      	ldr	r3, [pc, #4]	; (8006d34 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	200004c8 	.word	0x200004c8

08006d38 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006d38:	4b05      	ldr	r3, [pc, #20]	; (8006d50 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006d3a:	4a06      	ldr	r2, [pc, #24]	; (8006d54 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006d3e:	4906      	ldr	r1, [pc, #24]	; (8006d58 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006d40:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006d44:	6808      	ldr	r0, [r1, #0]
 8006d46:	5cd3      	ldrb	r3, [r2, r3]
 8006d48:	f003 031f 	and.w	r3, r3, #31
}
 8006d4c:	40d8      	lsrs	r0, r3
 8006d4e:	4770      	bx	lr
 8006d50:	40021000 	.word	0x40021000
 8006d54:	0800d65c 	.word	0x0800d65c
 8006d58:	200004c8 	.word	0x200004c8

08006d5c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006d5c:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006d5e:	4a06      	ldr	r2, [pc, #24]	; (8006d78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006d60:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006d62:	4906      	ldr	r1, [pc, #24]	; (8006d7c <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006d64:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006d68:	6808      	ldr	r0, [r1, #0]
 8006d6a:	5cd3      	ldrb	r3, [r2, r3]
 8006d6c:	f003 031f 	and.w	r3, r3, #31
}
 8006d70:	40d8      	lsrs	r0, r3
 8006d72:	4770      	bx	lr
 8006d74:	40021000 	.word	0x40021000
 8006d78:	0800d65c 	.word	0x0800d65c
 8006d7c:	200004c8 	.word	0x200004c8

08006d80 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8006d80:	4a02      	ldr	r2, [pc, #8]	; (8006d8c <HAL_RCC_EnableCSS+0xc>)
 8006d82:	6813      	ldr	r3, [r2, #0]
 8006d84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d88:	6013      	str	r3, [r2, #0]
}
 8006d8a:	4770      	bx	lr
 8006d8c:	40021000 	.word	0x40021000

08006d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d94:	6803      	ldr	r3, [r0, #0]
{
 8006d96:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d98:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8006d9c:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d9e:	d056      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006da0:	4b9f      	ldr	r3, [pc, #636]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006da2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006da4:	00d5      	lsls	r5, r2, #3
 8006da6:	f140 810c 	bpl.w	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 8006daa:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006dac:	4d9d      	ldr	r5, [pc, #628]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006dae:	682b      	ldr	r3, [r5, #0]
 8006db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006db4:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006db6:	f7fe fa89 	bl	80052cc <HAL_GetTick>
 8006dba:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dbc:	e005      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dbe:	f7fe fa85 	bl	80052cc <HAL_GetTick>
 8006dc2:	1b83      	subs	r3, r0, r6
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	f200 8107 	bhi.w	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dca:	682b      	ldr	r3, [r5, #0]
 8006dcc:	05d8      	lsls	r0, r3, #23
 8006dce:	d5f6      	bpl.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006dd0:	4d93      	ldr	r5, [pc, #588]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006dd2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006dd6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006dda:	d027      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8006ddc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d025      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006de2:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006de6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dee:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006df2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dfa:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006dfe:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e02:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8006e04:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e08:	f140 8108 	bpl.w	800701c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0c:	f7fe fa5e 	bl	80052cc <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e10:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006e14:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e16:	e005      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e18:	f7fe fa58 	bl	80052cc <HAL_GetTick>
 8006e1c:	1b80      	subs	r0, r0, r6
 8006e1e:	4540      	cmp	r0, r8
 8006e20:	f200 80da 	bhi.w	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e24:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006e28:	079b      	lsls	r3, r3, #30
 8006e2a:	d5f5      	bpl.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x88>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e2e:	497c      	ldr	r1, [pc, #496]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006e30:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006e34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e3e:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e40:	b127      	cbz	r7, 8006e4c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e42:	4a77      	ldr	r2, [pc, #476]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006e44:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	07de      	lsls	r6, r3, #31
 8006e50:	d508      	bpl.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e52:	4973      	ldr	r1, [pc, #460]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006e54:	6865      	ldr	r5, [r4, #4]
 8006e56:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006e5a:	f022 0203 	bic.w	r2, r2, #3
 8006e5e:	432a      	orrs	r2, r5
 8006e60:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e64:	079d      	lsls	r5, r3, #30
 8006e66:	d508      	bpl.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e68:	496d      	ldr	r1, [pc, #436]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006e6a:	68a5      	ldr	r5, [r4, #8]
 8006e6c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006e70:	f022 020c 	bic.w	r2, r2, #12
 8006e74:	432a      	orrs	r2, r5
 8006e76:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e7a:	0759      	lsls	r1, r3, #29
 8006e7c:	d508      	bpl.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e7e:	4968      	ldr	r1, [pc, #416]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006e80:	68e5      	ldr	r5, [r4, #12]
 8006e82:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006e86:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8006e8a:	432a      	orrs	r2, r5
 8006e8c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e90:	071a      	lsls	r2, r3, #28
 8006e92:	d508      	bpl.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e94:	4962      	ldr	r1, [pc, #392]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006e96:	6925      	ldr	r5, [r4, #16]
 8006e98:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006e9c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006ea0:	432a      	orrs	r2, r5
 8006ea2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ea6:	069f      	lsls	r7, r3, #26
 8006ea8:	d508      	bpl.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006eaa:	495d      	ldr	r1, [pc, #372]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006eac:	6965      	ldr	r5, [r4, #20]
 8006eae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006eb2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006eb6:	432a      	orrs	r2, r5
 8006eb8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ebc:	065e      	lsls	r6, r3, #25
 8006ebe:	d508      	bpl.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ec0:	4957      	ldr	r1, [pc, #348]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006ec2:	69a5      	ldr	r5, [r4, #24]
 8006ec4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006ec8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006ecc:	432a      	orrs	r2, r5
 8006ece:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ed2:	061d      	lsls	r5, r3, #24
 8006ed4:	d508      	bpl.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ed6:	4952      	ldr	r1, [pc, #328]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006ed8:	69e5      	ldr	r5, [r4, #28]
 8006eda:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006ede:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006ee2:	432a      	orrs	r2, r5
 8006ee4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ee8:	05d9      	lsls	r1, r3, #23
 8006eea:	d508      	bpl.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006eec:	494c      	ldr	r1, [pc, #304]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006eee:	6a25      	ldr	r5, [r4, #32]
 8006ef0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006ef4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006ef8:	432a      	orrs	r2, r5
 8006efa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006efe:	059a      	lsls	r2, r3, #22
 8006f00:	d508      	bpl.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f02:	4947      	ldr	r1, [pc, #284]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006f04:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006f06:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006f0a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8006f0e:	432a      	orrs	r2, r5
 8006f10:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f14:	055f      	lsls	r7, r3, #21
 8006f16:	d50b      	bpl.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f18:	4941      	ldr	r1, [pc, #260]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006f1a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006f1c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006f20:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006f24:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006f26:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f2a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006f2e:	d055      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006f30:	051e      	lsls	r6, r3, #20
 8006f32:	d50b      	bpl.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f34:	493a      	ldr	r1, [pc, #232]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006f36:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006f38:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006f3c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006f40:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006f42:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f46:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006f4a:	d04c      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f4c:	04dd      	lsls	r5, r3, #19
 8006f4e:	d50b      	bpl.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f50:	4933      	ldr	r1, [pc, #204]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006f52:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8006f54:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006f58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006f5c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006f5e:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f62:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006f66:	d043      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f68:	0499      	lsls	r1, r3, #18
 8006f6a:	d50b      	bpl.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f6c:	492c      	ldr	r1, [pc, #176]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006f6e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006f70:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006f74:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006f78:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006f7a:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f7e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006f82:	d03a      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f84:	045a      	lsls	r2, r3, #17
 8006f86:	d50b      	bpl.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f88:	4925      	ldr	r1, [pc, #148]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006f8a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8006f8c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006f90:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006f94:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006f96:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f9a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006f9e:	d031      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006fa0:	041b      	lsls	r3, r3, #16
 8006fa2:	d50b      	bpl.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006fa4:	4a1e      	ldr	r2, [pc, #120]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006fa6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006fa8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006fac:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006fb0:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006fb2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006fb6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006fba:	d028      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 8006fbc:	b002      	add	sp, #8
 8006fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fc2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006fc4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006fc8:	659a      	str	r2, [r3, #88]	; 0x58
 8006fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fd0:	9301      	str	r3, [sp, #4]
 8006fd2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006fd4:	2701      	movs	r7, #1
 8006fd6:	e6e9      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8006fd8:	2003      	movs	r0, #3
 8006fda:	e731      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fdc:	68ca      	ldr	r2, [r1, #12]
 8006fde:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006fe2:	60ca      	str	r2, [r1, #12]
 8006fe4:	e7a4      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fe6:	68ca      	ldr	r2, [r1, #12]
 8006fe8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006fec:	60ca      	str	r2, [r1, #12]
 8006fee:	e7ad      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ff0:	68ca      	ldr	r2, [r1, #12]
 8006ff2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006ff6:	60ca      	str	r2, [r1, #12]
 8006ff8:	e7b6      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ffa:	68ca      	ldr	r2, [r1, #12]
 8006ffc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007000:	60ca      	str	r2, [r1, #12]
 8007002:	e7bf      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007004:	68ca      	ldr	r2, [r1, #12]
 8007006:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800700a:	60ca      	str	r2, [r1, #12]
 800700c:	e7c8      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800700e:	68d3      	ldr	r3, [r2, #12]
 8007010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007014:	60d3      	str	r3, [r2, #12]
}
 8007016:	b002      	add	sp, #8
 8007018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800701c:	4613      	mov	r3, r2
 800701e:	e706      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8007020:	40021000 	.word	0x40021000
 8007024:	40007000 	.word	0x40007000

08007028 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007028:	6a03      	ldr	r3, [r0, #32]
 800702a:	f023 0301 	bic.w	r3, r3, #1
 800702e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007030:	6a03      	ldr	r3, [r0, #32]
{
 8007032:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007034:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007036:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007038:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800703a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800703e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007042:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007044:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8007046:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800704a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800704c:	4d13      	ldr	r5, [pc, #76]	; (800709c <TIM_OC1_SetConfig+0x74>)
 800704e:	42a8      	cmp	r0, r5
 8007050:	d00f      	beq.n	8007072 <TIM_OC1_SetConfig+0x4a>
 8007052:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007056:	42a8      	cmp	r0, r5
 8007058:	d00b      	beq.n	8007072 <TIM_OC1_SetConfig+0x4a>
 800705a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800705e:	42a8      	cmp	r0, r5
 8007060:	d007      	beq.n	8007072 <TIM_OC1_SetConfig+0x4a>
 8007062:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007066:	42a8      	cmp	r0, r5
 8007068:	d003      	beq.n	8007072 <TIM_OC1_SetConfig+0x4a>
 800706a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800706e:	42a8      	cmp	r0, r5
 8007070:	d10d      	bne.n	800708e <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007072:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8007074:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007078:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800707a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800707e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8007082:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8007086:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800708a:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800708e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007090:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007092:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007094:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8007096:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8007098:	6203      	str	r3, [r0, #32]
}
 800709a:	4770      	bx	lr
 800709c:	40012c00 	.word	0x40012c00

080070a0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070a0:	6a03      	ldr	r3, [r0, #32]
 80070a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070a6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070a8:	6a03      	ldr	r3, [r0, #32]
{
 80070aa:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070ac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070ae:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070b0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80070b6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80070ba:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070bc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80070be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070c6:	4d15      	ldr	r5, [pc, #84]	; (800711c <TIM_OC3_SetConfig+0x7c>)
 80070c8:	42a8      	cmp	r0, r5
 80070ca:	d010      	beq.n	80070ee <TIM_OC3_SetConfig+0x4e>
 80070cc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80070d0:	42a8      	cmp	r0, r5
 80070d2:	d00c      	beq.n	80070ee <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d4:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80070d8:	42a8      	cmp	r0, r5
 80070da:	d00f      	beq.n	80070fc <TIM_OC3_SetConfig+0x5c>
 80070dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80070e0:	42a8      	cmp	r0, r5
 80070e2:	d00b      	beq.n	80070fc <TIM_OC3_SetConfig+0x5c>
 80070e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80070e8:	42a8      	cmp	r0, r5
 80070ea:	d10f      	bne.n	800710c <TIM_OC3_SetConfig+0x6c>
 80070ec:	e006      	b.n	80070fc <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070ee:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80070f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070f4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80070f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070fc:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007100:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007104:	ea46 0c05 	orr.w	ip, r6, r5
 8007108:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800710c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800710e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007110:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007112:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8007114:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8007116:	6203      	str	r3, [r0, #32]
}
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	40012c00 	.word	0x40012c00

08007120 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007120:	6a03      	ldr	r3, [r0, #32]
 8007122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007126:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007128:	6a03      	ldr	r3, [r0, #32]
{
 800712a:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800712c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800712e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007130:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007132:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007136:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800713a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800713e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8007140:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007144:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007148:	4d14      	ldr	r5, [pc, #80]	; (800719c <TIM_OC4_SetConfig+0x7c>)
 800714a:	42a8      	cmp	r0, r5
 800714c:	d010      	beq.n	8007170 <TIM_OC4_SetConfig+0x50>
 800714e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007152:	42a8      	cmp	r0, r5
 8007154:	d00c      	beq.n	8007170 <TIM_OC4_SetConfig+0x50>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007156:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800715a:	42a8      	cmp	r0, r5
 800715c:	d00f      	beq.n	800717e <TIM_OC4_SetConfig+0x5e>
 800715e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007162:	42a8      	cmp	r0, r5
 8007164:	d00b      	beq.n	800717e <TIM_OC4_SetConfig+0x5e>
 8007166:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800716a:	42a8      	cmp	r0, r5
 800716c:	d10f      	bne.n	800718e <TIM_OC4_SetConfig+0x6e>
 800716e:	e006      	b.n	800717e <TIM_OC4_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007170:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8007172:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007176:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 800717a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800717e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007182:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007186:	ea46 0c05 	orr.w	ip, r6, r5
 800718a:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800718e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007190:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007192:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007194:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8007196:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8007198:	6203      	str	r3, [r0, #32]
}
 800719a:	4770      	bx	lr
 800719c:	40012c00 	.word	0x40012c00

080071a0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80071a0:	2800      	cmp	r0, #0
 80071a2:	f000 8081 	beq.w	80072a8 <HAL_TIM_Base_Init+0x108>
{
 80071a6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80071a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80071ac:	4604      	mov	r4, r0
 80071ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d06d      	beq.n	8007292 <HAL_TIM_Base_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071b6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071b8:	493c      	ldr	r1, [pc, #240]	; (80072ac <HAL_TIM_Base_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80071ba:	2302      	movs	r3, #2
 80071bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071c0:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80071c2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071c4:	d051      	beq.n	800726a <HAL_TIM_Base_Init+0xca>
 80071c6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80071ca:	d021      	beq.n	8007210 <HAL_TIM_Base_Init+0x70>
 80071cc:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80071d0:	428a      	cmp	r2, r1
 80071d2:	d01d      	beq.n	8007210 <HAL_TIM_Base_Init+0x70>
 80071d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80071d8:	428a      	cmp	r2, r1
 80071da:	d019      	beq.n	8007210 <HAL_TIM_Base_Init+0x70>
 80071dc:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 80071e0:	428a      	cmp	r2, r1
 80071e2:	d042      	beq.n	800726a <HAL_TIM_Base_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071e4:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 80071e8:	428a      	cmp	r2, r1
 80071ea:	d057      	beq.n	800729c <HAL_TIM_Base_Init+0xfc>
 80071ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80071f0:	428a      	cmp	r2, r1
 80071f2:	d053      	beq.n	800729c <HAL_TIM_Base_Init+0xfc>
 80071f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80071f8:	428a      	cmp	r2, r1
 80071fa:	d04f      	beq.n	800729c <HAL_TIM_Base_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071fc:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071fe:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007204:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8007206:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8007208:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800720a:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800720c:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800720e:	e010      	b.n	8007232 <HAL_TIM_Base_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8007210:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007212:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007218:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800721a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800721e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007220:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007226:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007228:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800722a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800722c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800722e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007230:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007232:	2301      	movs	r3, #1
 8007234:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007236:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800723a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800723e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007242:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007246:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800724a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800724e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007252:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007256:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800725a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800725e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007262:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007266:	2000      	movs	r0, #0
}
 8007268:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800726a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800726c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800726e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007272:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8007274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007278:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800727a:	69a1      	ldr	r1, [r4, #24]
 800727c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007280:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8007282:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007284:	68e3      	ldr	r3, [r4, #12]
 8007286:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007288:	6863      	ldr	r3, [r4, #4]
 800728a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800728c:	6963      	ldr	r3, [r4, #20]
 800728e:	6313      	str	r3, [r2, #48]	; 0x30
 8007290:	e7cf      	b.n	8007232 <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8007292:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007296:	f7fd fcab 	bl	8004bf0 <HAL_TIM_Base_MspInit>
 800729a:	e78c      	b.n	80071b6 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800729c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800729e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80072a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072a4:	4303      	orrs	r3, r0
 80072a6:	e7e9      	b.n	800727c <HAL_TIM_Base_Init+0xdc>
    return HAL_ERROR;
 80072a8:	2001      	movs	r0, #1
}
 80072aa:	4770      	bx	lr
 80072ac:	40012c00 	.word	0x40012c00

080072b0 <HAL_TIM_PWM_MspInit>:
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop

080072b4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80072b4:	2800      	cmp	r0, #0
 80072b6:	f000 8081 	beq.w	80073bc <HAL_TIM_PWM_Init+0x108>
{
 80072ba:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80072bc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80072c0:	4604      	mov	r4, r0
 80072c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d06d      	beq.n	80073a6 <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072ca:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072cc:	493c      	ldr	r1, [pc, #240]	; (80073c0 <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80072ce:	2302      	movs	r3, #2
 80072d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072d4:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80072d6:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072d8:	d051      	beq.n	800737e <HAL_TIM_PWM_Init+0xca>
 80072da:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80072de:	d021      	beq.n	8007324 <HAL_TIM_PWM_Init+0x70>
 80072e0:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80072e4:	428a      	cmp	r2, r1
 80072e6:	d01d      	beq.n	8007324 <HAL_TIM_PWM_Init+0x70>
 80072e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80072ec:	428a      	cmp	r2, r1
 80072ee:	d019      	beq.n	8007324 <HAL_TIM_PWM_Init+0x70>
 80072f0:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 80072f4:	428a      	cmp	r2, r1
 80072f6:	d042      	beq.n	800737e <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072f8:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 80072fc:	428a      	cmp	r2, r1
 80072fe:	d057      	beq.n	80073b0 <HAL_TIM_PWM_Init+0xfc>
 8007300:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007304:	428a      	cmp	r2, r1
 8007306:	d053      	beq.n	80073b0 <HAL_TIM_PWM_Init+0xfc>
 8007308:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800730c:	428a      	cmp	r2, r1
 800730e:	d04f      	beq.n	80073b0 <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007310:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007312:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007318:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800731a:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800731c:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800731e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007320:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007322:	e010      	b.n	8007346 <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8007324:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007326:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800732c:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800732e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007332:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007334:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800733a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800733c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800733e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007340:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007342:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007344:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007346:	2301      	movs	r3, #1
 8007348:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800734a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800734e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007352:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007356:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800735a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800735e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007366:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800736a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800736e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007372:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007376:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800737a:	2000      	movs	r0, #0
}
 800737c:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800737e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007380:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007386:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8007388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800738c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800738e:	69a1      	ldr	r1, [r4, #24]
 8007390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007394:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8007396:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007398:	68e3      	ldr	r3, [r4, #12]
 800739a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800739c:	6863      	ldr	r3, [r4, #4]
 800739e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80073a0:	6963      	ldr	r3, [r4, #20]
 80073a2:	6313      	str	r3, [r2, #48]	; 0x30
 80073a4:	e7cf      	b.n	8007346 <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 80073a6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80073aa:	f7ff ff81 	bl	80072b0 <HAL_TIM_PWM_MspInit>
 80073ae:	e78c      	b.n	80072ca <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073b0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073b2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80073b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073b8:	4303      	orrs	r3, r0
 80073ba:	e7e9      	b.n	8007390 <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 80073bc:	2001      	movs	r0, #1
}
 80073be:	4770      	bx	lr
 80073c0:	40012c00 	.word	0x40012c00

080073c4 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 80073c4:	2800      	cmp	r0, #0
 80073c6:	f000 8096 	beq.w	80074f6 <HAL_TIM_Encoder_Init+0x132>
{
 80073ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80073cc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80073d0:	460d      	mov	r5, r1
 80073d2:	4604      	mov	r4, r0
 80073d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 8087 	beq.w	80074ec <HAL_TIM_Encoder_Init+0x128>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073de:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073e0:	4946      	ldr	r1, [pc, #280]	; (80074fc <HAL_TIM_Encoder_Init+0x138>)
  htim->State = HAL_TIM_STATE_BUSY;
 80073e2:	2202      	movs	r2, #2
 80073e4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073e8:	689a      	ldr	r2, [r3, #8]
 80073ea:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 80073ee:	f022 0207 	bic.w	r2, r2, #7
 80073f2:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073f4:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 80073f6:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073f8:	d064      	beq.n	80074c4 <HAL_TIM_Encoder_Init+0x100>
 80073fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073fe:	d018      	beq.n	8007432 <HAL_TIM_Encoder_Init+0x6e>
 8007400:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8007404:	428b      	cmp	r3, r1
 8007406:	d014      	beq.n	8007432 <HAL_TIM_Encoder_Init+0x6e>
 8007408:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800740c:	428b      	cmp	r3, r1
 800740e:	d010      	beq.n	8007432 <HAL_TIM_Encoder_Init+0x6e>
 8007410:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8007414:	428b      	cmp	r3, r1
 8007416:	d055      	beq.n	80074c4 <HAL_TIM_Encoder_Init+0x100>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007418:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800741c:	428b      	cmp	r3, r1
 800741e:	d055      	beq.n	80074cc <HAL_TIM_Encoder_Init+0x108>
 8007420:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007424:	428b      	cmp	r3, r1
 8007426:	d051      	beq.n	80074cc <HAL_TIM_Encoder_Init+0x108>
 8007428:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800742c:	428b      	cmp	r3, r1
 800742e:	d108      	bne.n	8007442 <HAL_TIM_Encoder_Init+0x7e>
 8007430:	e04c      	b.n	80074cc <HAL_TIM_Encoder_Init+0x108>
    tmpcr1 |= Structure->CounterMode;
 8007432:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007434:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007438:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800743a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800743c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007440:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007442:	69a1      	ldr	r1, [r4, #24]
 8007444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007448:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800744a:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800744c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800744e:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007450:	6862      	ldr	r2, [r4, #4]
 8007452:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007454:	2601      	movs	r6, #1
 8007456:	615e      	str	r6, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 8007458:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800745a:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800745c:	68af      	ldr	r7, [r5, #8]
 800745e:	69aa      	ldr	r2, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007460:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8007464:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007468:	ea47 2202 	orr.w	r2, r7, r2, lsl #8
 800746c:	430a      	orrs	r2, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800746e:	f422 417c 	bic.w	r1, r2, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007472:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007474:	69ef      	ldr	r7, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007476:	0112      	lsls	r2, r2, #4
 8007478:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800747c:	68ef      	ldr	r7, [r5, #12]
 800747e:	433a      	orrs	r2, r7
  tmpccer = htim->Instance->CCER;
 8007480:	6a1f      	ldr	r7, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007482:	f027 0caa 	bic.w	ip, r7, #170	; 0xaa
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007486:	6a2f      	ldr	r7, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007488:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800748c:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
 8007490:	430a      	orrs	r2, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007492:	696f      	ldr	r7, [r5, #20]
 8007494:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 8007496:	682d      	ldr	r5, [r5, #0]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007498:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 800749c:	4328      	orrs	r0, r5
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800749e:	ea41 010c 	orr.w	r1, r1, ip
  htim->Instance->SMCR = tmpsmcr;
 80074a2:	6098      	str	r0, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 80074a4:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 80074a6:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074a8:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074ac:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074b0:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074b4:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074b8:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80074bc:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  return HAL_OK;
 80074c0:	2000      	movs	r0, #0
}
 80074c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 80074c4:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80074ca:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074cc:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074d2:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074d4:	69a1      	ldr	r1, [r4, #24]
 80074d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074da:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80074dc:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074de:	68e2      	ldr	r2, [r4, #12]
 80074e0:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80074e2:	6862      	ldr	r2, [r4, #4]
 80074e4:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80074e6:	6962      	ldr	r2, [r4, #20]
 80074e8:	631a      	str	r2, [r3, #48]	; 0x30
 80074ea:	e7b3      	b.n	8007454 <HAL_TIM_Encoder_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 80074ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80074f0:	f7fd fbba 	bl	8004c68 <HAL_TIM_Encoder_MspInit>
 80074f4:	e773      	b.n	80073de <HAL_TIM_Encoder_Init+0x1a>
    return HAL_ERROR;
 80074f6:	2001      	movs	r0, #1
}
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	40012c00 	.word	0x40012c00

08007500 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8007500:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007504:	2b01      	cmp	r3, #1
 8007506:	d069      	beq.n	80075dc <HAL_TIM_SlaveConfigSynchro+0xdc>
 8007508:	4684      	mov	ip, r0
 800750a:	2201      	movs	r2, #1
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800750c:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800750e:	2302      	movs	r3, #2
{
 8007510:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8007512:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007516:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800751a:	6882      	ldr	r2, [r0, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800751c:	684b      	ldr	r3, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800751e:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007520:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007524:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007528:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 800752a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800752e:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007532:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007534:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8007536:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8007538:	d05e      	beq.n	80075f8 <HAL_TIM_SlaveConfigSynchro+0xf8>
 800753a:	d816      	bhi.n	800756a <HAL_TIM_SlaveConfigSynchro+0x6a>
 800753c:	2b40      	cmp	r3, #64	; 0x40
 800753e:	d06e      	beq.n	800761e <HAL_TIM_SlaveConfigSynchro+0x11e>
 8007540:	d933      	bls.n	80075aa <HAL_TIM_SlaveConfigSynchro+0xaa>
 8007542:	2b50      	cmp	r3, #80	; 0x50
 8007544:	d141      	bne.n	80075ca <HAL_TIM_SlaveConfigSynchro+0xca>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007546:	688a      	ldr	r2, [r1, #8]
 8007548:	690c      	ldr	r4, [r1, #16]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800754a:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800754c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007550:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007552:	6a01      	ldr	r1, [r0, #32]
 8007554:	f021 0101 	bic.w	r1, r1, #1
 8007558:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800755a:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800755c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007560:	ea43 1304 	orr.w	r3, r3, r4, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007564:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007566:	6202      	str	r2, [r0, #32]
 8007568:	e00d      	b.n	8007586 <HAL_TIM_SlaveConfigSynchro+0x86>
  switch (sSlaveConfig->InputTrigger)
 800756a:	2b70      	cmp	r3, #112	; 0x70
 800756c:	d038      	beq.n	80075e0 <HAL_TIM_SlaveConfigSynchro+0xe0>
 800756e:	2b6f      	cmp	r3, #111	; 0x6f
 8007570:	d92b      	bls.n	80075ca <HAL_TIM_SlaveConfigSynchro+0xca>
 8007572:	4a34      	ldr	r2, [pc, #208]	; (8007644 <HAL_TIM_SlaveConfigSynchro+0x144>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d006      	beq.n	8007586 <HAL_TIM_SlaveConfigSynchro+0x86>
 8007578:	d91d      	bls.n	80075b6 <HAL_TIM_SlaveConfigSynchro+0xb6>
 800757a:	4a33      	ldr	r2, [pc, #204]	; (8007648 <HAL_TIM_SlaveConfigSynchro+0x148>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d002      	beq.n	8007586 <HAL_TIM_SlaveConfigSynchro+0x86>
 8007580:	3230      	adds	r2, #48	; 0x30
 8007582:	4293      	cmp	r3, r2
 8007584:	d121      	bne.n	80075ca <HAL_TIM_SlaveConfigSynchro+0xca>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007586:	68c3      	ldr	r3, [r0, #12]
 8007588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800758c:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800758e:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 8007590:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8007592:	2101      	movs	r1, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007594:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007598:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 800759a:	f88c 103d 	strb.w	r1, [ip, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800759e:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  return HAL_OK;
 80075a2:	4610      	mov	r0, r2
}
 80075a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075a8:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80075aa:	2b20      	cmp	r3, #32
 80075ac:	d0eb      	beq.n	8007586 <HAL_TIM_SlaveConfigSynchro+0x86>
 80075ae:	d909      	bls.n	80075c4 <HAL_TIM_SlaveConfigSynchro+0xc4>
 80075b0:	2b30      	cmp	r3, #48	; 0x30
 80075b2:	d10a      	bne.n	80075ca <HAL_TIM_SlaveConfigSynchro+0xca>
 80075b4:	e7e7      	b.n	8007586 <HAL_TIM_SlaveConfigSynchro+0x86>
 80075b6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80075ba:	d0e4      	beq.n	8007586 <HAL_TIM_SlaveConfigSynchro+0x86>
 80075bc:	3a10      	subs	r2, #16
 80075be:	4293      	cmp	r3, r2
 80075c0:	d0e1      	beq.n	8007586 <HAL_TIM_SlaveConfigSynchro+0x86>
 80075c2:	e002      	b.n	80075ca <HAL_TIM_SlaveConfigSynchro+0xca>
 80075c4:	f033 0310 	bics.w	r3, r3, #16
 80075c8:	d0dd      	beq.n	8007586 <HAL_TIM_SlaveConfigSynchro+0x86>
    htim->State = HAL_TIM_STATE_READY;
 80075ca:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80075cc:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 80075ce:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80075d2:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 80075d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075da:	4770      	bx	lr
  __HAL_LOCK(htim);
 80075dc:	2002      	movs	r0, #2
}
 80075de:	4770      	bx	lr

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075e0:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 80075e4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075e6:	6909      	ldr	r1, [r1, #16]
 80075e8:	4323      	orrs	r3, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075ea:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80075f2:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075f4:	6083      	str	r3, [r0, #8]
 80075f6:	e7c6      	b.n	8007586 <HAL_TIM_SlaveConfigSynchro+0x86>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075f8:	690b      	ldr	r3, [r1, #16]
 80075fa:	688c      	ldr	r4, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075fc:	6a01      	ldr	r1, [r0, #32]
 80075fe:	f021 0110 	bic.w	r1, r1, #16
 8007602:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007604:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007606:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800760a:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccer = TIMx->CCER;
 800760e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8007610:	6182      	str	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007612:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007616:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCER = tmpccer;
 800761a:	6203      	str	r3, [r0, #32]
 800761c:	e7b3      	b.n	8007586 <HAL_TIM_SlaveConfigSynchro+0x86>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800761e:	2c05      	cmp	r4, #5
 8007620:	d0d3      	beq.n	80075ca <HAL_TIM_SlaveConfigSynchro+0xca>
 8007622:	f1b4 1f01 	cmp.w	r4, #65537	; 0x10001
 8007626:	d0d0      	beq.n	80075ca <HAL_TIM_SlaveConfigSynchro+0xca>
      tmpccer = htim->Instance->CCER;
 8007628:	6a04      	ldr	r4, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800762a:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800762c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800762e:	f022 0201 	bic.w	r2, r2, #1
 8007632:	6202      	str	r2, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007634:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800763a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800763e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8007640:	6204      	str	r4, [r0, #32]
      break;
 8007642:	e7a0      	b.n	8007586 <HAL_TIM_SlaveConfigSynchro+0x86>
 8007644:	00100030 	.word	0x00100030
 8007648:	00100040 	.word	0x00100040

0800764c <HAL_TIM_PeriodElapsedCallback>:
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop

08007650 <HAL_TIM_OC_DelayElapsedCallback>:
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop

08007654 <HAL_TIM_IC_CaptureCallback>:
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop

08007658 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop

0800765c <HAL_TIM_TriggerCallback>:
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop

08007660 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007660:	6803      	ldr	r3, [r0, #0]
 8007662:	691a      	ldr	r2, [r3, #16]
 8007664:	0791      	lsls	r1, r2, #30
{
 8007666:	b510      	push	{r4, lr}
 8007668:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800766a:	d503      	bpl.n	8007674 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	0792      	lsls	r2, r2, #30
 8007670:	f100 808a 	bmi.w	8007788 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007674:	691a      	ldr	r2, [r3, #16]
 8007676:	0752      	lsls	r2, r2, #29
 8007678:	d502      	bpl.n	8007680 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	0750      	lsls	r0, r2, #29
 800767e:	d470      	bmi.n	8007762 <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007680:	691a      	ldr	r2, [r3, #16]
 8007682:	0711      	lsls	r1, r2, #28
 8007684:	d502      	bpl.n	800768c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	0712      	lsls	r2, r2, #28
 800768a:	d458      	bmi.n	800773e <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800768c:	691a      	ldr	r2, [r3, #16]
 800768e:	06d1      	lsls	r1, r2, #27
 8007690:	d502      	bpl.n	8007698 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	06d2      	lsls	r2, r2, #27
 8007696:	d43e      	bmi.n	8007716 <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007698:	691a      	ldr	r2, [r3, #16]
 800769a:	07d0      	lsls	r0, r2, #31
 800769c:	d503      	bpl.n	80076a6 <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	07d1      	lsls	r1, r2, #31
 80076a2:	f100 808a 	bmi.w	80077ba <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076a6:	691a      	ldr	r2, [r3, #16]
 80076a8:	0612      	lsls	r2, r2, #24
 80076aa:	d503      	bpl.n	80076b4 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076ac:	68da      	ldr	r2, [r3, #12]
 80076ae:	0610      	lsls	r0, r2, #24
 80076b0:	f100 808b 	bmi.w	80077ca <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80076b4:	691a      	ldr	r2, [r3, #16]
 80076b6:	05d1      	lsls	r1, r2, #23
 80076b8:	d503      	bpl.n	80076c2 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076ba:	68da      	ldr	r2, [r3, #12]
 80076bc:	0612      	lsls	r2, r2, #24
 80076be:	f100 808c 	bmi.w	80077da <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076c2:	691a      	ldr	r2, [r3, #16]
 80076c4:	0650      	lsls	r0, r2, #25
 80076c6:	d503      	bpl.n	80076d0 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	0651      	lsls	r1, r2, #25
 80076cc:	f100 808d 	bmi.w	80077ea <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076d0:	691a      	ldr	r2, [r3, #16]
 80076d2:	0692      	lsls	r2, r2, #26
 80076d4:	d503      	bpl.n	80076de <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	0690      	lsls	r0, r2, #26
 80076da:	f100 808e 	bmi.w	80077fa <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80076de:	691a      	ldr	r2, [r3, #16]
 80076e0:	02d1      	lsls	r1, r2, #11
 80076e2:	d503      	bpl.n	80076ec <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	02d2      	lsls	r2, r2, #11
 80076e8:	f100 808f 	bmi.w	800780a <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80076ec:	691a      	ldr	r2, [r3, #16]
 80076ee:	0290      	lsls	r0, r2, #10
 80076f0:	d503      	bpl.n	80076fa <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80076f2:	68da      	ldr	r2, [r3, #12]
 80076f4:	0291      	lsls	r1, r2, #10
 80076f6:	f100 8090 	bmi.w	800781a <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80076fa:	691a      	ldr	r2, [r3, #16]
 80076fc:	0252      	lsls	r2, r2, #9
 80076fe:	d503      	bpl.n	8007708 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007700:	68da      	ldr	r2, [r3, #12]
 8007702:	0250      	lsls	r0, r2, #9
 8007704:	f100 8091 	bmi.w	800782a <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007708:	691a      	ldr	r2, [r3, #16]
 800770a:	0211      	lsls	r1, r2, #8
 800770c:	d502      	bpl.n	8007714 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	0212      	lsls	r2, r2, #8
 8007712:	d44a      	bmi.n	80077aa <HAL_TIM_IRQHandler+0x14a>
}
 8007714:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007716:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800771a:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800771c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800771e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007720:	69db      	ldr	r3, [r3, #28]
 8007722:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007726:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007728:	f040 8090 	bne.w	800784c <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800772c:	f7ff ff90 	bl	8007650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007730:	4620      	mov	r0, r4
 8007732:	f7ff ff91 	bl	8007658 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007736:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007738:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800773a:	7722      	strb	r2, [r4, #28]
 800773c:	e7ac      	b.n	8007698 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800773e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007742:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007744:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007746:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800774c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800774e:	d17a      	bne.n	8007846 <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007750:	f7ff ff7e 	bl	8007650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007754:	4620      	mov	r0, r4
 8007756:	f7ff ff7f 	bl	8007658 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800775c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775e:	7722      	strb	r2, [r4, #28]
 8007760:	e794      	b.n	800768c <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007762:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007766:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007768:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800776a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007772:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007774:	d164      	bne.n	8007840 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007776:	f7ff ff6b 	bl	8007650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800777a:	4620      	mov	r0, r4
 800777c:	f7ff ff6c 	bl	8007658 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007780:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007782:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007784:	7722      	strb	r2, [r4, #28]
 8007786:	e77b      	b.n	8007680 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007788:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800778c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800778e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007790:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	0799      	lsls	r1, r3, #30
 8007796:	d150      	bne.n	800783a <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007798:	f7ff ff5a 	bl	8007650 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800779c:	4620      	mov	r0, r4
 800779e:	f7ff ff5b 	bl	8007658 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077a4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a6:	7722      	strb	r2, [r4, #28]
 80077a8:	e764      	b.n	8007674 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80077aa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 80077ae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80077b0:	611a      	str	r2, [r3, #16]
}
 80077b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 80077b6:	f000 ba8b 	b.w	8007cd0 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077ba:	f06f 0201 	mvn.w	r2, #1
 80077be:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80077c0:	4620      	mov	r0, r4
 80077c2:	f7ff ff43 	bl	800764c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	e76d      	b.n	80076a6 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80077d0:	4620      	mov	r0, r4
 80077d2:	f000 fa73 	bl	8007cbc <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	e76c      	b.n	80076b4 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80077da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80077de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80077e0:	4620      	mov	r0, r4
 80077e2:	f000 fa6d 	bl	8007cc0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	e76b      	b.n	80076c2 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077ee:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80077f0:	4620      	mov	r0, r4
 80077f2:	f7ff ff33 	bl	800765c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	e76a      	b.n	80076d0 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077fa:	f06f 0220 	mvn.w	r2, #32
 80077fe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007800:	4620      	mov	r0, r4
 8007802:	f000 fa59 	bl	8007cb8 <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	e769      	b.n	80076de <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800780a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800780e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007810:	4620      	mov	r0, r4
 8007812:	f000 fa57 	bl	8007cc4 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	e768      	b.n	80076ec <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800781a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800781e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007820:	4620      	mov	r0, r4
 8007822:	f000 fa51 	bl	8007cc8 <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	e767      	b.n	80076fa <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800782a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800782e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8007830:	4620      	mov	r0, r4
 8007832:	f000 fa4b 	bl	8007ccc <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	e766      	b.n	8007708 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 800783a:	f7ff ff0b 	bl	8007654 <HAL_TIM_IC_CaptureCallback>
 800783e:	e7b0      	b.n	80077a2 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8007840:	f7ff ff08 	bl	8007654 <HAL_TIM_IC_CaptureCallback>
 8007844:	e79c      	b.n	8007780 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8007846:	f7ff ff05 	bl	8007654 <HAL_TIM_IC_CaptureCallback>
 800784a:	e786      	b.n	800775a <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 800784c:	f7ff ff02 	bl	8007654 <HAL_TIM_IC_CaptureCallback>
 8007850:	e771      	b.n	8007736 <HAL_TIM_IRQHandler+0xd6>
 8007852:	bf00      	nop

08007854 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007854:	6a03      	ldr	r3, [r0, #32]
 8007856:	f023 0310 	bic.w	r3, r3, #16
 800785a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800785c:	6a03      	ldr	r3, [r0, #32]
{
 800785e:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8007860:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007862:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007864:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007866:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800786a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800786e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007872:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8007874:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007878:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800787c:	4d14      	ldr	r5, [pc, #80]	; (80078d0 <TIM_OC2_SetConfig+0x7c>)
 800787e:	42a8      	cmp	r0, r5
 8007880:	d010      	beq.n	80078a4 <TIM_OC2_SetConfig+0x50>
 8007882:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007886:	42a8      	cmp	r0, r5
 8007888:	d00c      	beq.n	80078a4 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800788a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800788e:	42a8      	cmp	r0, r5
 8007890:	d00f      	beq.n	80078b2 <TIM_OC2_SetConfig+0x5e>
 8007892:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007896:	42a8      	cmp	r0, r5
 8007898:	d00b      	beq.n	80078b2 <TIM_OC2_SetConfig+0x5e>
 800789a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800789e:	42a8      	cmp	r0, r5
 80078a0:	d10f      	bne.n	80078c2 <TIM_OC2_SetConfig+0x6e>
 80078a2:	e006      	b.n	80078b2 <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078a4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80078a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078aa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80078ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078b2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078b6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078ba:	ea46 0c05 	orr.w	ip, r6, r5
 80078be:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80078c2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80078c4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80078c6:	6182      	str	r2, [r0, #24]
}
 80078c8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80078ca:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80078cc:	6203      	str	r3, [r0, #32]
}
 80078ce:	4770      	bx	lr
 80078d0:	40012c00 	.word	0x40012c00

080078d4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80078d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80078d8:	2b01      	cmp	r3, #1
 80078da:	f000 80f4 	beq.w	8007ac6 <HAL_TIM_PWM_ConfigChannel+0x1f2>
 80078de:	2301      	movs	r3, #1
{
 80078e0:	b570      	push	{r4, r5, r6, lr}
 80078e2:	4604      	mov	r4, r0
 80078e4:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 80078e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80078ea:	2a14      	cmp	r2, #20
 80078ec:	d80c      	bhi.n	8007908 <HAL_TIM_PWM_ConfigChannel+0x34>
 80078ee:	e8df f002 	tbb	[pc, r2]
 80078f2:	0b53      	.short	0x0b53
 80078f4:	0b680b0b 	.word	0x0b680b0b
 80078f8:	0b7e0b0b 	.word	0x0b7e0b0b
 80078fc:	0b930b0b 	.word	0x0b930b0b
 8007900:	0ba90b0b 	.word	0x0ba90b0b
 8007904:	0b0b      	.short	0x0b0b
 8007906:	10          	.byte	0x10
 8007907:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8007908:	2300      	movs	r3, #0
 800790a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800790e:	2001      	movs	r0, #1
}
 8007910:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007912:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007914:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007916:	6a1a      	ldr	r2, [r3, #32]
 8007918:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800791c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800791e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007920:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8007922:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007924:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007928:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800792c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007930:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007932:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007936:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800793a:	4e64      	ldr	r6, [pc, #400]	; (8007acc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800793c:	42b3      	cmp	r3, r6
 800793e:	d00f      	beq.n	8007960 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8007940:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007944:	42b3      	cmp	r3, r6
 8007946:	d00b      	beq.n	8007960 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8007948:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800794c:	42b3      	cmp	r3, r6
 800794e:	d007      	beq.n	8007960 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8007950:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007954:	42b3      	cmp	r3, r6
 8007956:	d003      	beq.n	8007960 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8007958:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800795c:	42b3      	cmp	r3, r6
 800795e:	d104      	bne.n	800796a <HAL_TIM_PWM_ConfigChannel+0x96>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007960:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007962:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007966:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 800796a:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800796c:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 800796e:	6869      	ldr	r1, [r5, #4]
 8007970:	64d9      	str	r1, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8007972:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007974:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007976:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007978:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800797c:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800797e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007980:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007984:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007986:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007988:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800798c:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800798e:	2300      	movs	r3, #0
 8007990:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007994:	2000      	movs	r0, #0
}
 8007996:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007998:	6800      	ldr	r0, [r0, #0]
 800799a:	f7ff fb45 	bl	8007028 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800799e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079a0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079a2:	6999      	ldr	r1, [r3, #24]
 80079a4:	f041 0108 	orr.w	r1, r1, #8
 80079a8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079aa:	6999      	ldr	r1, [r3, #24]
 80079ac:	f021 0104 	bic.w	r1, r1, #4
 80079b0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079b2:	699a      	ldr	r2, [r3, #24]
 80079b4:	4302      	orrs	r2, r0
 80079b6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80079b8:	2300      	movs	r3, #0
 80079ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80079be:	2000      	movs	r0, #0
}
 80079c0:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079c2:	6800      	ldr	r0, [r0, #0]
 80079c4:	f7ff ff46 	bl	8007854 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079c8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079ca:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079cc:	6999      	ldr	r1, [r3, #24]
 80079ce:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80079d2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079d4:	6999      	ldr	r1, [r3, #24]
 80079d6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80079da:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079dc:	699a      	ldr	r2, [r3, #24]
 80079de:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80079e2:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80079e4:	2300      	movs	r3, #0
 80079e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80079ea:	2000      	movs	r0, #0
}
 80079ec:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079ee:	6800      	ldr	r0, [r0, #0]
 80079f0:	f7ff fb56 	bl	80070a0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079f4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079f6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079f8:	69d9      	ldr	r1, [r3, #28]
 80079fa:	f041 0108 	orr.w	r1, r1, #8
 80079fe:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a00:	69d9      	ldr	r1, [r3, #28]
 8007a02:	f021 0104 	bic.w	r1, r1, #4
 8007a06:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a08:	69da      	ldr	r2, [r3, #28]
 8007a0a:	4302      	orrs	r2, r0
 8007a0c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007a14:	2000      	movs	r0, #0
}
 8007a16:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a18:	6800      	ldr	r0, [r0, #0]
 8007a1a:	f7ff fb81 	bl	8007120 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a1e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a20:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a22:	69d9      	ldr	r1, [r3, #28]
 8007a24:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007a28:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a2a:	69d9      	ldr	r1, [r3, #28]
 8007a2c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007a30:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a32:	69da      	ldr	r2, [r3, #28]
 8007a34:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007a38:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007a40:	2000      	movs	r0, #0
}
 8007a42:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a44:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8007a46:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a48:	6a1a      	ldr	r2, [r3, #32]
 8007a4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007a4e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8007a50:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007a52:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8007a54:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a56:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007a5a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8007a5e:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a60:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8007a62:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a66:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a6a:	4e18      	ldr	r6, [pc, #96]	; (8007acc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8007a6c:	42b3      	cmp	r3, r6
 8007a6e:	d00f      	beq.n	8007a90 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8007a70:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007a74:	42b3      	cmp	r3, r6
 8007a76:	d00b      	beq.n	8007a90 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8007a78:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8007a7c:	42b3      	cmp	r3, r6
 8007a7e:	d007      	beq.n	8007a90 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8007a80:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007a84:	42b3      	cmp	r3, r6
 8007a86:	d003      	beq.n	8007a90 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8007a88:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007a8c:	42b3      	cmp	r3, r6
 8007a8e:	d104      	bne.n	8007a9a <HAL_TIM_PWM_ConfigChannel+0x1c6>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a90:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a92:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a96:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8007a9a:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007a9c:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8007a9e:	6869      	ldr	r1, [r5, #4]
 8007aa0:	6499      	str	r1, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8007aa2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007aa4:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007aa6:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007aa8:	f041 0108 	orr.w	r1, r1, #8
 8007aac:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007aae:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007ab0:	f021 0104 	bic.w	r1, r1, #4
 8007ab4:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ab6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ab8:	432a      	orrs	r2, r5
 8007aba:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8007abc:	2300      	movs	r3, #0
 8007abe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007ac2:	2000      	movs	r0, #0
}
 8007ac4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8007ac6:	2002      	movs	r0, #2
}
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	40012c00 	.word	0x40012c00

08007ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ad0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d03e      	beq.n	8007b56 <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8007ad8:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ada:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007adc:	4d1f      	ldr	r5, [pc, #124]	; (8007b5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007ade:	2302      	movs	r3, #2
 8007ae0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ae4:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8007ae6:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8007ae8:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007aea:	d028      	beq.n	8007b3e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8007aec:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007af0:	42aa      	cmp	r2, r5
 8007af2:	d024      	beq.n	8007b3e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007af4:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007af6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007afe:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b00:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8007b04:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b06:	d00c      	beq.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8007b08:	4b15      	ldr	r3, [pc, #84]	; (8007b60 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d009      	beq.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8007b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d005      	beq.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8007b16:	42aa      	cmp	r2, r5
 8007b18:	d003      	beq.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8007b1a:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d104      	bne.n	8007b2c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b22:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b24:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b28:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b2a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8007b2c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007b34:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8007b38:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8007b3a:	4618      	mov	r0, r3
}
 8007b3c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b3e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b40:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b44:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b46:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b4a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b50:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8007b52:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b54:	e7e5      	b.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 8007b56:	2002      	movs	r0, #2
}
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	40012c00 	.word	0x40012c00
 8007b60:	40000400 	.word	0x40000400

08007b64 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d045      	beq.n	8007bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8007b6c:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b6e:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8007b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b76:	4602      	mov	r2, r0
 8007b78:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b7a:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b7c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b82:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b88:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b8a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b90:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b92:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b98:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b9a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007ba0:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ba2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007ba4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007ba8:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007baa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007bae:	4c13      	ldr	r4, [pc, #76]	; (8007bfc <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8007bb0:	42a0      	cmp	r0, r4
 8007bb2:	d00b      	beq.n	8007bcc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8007bb4:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007bb8:	42a0      	cmp	r0, r4
 8007bba:	d007      	beq.n	8007bcc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8007bbc:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8007bbe:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8007bc0:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8007bc4:	4608      	mov	r0, r1
}
 8007bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bca:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007bcc:	69cc      	ldr	r4, [r1, #28]
 8007bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bd2:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007bd4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8007bd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007bda:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007bde:	6a0c      	ldr	r4, [r1, #32]
 8007be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007be4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007be6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007be8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007bea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007bee:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007bf0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	e7e1      	b.n	8007bbc <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8007bf8:	2002      	movs	r0, #2
}
 8007bfa:	4770      	bx	lr
 8007bfc:	40012c00 	.word	0x40012c00

08007c00 <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c00:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d04b      	beq.n	8007ca0 <HAL_TIMEx_ConfigBreakInput+0xa0>

  switch (sBreakInputConfig->Source)
 8007c08:	6813      	ldr	r3, [r2, #0]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	2b0f      	cmp	r3, #15
{
 8007c0e:	b4f0      	push	{r4, r5, r6, r7}
 8007c10:	d824      	bhi.n	8007c5c <HAL_TIMEx_ConfigBreakInput+0x5c>
 8007c12:	4c25      	ldr	r4, [pc, #148]	; (8007ca8 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8007c14:	4e25      	ldr	r6, [pc, #148]	; (8007cac <HAL_TIMEx_ConfigBreakInput+0xac>)
 8007c16:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007c1a:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
 8007c1e:	4c24      	ldr	r4, [pc, #144]	; (8007cb0 <HAL_TIMEx_ConfigBreakInput+0xb0>)
 8007c20:	4e24      	ldr	r6, [pc, #144]	; (8007cb4 <HAL_TIMEx_ConfigBreakInput+0xb4>)
 8007c22:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8007c26:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8007c2a:	2901      	cmp	r1, #1
 8007c2c:	d01c      	beq.n	8007c68 <HAL_TIMEx_ConfigBreakInput+0x68>
 8007c2e:	2902      	cmp	r1, #2
 8007c30:	d12f      	bne.n	8007c92 <HAL_TIMEx_ConfigBreakInput+0x92>
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007c32:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF2;
 8007c34:	6806      	ldr	r6, [r0, #0]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007c36:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007c38:	fa01 f30c 	lsl.w	r3, r1, ip
      tmporx = htim->Instance->AF2;
 8007c3c:	6e71      	ldr	r1, [r6, #100]	; 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007c3e:	404b      	eors	r3, r1
 8007c40:	402b      	ands	r3, r5
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007c42:	40ba      	lsls	r2, r7
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007c44:	404b      	eors	r3, r1
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007c46:	405a      	eors	r2, r3
 8007c48:	4014      	ands	r4, r2
 8007c4a:	4063      	eors	r3, r4
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8007c4c:	2200      	movs	r2, #0
      htim->Instance->AF2 = tmporx;
 8007c4e:	6673      	str	r3, [r6, #100]	; 0x64
  __HAL_UNLOCK(htim);
 8007c50:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007c54:	2300      	movs	r3, #0

  return status;
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	bcf0      	pop	{r4, r5, r6, r7}
 8007c5a:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8007c5c:	2700      	movs	r7, #0
  switch (BreakInput)
 8007c5e:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8007c60:	46bc      	mov	ip, r7
 8007c62:	463c      	mov	r4, r7
 8007c64:	463d      	mov	r5, r7
  switch (BreakInput)
 8007c66:	d1e2      	bne.n	8007c2e <HAL_TIMEx_ConfigBreakInput+0x2e>
      tmporx = htim->Instance->AF1;
 8007c68:	6806      	ldr	r6, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007c6a:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF1;
 8007c6c:	6e31      	ldr	r1, [r6, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007c6e:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007c70:	fa03 f30c 	lsl.w	r3, r3, ip
 8007c74:	404b      	eors	r3, r1
 8007c76:	402b      	ands	r3, r5
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007c78:	40ba      	lsls	r2, r7
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007c7a:	404b      	eors	r3, r1
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007c7c:	405a      	eors	r2, r3
 8007c7e:	4014      	ands	r4, r2
 8007c80:	4063      	eors	r3, r4
  __HAL_UNLOCK(htim);
 8007c82:	2200      	movs	r2, #0
      htim->Instance->AF1 = tmporx;
 8007c84:	6633      	str	r3, [r6, #96]	; 0x60
  __HAL_UNLOCK(htim);
 8007c86:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	bcf0      	pop	{r4, r5, r6, r7}
 8007c90:	4770      	bx	lr
  __HAL_UNLOCK(htim);
 8007c92:	2200      	movs	r2, #0
 8007c94:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (BreakInput)
 8007c98:	2301      	movs	r3, #1
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	bcf0      	pop	{r4, r5, r6, r7}
 8007c9e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007ca0:	2302      	movs	r3, #2
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	0800d664 	.word	0x0800d664
 8007cac:	0800d6e4 	.word	0x0800d6e4
 8007cb0:	0800d6a4 	.word	0x0800d6a4
 8007cb4:	0800d724 	.word	0x0800d724

08007cb8 <HAL_TIMEx_CommutCallback>:
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop

08007cbc <HAL_TIMEx_BreakCallback>:
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop

08007cc0 <HAL_TIMEx_Break2Callback>:
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop

08007cc4 <HAL_TIMEx_EncoderIndexCallback>:
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop

08007cc8 <HAL_TIMEx_DirectionChangeCallback>:
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop

08007ccc <HAL_TIMEx_IndexErrorCallback>:
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop

08007cd0 <HAL_TIMEx_TransitionErrorCallback>:
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop

08007cd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cd8:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cda:	6882      	ldr	r2, [r0, #8]
 8007cdc:	6900      	ldr	r0, [r0, #16]
 8007cde:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ce0:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ce2:	4302      	orrs	r2, r0
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ce8:	49a6      	ldr	r1, [pc, #664]	; (8007f84 <UART_SetConfig+0x2b0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cea:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cec:	4029      	ands	r1, r5
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	68e1      	ldr	r1, [r4, #12]
 8007cf6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007cfa:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007cfc:	49a2      	ldr	r1, [pc, #648]	; (8007f88 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cfe:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d00:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d02:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d04:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d06:	d06b      	beq.n	8007de0 <UART_SetConfig+0x10c>
    tmpreg |= huart->Init.OneBitSampling;
 8007d08:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d0a:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8007d0e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8007d12:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d14:	430a      	orrs	r2, r1
 8007d16:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d1a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007d1c:	f022 020f 	bic.w	r2, r2, #15
 8007d20:	430a      	orrs	r2, r1
 8007d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d24:	4a99      	ldr	r2, [pc, #612]	; (8007f8c <UART_SetConfig+0x2b8>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d012      	beq.n	8007d50 <UART_SetConfig+0x7c>
 8007d2a:	4a99      	ldr	r2, [pc, #612]	; (8007f90 <UART_SetConfig+0x2bc>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d036      	beq.n	8007d9e <UART_SetConfig+0xca>
 8007d30:	4a98      	ldr	r2, [pc, #608]	; (8007f94 <UART_SetConfig+0x2c0>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	f000 80fa 	beq.w	8007f2c <UART_SetConfig+0x258>
 8007d38:	4a97      	ldr	r2, [pc, #604]	; (8007f98 <UART_SetConfig+0x2c4>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	f000 80a5 	beq.w	8007e8a <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8007d40:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d42:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8007d44:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8007d48:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8007d4c:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 8007d4e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d50:	4b92      	ldr	r3, [pc, #584]	; (8007f9c <UART_SetConfig+0x2c8>)
 8007d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d56:	f003 0303 	and.w	r3, r3, #3
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	f240 808e 	bls.w	8007e7e <UART_SetConfig+0x1aa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d62:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007d66:	f000 80fe 	beq.w	8007f66 <UART_SetConfig+0x292>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d6a:	f7fe fff7 	bl	8006d5c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	f000 80da 	beq.w	8007f28 <UART_SetConfig+0x254>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007d76:	6862      	ldr	r2, [r4, #4]
 8007d78:	4b89      	ldr	r3, [pc, #548]	; (8007fa0 <UART_SetConfig+0x2cc>)
 8007d7a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8007d7e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d82:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d86:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8007d8a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d8e:	f1a3 0210 	sub.w	r2, r3, #16
 8007d92:	428a      	cmp	r2, r1
 8007d94:	d8d4      	bhi.n	8007d40 <UART_SetConfig+0x6c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d96:	6822      	ldr	r2, [r4, #0]
 8007d98:	2000      	movs	r0, #0
 8007d9a:	60d3      	str	r3, [r2, #12]
 8007d9c:	e7d1      	b.n	8007d42 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d9e:	4b7f      	ldr	r3, [pc, #508]	; (8007f9c <UART_SetConfig+0x2c8>)
 8007da0:	4a80      	ldr	r2, [pc, #512]	; (8007fa4 <UART_SetConfig+0x2d0>)
 8007da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007da6:	f003 030c 	and.w	r3, r3, #12
 8007daa:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007db0:	d07d      	beq.n	8007eae <UART_SetConfig+0x1da>
    switch (clocksource)
 8007db2:	2b08      	cmp	r3, #8
 8007db4:	d8c4      	bhi.n	8007d40 <UART_SetConfig+0x6c>
 8007db6:	a201      	add	r2, pc, #4	; (adr r2, 8007dbc <UART_SetConfig+0xe8>)
 8007db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbc:	08007ee7 	.word	0x08007ee7
 8007dc0:	08007d6b 	.word	0x08007d6b
 8007dc4:	08007f63 	.word	0x08007f63
 8007dc8:	08007d41 	.word	0x08007d41
 8007dcc:	08007ea9 	.word	0x08007ea9
 8007dd0:	08007d41 	.word	0x08007d41
 8007dd4:	08007d41 	.word	0x08007d41
 8007dd8:	08007d41 	.word	0x08007d41
 8007ddc:	08007f53 	.word	0x08007f53
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007de0:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8007de4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007de8:	430a      	orrs	r2, r1
 8007dea:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dee:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007df0:	486a      	ldr	r0, [pc, #424]	; (8007f9c <UART_SetConfig+0x2c8>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007df2:	f022 020f 	bic.w	r2, r2, #15
 8007df6:	430a      	orrs	r2, r1
 8007df8:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dfa:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007dfe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e06:	f000 80aa 	beq.w	8007f5e <UART_SetConfig+0x28a>
 8007e0a:	d80b      	bhi.n	8007e24 <UART_SetConfig+0x150>
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d039      	beq.n	8007e84 <UART_SetConfig+0x1b0>
 8007e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e14:	d194      	bne.n	8007d40 <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8007e16:	f7fe fe3f 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	f000 8084 	beq.w	8007f28 <UART_SetConfig+0x254>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e22:	e004      	b.n	8007e2e <UART_SetConfig+0x15a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e28:	d18a      	bne.n	8007d40 <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 8007e2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e2e:	4b5c      	ldr	r3, [pc, #368]	; (8007fa0 <UART_SetConfig+0x2cc>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e30:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e32:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8007e36:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e3a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007e3e:	4299      	cmp	r1, r3
 8007e40:	f63f af7e 	bhi.w	8007d40 <UART_SetConfig+0x6c>
 8007e44:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007e48:	f63f af7a 	bhi.w	8007d40 <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	4619      	mov	r1, r3
 8007e50:	f7f8 ff22 	bl	8000c98 <__aeabi_uldivmod>
 8007e54:	0209      	lsls	r1, r1, #8
 8007e56:	0203      	lsls	r3, r0, #8
 8007e58:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007e5c:	0868      	lsrs	r0, r5, #1
 8007e5e:	1818      	adds	r0, r3, r0
 8007e60:	462a      	mov	r2, r5
 8007e62:	f04f 0300 	mov.w	r3, #0
 8007e66:	f141 0100 	adc.w	r1, r1, #0
 8007e6a:	f7f8 ff15 	bl	8000c98 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e6e:	4a4e      	ldr	r2, [pc, #312]	; (8007fa8 <UART_SetConfig+0x2d4>)
 8007e70:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8007e74:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e76:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e78:	f63f af62 	bhi.w	8007d40 <UART_SetConfig+0x6c>
 8007e7c:	e78b      	b.n	8007d96 <UART_SetConfig+0xc2>
 8007e7e:	4a4b      	ldr	r2, [pc, #300]	; (8007fac <UART_SetConfig+0x2d8>)
 8007e80:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e82:	e793      	b.n	8007dac <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e84:	f7fe ff58 	bl	8006d38 <HAL_RCC_GetPCLK1Freq>
        break;
 8007e88:	e7c7      	b.n	8007e1a <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e8a:	4b44      	ldr	r3, [pc, #272]	; (8007f9c <UART_SetConfig+0x2c8>)
 8007e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e94:	2b80      	cmp	r3, #128	; 0x80
 8007e96:	d06e      	beq.n	8007f76 <UART_SetConfig+0x2a2>
 8007e98:	d85e      	bhi.n	8007f58 <UART_SetConfig+0x284>
 8007e9a:	b30b      	cbz	r3, 8007ee0 <UART_SetConfig+0x20c>
 8007e9c:	2b40      	cmp	r3, #64	; 0x40
 8007e9e:	f47f af4f 	bne.w	8007d40 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ea2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007ea6:	d021      	beq.n	8007eec <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 8007ea8:	f7fe fdf6 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
        break;
 8007eac:	e75f      	b.n	8007d6e <UART_SetConfig+0x9a>
    switch (clocksource)
 8007eae:	2b08      	cmp	r3, #8
 8007eb0:	f63f af46 	bhi.w	8007d40 <UART_SetConfig+0x6c>
 8007eb4:	a201      	add	r2, pc, #4	; (adr r2, 8007ebc <UART_SetConfig+0x1e8>)
 8007eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eba:	bf00      	nop
 8007ebc:	08007f6d 	.word	0x08007f6d
 8007ec0:	08007f67 	.word	0x08007f67
 8007ec4:	08007f73 	.word	0x08007f73
 8007ec8:	08007d41 	.word	0x08007d41
 8007ecc:	08007eed 	.word	0x08007eed
 8007ed0:	08007d41 	.word	0x08007d41
 8007ed4:	08007d41 	.word	0x08007d41
 8007ed8:	08007d41 	.word	0x08007d41
 8007edc:	08007ef5 	.word	0x08007ef5
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ee0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007ee4:	d042      	beq.n	8007f6c <UART_SetConfig+0x298>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ee6:	f7fe ff27 	bl	8006d38 <HAL_RCC_GetPCLK1Freq>
        break;
 8007eea:	e740      	b.n	8007d6e <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetSysClockFreq();
 8007eec:	f7fe fdd4 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007ef0:	b1d0      	cbz	r0, 8007f28 <UART_SetConfig+0x254>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ef2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007ef4:	6862      	ldr	r2, [r4, #4]
 8007ef6:	4b2a      	ldr	r3, [pc, #168]	; (8007fa0 <UART_SetConfig+0x2cc>)
 8007ef8:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8007efc:	fbb0 f0f1 	udiv	r0, r0, r1
 8007f00:	0853      	lsrs	r3, r2, #1
 8007f02:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f06:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f0a:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f0e:	f1a0 0210 	sub.w	r2, r0, #16
 8007f12:	429a      	cmp	r2, r3
 8007f14:	f63f af14 	bhi.w	8007d40 <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f18:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8007f1c:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f1e:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f20:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8007f24:	4318      	orrs	r0, r3
 8007f26:	60d0      	str	r0, [r2, #12]
 8007f28:	2000      	movs	r0, #0
 8007f2a:	e70a      	b.n	8007d42 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f2c:	4b1b      	ldr	r3, [pc, #108]	; (8007f9c <UART_SetConfig+0x2c8>)
 8007f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f36:	2b20      	cmp	r3, #32
 8007f38:	d01d      	beq.n	8007f76 <UART_SetConfig+0x2a2>
 8007f3a:	d804      	bhi.n	8007f46 <UART_SetConfig+0x272>
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0cf      	beq.n	8007ee0 <UART_SetConfig+0x20c>
 8007f40:	2b10      	cmp	r3, #16
 8007f42:	d0ae      	beq.n	8007ea2 <UART_SetConfig+0x1ce>
 8007f44:	e6fc      	b.n	8007d40 <UART_SetConfig+0x6c>
 8007f46:	2b30      	cmp	r3, #48	; 0x30
 8007f48:	f47f aefa 	bne.w	8007d40 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f4c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007f50:	d0d0      	beq.n	8007ef4 <UART_SetConfig+0x220>
    switch (clocksource)
 8007f52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007f56:	e70e      	b.n	8007d76 <UART_SetConfig+0xa2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f58:	2bc0      	cmp	r3, #192	; 0xc0
 8007f5a:	d0f7      	beq.n	8007f4c <UART_SetConfig+0x278>
 8007f5c:	e6f0      	b.n	8007d40 <UART_SetConfig+0x6c>
 8007f5e:	4814      	ldr	r0, [pc, #80]	; (8007fb0 <UART_SetConfig+0x2dc>)
 8007f60:	e765      	b.n	8007e2e <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 8007f62:	4813      	ldr	r0, [pc, #76]	; (8007fb0 <UART_SetConfig+0x2dc>)
 8007f64:	e707      	b.n	8007d76 <UART_SetConfig+0xa2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f66:	f7fe fef9 	bl	8006d5c <HAL_RCC_GetPCLK2Freq>
        break;
 8007f6a:	e7c1      	b.n	8007ef0 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f6c:	f7fe fee4 	bl	8006d38 <HAL_RCC_GetPCLK1Freq>
        break;
 8007f70:	e7be      	b.n	8007ef0 <UART_SetConfig+0x21c>
        pclk = (uint32_t) HSI_VALUE;
 8007f72:	480f      	ldr	r0, [pc, #60]	; (8007fb0 <UART_SetConfig+0x2dc>)
 8007f74:	e7be      	b.n	8007ef4 <UART_SetConfig+0x220>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f76:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8007f7a:	480d      	ldr	r0, [pc, #52]	; (8007fb0 <UART_SetConfig+0x2dc>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f7c:	f47f aefb 	bne.w	8007d76 <UART_SetConfig+0xa2>
 8007f80:	e7b8      	b.n	8007ef4 <UART_SetConfig+0x220>
 8007f82:	bf00      	nop
 8007f84:	cfff69f3 	.word	0xcfff69f3
 8007f88:	40008000 	.word	0x40008000
 8007f8c:	40013800 	.word	0x40013800
 8007f90:	40004400 	.word	0x40004400
 8007f94:	40004800 	.word	0x40004800
 8007f98:	40004c00 	.word	0x40004c00
 8007f9c:	40021000 	.word	0x40021000
 8007fa0:	0800d778 	.word	0x0800d778
 8007fa4:	0800d768 	.word	0x0800d768
 8007fa8:	000ffcff 	.word	0x000ffcff
 8007fac:	0800d764 	.word	0x0800d764
 8007fb0:	00f42400 	.word	0x00f42400

08007fb4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fb4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007fb6:	07da      	lsls	r2, r3, #31
{
 8007fb8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fba:	d506      	bpl.n	8007fca <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fbc:	6801      	ldr	r1, [r0, #0]
 8007fbe:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007fc0:	684a      	ldr	r2, [r1, #4]
 8007fc2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007fc6:	4322      	orrs	r2, r4
 8007fc8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fca:	079c      	lsls	r4, r3, #30
 8007fcc:	d506      	bpl.n	8007fdc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fce:	6801      	ldr	r1, [r0, #0]
 8007fd0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8007fd2:	684a      	ldr	r2, [r1, #4]
 8007fd4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007fd8:	4322      	orrs	r2, r4
 8007fda:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fdc:	0759      	lsls	r1, r3, #29
 8007fde:	d506      	bpl.n	8007fee <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fe0:	6801      	ldr	r1, [r0, #0]
 8007fe2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007fe4:	684a      	ldr	r2, [r1, #4]
 8007fe6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007fea:	4322      	orrs	r2, r4
 8007fec:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fee:	071a      	lsls	r2, r3, #28
 8007ff0:	d506      	bpl.n	8008000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ff2:	6801      	ldr	r1, [r0, #0]
 8007ff4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007ff6:	684a      	ldr	r2, [r1, #4]
 8007ff8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ffc:	4322      	orrs	r2, r4
 8007ffe:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008000:	06dc      	lsls	r4, r3, #27
 8008002:	d506      	bpl.n	8008012 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008004:	6801      	ldr	r1, [r0, #0]
 8008006:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8008008:	688a      	ldr	r2, [r1, #8]
 800800a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800800e:	4322      	orrs	r2, r4
 8008010:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008012:	0699      	lsls	r1, r3, #26
 8008014:	d506      	bpl.n	8008024 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008016:	6801      	ldr	r1, [r0, #0]
 8008018:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800801a:	688a      	ldr	r2, [r1, #8]
 800801c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008020:	4322      	orrs	r2, r4
 8008022:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008024:	065a      	lsls	r2, r3, #25
 8008026:	d509      	bpl.n	800803c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008028:	6801      	ldr	r1, [r0, #0]
 800802a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800802c:	684a      	ldr	r2, [r1, #4]
 800802e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008032:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008034:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008038:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800803a:	d00b      	beq.n	8008054 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800803c:	061b      	lsls	r3, r3, #24
 800803e:	d506      	bpl.n	800804e <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008040:	6802      	ldr	r2, [r0, #0]
 8008042:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008044:	6853      	ldr	r3, [r2, #4]
 8008046:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800804a:	430b      	orrs	r3, r1
 800804c:	6053      	str	r3, [r2, #4]
  }
}
 800804e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008052:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008054:	684a      	ldr	r2, [r1, #4]
 8008056:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8008058:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800805c:	4322      	orrs	r2, r4
 800805e:	604a      	str	r2, [r1, #4]
 8008060:	e7ec      	b.n	800803c <UART_AdvFeatureConfig+0x88>
 8008062:	bf00      	nop

08008064 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008068:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800806c:	6804      	ldr	r4, [r0, #0]
{
 800806e:	4607      	mov	r7, r0
 8008070:	460e      	mov	r6, r1
 8008072:	4615      	mov	r5, r2
 8008074:	4699      	mov	r9, r3
 8008076:	f1b8 3fff 	cmp.w	r8, #4294967295
 800807a:	d10a      	bne.n	8008092 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800807c:	69e3      	ldr	r3, [r4, #28]
 800807e:	ea36 0303 	bics.w	r3, r6, r3
 8008082:	bf0c      	ite	eq
 8008084:	2301      	moveq	r3, #1
 8008086:	2300      	movne	r3, #0
 8008088:	429d      	cmp	r5, r3
 800808a:	d0f7      	beq.n	800807c <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800808c:	2000      	movs	r0, #0
}
 800808e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008092:	69e3      	ldr	r3, [r4, #28]
 8008094:	ea36 0303 	bics.w	r3, r6, r3
 8008098:	bf0c      	ite	eq
 800809a:	2301      	moveq	r3, #1
 800809c:	2300      	movne	r3, #0
 800809e:	42ab      	cmp	r3, r5
 80080a0:	d1f4      	bne.n	800808c <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080a2:	f7fd f913 	bl	80052cc <HAL_GetTick>
 80080a6:	eba0 0009 	sub.w	r0, r0, r9
 80080aa:	4540      	cmp	r0, r8
 80080ac:	d833      	bhi.n	8008116 <UART_WaitOnFlagUntilTimeout+0xb2>
 80080ae:	f1b8 0f00 	cmp.w	r8, #0
 80080b2:	d030      	beq.n	8008116 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080b4:	683c      	ldr	r4, [r7, #0]
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	0759      	lsls	r1, r3, #29
 80080ba:	4622      	mov	r2, r4
 80080bc:	d5db      	bpl.n	8008076 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080be:	69e3      	ldr	r3, [r4, #28]
 80080c0:	051b      	lsls	r3, r3, #20
 80080c2:	d5d8      	bpl.n	8008076 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080c8:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ca:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80080ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d2:	e844 3100 	strex	r1, r3, [r4]
 80080d6:	b139      	cbz	r1, 80080e8 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d8:	e852 3f00 	ldrex	r3, [r2]
 80080dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e0:	e842 3100 	strex	r1, r3, [r2]
 80080e4:	2900      	cmp	r1, #0
 80080e6:	d1f7      	bne.n	80080d8 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e8:	f102 0308 	add.w	r3, r2, #8
 80080ec:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f4:	f102 0008 	add.w	r0, r2, #8
 80080f8:	e840 3100 	strex	r1, r3, [r0]
 80080fc:	2900      	cmp	r1, #0
 80080fe:	d1f3      	bne.n	80080e8 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8008100:	2320      	movs	r3, #32
 8008102:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8008106:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800810a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 800810e:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008110:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8008114:	e7bb      	b.n	800808e <UART_WaitOnFlagUntilTimeout+0x2a>
 8008116:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008118:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800811c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008120:	e842 3100 	strex	r1, r3, [r2]
 8008124:	2900      	cmp	r1, #0
 8008126:	d1f7      	bne.n	8008118 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008128:	f102 0308 	add.w	r3, r2, #8
 800812c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008130:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008134:	f102 0008 	add.w	r0, r2, #8
 8008138:	e840 3100 	strex	r1, r3, [r0]
 800813c:	2900      	cmp	r1, #0
 800813e:	d1f3      	bne.n	8008128 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 8008140:	2320      	movs	r3, #32
 8008142:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8008146:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800814a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800814e:	2003      	movs	r0, #3
 8008150:	e79d      	b.n	800808e <UART_WaitOnFlagUntilTimeout+0x2a>
 8008152:	bf00      	nop

08008154 <HAL_UART_Transmit>:
{
 8008154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008158:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800815a:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800815e:	2820      	cmp	r0, #32
{
 8008160:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8008162:	f040 8090 	bne.w	8008286 <HAL_UART_Transmit+0x132>
    if ((pData == NULL) || (Size == 0U))
 8008166:	4689      	mov	r9, r1
 8008168:	2900      	cmp	r1, #0
 800816a:	d048      	beq.n	80081fe <HAL_UART_Transmit+0xaa>
 800816c:	4614      	mov	r4, r2
 800816e:	2a00      	cmp	r2, #0
 8008170:	d045      	beq.n	80081fe <HAL_UART_Transmit+0xaa>
 8008172:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8008174:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8008178:	2b01      	cmp	r3, #1
 800817a:	f000 8084 	beq.w	8008286 <HAL_UART_Transmit+0x132>
 800817e:	2301      	movs	r3, #1
 8008180:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008184:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008188:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800818a:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800818e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tickstart = HAL_GetTick();
 8008192:	f7fd f89b 	bl	80052cc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008196:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 8008198:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800819c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80081a0:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    tickstart = HAL_GetTick();
 80081a4:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081a6:	d072      	beq.n	800828e <HAL_UART_Transmit+0x13a>
    while (huart->TxXferCount > 0U)
 80081a8:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 80081ac:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80081ae:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80081b0:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 80081b4:	b1b3      	cbz	r3, 80081e4 <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081b6:	682c      	ldr	r4, [r5, #0]
 80081b8:	1c71      	adds	r1, r6, #1
 80081ba:	d124      	bne.n	8008206 <HAL_UART_Transmit+0xb2>
 80081bc:	69e2      	ldr	r2, [r4, #28]
 80081be:	0612      	lsls	r2, r2, #24
 80081c0:	d5fc      	bpl.n	80081bc <HAL_UART_Transmit+0x68>
      if (pdata8bits == NULL)
 80081c2:	f1b9 0f00 	cmp.w	r9, #0
 80081c6:	d059      	beq.n	800827c <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80081c8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80081cc:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 80081ce:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 80081d2:	3b01      	subs	r3, #1
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80081da:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 80081de:	b29b      	uxth	r3, r3
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1e9      	bne.n	80081b8 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081e4:	9600      	str	r6, [sp, #0]
 80081e6:	463b      	mov	r3, r7
 80081e8:	2200      	movs	r2, #0
 80081ea:	2140      	movs	r1, #64	; 0x40
 80081ec:	4628      	mov	r0, r5
 80081ee:	f7ff ff39 	bl	8008064 <UART_WaitOnFlagUntilTimeout>
 80081f2:	2800      	cmp	r0, #0
 80081f4:	d171      	bne.n	80082da <HAL_UART_Transmit+0x186>
    huart->gState = HAL_UART_STATE_READY;
 80081f6:	2320      	movs	r3, #32
 80081f8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    return HAL_OK;
 80081fc:	e000      	b.n	8008200 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 80081fe:	2001      	movs	r0, #1
}
 8008200:	b003      	add	sp, #12
 8008202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008206:	69e3      	ldr	r3, [r4, #28]
 8008208:	061b      	lsls	r3, r3, #24
 800820a:	d4da      	bmi.n	80081c2 <HAL_UART_Transmit+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800820c:	f7fd f85e 	bl	80052cc <HAL_GetTick>
 8008210:	1bc0      	subs	r0, r0, r7
 8008212:	4286      	cmp	r6, r0
 8008214:	d341      	bcc.n	800829a <HAL_UART_Transmit+0x146>
 8008216:	2e00      	cmp	r6, #0
 8008218:	d03f      	beq.n	800829a <HAL_UART_Transmit+0x146>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800821a:	682c      	ldr	r4, [r5, #0]
 800821c:	6822      	ldr	r2, [r4, #0]
 800821e:	0752      	lsls	r2, r2, #29
 8008220:	4623      	mov	r3, r4
 8008222:	d5c9      	bpl.n	80081b8 <HAL_UART_Transmit+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008224:	69e2      	ldr	r2, [r4, #28]
 8008226:	0510      	lsls	r0, r2, #20
 8008228:	d5c6      	bpl.n	80081b8 <HAL_UART_Transmit+0x64>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800822a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800822e:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008230:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008234:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008238:	e844 2100 	strex	r1, r2, [r4]
 800823c:	b139      	cbz	r1, 800824e <HAL_UART_Transmit+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823e:	e853 2f00 	ldrex	r2, [r3]
 8008242:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	e843 2100 	strex	r1, r2, [r3]
 800824a:	2900      	cmp	r1, #0
 800824c:	d1f7      	bne.n	800823e <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	f103 0208 	add.w	r2, r3, #8
 8008252:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008256:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825a:	f103 0008 	add.w	r0, r3, #8
 800825e:	e840 2100 	strex	r1, r2, [r0]
 8008262:	2900      	cmp	r1, #0
 8008264:	d1f3      	bne.n	800824e <HAL_UART_Transmit+0xfa>
          huart->gState = HAL_UART_STATE_READY;
 8008266:	2320      	movs	r3, #32
 8008268:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800826c:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008270:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        return HAL_TIMEOUT;
 8008274:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008276:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 800827a:	e7c1      	b.n	8008200 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800827c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8008280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008284:	e7a2      	b.n	80081cc <HAL_UART_Transmit+0x78>
    return HAL_BUSY;
 8008286:	2002      	movs	r0, #2
}
 8008288:	b003      	add	sp, #12
 800828a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800828e:	692b      	ldr	r3, [r5, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d189      	bne.n	80081a8 <HAL_UART_Transmit+0x54>
 8008294:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8008296:	4699      	mov	r9, r3
 8008298:	e786      	b.n	80081a8 <HAL_UART_Transmit+0x54>
 800829a:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80082a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a4:	e843 2100 	strex	r1, r2, [r3]
 80082a8:	2900      	cmp	r1, #0
 80082aa:	d1f7      	bne.n	800829c <HAL_UART_Transmit+0x148>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ac:	f103 0208 	add.w	r2, r3, #8
 80082b0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b8:	f103 0008 	add.w	r0, r3, #8
 80082bc:	e840 2100 	strex	r1, r2, [r0]
 80082c0:	2900      	cmp	r1, #0
 80082c2:	d1f3      	bne.n	80082ac <HAL_UART_Transmit+0x158>
        huart->gState = HAL_UART_STATE_READY;
 80082c4:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80082c6:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80082c8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80082cc:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80082d0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 80082d4:	b003      	add	sp, #12
 80082d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 80082da:	2003      	movs	r0, #3
 80082dc:	e790      	b.n	8008200 <HAL_UART_Transmit+0xac>
 80082de:	bf00      	nop

080082e0 <HAL_UART_Init>:
  if (huart == NULL)
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d066      	beq.n	80083b2 <HAL_UART_Init+0xd2>
{
 80082e4:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80082e6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 80082ea:	b082      	sub	sp, #8
 80082ec:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d04c      	beq.n	800838c <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 80082f2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80082f4:	2324      	movs	r3, #36	; 0x24
 80082f6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80082fa:	6813      	ldr	r3, [r2, #0]
 80082fc:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008300:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8008302:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008304:	f7ff fce6 	bl	8007cd4 <UART_SetConfig>
 8008308:	2801      	cmp	r0, #1
 800830a:	d03c      	beq.n	8008386 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800830c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800830e:	2b00      	cmp	r3, #0
 8008310:	d135      	bne.n	800837e <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	6859      	ldr	r1, [r3, #4]
 8008316:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800831a:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800831c:	6899      	ldr	r1, [r3, #8]
 800831e:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 8008322:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008324:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008326:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8008328:	f041 0101 	orr.w	r1, r1, #1
 800832c:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800832e:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8008332:	f7fc ffcb 	bl	80052cc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 800833c:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800833e:	d40e      	bmi.n	800835e <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	075b      	lsls	r3, r3, #29
 8008344:	d427      	bmi.n	8008396 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008346:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008348:	2220      	movs	r2, #32
 800834a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800834e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008352:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 8008356:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008358:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800835a:	b002      	add	sp, #8
 800835c:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800835e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	462a      	mov	r2, r5
 8008366:	4603      	mov	r3, r0
 8008368:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800836c:	4620      	mov	r0, r4
 800836e:	f7ff fe79 	bl	8008064 <UART_WaitOnFlagUntilTimeout>
 8008372:	b9e0      	cbnz	r0, 80083ae <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	075b      	lsls	r3, r3, #29
 800837a:	d40c      	bmi.n	8008396 <HAL_UART_Init+0xb6>
 800837c:	e7e3      	b.n	8008346 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800837e:	4620      	mov	r0, r4
 8008380:	f7ff fe18 	bl	8007fb4 <UART_AdvFeatureConfig>
 8008384:	e7c5      	b.n	8008312 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8008386:	2001      	movs	r0, #1
}
 8008388:	b002      	add	sp, #8
 800838a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800838c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8008390:	f7fc fd0c 	bl	8004dac <HAL_UART_MspInit>
 8008394:	e7ad      	b.n	80082f2 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008396:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	2200      	movs	r2, #0
 800839e:	4633      	mov	r3, r6
 80083a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80083a4:	4620      	mov	r0, r4
 80083a6:	f7ff fe5d 	bl	8008064 <UART_WaitOnFlagUntilTimeout>
 80083aa:	2800      	cmp	r0, #0
 80083ac:	d0cb      	beq.n	8008346 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 80083ae:	2003      	movs	r0, #3
 80083b0:	e7d3      	b.n	800835a <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 80083b2:	2001      	movs	r0, #1
}
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop

080083b8 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083b8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d017      	beq.n	80083f0 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083c0:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80083c2:	2324      	movs	r3, #36	; 0x24
{
 80083c4:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 80083c6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083ca:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083cc:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083ce:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 80083d0:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083d4:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80083d8:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083da:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083dc:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083de:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80083e2:	2220      	movs	r2, #32
 80083e4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 80083e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80083ec:	4618      	mov	r0, r3
}
 80083ee:	4770      	bx	lr
  __HAL_LOCK(huart);
 80083f0:	2002      	movs	r0, #2
}
 80083f2:	4770      	bx	lr

080083f4 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083f4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80083f8:	2a01      	cmp	r2, #1
 80083fa:	d037      	beq.n	800846c <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 80083fc:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083fe:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008400:	2024      	movs	r0, #36	; 0x24
{
 8008402:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8008404:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008408:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800840a:	6810      	ldr	r0, [r2, #0]
 800840c:	f020 0001 	bic.w	r0, r0, #1
 8008410:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008412:	6890      	ldr	r0, [r2, #8]
 8008414:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8008418:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800841a:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800841c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800841e:	b310      	cbz	r0, 8008466 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008420:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008422:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8008424:	4d12      	ldr	r5, [pc, #72]	; (8008470 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008426:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800842a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800842e:	4911      	ldr	r1, [pc, #68]	; (8008474 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8008430:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008434:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008438:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800843c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008440:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008442:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008444:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008448:	fbb1 f1f5 	udiv	r1, r1, r5
 800844c:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8008450:	2100      	movs	r1, #0
 8008452:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8008456:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008458:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800845a:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800845e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8008460:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8008464:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8008466:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8008468:	4608      	mov	r0, r1
 800846a:	e7ef      	b.n	800844c <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800846c:	2002      	movs	r0, #2
}
 800846e:	4770      	bx	lr
 8008470:	0800d790 	.word	0x0800d790
 8008474:	0800d798 	.word	0x0800d798

08008478 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8008478:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800847c:	2a01      	cmp	r2, #1
 800847e:	d037      	beq.n	80084f0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8008480:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008482:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008484:	2024      	movs	r0, #36	; 0x24
{
 8008486:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8008488:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800848c:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800848e:	6810      	ldr	r0, [r2, #0]
 8008490:	f020 0001 	bic.w	r0, r0, #1
 8008494:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008496:	6890      	ldr	r0, [r2, #8]
 8008498:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800849c:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800849e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084a0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80084a2:	b310      	cbz	r0, 80084ea <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084a4:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084a6:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80084a8:	4d12      	ldr	r5, [pc, #72]	; (80084f4 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084aa:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084ae:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084b2:	4911      	ldr	r1, [pc, #68]	; (80084f8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80084b4:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084b8:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80084bc:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80084c0:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084c4:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084c6:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084c8:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084cc:	fbb1 f1f5 	udiv	r1, r1, r5
 80084d0:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80084d4:	2100      	movs	r1, #0
 80084d6:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80084da:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084dc:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80084de:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80084e2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80084e4:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80084e8:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80084ea:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80084ec:	4608      	mov	r0, r1
 80084ee:	e7ef      	b.n	80084d0 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80084f0:	2002      	movs	r0, #2
}
 80084f2:	4770      	bx	lr
 80084f4:	0800d790 	.word	0x0800d790
 80084f8:	0800d798 	.word	0x0800d798

080084fc <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 80084fc:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 80084fe:	8840      	ldrh	r0, [r0, #2]
 8008500:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8008504:	0c00      	lsrs	r0, r0, #16
 8008506:	4770      	bx	lr

08008508 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8008508:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 800850a:	8803      	ldrh	r3, [r0, #0]
 800850c:	140d      	asrs	r5, r1, #16
{
 800850e:	b084      	sub	sp, #16
 8008510:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8008512:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8008516:	fb03 f303 	mul.w	r3, r3, r3
{
 800851a:	9101      	str	r1, [sp, #4]
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 800851c:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8008520:	428b      	cmp	r3, r1
 8008522:	da10      	bge.n	8008546 <Circle_Limitation+0x3e>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8008524:	8846      	ldrh	r6, [r0, #2]
 8008526:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 800852a:	4282      	cmp	r2, r0
 800852c:	dd14      	ble.n	8008558 <Circle_Limitation+0x50>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 800852e:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8008530:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8008534:	bfb8      	it	lt
 8008536:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8008538:	f7fa faa6 	bl	8002a88 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 800853c:	2c00      	cmp	r4, #0
        {
          new_q = - new_q;
 800853e:	bfb8      	it	lt
 8008540:	4240      	neglt	r0, r0
        }
      }
      Local_Vqd.q = (int16_t)new_q;
      Local_Vqd.d = (int16_t)new_d;
 8008542:	b235      	sxth	r5, r6
      Local_Vqd.q = (int16_t)new_q;
 8008544:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 8008546:	b2a4      	uxth	r4, r4
 8008548:	2000      	movs	r0, #0
 800854a:	f364 000f 	bfi	r0, r4, #0, #16
 800854e:	b2ad      	uxth	r5, r5
 8008550:	f365 401f 	bfi	r0, r5, #16, #16
}
 8008554:	b004      	add	sp, #16
 8008556:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8008558:	1a98      	subs	r0, r3, r2
 800855a:	f7fa fa95 	bl	8002a88 <MCM_Sqrt>
        if (Vqd.q < 0)
 800855e:	2c00      	cmp	r4, #0
 8008560:	daf0      	bge.n	8008544 <Circle_Limitation+0x3c>
          new_q = -new_q;
 8008562:	4240      	negs	r0, r0
 8008564:	e7ee      	b.n	8008544 <Circle_Limitation+0x3c>
 8008566:	bf00      	nop

08008568 <EAC_Init>:
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pENC = pENC;
    pHandle->EncAligned = false;
 8008568:	f04f 0c00 	mov.w	ip, #0
    pHandle->pVSS = pVSS;
 800856c:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pENC = pENC;
 8008570:	6083      	str	r3, [r0, #8]
    pHandle->EncAligned = false;
 8008572:	f8a0 c00e 	strh.w	ip, [r0, #14]
    pHandle->EncRestart = false;
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8008576:	4770      	bx	lr

08008578 <EAC_StartAlignment>:
  * It configures the VSS (Virtual Speed Sensor) with the required angle and sets the
  * STC (Speed and Torque Controller) to execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak void EAC_StartAlignment(EncAlign_Handle_t *pHandle)
{
 8008578:	b510      	push	{r4, lr}
  {
#endif
    uint32_t wAux;

    /* Set pVSS mechanical speed to zero.*/
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 800857a:	2200      	movs	r2, #0
{
 800857c:	4604      	mov	r4, r0
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 800857e:	4611      	mov	r1, r2
 8008580:	6840      	ldr	r0, [r0, #4]
 8008582:	f001 fe4d 	bl	800a220 <VSS_SetMecAcceleration>

    /* Set pVSS mechanical angle.*/
    VSS_SetMecAngle(pHandle->pVSS, pHandle->hElAngle);
 8008586:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 800858a:	6860      	ldr	r0, [r4, #4]
 800858c:	f001 fe40 	bl	800a210 <VSS_SetMecAngle>

    /* Set pSTC in MCM_TORQUE_MODE.*/
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8008590:	6820      	ldr	r0, [r4, #0]
 8008592:	2104      	movs	r1, #4
 8008594:	f001 fd9a 	bl	800a0cc <STC_SetControlMode>

    /* Set starting torque to Zero */
    (void)STC_ExecRamp(pHandle->pSTC, 0, 0U);
 8008598:	2200      	movs	r2, #0
 800859a:	4611      	mov	r1, r2
 800859c:	6820      	ldr	r0, [r4, #0]
 800859e:	f001 fd99 	bl	800a0d4 <STC_ExecRamp>

    /* Execute the torque ramp.*/
    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, (uint32_t)pHandle->hDurationms);
 80085a2:	8ae2      	ldrh	r2, [r4, #22]
 80085a4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80085a8:	6820      	ldr	r0, [r4, #0]
 80085aa:	f001 fd93 	bl	800a0d4 <STC_ExecRamp>
    /* Compute hRemainingTicks, the number of thick of alignment phase.*/
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 80085ae:	8ae3      	ldrh	r3, [r4, #22]
 80085b0:	8a21      	ldrh	r1, [r4, #16]
    wAux /= 1000U;
 80085b2:	4a04      	ldr	r2, [pc, #16]	; (80085c4 <EAC_StartAlignment+0x4c>)
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 80085b4:	fb01 f303 	mul.w	r3, r1, r3
    wAux /= 1000U;
 80085b8:	fba2 2303 	umull	r2, r3, r2, r3
 80085bc:	099b      	lsrs	r3, r3, #6
    pHandle->hRemainingTicks = (uint16_t)wAux;
    pHandle->hRemainingTicks++;
 80085be:	3301      	adds	r3, #1
 80085c0:	81a3      	strh	r3, [r4, #12]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 80085c2:	bd10      	pop	{r4, pc}
 80085c4:	10624dd3 	.word	0x10624dd3

080085c8 <EAC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingTicks > 0U)
 80085c8:	8983      	ldrh	r3, [r0, #12]
 80085ca:	b13b      	cbz	r3, 80085dc <EAC_Exec+0x14>
    {
      pHandle->hRemainingTicks--;
 80085cc:	3b01      	subs	r3, #1
 80085ce:	b29b      	uxth	r3, r3
{
 80085d0:	b510      	push	{r4, lr}
 80085d2:	4604      	mov	r4, r0
      pHandle->hRemainingTicks--;
 80085d4:	8183      	strh	r3, [r0, #12]

      if (0U == pHandle->hRemainingTicks)
 80085d6:	b11b      	cbz	r3, 80085e0 <EAC_Exec+0x18>
        pHandle->EncAligned = true;
        retVal = true;
      }
      else
      {
        retVal = false;
 80085d8:	2000      	movs	r0, #0
    }
#endif
  }

  return (retVal);
}
 80085da:	bd10      	pop	{r4, pc}
  bool retVal = true;
 80085dc:	2001      	movs	r0, #1
}
 80085de:	4770      	bx	lr
        ENC_SetMecAngle(pHandle->pENC, pHandle->hElAngle / ((int16_t)pHandle->bElToMecRatio));
 80085e0:	7e03      	ldrb	r3, [r0, #24]
 80085e2:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 80085e6:	6880      	ldr	r0, [r0, #8]
 80085e8:	fb91 f1f3 	sdiv	r1, r1, r3
 80085ec:	f000 f940 	bl	8008870 <ENC_SetMecAngle>
        pHandle->EncAligned = true;
 80085f0:	2001      	movs	r0, #1
 80085f2:	73a0      	strb	r0, [r4, #14]
}
 80085f4:	bd10      	pop	{r4, pc}
 80085f6:	bf00      	nop

080085f8 <EAC_IsAligned>:
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  return ((NULL == pHandle) ? false : pHandle->EncAligned);
#else
  return (pHandle->EncAligned);
#endif
}
 80085f8:	7b80      	ldrb	r0, [r0, #14]
 80085fa:	4770      	bx	lr

080085fc <EAC_SetRestartState>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->EncRestart = restart;
 80085fc:	73c1      	strb	r1, [r0, #15]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 80085fe:	4770      	bx	lr

08008600 <ENC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8008600:	6a03      	ldr	r3, [r0, #32]
#endif
    /* Reset counter */
    LL_TIM_SetCounter(TIMx, 0);

    /*Calculations of convenience*/
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8008602:	f8b0 c06e 	ldrh.w	ip, [r0, #110]	; 0x6e
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
{
 800860c:	b410      	push	{r4}
 800860e:	601a      	str	r2, [r3, #0]
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8008610:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
 8008614:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008618:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 800861a:	2100      	movs	r1, #0
 800861c:	6259      	str	r1, [r3, #36]	; 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 800861e:	f04f 34ff 	mov.w	r4, #4294967295
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8008622:	6242      	str	r2, [r0, #36]	; 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8008624:	fbb4 f4fc 	udiv	r4, r4, ip
 8008628:	6684      	str	r4, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800862a:	699a      	ldr	r2, [r3, #24]

    /* Set IC filter for both channel 1 & 2*/
    LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ((uint32_t)pHandle->ICx_Filter << 20U));
 800862c:	f890 4076 	ldrb.w	r4, [r0, #118]	; 0x76
 8008630:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008634:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8008638:	619a      	str	r2, [r3, #24]
 800863a:	699a      	ldr	r2, [r3, #24]
 800863c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8008640:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008644:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8008648:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800864a:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800864c:	68da      	ldr	r2, [r3, #12]
 800864e:	f042 0201 	orr.w	r2, r2, #1
 8008652:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	f042 0201 	orr.w	r2, r2, #1
 800865a:	601a      	str	r2, [r3, #0]

    /* Enable the counting timer*/
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bufferSize = pHandle->SpeedBufferSize;
 800865c:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74

    for (index = 0U; index < bufferSize; index++)
 8008660:	b12a      	cbz	r2, 800866e <ENC_Init+0x6e>
      pHandle->DeltaCapturesBuffer[index] = 0;
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8008662:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->DeltaCapturesBuffer[index] = 0;
 8008666:	0092      	lsls	r2, r2, #2
 8008668:	3028      	adds	r0, #40	; 0x28
 800866a:	f002 b826 	b.w	800a6ba <memset>
}
 800866e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008672:	4770      	bx	lr

08008674 <ENC_Clear>:
  *         This function must be called before starting the motor to initialize
  *         the speed measurement process.
  * @param  pHandle: handler of the current instance of the encoder component
  */
__weak void ENC_Clear(ENCODER_Handle_t *pHandle)
{
 8008674:	b510      	push	{r4, lr}
  else
  {
#endif
    uint8_t index;

    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8008676:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
{
 800867a:	4604      	mov	r4, r0
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 800867c:	b122      	cbz	r2, 8008688 <ENC_Clear+0x14>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 800867e:	0092      	lsls	r2, r2, #2
 8008680:	2100      	movs	r1, #0
 8008682:	3028      	adds	r0, #40	; 0x28
 8008684:	f002 f819 	bl	800a6ba <memset>
    }
    pHandle->SensorIsReliable = true;
 8008688:	2301      	movs	r3, #1
 800868a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 800868e:	bd10      	pop	{r4, pc}

08008690 <ENC_CalcAngle>:
  *         of the instantaneous value of the timer counter.
  * @param  pHandle: handler of the current instance of the encoder component
  * @retval Measured electrical angle in [s16degree](measurement_units.md) format.
  */
__weak int16_t ENC_CalcAngle(ENCODER_Handle_t *pHandle)
{
 8008690:	b410      	push	{r4}
    int16_t mecAngle; /* s16degree format */
    uint32_t uwtemp1;
    int32_t wtemp1;
    /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1
     if the overflow occurs just after the entry in the High frequency task */
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8008692:	6a03      	ldr	r3, [r0, #32]
 8008694:	6e84      	ldr	r4, [r0, #104]	; 0x68
  return (uint32_t)(READ_REG(TIMx->CNT));
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    wtemp1 = (int32_t)uwtemp1 / 65536;
#endif
    /*Computes and stores the rotor mechanical angle*/
    mecAngle = (int16_t)wtemp1;

    int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 8008698:	f9b0 1006 	ldrsh.w	r1, [r0, #6]

    pHandle->_Super.hMecAngle = mecAngle;

    /*Computes and stores the rotor electrical angle*/
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 800869c:	7842      	ldrb	r2, [r0, #1]
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 800869e:	b29b      	uxth	r3, r3
 80086a0:	fb04 f303 	mul.w	r3, r4, r3
    wtemp1 = (int32_t)uwtemp1 >> 16U;  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80086a4:	141b      	asrs	r3, r3, #16
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 80086a6:	fb03 f202 	mul.w	r2, r3, r2

    pHandle->_Super.hElAngle = elAngle;

    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 80086aa:	1a59      	subs	r1, r3, r1
    mecAngle = (int16_t)wtemp1;
 80086ac:	80c3      	strh	r3, [r0, #6]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 80086ae:	6883      	ldr	r3, [r0, #8]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  /*Returns rotor electrical angle*/
  return (elAngle);
}
 80086b0:	f85d 4b04 	ldr.w	r4, [sp], #4
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 80086b4:	b212      	sxth	r2, r2
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 80086b6:	fa03 f381 	sxtah	r3, r3, r1
    pHandle->_Super.hElAngle = elAngle;
 80086ba:	8082      	strh	r2, [r0, #4]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 80086bc:	6083      	str	r3, [r0, #8]
}
 80086be:	4610      	mov	r0, r2
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop

080086c4 <ENC_CalcAvrgMecSpeedUnit>:
  * @param  pMecSpeedUnit pointer used to return the rotor average mechanical speed
  *         expressed in the unit defined by #SPEED_UNIT
  * @retval true = sensor information is reliable. false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit(ENCODER_Handle_t *pHandle, int16_t *pMecSpeedUnit)
{
 80086c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t wtemp2;
    uint32_t OverflowCntSample;
    uint32_t CntCapture;
    uint32_t directionSample;
    int32_t wOverallAngleVariation = 0;
    TIM_TypeDef *TIMx = pHandle->TIMx;
 80086c6:	6a03      	ldr	r3, [r0, #32]
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 80086c8:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80086cc:	68dc      	ldr	r4, [r3, #12]
 80086ce:	f024 0401 	bic.w	r4, r4, #1
 80086d2:	60dc      	str	r4, [r3, #12]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80086d4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
#ifdef TIM_CNT_UIFCPY
    /* disable Interrupt generation */
    LL_TIM_DisableIT_UPDATE(TIMx);
#endif
    CntCapture = LL_TIM_GetCounter(TIMx);
    OverflowCntSample = pHandle->TimerOverflowNb;
 80086d6:	f8b0 5070 	ldrh.w	r5, [r0, #112]	; 0x70
    pHandle->TimerOverflowNb = 0;
    directionSample = LL_TIM_GetDirection(TIMx);
#ifdef TIM_CNT_UIFCPY
    OFbit = __LL_TIM_GETFLAG_UIFCPY(CntCapture);
    if (0U == OFbit)
 80086da:	0fe7      	lsrs	r7, r4, #31
    pHandle->TimerOverflowNb = 0;
 80086dc:	f04f 0600 	mov.w	r6, #0
 80086e0:	f8a0 6070 	strh.w	r6, [r0, #112]	; 0x70
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80086e4:	bf18      	it	ne
 80086e6:	f06f 0c01 	mvnne.w	ip, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80086ea:	681e      	ldr	r6, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80086ec:	bf18      	it	ne
 80086ee:	f8c3 c010 	strne.w	ip, [r3, #16]
    OverflowCntSample = pHandle->TimerOverflowNb;
 80086f2:	b2ad      	uxth	r5, r5
      into accout, we must not clear the interrupt in order to accumulate it */
      LL_TIM_ClearFlag_UPDATE(TIMx);
    }

    LL_TIM_EnableIT_UPDATE(TIMx);
    CLEAR_BIT(CntCapture, TIM_CNT_UIFCPY);
 80086f4:	f024 4c00 	bic.w	ip, r4, #2147483648	; 0x80000000
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80086f8:	68dc      	ldr	r4, [r3, #12]

    /* If UIFCPY is not present, OverflowCntSample can not be used safely for
    speed computation, but we still use it to check that we do not exceed one overflow
    (sample frequency not less than mechanical motor speed */

    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
 80086fa:	443d      	add	r5, r7
 80086fc:	f044 0401 	orr.w	r4, r4, #1
 8008700:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8008704:	60dc      	str	r4, [r3, #12]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8008706:	f006 0610 	and.w	r6, r6, #16
    {
      pHandle->TimerOverflowError = true;
 800870a:	bf8a      	itet	hi
 800870c:	2401      	movhi	r4, #1
    {
      /* nothing to do */
    }

    /*Checks the reliability status, then stores and returns it*/
    if (pHandle->TimerOverflowError)
 800870e:	f890 4078 	ldrbls.w	r4, [r0, #120]	; 0x78
      pHandle->TimerOverflowError = true;
 8008712:	f880 4078 	strbhi.w	r4, [r0, #120]	; 0x78
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
 8008716:	2e00      	cmp	r6, #0
 8008718:	f000 8093 	beq.w	8008842 <ENC_CalcAvrgMecSpeedUnit+0x17e>
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800871c:	f890 6077 	ldrb.w	r6, [r0, #119]	; 0x77
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 8008720:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8008724:	f8b0 e06e 	ldrh.w	lr, [r0, #110]	; 0x6e
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8008728:	360a      	adds	r6, #10
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 800872a:	ebac 0303 	sub.w	r3, ip, r3
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 800872e:	fb0e 3515 	mls	r5, lr, r5, r3
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8008732:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008736:	2a00      	cmp	r2, #0
 8008738:	f000 8093 	beq.w	8008862 <ENC_CalcAvrgMecSpeedUnit+0x19e>
 800873c:	2a01      	cmp	r2, #1
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800873e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008740:	d039      	beq.n	80087b6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008742:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008744:	2a02      	cmp	r2, #2
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008746:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008748:	d035      	beq.n	80087b6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800874a:	6b05      	ldr	r5, [r0, #48]	; 0x30
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800874c:	2a03      	cmp	r2, #3
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800874e:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008750:	d031      	beq.n	80087b6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008752:	6b45      	ldr	r5, [r0, #52]	; 0x34
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008754:	2a04      	cmp	r2, #4
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008756:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008758:	d02d      	beq.n	80087b6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800875a:	6b85      	ldr	r5, [r0, #56]	; 0x38
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800875c:	2a05      	cmp	r2, #5
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800875e:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008760:	d029      	beq.n	80087b6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008762:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008764:	2a06      	cmp	r2, #6
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008766:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008768:	d025      	beq.n	80087b6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800876a:	6c05      	ldr	r5, [r0, #64]	; 0x40
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800876c:	2a07      	cmp	r2, #7
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800876e:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008770:	d021      	beq.n	80087b6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008772:	6c45      	ldr	r5, [r0, #68]	; 0x44
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008774:	2a08      	cmp	r2, #8
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008776:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008778:	d01d      	beq.n	80087b6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800877a:	6c85      	ldr	r5, [r0, #72]	; 0x48
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800877c:	2a09      	cmp	r2, #9
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800877e:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008780:	d019      	beq.n	80087b6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008782:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008784:	2a0a      	cmp	r2, #10
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008786:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008788:	d015      	beq.n	80087b6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800878a:	6d05      	ldr	r5, [r0, #80]	; 0x50
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800878c:	2a0b      	cmp	r2, #11
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800878e:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008790:	d011      	beq.n	80087b6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008792:	6d45      	ldr	r5, [r0, #84]	; 0x54
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008794:	2a0c      	cmp	r2, #12
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008796:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8008798:	d00d      	beq.n	80087b6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800879a:	6d85      	ldr	r5, [r0, #88]	; 0x58
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800879c:	2a0d      	cmp	r2, #13
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800879e:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80087a0:	d009      	beq.n	80087b6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80087a2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80087a4:	2a0e      	cmp	r2, #14
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80087a6:	442b      	add	r3, r5
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80087a8:	d005      	beq.n	80087b6 <ENC_CalcAvrgMecSpeedUnit+0xf2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80087aa:	6e05      	ldr	r5, [r0, #96]	; 0x60
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80087ac:	2a0f      	cmp	r2, #15
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80087ae:	442b      	add	r3, r5
 80087b0:	bf1c      	itt	ne
 80087b2:	6e45      	ldrne	r5, [r0, #100]	; 0x64
 80087b4:	195b      	addne	r3, r3, r5
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 80087b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
    wtemp2 = ((int32_t)pHandle->PulseNumber) * ((int32_t)pHandle->SpeedBufferSize);
 80087b8:	fb0e f502 	mul.w	r5, lr, r2
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 80087bc:	fb06 f303 	mul.w	r3, r6, r3
    wtemp1 = ((0 == wtemp2) ? wtemp1 : (wtemp1 / wtemp2));
 80087c0:	b10d      	cbz	r5, 80087c6 <ENC_CalcAvrgMecSpeedUnit+0x102>
 80087c2:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wtemp1;
 80087c6:	b21e      	sxth	r6, r3
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 80087c8:	b29b      	uxth	r3, r3
    *pMecSpeedUnit = (int16_t)wtemp1;
 80087ca:	800e      	strh	r6, [r1, #0]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 80087cc:	f890 5077 	ldrb.w	r5, [r0, #119]	; 0x77
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 80087d0:	8987      	ldrh	r7, [r0, #12]
    pHandle->DeltaCapturesIndex++;
 80087d2:	f890 e077 	ldrb.w	lr, [r0, #119]	; 0x77
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 80087d6:	350a      	adds	r5, #10
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 80087d8:	1bdb      	subs	r3, r3, r7
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 80087da:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 80087de:	8243      	strh	r3, [r0, #18]
    pHandle->DeltaCapturesIndex++;
 80087e0:	f10e 0e01 	add.w	lr, lr, #1
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 80087e4:	f8b0 306c 	ldrh.w	r3, [r0, #108]	; 0x6c
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;
 80087e8:	8186      	strh	r6, [r0, #12]
    pHandle->DeltaCapturesIndex++;
 80087ea:	fa5f fe8e 	uxtb.w	lr, lr
 80087ee:	f880 e077 	strb.w	lr, [r0, #119]	; 0x77
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 80087f2:	fb05 f303 	mul.w	r3, r5, r3
             * ((int32_t)pHandle->_Super.bElToMecRatio);
 80087f6:	7845      	ldrb	r5, [r0, #1]
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 80087f8:	f890 6077 	ldrb.w	r6, [r0, #119]	; 0x77
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 80087fc:	fb05 f303 	mul.w	r3, r5, r3
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8008800:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8008804:	69c5      	ldr	r5, [r0, #28]
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8008806:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800880a:	45bc      	cmp	ip, r7
 800880c:	bf88      	it	hi
 800880e:	46f4      	movhi	ip, lr
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8008810:	4296      	cmp	r6, r2
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8008812:	f8a0 c072 	strh.w	ip, [r0, #114]	; 0x72
    wtemp1 /= ((int32_t)pHandle->PulseNumber);
 8008816:	f8b0 c06e 	ldrh.w	ip, [r0, #110]	; 0x6e
 800881a:	fb93 f3fc 	sdiv	r3, r3, ip
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 800881e:	fb05 f303 	mul.w	r3, r5, r3
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8008822:	8b45      	ldrh	r5, [r0, #26]
 8008824:	fb93 f3f5 	sdiv	r3, r3, r5
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;
 8008828:	81c3      	strh	r3, [r0, #14]
      pHandle->DeltaCapturesIndex = 0U;
 800882a:	bf24      	itt	cs
 800882c:	2300      	movcs	r3, #0
 800882e:	f880 3077 	strbcs.w	r3, [r0, #119]	; 0x77
    if (pHandle->TimerOverflowError)
 8008832:	b1cc      	cbz	r4, 8008868 <ENC_CalcAvrgMecSpeedUnit+0x1a4>
    {
      bReliability = false;
      pHandle->SensorIsReliable = false;
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8008834:	78c2      	ldrb	r2, [r0, #3]
 8008836:	7002      	strb	r2, [r0, #0]
      pHandle->SensorIsReliable = false;
 8008838:	2300      	movs	r3, #0
 800883a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  return (bReliability);
}
 800883e:	4618      	mov	r0, r3
 8008840:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8008842:	f890 6077 	ldrb.w	r6, [r0, #119]	; 0x77
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 8008846:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 800884a:	f8b0 e06e 	ldrh.w	lr, [r0, #110]	; 0x6e
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800884e:	360a      	adds	r6, #10
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 8008850:	ebac 0303 	sub.w	r3, ip, r3
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8008854:	fb0e 3505 	mla	r5, lr, r5, r3
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8008858:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800885c:	2a00      	cmp	r2, #0
 800885e:	f47f af6d 	bne.w	800873c <ENC_CalcAvrgMecSpeedUnit+0x78>
 8008862:	4613      	mov	r3, r2
 8008864:	4616      	mov	r6, r2
 8008866:	e7b0      	b.n	80087ca <ENC_CalcAvrgMecSpeedUnit+0x106>
}
 8008868:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 800886c:	f001 bbc4 	b.w	8009ff8 <SPD_IsMecSpeedReliable>

08008870 <ENC_SetMecAngle>:
    uint16_t hAngleCounts;
    uint16_t hMecAngleuint;
    int16_t localhMecAngle = hMecAngle;

    pHandle->_Super.hMecAngle = localhMecAngle;
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8008870:	7843      	ldrb	r3, [r0, #1]
    pHandle->_Super.hMecAngle = localhMecAngle;
 8008872:	80c1      	strh	r1, [r0, #6]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8008874:	fb01 f303 	mul.w	r3, r1, r3
 8008878:	b28a      	uxth	r2, r1
    if (localhMecAngle < 0)
 800887a:	2900      	cmp	r1, #0
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 800887c:	8083      	strh	r3, [r0, #4]
 800887e:	bfbc      	itt	lt
 8008880:	f102 33ff 	addlt.w	r3, r2, #4294967295
 8008884:	b29a      	uxthlt	r2, r3
    else
    {
      hMecAngleuint = (uint16_t)localhMecAngle;
    }

    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8008886:	f8b0 306e 	ldrh.w	r3, [r0, #110]	; 0x6e
 800888a:	4906      	ldr	r1, [pc, #24]	; (80088a4 <ENC_SetMecAngle+0x34>)
 800888c:	fb02 f303 	mul.w	r3, r2, r3
{
 8008890:	b410      	push	{r4}
    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8008892:	fba1 2303 	umull	r2, r3, r1, r3
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8008896:	6a04      	ldr	r4, [r0, #32]
    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8008898:	0bdb      	lsrs	r3, r3, #15

    TIMx->CNT = (uint16_t)hAngleCounts;
 800889a:	6263      	str	r3, [r4, #36]	; 0x24
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 800889c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	80008001 	.word	0x80008001

080088a8 <ENC_IRQHandler>:
/**
  * @brief  TIMER ENCODER Overflow interrupt counter update
  * @param  pHandleVoid: handler of the current instance of the encoder component
  */
__weak void *ENC_IRQHandler(void *pHandleVoid)
{
 80088a8:	4602      	mov	r2, r0
  /*Updates the number of overflows occurred*/
  /* the handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1U;

  return (MC_NULL);
}
 80088aa:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1U;
 80088ac:	f8b2 3070 	ldrh.w	r3, [r2, #112]	; 0x70
 80088b0:	3301      	adds	r3, #1
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop

080088bc <MCP_ReceivedPacket>:
#include "mc_config.h"
#include "mcp_config.h"
#include "mc_api.h"

void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 80088bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 80088be:	6845      	ldr	r5, [r0, #4]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80088c0:	882a      	ldrh	r2, [r5, #0]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80088c2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80088c6:	f022 0307 	bic.w	r3, r2, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80088ca:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 80088ce:	b083      	sub	sp, #12
 80088d0:	4604      	mov	r4, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80088d2:	b29b      	uxth	r3, r3
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80088d4:	d04f      	beq.n	8008976 <MCP_ReceivedPacket+0xba>
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);

    
    MCI_Handle_t *pMCI = &Mci[motorID];
 80088d6:	4f59      	ldr	r7, [pc, #356]	; (8008a3c <MCP_ReceivedPacket+0x180>)
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 80088d8:	3a01      	subs	r2, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 80088da:	f002 0207 	and.w	r2, r2, #7
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 80088de:	3502      	adds	r5, #2
    MCI_Handle_t *pMCI = &Mci[motorID];
 80088e0:	eb07 1742 	add.w	r7, r7, r2, lsl #5
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80088e4:	6822      	ldr	r2, [r4, #0]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 80088e6:	6045      	str	r5, [r0, #4]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80088e8:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80088ea:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80088ee:	3802      	subs	r0, #2
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80088f0:	f10c 3cff 	add.w	ip, ip, #4294967295
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80088f4:	b280      	uxth	r0, r0
    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0;
 80088f6:	2600      	movs	r6, #0

    switch (command)
 80088f8:	2b38      	cmp	r3, #56	; 0x38
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80088fa:	81a0      	strh	r0, [r4, #12]
    pHandle->txLength = 0;
 80088fc:	81e6      	strh	r6, [r4, #14]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80088fe:	fa1f f18c 	uxth.w	r1, ip
 8008902:	fa0f f28c 	sxth.w	r2, ip
    switch (command)
 8008906:	d829      	bhi.n	800895c <MCP_ReceivedPacket+0xa0>
 8008908:	2b38      	cmp	r3, #56	; 0x38
 800890a:	d81e      	bhi.n	800894a <MCP_ReceivedPacket+0x8e>
 800890c:	e8df f003 	tbb	[pc, r3]
 8008910:	1d1d1d5c 	.word	0x1d1d1d5c
 8008914:	1d1d1d1d 	.word	0x1d1d1d1d
 8008918:	1d1d1d64 	.word	0x1d1d1d64
 800891c:	1d1d1d1d 	.word	0x1d1d1d1d
 8008920:	1d1d1d57 	.word	0x1d1d1d57
 8008924:	1d1d1d1d 	.word	0x1d1d1d1d
 8008928:	1d1d1d4f 	.word	0x1d1d1d4f
 800892c:	1d1d1d1d 	.word	0x1d1d1d1d
 8008930:	1d1d1d49 	.word	0x1d1d1d49
 8008934:	1d1d1d1d 	.word	0x1d1d1d1d
 8008938:	1d1d1d69 	.word	0x1d1d1d69
 800893c:	1d1d1d1d 	.word	0x1d1d1d1d
 8008940:	1d1d1d45 	.word	0x1d1d1d45
 8008944:	1d1d1d1d 	.word	0x1d1d1d1d
 8008948:	74          	.byte	0x74
 8008949:	00          	.byte	0x00
 800894a:	2300      	movs	r3, #0
 800894c:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800894e:	68a2      	ldr	r2, [r4, #8]
 8008950:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8008952:	89e3      	ldrh	r3, [r4, #14]
 8008954:	3301      	adds	r3, #1
 8008956:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8008958:	b003      	add	sp, #12
 800895a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 800895c:	2b68      	cmp	r3, #104	; 0x68
 800895e:	d062      	beq.n	8008a26 <MCP_ReceivedPacket+0x16a>
 8008960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008964:	d068      	beq.n	8008a38 <MCP_ReceivedPacket+0x17c>
 8008966:	2b48      	cmp	r3, #72	; 0x48
 8008968:	d1ef      	bne.n	800894a <MCP_ReceivedPacket+0x8e>
        MCI_Clear_Iqdref(pMCI);
 800896a:	4638      	mov	r0, r7
 800896c:	f7f9 ffde 	bl	800292c <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008970:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8008972:	4630      	mov	r0, r6
        break;
 8008974:	e7eb      	b.n	800894e <MCP_ReceivedPacket+0x92>
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8008976:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8008978:	6822      	ldr	r2, [r4, #0]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800897a:	3802      	subs	r0, #2
      userCommand = (command >> 3) & 0x1f;
 800897c:	f3c3 03c7 	ubfx	r3, r3, #3, #8
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8008980:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8008982:	3502      	adds	r5, #2
    pHandle->txLength = 0;
 8008984:	2100      	movs	r1, #0
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8008986:	f013 0f1e 	tst.w	r3, #30
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800898a:	8992      	ldrh	r2, [r2, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800898c:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 800898e:	6065      	str	r5, [r4, #4]
    pHandle->txLength = 0;
 8008990:	81e1      	strh	r1, [r4, #14]
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8008992:	d037      	beq.n	8008a04 <MCP_ReceivedPacket+0x148>
        MCPResponse = MCP_CMD_OK;
 8008994:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8008996:	200d      	movs	r0, #13
 8008998:	e7d9      	b.n	800894e <MCP_ReceivedPacket+0x92>
        if (IDLE == MCI_GetSTMState(pMCI))
 800899a:	4638      	mov	r0, r7
 800899c:	f7f9 fefe 	bl	800279c <MCI_GetSTMState>
 80089a0:	b128      	cbz	r0, 80089ae <MCP_ReceivedPacket+0xf2>
          (void)MCI_StopMotor(pMCI);
 80089a2:	4638      	mov	r0, r7
 80089a4:	f7f9 ff16 	bl	80027d4 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80089a8:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 80089aa:	2000      	movs	r0, #0
 80089ac:	e7cf      	b.n	800894e <MCP_ReceivedPacket+0x92>
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 80089ae:	4638      	mov	r0, r7
 80089b0:	f7f9 fefa 	bl	80027a8 <MCI_StartMotor>
 80089b4:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80089b8:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 80089ba:	b2c0      	uxtb	r0, r0
 80089bc:	e7c7      	b.n	800894e <MCP_ReceivedPacket+0x92>
        MCPResponse = RI_GetRegCommandParser(pHandle, txSyncFreeSpace);
 80089be:	4620      	mov	r0, r4
 80089c0:	f7fb f99e 	bl	8003d00 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80089c4:	89e3      	ldrh	r3, [r4, #14]
        break;
 80089c6:	e7c2      	b.n	800894e <MCP_ReceivedPacket+0x92>
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 80089c8:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4;
 80089ca:	2104      	movs	r1, #4
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 80089cc:	2201      	movs	r2, #1
        pHandle->txLength = 4;
 80089ce:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 80089d0:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80089d2:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80089d4:	2000      	movs	r0, #0
      break;
 80089d6:	e7ba      	b.n	800894e <MCP_ReceivedPacket+0x92>
        MCPResponse = RI_SetRegCommandParser(pHandle, txSyncFreeSpace);
 80089d8:	4620      	mov	r0, r4
 80089da:	f7fa feb9 	bl	8003750 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80089de:	89e3      	ldrh	r3, [r4, #14]
        break;
 80089e0:	e7b5      	b.n	800894e <MCP_ReceivedPacket+0x92>
        if (RUN == MCI_GetSTMState(pMCI))
 80089e2:	4638      	mov	r0, r7
 80089e4:	f7f9 feda 	bl	800279c <MCI_GetSTMState>
 80089e8:	2806      	cmp	r0, #6
 80089ea:	d1dd      	bne.n	80089a8 <MCP_ReceivedPacket+0xec>
          MCI_StopRamp(pMCI);
 80089ec:	4638      	mov	r0, r7
 80089ee:	f7f9 ff35 	bl	800285c <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80089f2:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80089f4:	2000      	movs	r0, #0
 80089f6:	e7aa      	b.n	800894e <MCP_ReceivedPacket+0x92>
        (void)MCI_FaultAcknowledged(pMCI);
 80089f8:	4638      	mov	r0, r7
 80089fa:	f7f9 ff0b 	bl	8002814 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80089fe:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8008a00:	2000      	movs	r0, #0
        break;
 8008a02:	e7a4      	b.n	800894e <MCP_ReceivedPacket+0x92>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8008a04:	3a01      	subs	r2, #1
      userCommand = (command >> 3) & 0x1f;
 8008a06:	f003 031f 	and.w	r3, r3, #31
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8008a0a:	b212      	sxth	r2, r2
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8008a0c:	490c      	ldr	r1, [pc, #48]	; (8008a40 <MCP_ReceivedPacket+0x184>)
 8008a0e:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 8008a12:	2e00      	cmp	r6, #0
 8008a14:	d0be      	beq.n	8008994 <MCP_ReceivedPacket+0xd8>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8008a16:	68a3      	ldr	r3, [r4, #8]
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	f104 030e 	add.w	r3, r4, #14
 8008a20:	47b0      	blx	r6
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008a22:	89e3      	ldrh	r3, [r4, #14]
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8008a24:	e793      	b.n	800894e <MCP_ReceivedPacket+0x92>
  	    MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8008a26:	68a3      	ldr	r3, [r4, #8]
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	f104 030e 	add.w	r3, r4, #14
 8008a30:	f7f9 fe38 	bl	80026a4 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008a34:	89e3      	ldrh	r3, [r4, #14]
        break;
 8008a36:	e78a      	b.n	800894e <MCP_ReceivedPacket+0x92>
    switch (command)
 8008a38:	4633      	mov	r3, r6
 8008a3a:	e7e7      	b.n	8008a0c <MCP_ReceivedPacket+0x150>
 8008a3c:	20000a70 	.word	0x20000a70
 8008a40:	20001bf0 	.word	0x20001bf0

08008a44 <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint8_t i;
    uint16_t *logValue16;
    uint32_t *logValue;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8008a46:	7fc3      	ldrb	r3, [r0, #31]
 8008a48:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8008a4c:	429a      	cmp	r2, r3
{
 8008a4e:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8008a50:	d002      	beq.n	8008a58 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* nothing to log just waiting next call to MCPA_datalog*/
      pHandle->HFIndex++;
 8008a52:	3301      	adds	r3, #1
 8008a54:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8008a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8008a58:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8008a5e:	b1a5      	cbz	r5, 8008a8a <MCPA_dataLog+0x46>
 8008a60:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8008a62:	8ba2      	ldrh	r2, [r4, #28]
 8008a64:	42aa      	cmp	r2, r5
 8008a66:	d24e      	bcs.n	8008b06 <MCPA_dataLog+0xc2>
 8008a68:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8008a6c:	2bfe      	cmp	r3, #254	; 0xfe
 8008a6e:	d066      	beq.n	8008b3e <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8008a70:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8008a74:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex + 2U,
 8008a76:	8b22      	ldrh	r2, [r4, #24]
 8008a78:	6820      	ldr	r0, [r4, #0]
 8008a7a:	3202      	adds	r2, #2
 8008a7c:	2309      	movs	r3, #9
 8008a7e:	6845      	ldr	r5, [r0, #4]
 8008a80:	b292      	uxth	r2, r2
 8008a82:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	8323      	strh	r3, [r4, #24]
}
 8008a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8008a8a:	4601      	mov	r1, r0
 8008a8c:	2209      	movs	r2, #9
 8008a8e:	f851 0b14 	ldr.w	r0, [r1], #20
 8008a92:	6803      	ldr	r3, [r0, #0]
 8008a94:	4798      	blx	r3
 8008a96:	b390      	cbz	r0, 8008afe <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8008a98:	4b4b      	ldr	r3, [pc, #300]	; (8008bc8 <MCPA_dataLog+0x184>)
 8008a9a:	6961      	ldr	r1, [r4, #20]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8008aa0:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8008aa4:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer*/
 8008aa8:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8008aac:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 8008aae:	4290      	cmp	r0, r2
          pHandle->bufferIndex = 4U;
 8008ab0:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 8008ab2:	d101      	bne.n	8008ab8 <MCPA_dataLog+0x74>
 8008ab4:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8008ab6:	e7d4      	b.n	8008a62 <MCPA_dataLog+0x1e>
            pHandle->HFNumBuff = pHandle->HFNum;
 8008ab8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
            pHandle->MFNumBuff = pHandle->MFNum;
 8008abc:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
            pHandle->HFRateBuff = pHandle->HFRate;
 8008ac0:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
            pHandle->MarkBuff = pHandle->Mark;
 8008ac4:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
            pHandle->HFNumBuff = pHandle->HFNum;
 8008ac8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8008acc:	185a      	adds	r2, r3, r1
            pHandle->MFNumBuff = pHandle->MFNum;
 8008ace:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8008ad2:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MFRateBuff = pHandle->MFRate;
 8008ad4:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
            pHandle->HFRateBuff = pHandle->HFRate;
 8008ad8:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8008adc:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff = pHandle->MFRate;
 8008ade:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8008ae2:	83a3      	strh	r3, [r4, #28]
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8008ae4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8008ae8:	f001 fdd9 	bl	800a69e <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 8008aec:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8008af0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8008af4:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8008af8:	441a      	add	r2, r3
 8008afa:	f001 fdd0 	bl	800a69e <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8008afe:	8b25      	ldrh	r5, [r4, #24]
 8008b00:	2d00      	cmp	r5, #0
 8008b02:	d1ad      	bne.n	8008a60 <MCPA_dataLog+0x1c>
}
 8008b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8008b06:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
        logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8008b0a:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8008b0c:	b36e      	cbz	r6, 8008b6a <MCPA_dataLog+0x126>
 8008b0e:	68a2      	ldr	r2, [r4, #8]
 8008b10:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8008b14:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8008b16:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8008b1a:	8800      	ldrh	r0, [r0, #0]
 8008b1c:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8008b20:	8b25      	ldrh	r5, [r4, #24]
 8008b22:	3502      	adds	r5, #2
 8008b24:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8008b26:	4563      	cmp	r3, ip
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8008b28:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8008b2a:	d1f4      	bne.n	8008b16 <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 8008b2c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008b30:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 8008b32:	2bfd      	cmp	r3, #253	; 0xfd
 8008b34:	4618      	mov	r0, r3
 8008b36:	d91d      	bls.n	8008b74 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008b38:	4295      	cmp	r5, r2
 8008b3a:	d897      	bhi.n	8008a6c <MCPA_dataLog+0x28>
}
 8008b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008b3e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8008b42:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8008b46:	4418      	add	r0, r3
 8008b48:	4298      	cmp	r0, r3
 8008b4a:	dd91      	ble.n	8008a70 <MCPA_dataLog+0x2c>
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8008b4c:	68a7      	ldr	r7, [r4, #8]
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8008b4e:	6926      	ldr	r6, [r4, #16]
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8008b50:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8008b54:	6812      	ldr	r2, [r2, #0]
 8008b56:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008b58:	1c5a      	adds	r2, r3, #1
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8008b5a:	5cf3      	ldrb	r3, [r6, r3]
 8008b5c:	441d      	add	r5, r3
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008b5e:	b2d3      	uxtb	r3, r2
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8008b60:	b2ad      	uxth	r5, r5
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008b62:	4283      	cmp	r3, r0
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8008b64:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008b66:	dbf3      	blt.n	8008b50 <MCPA_dataLog+0x10c>
 8008b68:	e782      	b.n	8008a70 <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 8008b6a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 8008b6e:	28fd      	cmp	r0, #253	; 0xfd
 8008b70:	f63f af71 	bhi.w	8008a56 <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8008b74:	f894 3020 	ldrb.w	r3, [r4, #32]
 8008b78:	4283      	cmp	r3, r0
 8008b7a:	d007      	beq.n	8008b8c <MCPA_dataLog+0x148>
            pHandle->MFIndex ++;
 8008b7c:	3301      	adds	r3, #1
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008b7e:	8b25      	ldrh	r5, [r4, #24]
            pHandle->MFIndex ++;
 8008b80:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008b84:	42aa      	cmp	r2, r5
 8008b86:	f4ff af73 	bcc.w	8008a70 <MCPA_dataLog+0x2c>
}
 8008b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008b8c:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 8008b90:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 8008b92:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008b94:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 8008b96:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008b9a:	dd12      	ble.n	8008bc2 <MCPA_dataLog+0x17e>
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8008b9c:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008ba0:	f8d4 c010 	ldr.w	ip, [r4, #16]
              logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8008ba4:	8b25      	ldrh	r5, [r4, #24]
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8008ba6:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008bae:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008bb2:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008bb4:	441d      	add	r5, r3
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008bb6:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008bb8:	b2ad      	uxth	r5, r5
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008bba:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008bbc:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008bbe:	dbf2      	blt.n	8008ba6 <MCPA_dataLog+0x162>
 8008bc0:	e7e0      	b.n	8008b84 <MCPA_dataLog+0x140>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008bc2:	8b25      	ldrh	r5, [r4, #24]
 8008bc4:	e7de      	b.n	8008b84 <MCPA_dataLog+0x140>
 8008bc6:	bf00      	nop
 8008bc8:	20001cc4 	.word	0x20001cc4

08008bcc <MCPA_flushDataLog>:
{
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 8008bcc:	8b03      	ldrh	r3, [r0, #24]
 8008bce:	b19b      	cbz	r3, 8008bf8 <MCPA_flushDataLog+0x2c>
{
 8008bd0:	b570      	push	{r4, r5, r6, lr}
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 8008bd2:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8008bd6:	2afe      	cmp	r2, #254	; 0xfe
 8008bd8:	4604      	mov	r4, r0
 8008bda:	d00e      	beq.n	8008bfa <MCPA_flushDataLog+0x2e>
      {
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
        {
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8008bdc:	6941      	ldr	r1, [r0, #20]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8008bde:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8008be2:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8008be4:	8b22      	ldrh	r2, [r4, #24]
 8008be6:	6820      	ldr	r0, [r4, #0]
 8008be8:	3202      	adds	r2, #2
 8008bea:	2309      	movs	r3, #9
 8008bec:	6845      	ldr	r5, [r0, #4]
 8008bee:	b292      	uxth	r2, r2
 8008bf0:	47a8      	blx	r5
    pHandle->bufferIndex = 0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	8323      	strh	r3, [r4, #24]
  }   
}
 8008bf6:	bd70      	pop	{r4, r5, r6, pc}
 8008bf8:	4770      	bx	lr
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008bfa:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8008bfe:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8008c02:	6941      	ldr	r1, [r0, #20]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008c04:	4494      	add	ip, r2
 8008c06:	4562      	cmp	r2, ip
 8008c08:	dae9      	bge.n	8008bde <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8008c0a:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008c0c:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8008c0e:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8008c12:	6800      	ldr	r0, [r0, #0]
 8008c14:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008c16:	5ca8      	ldrb	r0, [r5, r2]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008c18:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008c1a:	4403      	add	r3, r0
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008c1c:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008c1e:	b29b      	uxth	r3, r3
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008c20:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008c22:	8323      	strh	r3, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008c24:	dbf3      	blt.n	8008c0e <MCPA_flushDataLog+0x42>
 8008c26:	e7da      	b.n	8008bde <MCPA_flushDataLog+0x12>

08008c28 <MCPA_cfgLog>:
  pHandle->HFIndex = 0;
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
}

uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8008c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
    uint16_t newID, buffSize;
    uint8_t i;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8008c2c:	880f      	ldrh	r7, [r1, #0]
{
 8008c2e:	4604      	mov	r4, r0

    if (buffSize == 0)
 8008c30:	2f00      	cmp	r7, #0
 8008c32:	d044      	beq.n	8008cbe <MCPA_cfgLog+0x96>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8008c34:	6803      	ldr	r3, [r0, #0]
 8008c36:	89db      	ldrh	r3, [r3, #14]
 8008c38:	42bb      	cmp	r3, r7
 8008c3a:	d33d      	bcc.n	8008cb8 <MCPA_cfgLog+0x90>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8008c3c:	788b      	ldrb	r3, [r1, #2]
 8008c3e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8008c42:	78ca      	ldrb	r2, [r1, #3]
 8008c44:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8008c48:	790b      	ldrb	r3, [r1, #4]
 8008c4a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 8008c4e:	794e      	ldrb	r6, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/

      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8008c50:	7f83      	ldrb	r3, [r0, #30]
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 8008c52:	f880 6027 	strb.w	r6, [r0, #39]	; 0x27
      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8008c56:	4416      	add	r6, r2
 8008c58:	429e      	cmp	r6, r3
 8008c5a:	dc52      	bgt.n	8008d02 <MCPA_cfgLog+0xda>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/
 8008c5c:	3106      	adds	r1, #6
      {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8008c5e:	2e00      	cmp	r6, #0
 8008c60:	d056      	beq.n	8008d10 <MCPA_cfgLog+0xe8>
 8008c62:	2500      	movs	r5, #0
 8008c64:	4688      	mov	r8, r1
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
 8008c66:	462e      	mov	r6, r5
 8008c68:	e011      	b.n	8008c8e <MCPA_cfgLog+0x66>
      {
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8008c6a:	68e3      	ldr	r3, [r4, #12]
 8008c6c:	5558      	strb	r0, [r3, r5]
        pCfgData++;/* Point to the next UID */
        pCfgData++;
         logSize = logSize+pHandle->dataSizeTable[i];
 8008c6e:	68e2      	ldr	r2, [r4, #12]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8008c70:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8008c74:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
         logSize = logSize+pHandle->dataSizeTable[i];
 8008c78:	5d52      	ldrb	r2, [r2, r5]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8008c7a:	f105 0c01 	add.w	ip, r5, #1
 8008c7e:	fa5f f58c 	uxtb.w	r5, ip
 8008c82:	4403      	add	r3, r0
         logSize = logSize+pHandle->dataSizeTable[i];
 8008c84:	4432      	add	r2, r6
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8008c86:	429d      	cmp	r5, r3
        pCfgData++;
 8008c88:	4641      	mov	r1, r8
         logSize = logSize+pHandle->dataSizeTable[i];
 8008c8a:	b296      	uxth	r6, r2
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8008c8c:	da11      	bge.n	8008cb2 <MCPA_cfgLog+0x8a>
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
 8008c8e:	f838 9b02 	ldrh.w	r9, [r8], #2
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 8008c92:	6861      	ldr	r1, [r4, #4]
 8008c94:	4648      	mov	r0, r9
 8008c96:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8008c9a:	f7fb fbcb 	bl	8004434 <RI_GetPtrReg>
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8008c9e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8008ca2:	42ab      	cmp	r3, r5
 8008ca4:	f04f 0002 	mov.w	r0, #2
 8008ca8:	d8df      	bhi.n	8008c6a <MCPA_cfgLog+0x42>
 8008caa:	4648      	mov	r0, r9
 8008cac:	f7fb fbb6 	bl	800441c <RI_GetIDSize>
 8008cb0:	e7db      	b.n	8008c6a <MCPA_cfgLog+0x42>
      }

     /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
     if (buffSize < (logSize + 2U + 4U))
 8008cb2:	1db3      	adds	r3, r6, #6
 8008cb4:	429f      	cmp	r7, r3
 8008cb6:	d21a      	bcs.n	8008cee <MCPA_cfgLog+0xc6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8008cb8:	2009      	movs	r0, #9
      }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return result;
}
 8008cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8008cbe:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0;
 8008cc0:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8008cc4:	b153      	cbz	r3, 8008cdc <MCPA_cfgLog+0xb4>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8008cc6:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8008cc8:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8008ccc:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8008cce:	8b22      	ldrh	r2, [r4, #24]
 8008cd0:	6820      	ldr	r0, [r4, #0]
 8008cd2:	3202      	adds	r2, #2
 8008cd4:	6845      	ldr	r5, [r0, #4]
 8008cd6:	b292      	uxth	r2, r2
 8008cd8:	2309      	movs	r3, #9
 8008cda:	47a8      	blx	r5
  pHandle->bufferIndex = 0;
 8008cdc:	2000      	movs	r0, #0
  pHandle->MarkBuff = 0;
 8008cde:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex = 0;
 8008ce2:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 8008ce4:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0;
 8008ce8:	8320      	strh	r0, [r4, #24]
}
 8008cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       pHandle->bufferTxTrigger = buffSize-logSize-2U; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 8008cee:	1eba      	subs	r2, r7, #2
 8008cf0:	1b92      	subs	r2, r2, r6
 8008cf2:	8362      	strh	r2, [r4, #26]
       pHandle->Mark = *((uint8_t *) pCfgData);
 8008cf4:	780b      	ldrb	r3, [r1, #0]
 8008cf6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
       if (0U == pHandle->Mark)
 8008cfa:	b12b      	cbz	r3, 8008d08 <MCPA_cfgLog+0xe0>
  uint8_t result = MCP_CMD_OK;
 8008cfc:	2000      	movs	r0, #0
}
 8008cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       result = MCP_ERROR_BAD_RAW_FORMAT;
 8008d02:	200a      	movs	r0, #10
}
 8008d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8008d08:	8b23      	ldrh	r3, [r4, #24]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d0e6      	beq.n	8008cdc <MCPA_cfgLog+0xb4>
 8008d0e:	e7da      	b.n	8008cc6 <MCPA_cfgLog+0x9e>
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8008d10:	2306      	movs	r3, #6
 8008d12:	e7cf      	b.n	8008cb4 <MCPA_cfgLog+0x8c>

08008d14 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8008d14:	8a03      	ldrh	r3, [r0, #16]
 8008d16:	8b42      	ldrh	r2, [r0, #26]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d306      	bcc.n	8008d2a <NTC_SetFaultState+0x16>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8008d1c:	8b82      	ldrh	r2, [r0, #28]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d901      	bls.n	8008d26 <NTC_SetFaultState+0x12>
    {
      hFault = MC_NO_ERROR;
 8008d22:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return hFault;
}
 8008d24:	4770      	bx	lr
      hFault = pHandle->hFaultState;
 8008d26:	8ac0      	ldrh	r0, [r0, #22]
 8008d28:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 8008d2a:	2008      	movs	r0, #8
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop

08008d30 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	8203      	strh	r3, [r0, #16]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop

08008d38 <NTC_Init>:
{
 8008d38:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8008d3a:	7803      	ldrb	r3, [r0, #0]
{
 8008d3c:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8008d3e:	b123      	cbz	r3, 8008d4a <NTC_Init+0x12>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8008d40:	8a43      	ldrh	r3, [r0, #18]
 8008d42:	8203      	strh	r3, [r0, #16]
      pHandle->hFaultState = MC_NO_ERROR;
 8008d44:	2200      	movs	r2, #0
 8008d46:	82c2      	strh	r2, [r0, #22]
}
 8008d48:	bd10      	pop	{r4, pc}
      pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8008d4a:	3004      	adds	r0, #4
 8008d4c:	f7fb fc02 	bl	8004554 <RCM_RegisterRegConv>
 8008d50:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
      NTC_Clear(pHandle);
 8008d54:	4620      	mov	r0, r4
 8008d56:	f7ff ffeb 	bl	8008d30 <NTC_Clear>
}
 8008d5a:	bd10      	pop	{r4, pc}

08008d5c <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle)
{
 8008d5c:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8008d5e:	7803      	ldrb	r3, [r0, #0]
{
 8008d60:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8008d62:	b113      	cbz	r3, 8008d6a <NTC_CalcAvTemp+0xe>

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
    }
    else  /* case VIRTUAL_SENSOR */
    {
      pHandle->hFaultState = MC_NO_ERROR;
 8008d64:	2000      	movs	r0, #0
 8008d66:	82e0      	strh	r0, [r4, #22]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8008d68:	bd10      	pop	{r4, pc}
      hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8008d6a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8008d6e:	f7fb fcd9 	bl	8004724 <RCM_ExecRegularConv>
      if (0xFFFFU == hAux)
 8008d72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d76:	4298      	cmp	r0, r3
 8008d78:	d007      	beq.n	8008d8a <NTC_CalcAvTemp+0x2e>
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8008d7a:	8b23      	ldrh	r3, [r4, #24]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8008d7c:	8a22      	ldrh	r2, [r4, #16]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8008d7e:	1e59      	subs	r1, r3, #1
        wtemp += hAux;
 8008d80:	fb01 0002 	mla	r0, r1, r2, r0
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 8008d84:	fbb0 f0f3 	udiv	r0, r0, r3
        pHandle->hAvTemp_d = (uint16_t)wtemp;
 8008d88:	8220      	strh	r0, [r4, #16]
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f7ff ffc2 	bl	8008d14 <NTC_SetFaultState>
 8008d90:	82e0      	strh	r0, [r4, #22]
}
 8008d92:	bd10      	pop	{r4, pc}

08008d94 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8008d94:	7803      	ldrb	r3, [r0, #0]
 8008d96:	b95b      	cbnz	r3, 8008db0 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8008d98:	8a02      	ldrh	r2, [r0, #16]
      wTemp -= ((int32_t)pHandle->wV0);
 8008d9a:	6a01      	ldr	r1, [r0, #32]
      wTemp *= pHandle->hSensitivity;
 8008d9c:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8008da0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
      wTemp -= ((int32_t)pHandle->wV0);
 8008da2:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 8008da4:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8008da8:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8008dac:	b200      	sxth	r0, r0
 8008dae:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8008db0:	8a80      	ldrh	r0, [r0, #20]
}
 8008db2:	b200      	sxth	r0, r0
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8008db8:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8008dba:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8008dbc:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8008dbe:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8008dc0:	8442      	strh	r2, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 8008dc2:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8008dc4:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008dc6:	4770      	bx	lr

08008dc8 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8008dc8:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008dca:	4770      	bx	lr

08008dcc <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8008dcc:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008dce:	4770      	bx	lr

08008dd0 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8008dd0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop

08008dd8 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8008dd8:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop

08008de0 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8008de0:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8008de2:	4770      	bx	lr

08008de4 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8008de4:	8b80      	ldrh	r0, [r0, #28]
 8008de6:	4770      	bx	lr

08008de8 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8008de8:	2301      	movs	r3, #1
 8008dea:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8008dec:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8008dee:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop

08008df4 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8008df4:	8bc0      	ldrh	r0, [r0, #30]
 8008df6:	4770      	bx	lr

08008df8 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8008df8:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008dfa:	4770      	bx	lr

08008dfc <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8008dfc:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008dfe:	4770      	bx	lr

08008e00 <PID_SetKIDivisorPOW2>:
{
 8008e00:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8008e02:	2301      	movs	r3, #1
{
 8008e04:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8008e06:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8008e08:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008e0c:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8008e0e:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8008e10:	8343      	strh	r3, [r0, #26]
{
 8008e12:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8008e14:	f7ff fff2 	bl	8008dfc <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8008e18:	4902      	ldr	r1, [pc, #8]	; (8008e24 <PID_SetKIDivisorPOW2+0x24>)
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	40a1      	lsls	r1, r4
 8008e1e:	f7ff ffeb 	bl	8008df8 <PID_SetLowerIntegralTermLimit>
}
 8008e22:	bd38      	pop	{r3, r4, r5, pc}
 8008e24:	ffff8001 	.word	0xffff8001

08008e28 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8008e28:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008e2a:	4770      	bx	lr

08008e2c <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8008e2c:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop

08008e34 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8008e34:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 8008e36:	4770      	bx	lr

08008e38 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8008e38:	2301      	movs	r3, #1
 8008e3a:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8008e3c:	84c1      	strh	r1, [r0, #38]	; 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8008e3e:	8483      	strh	r3, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop

08008e44 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8008e44:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8008e48:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8008e4c:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
{
 8008e50:	b510      	push	{r4, lr}
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8008e52:	fb01 f303 	mul.w	r3, r1, r3
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8008e56:	f9b0 e016 	ldrsh.w	lr, [r0, #22]
    if (0 == pHandle->hKiGain)
 8008e5a:	b162      	cbz	r2, 8008e76 <PI_Controller+0x32>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8008e5c:	fb01 f202 	mul.w	r2, r1, r2
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8008e60:	6881      	ldr	r1, [r0, #8]

      if (wIntegral_sum_temp < 0)
 8008e62:	188c      	adds	r4, r1, r2
 8008e64:	d420      	bmi.n	8008ea8 <PI_Controller+0x64>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 8008e66:	2900      	cmp	r1, #0
 8008e68:	db2a      	blt.n	8008ec0 <PI_Controller+0x7c>
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8008e6a:	68c2      	ldr	r2, [r0, #12]
 8008e6c:	42a2      	cmp	r2, r4
 8008e6e:	db02      	blt.n	8008e76 <PI_Controller+0x32>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8008e70:	6902      	ldr	r2, [r0, #16]
 8008e72:	42a2      	cmp	r2, r4
 8008e74:	dd22      	ble.n	8008ebc <PI_Controller+0x78>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8008e76:	8b81      	ldrh	r1, [r0, #28]
 8008e78:	410b      	asrs	r3, r1
 8008e7a:	8bc1      	ldrh	r1, [r0, #30]
 8008e7c:	fa42 f101 	asr.w	r1, r2, r1
 8008e80:	440b      	add	r3, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8008e82:	459c      	cmp	ip, r3
 8008e84:	da05      	bge.n	8008e92 <PI_Controller+0x4e>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8008e86:	ebac 0303 	sub.w	r3, ip, r3
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8008e8a:	441a      	add	r2, r3
 8008e8c:	6082      	str	r2, [r0, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8008e8e:	4660      	mov	r0, ip
 8008e90:	bd10      	pop	{r4, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8008e92:	459e      	cmp	lr, r3
      wDischarge = hLowerOutputLimit - wOutput_32;
 8008e94:	bfc9      	itett	gt
 8008e96:	ebae 0303 	subgt.w	r3, lr, r3
    returnValue = (int16_t)wOutput_32;
 8008e9a:	fa0f fc83 	sxthle.w	ip, r3
    pHandle->wIntegralTerm += wDischarge;
 8008e9e:	18d2      	addgt	r2, r2, r3
 8008ea0:	46f4      	movgt	ip, lr
 8008ea2:	6082      	str	r2, [r0, #8]
}
 8008ea4:	4660      	mov	r0, ip
 8008ea6:	bd10      	pop	{r4, pc}
        if (pHandle->wIntegralTerm > 0)
 8008ea8:	2900      	cmp	r1, #0
 8008eaa:	ddde      	ble.n	8008e6a <PI_Controller+0x26>
          if (wIntegral_Term > 0)
 8008eac:	2a00      	cmp	r2, #0
 8008eae:	dddc      	ble.n	8008e6a <PI_Controller+0x26>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8008eb0:	68c2      	ldr	r2, [r0, #12]
 8008eb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008eb6:	428a      	cmp	r2, r1
 8008eb8:	d1dd      	bne.n	8008e76 <PI_Controller+0x32>
            wIntegral_sum_temp = INT32_MAX;
 8008eba:	4614      	mov	r4, r2
 8008ebc:	4622      	mov	r2, r4
 8008ebe:	e7da      	b.n	8008e76 <PI_Controller+0x32>
            wIntegral_sum_temp = -INT32_MAX;
 8008ec0:	4902      	ldr	r1, [pc, #8]	; (8008ecc <PI_Controller+0x88>)
 8008ec2:	ea34 0422 	bics.w	r4, r4, r2, asr #32
 8008ec6:	bf28      	it	cs
 8008ec8:	460c      	movcs	r4, r1
 8008eca:	e7ce      	b.n	8008e6a <PI_Controller+0x26>
 8008ecc:	80000001 	.word	0x80000001

08008ed0 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8008ed0:	6882      	ldr	r2, [r0, #8]
{
 8008ed2:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8008ed4:	89d1      	ldrh	r1, [r2, #14]
 8008ed6:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8008eda:	8993      	ldrh	r3, [r2, #12]
 8008edc:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8008ee0:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8008ee4:	fb13 230c 	smlabb	r3, r3, ip, r2
 8008ee8:	2b00      	cmp	r3, #0

    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8008eea:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 8008eee:	bfbc      	itt	lt
 8008ef0:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8008ef4:	33ff      	addlt	r3, #255	; 0xff
    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8008ef6:	ebc2 4323 	rsb	r3, r2, r3, asr #16
 8008efa:	eb02 1323 	add.w	r3, r2, r3, asr #4
 8008efe:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 8008f00:	f85d fb04 	ldr.w	pc, [sp], #4

08008f04 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 8008f04:	2300      	movs	r3, #0
 8008f06:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop

08008f0c <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float The average measured motor power expressed in Watts.
  */
__weak float PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8008f0c:	b538      	push	{r3, r4, r5, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8008f0e:	f9b0 5000 	ldrsh.w	r5, [r0]
{
 8008f12:	4604      	mov	r4, r0
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8008f14:	68c0      	ldr	r0, [r0, #12]
 8008f16:	f7ff faf1 	bl	80084fc <VBS_GetAvBusVoltage_V>
 8008f1a:	fb05 f300 	mul.w	r3, r5, r0
 8008f1e:	ee00 3a10 	vmov	s0, r3
 8008f22:	edd4 7a01 	vldr	s15, [r4, #4]
 8008f26:	eeb8 0ac0 	vcvt.f32.s32	s0, s0

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8008f2a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008f2e:	bd38      	pop	{r3, r4, r5, pc}

08008f30 <startTimers>:
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 8008f30:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8008f32:	4b18      	ldr	r3, [pc, #96]	; (8008f94 <startTimers+0x64>)
 8008f34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f36:	07d2      	lsls	r2, r2, #31
 8008f38:	b082      	sub	sp, #8
 8008f3a:	d415      	bmi.n	8008f68 <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008f3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f3e:	f042 0201 	orr.w	r2, r2, #1
 8008f42:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8008f44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008f46:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008f4a:	f002 0201 	and.w	r2, r2, #1
 8008f4e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8008f50:	9a01      	ldr	r2, [sp, #4]
 8008f52:	694a      	ldr	r2, [r1, #20]
 8008f54:	f042 0201 	orr.w	r2, r2, #1
 8008f58:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8008f5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f5c:	f022 0201 	bic.w	r2, r2, #1
 8008f60:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8008f62:	b002      	add	sp, #8
 8008f64:	bc30      	pop	{r4, r5}
 8008f66:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8008f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008f6c:	4c0a      	ldr	r4, [pc, #40]	; (8008f98 <startTimers+0x68>)
 8008f6e:	685a      	ldr	r2, [r3, #4]
 8008f70:	6859      	ldr	r1, [r3, #4]
 8008f72:	4d0a      	ldr	r5, [pc, #40]	; (8008f9c <startTimers+0x6c>)
 8008f74:	4021      	ands	r1, r4
 8008f76:	f041 0120 	orr.w	r1, r1, #32
 8008f7a:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008f7c:	6958      	ldr	r0, [r3, #20]
 8008f7e:	f040 0001 	orr.w	r0, r0, #1
 8008f82:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008f84:	6859      	ldr	r1, [r3, #4]
 8008f86:	402a      	ands	r2, r5
 8008f88:	4021      	ands	r1, r4
 8008f8a:	430a      	orrs	r2, r1
 8008f8c:	605a      	str	r2, [r3, #4]
}
 8008f8e:	b002      	add	sp, #8
 8008f90:	bc30      	pop	{r4, r5}
 8008f92:	4770      	bx	lr
 8008f94:	40021000 	.word	0x40021000
 8008f98:	fdffff8f 	.word	0xfdffff8f
 8008f9c:	02000070 	.word	0x02000070

08008fa0 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8008fa0:	3201      	adds	r2, #1
{
 8008fa2:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8008fa4:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8008fa6:	f06f 0602 	mvn.w	r6, #2
 8008faa:	0155      	lsls	r5, r2, #5
 8008fac:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8008fae:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8008fb0:	f893 c000 	ldrb.w	ip, [r3]
 8008fb4:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8008fb8:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8008fbc:	d80c      	bhi.n	8008fd8 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8008fbe:	6904      	ldr	r4, [r0, #16]
 8008fc0:	07a4      	lsls	r4, r4, #30
 8008fc2:	d5f5      	bpl.n	8008fb0 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8008fc4:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8008fc8:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8008fca:	6106      	str	r6, [r0, #16]
 8008fcc:	d8f0      	bhi.n	8008fb0 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8008fce:	781c      	ldrb	r4, [r3, #0]
 8008fd0:	2c0f      	cmp	r4, #15
 8008fd2:	d8ed      	bhi.n	8008fb0 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_POW_COM
  }
#endif
  }
 8008fd8:	bd70      	pop	{r4, r5, r6, pc}
 8008fda:	bf00      	nop

08008fdc <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008fdc:	6883      	ldr	r3, [r0, #8]
 8008fde:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008fe2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008fe6:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008fe8:	6883      	ldr	r3, [r0, #8]
 8008fea:	00d9      	lsls	r1, r3, #3
/*
  * @brief Initializes @p ADCx peripheral for current sensing.
  * 
  */
static void R3_2_ADCxInit(ADC_TypeDef *ADCx)
{
 8008fec:	b082      	sub	sp, #8
 8008fee:	d418      	bmi.n	8009022 <R3_2_ADCxInit+0x46>
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
                                         * (SystemCoreClock / (100000UL * 2UL)));
 8008ff0:	4b24      	ldr	r3, [pc, #144]	; (8009084 <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 8008ff2:	6882      	ldr	r2, [r0, #8]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4924      	ldr	r1, [pc, #144]	; (8009088 <R3_2_ADCxInit+0xac>)
 8008ff8:	099b      	lsrs	r3, r3, #6
 8008ffa:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8008ffe:	fba1 1303 	umull	r1, r3, r1, r3
 8009002:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8009006:	099b      	lsrs	r3, r3, #6
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800900e:	6082      	str	r2, [r0, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 8009010:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8009012:	9b01      	ldr	r3, [sp, #4]
 8009014:	b12b      	cbz	r3, 8009022 <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8009016:	9b01      	ldr	r3, [sp, #4]
 8009018:	3b01      	subs	r3, #1
 800901a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800901c:	9b01      	ldr	r3, [sp, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1f9      	bne.n	8009016 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 8009022:	6883      	ldr	r3, [r0, #8]
 8009024:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009028:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800902c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009030:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8009032:	6883      	ldr	r3, [r0, #8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	dbfc      	blt.n	8009032 <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8009038:	6803      	ldr	r3, [r0, #0]
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0
  * following a calibration phase, could have no effect on ADC
  * within certain AHB/ADC clock ratio.
  */
  while (0U == LL_ADC_IsActiveFlag_ADRDY(ADCx))
 800903a:	07da      	lsls	r2, r3, #31
 800903c:	d408      	bmi.n	8009050 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 800903e:	4a13      	ldr	r2, [pc, #76]	; (800908c <R3_2_ADCxInit+0xb0>)
 8009040:	6883      	ldr	r3, [r0, #8]
 8009042:	4013      	ands	r3, r2
 8009044:	f043 0301 	orr.w	r3, r3, #1
 8009048:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800904a:	6803      	ldr	r3, [r0, #0]
 800904c:	07db      	lsls	r3, r3, #31
 800904e:	d5f7      	bpl.n	8009040 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8009050:	6882      	ldr	r2, [r0, #8]
 8009052:	490e      	ldr	r1, [pc, #56]	; (800908c <R3_2_ADCxInit+0xb0>)
 8009054:	400a      	ands	r2, r1
 8009056:	f042 0208 	orr.w	r2, r2, #8
 800905a:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 800905c:	6882      	ldr	r2, [r0, #8]
 800905e:	400a      	ands	r2, r1
 8009060:	f042 0220 	orr.w	r2, r2, #32
 8009064:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8009066:	68c3      	ldr	r3, [r0, #12]
 8009068:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800906c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009070:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009074:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 8009076:	6883      	ldr	r3, [r0, #8]
 8009078:	400b      	ands	r3, r1
 800907a:	f043 0304 	orr.w	r3, r3, #4
 800907e:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode(ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY);

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
}
 8009080:	b002      	add	sp, #8
 8009082:	4770      	bx	lr
 8009084:	200004c8 	.word	0x200004c8
 8009088:	053e2d63 	.word	0x053e2d63
 800908c:	7fffffc0 	.word	0x7fffffc0

08009090 <R3_2_GetPhaseCurrents>:
  * @brief  Computes and stores in @p pHdl handler the latest converted motor phase currents in @p Iab ab_t format.
  *
  */
__weak void R3_2_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8009090:	b1d9      	cbz	r1, 80090ca <R3_2_GetPhaseCurrents+0x3a>
  {
    int32_t Aux;
    uint32_t ADCDataReg1;
    uint32_t ADCDataReg2;
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009092:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
 8009096:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
{
 800909a:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800909c:	689c      	ldr	r4, [r3, #8]
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 800909e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80090a2:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 80090a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 80090a6:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 80090aa:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80090ae:	6863      	ldr	r3, [r4, #4]
 80090b0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80090b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b8:	6063      	str	r3, [r4, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 80090ba:	2a05      	cmp	r2, #5
 80090bc:	f200 80a0 	bhi.w	8009200 <R3_2_GetPhaseCurrents+0x170>
 80090c0:	e8df f002 	tbb	[pc, r2]
 80090c4:	043b3b1d 	.word	0x043b3b1d
 80090c8:	1d04      	.short	0x1d04
 80090ca:	4770      	bx	lr
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 80090cc:	6f04      	ldr	r4, [r0, #112]	; 0x70

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 80090ce:	4b50      	ldr	r3, [pc, #320]	; (8009210 <R3_2_GetPhaseCurrents+0x180>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 80090d0:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 80090d2:	429c      	cmp	r4, r3
 80090d4:	db05      	blt.n	80090e2 <R3_2_GetPhaseCurrents+0x52>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 80090d6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80090da:	f2c0 808f 	blt.w	80091fc <R3_2_GetPhaseCurrents+0x16c>
        {
          Iab->a = INT16_MAX;
 80090de:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80090e2:	800b      	strh	r3, [r1, #0]
        {
          Iab->a = (int16_t)Aux;
        }

        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 80090e4:	6f42      	ldr	r2, [r0, #116]	; 0x74

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 80090e6:	4d4a      	ldr	r5, [pc, #296]	; (8009210 <R3_2_GetPhaseCurrents+0x180>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 80090e8:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 80090ea:	42aa      	cmp	r2, r5
 80090ec:	da5d      	bge.n	80091aa <R3_2_GetPhaseCurrents+0x11a>

      default:
        break;
    }

    pHandle->_Super.Ia = Iab->a;
 80090ee:	f9b1 c000 	ldrsh.w	ip, [r1]
          Iab->b = -INT16_MAX;
 80090f2:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80090f4:	fa1f f38c 	uxth.w	r3, ip
 80090f8:	f248 0201 	movw	r2, #32769	; 0x8001
 80090fc:	e013      	b.n	8009126 <R3_2_GetPhaseCurrents+0x96>
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 80090fe:	6f44      	ldr	r4, [r0, #116]	; 0x74
        if (Aux < -INT16_MAX)
 8009100:	4b43      	ldr	r3, [pc, #268]	; (8009210 <R3_2_GetPhaseCurrents+0x180>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8009102:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8009104:	429c      	cmp	r4, r3
 8009106:	da46      	bge.n	8009196 <R3_2_GetPhaseCurrents+0x106>
          Iab->b = -INT16_MAX;
 8009108:	804b      	strh	r3, [r1, #2]
 800910a:	461c      	mov	r4, r3
 800910c:	f248 0201 	movw	r2, #32769	; 0x8001
 8009110:	461d      	mov	r5, r3
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8009112:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8009114:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 8009116:	1b1c      	subs	r4, r3, r4
        if (Aux > INT16_MAX)
 8009118:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800911c:	db22      	blt.n	8009164 <R3_2_GetPhaseCurrents+0xd4>
          Iab->a = INT16_MAX;
 800911e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8009122:	800b      	strh	r3, [r1, #0]
 8009124:	469c      	mov	ip, r3
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009126:	4413      	add	r3, r2
 8009128:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 800912a:	f8a0 5052 	strh.w	r5, [r0, #82]	; 0x52
    pHandle->_Super.Ia = Iab->a;
 800912e:	f8a0 c050 	strh.w	ip, [r0, #80]	; 0x50
  }
}
 8009132:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009134:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
 8009138:	4770      	bx	lr
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800913a:	6f04      	ldr	r4, [r0, #112]	; 0x70
        if (Aux < -INT16_MAX)
 800913c:	4b34      	ldr	r3, [pc, #208]	; (8009210 <R3_2_GetPhaseCurrents+0x180>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800913e:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8009140:	429c      	cmp	r4, r3
 8009142:	da1e      	bge.n	8009182 <R3_2_GetPhaseCurrents+0xf2>
          Iab->a = -INT16_MAX;
 8009144:	461c      	mov	r4, r3
 8009146:	800b      	strh	r3, [r1, #0]
 8009148:	46a4      	mov	ip, r4
 800914a:	f248 0301 	movw	r3, #32769	; 0x8001
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800914e:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8009150:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 8009152:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 8009154:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009158:	db0c      	blt.n	8009174 <R3_2_GetPhaseCurrents+0xe4>
          Iab->b = INT16_MAX;
 800915a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800915e:	804a      	strh	r2, [r1, #2]
 8009160:	4615      	mov	r5, r2
 8009162:	e7e0      	b.n	8009126 <R3_2_GetPhaseCurrents+0x96>
        else  if (Aux < -INT16_MAX)
 8009164:	4e2a      	ldr	r6, [pc, #168]	; (8009210 <R3_2_GetPhaseCurrents+0x180>)
 8009166:	42b4      	cmp	r4, r6
 8009168:	da42      	bge.n	80091f0 <R3_2_GetPhaseCurrents+0x160>
          Iab->a = -INT16_MAX;
 800916a:	800e      	strh	r6, [r1, #0]
 800916c:	f248 0301 	movw	r3, #32769	; 0x8001
 8009170:	46b4      	mov	ip, r6
 8009172:	e7d8      	b.n	8009126 <R3_2_GetPhaseCurrents+0x96>
        else  if (Aux < -INT16_MAX)
 8009174:	4d26      	ldr	r5, [pc, #152]	; (8009210 <R3_2_GetPhaseCurrents+0x180>)
 8009176:	42aa      	cmp	r2, r5
 8009178:	da36      	bge.n	80091e8 <R3_2_GetPhaseCurrents+0x158>
          Iab->b = -INT16_MAX;
 800917a:	804d      	strh	r5, [r1, #2]
 800917c:	f248 0201 	movw	r2, #32769	; 0x8001
 8009180:	e7d1      	b.n	8009126 <R3_2_GetPhaseCurrents+0x96>
        else  if (Aux > INT16_MAX)
 8009182:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8009186:	db29      	blt.n	80091dc <R3_2_GetPhaseCurrents+0x14c>
          Iab->a = INT16_MAX;
 8009188:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800918c:	4613      	mov	r3, r2
 800918e:	800a      	strh	r2, [r1, #0]
 8009190:	4614      	mov	r4, r2
 8009192:	4694      	mov	ip, r2
 8009194:	e7db      	b.n	800914e <R3_2_GetPhaseCurrents+0xbe>
        else  if (Aux > INT16_MAX)
 8009196:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800919a:	db1b      	blt.n	80091d4 <R3_2_GetPhaseCurrents+0x144>
          Iab->b = INT16_MAX;
 800919c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80091a0:	461a      	mov	r2, r3
 80091a2:	804b      	strh	r3, [r1, #2]
 80091a4:	461c      	mov	r4, r3
 80091a6:	461d      	mov	r5, r3
 80091a8:	e7b3      	b.n	8009112 <R3_2_GetPhaseCurrents+0x82>
        else  if (Aux > INT16_MAX)
 80091aa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80091ae:	db09      	blt.n	80091c4 <R3_2_GetPhaseCurrents+0x134>
          Iab->b = INT16_MAX;
 80091b0:	f647 73ff 	movw	r3, #32767	; 0x7fff
    pHandle->_Super.Ia = Iab->a;
 80091b4:	f9b1 c000 	ldrsh.w	ip, [r1]
          Iab->b = INT16_MAX;
 80091b8:	804b      	strh	r3, [r1, #2]
 80091ba:	461a      	mov	r2, r3
 80091bc:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80091be:	fa1f f38c 	uxth.w	r3, ip
 80091c2:	e7b0      	b.n	8009126 <R3_2_GetPhaseCurrents+0x96>
    pHandle->_Super.Ia = Iab->a;
 80091c4:	f9b1 c000 	ldrsh.w	ip, [r1]
          Iab->b = (int16_t)Aux;
 80091c8:	b215      	sxth	r5, r2
 80091ca:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80091cc:	fa1f f38c 	uxth.w	r3, ip
 80091d0:	b292      	uxth	r2, r2
 80091d2:	e7a8      	b.n	8009126 <R3_2_GetPhaseCurrents+0x96>
          Iab->b = (int16_t)Aux;
 80091d4:	b225      	sxth	r5, r4
 80091d6:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80091d8:	b2a2      	uxth	r2, r4
 80091da:	e79a      	b.n	8009112 <R3_2_GetPhaseCurrents+0x82>
          Iab->a = (int16_t)Aux;
 80091dc:	fa0f fc84 	sxth.w	ip, r4
 80091e0:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80091e4:	b2a3      	uxth	r3, r4
 80091e6:	e7b2      	b.n	800914e <R3_2_GetPhaseCurrents+0xbe>
          Iab->b = (int16_t)Aux;
 80091e8:	b215      	sxth	r5, r2
 80091ea:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80091ec:	b292      	uxth	r2, r2
 80091ee:	e79a      	b.n	8009126 <R3_2_GetPhaseCurrents+0x96>
          Iab->a = (int16_t)Aux;
 80091f0:	fa0f fc84 	sxth.w	ip, r4
 80091f4:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80091f8:	b2a3      	uxth	r3, r4
 80091fa:	e794      	b.n	8009126 <R3_2_GetPhaseCurrents+0x96>
          Iab->a = (int16_t)Aux;
 80091fc:	800c      	strh	r4, [r1, #0]
 80091fe:	e771      	b.n	80090e4 <R3_2_GetPhaseCurrents+0x54>
    pHandle->_Super.Ia = Iab->a;
 8009200:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 8009204:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009208:	880b      	ldrh	r3, [r1, #0]
 800920a:	884a      	ldrh	r2, [r1, #2]
 800920c:	e78b      	b.n	8009126 <R3_2_GetPhaseCurrents+0x96>
 800920e:	bf00      	nop
 8009210:	ffff8001 	.word	0xffff8001

08009214 <R3_2_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_2_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 8009214:	b410      	push	{r4}
  *         set too late for being taken into account in the next PWM cycle.
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t SamplingPoint)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009216:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800921a:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 800921e:	f880 406a 	strb.w	r4, [r0, #106]	; 0x6a
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8009222:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009226:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8009228:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
  WRITE_REG(TIMx->CCR1, CompareValue);
 800922a:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800922c:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800922e:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8009232:	f8b0 0042 	ldrh.w	r0, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009236:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8009238:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 800923a:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800923c:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800923e:	4904      	ldr	r1, [pc, #16]	; (8009250 <R3_2_SetADCSampPointPolarization+0x3c>)
 8009240:	685b      	ldr	r3, [r3, #4]
}
 8009242:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009246:	420b      	tst	r3, r1
}
 8009248:	bf14      	ite	ne
 800924a:	2001      	movne	r0, #1
 800924c:	2000      	moveq	r0, #0
 800924e:	4770      	bx	lr
 8009250:	02000070 	.word	0x02000070

08009254 <R3_2_HFCurrentsPolarizationAB>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8009254:	b341      	cbz	r1, 80092a8 <R3_2_HFCurrentsPolarizationAB+0x54>
{
 8009256:	b430      	push	{r4, r5}
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009258:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800925c:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8009260:	689a      	ldr	r2, [r3, #8]
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 8009262:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009266:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8009268:	6e5d      	ldr	r5, [r3, #100]	; 0x64
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 800926a:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800926e:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009272:	6853      	ldr	r3, [r2, #4]
 8009274:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927c:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 800927e:	f890 c080 	ldrb.w	ip, [r0, #128]	; 0x80
 8009282:	f1bc 0f0f 	cmp.w	ip, #15
 8009286:	d80b      	bhi.n	80092a0 <R3_2_HFCurrentsPolarizationAB+0x4c>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 8009288:	6f03      	ldr	r3, [r0, #112]	; 0x70
      pHandle-> PhaseBOffset += ADCDataReg2;
 800928a:	6f42      	ldr	r2, [r0, #116]	; 0x74
      pHandle-> PhaseAOffset += ADCDataReg1;
 800928c:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 800928e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
      pHandle-> PhaseBOffset += ADCDataReg2;
 8009292:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 8009294:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 8009296:	e9c0 421c 	strd	r4, r2, [r0, #112]	; 0x70
      pHandle->PolarizationCounter++;
 800929a:	b2db      	uxtb	r3, r3
 800929c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 80092a0:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 80092a2:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 80092a4:	600b      	str	r3, [r1, #0]
}
 80092a6:	4770      	bx	lr
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop

080092ac <R3_2_HFCurrentsPolarizationC>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationC(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 80092ac:	b311      	cbz	r1, 80092f4 <R3_2_HFCurrentsPolarizationC+0x48>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80092ae:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80092b2:	f890 c081 	ldrb.w	ip, [r0, #129]	; 0x81
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80092b6:	689a      	ldr	r2, [r3, #8]
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80092b8:	eb03 038c 	add.w	r3, r3, ip, lsl #2
{
 80092bc:	b410      	push	{r4}
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80092be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092c0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80092c4:	6853      	ldr	r3, [r2, #4]
 80092c6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80092ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ce:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 80092d0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80092d4:	2b0f      	cmp	r3, #15
 80092d6:	d808      	bhi.n	80092ea <R3_2_HFCurrentsPolarizationC+0x3e>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 80092d8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
      pHandle-> PhaseCOffset += ADCDataReg2;
 80092dc:	6f82      	ldr	r2, [r0, #120]	; 0x78
      pHandle->PolarizationCounter++;
 80092de:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 80092e0:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 80092e2:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 80092e4:	6782      	str	r2, [r0, #120]	; 0x78
      pHandle->PolarizationCounter++;
 80092e6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 80092ea:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 80092ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 80092f0:	600b      	str	r3, [r1, #0]
}
 80092f2:	4770      	bx	lr
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop

080092f8 <R3_2_TurnOnLowSides>:
  * @param  ticks: Timer ticks value to be applied
  *                Min value: 0 (low sides ON)
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
__weak void R3_2_TurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
 80092f8:	b410      	push	{r4}
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80092fa:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88

  pHandle->_Super.TurnOnLowSidesAction = true;
 80092fe:	2301      	movs	r3, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009300:	68a2      	ldr	r2, [r4, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8009302:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009306:	f06f 0301 	mvn.w	r3, #1
 800930a:	6113      	str	r3, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800930c:	6351      	str	r1, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800930e:	6391      	str	r1, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009310:	63d1      	str	r1, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009312:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1(TIMx, ticks);
  LL_TIM_OC_SetCompareCH2(TIMx, ticks);
  LL_TIM_OC_SetCompareCH3(TIMx, ticks);

  /* Wait until next update */
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8009314:	07db      	lsls	r3, r3, #31
 8009316:	d5fc      	bpl.n	8009312 <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009318:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800931a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800931e:	6453      	str	r3, [r2, #68]	; 0x44
  }

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->pParams_str->LowSideOutputs))
 8009320:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8009324:	2b02      	cmp	r3, #2
 8009326:	d10b      	bne.n	8009340 <R3_2_TurnOnLowSides+0x48>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8009328:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800932c:	f8b4 00ac 	ldrh.w	r0, [r4, #172]	; 0xac
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009330:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009332:	6190      	str	r0, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8009334:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009338:	f8b4 20b0 	ldrh.w	r2, [r4, #176]	; 0xb0
 800933c:	6188      	str	r0, [r1, #24]
 800933e:	619a      	str	r2, [r3, #24]
  else
  {
    /* Nothing to do */
  }
  return;
}
 8009340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop

08009348 <R3_2_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009348:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 800934c:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009350:	688b      	ldr	r3, [r1, #8]
  pHandle->ADCRegularLocked = true;
 8009352:	f04f 0c01 	mov.w	ip, #1
{
 8009356:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked = true;
 8009358:	f880 c08c 	strb.w	ip, [r0, #140]	; 0x8c
  pHandle->_Super.TurnOnLowSidesAction = false;
 800935c:	f04f 0c00 	mov.w	ip, #0
 8009360:	f880 c06b 	strb.w	ip, [r0, #107]	; 0x6b
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8009364:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009366:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 8009368:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 800936a:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800936c:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800936e:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009372:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009374:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009376:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8009378:	07d2      	lsls	r2, r2, #31
 800937a:	d5fc      	bpl.n	8009376 <R3_2_SwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800937c:	f06f 0201 	mvn.w	r2, #1
 8009380:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009382:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009384:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009388:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800938a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800938c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009390:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->pParams_str->LowSideOutputs))
 8009392:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 8009396:	2a02      	cmp	r2, #2
 8009398:	d008      	beq.n	80093ac <R3_2_SwitchOnPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800939a:	f06f 0201 	mvn.w	r2, #1
 800939e:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80093a0:	68da      	ldr	r2, [r3, #12]
 80093a2:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 80093a6:	bc30      	pop	{r4, r5}
 80093a8:	60da      	str	r2, [r3, #12]
 80093aa:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 80093ac:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80093ae:	6a0c      	ldr	r4, [r1, #32]
 80093b0:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 80093b4:	f240 5255 	movw	r2, #1365	; 0x555
 80093b8:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80093ba:	e9d1 0209 	ldrd	r0, r2, [r1, #36]	; 0x24
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 80093be:	d007      	beq.n	80093d0 <R3_2_SwitchOnPWM+0x88>
 80093c0:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80093c2:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80093c6:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 80093ca:	6184      	str	r4, [r0, #24]
 80093cc:	6191      	str	r1, [r2, #24]
}
 80093ce:	e7e4      	b.n	800939a <R3_2_SwitchOnPWM+0x52>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80093d0:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80093d2:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80093d6:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 80093da:	6284      	str	r4, [r0, #40]	; 0x28
 80093dc:	6291      	str	r1, [r2, #40]	; 0x28
}
 80093de:	e7dc      	b.n	800939a <R3_2_SwitchOnPWM+0x52>

080093e0 <R3_2_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80093e0:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80093e4:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80093e6:	68d3      	ldr	r3, [r2, #12]
 80093e8:	f023 0301 	bic.w	r3, r3, #1
 80093ec:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80093ee:	6c53      	ldr	r3, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE(TIMx);

  pHandle->_Super.TurnOnLowSidesAction = false;
 80093f0:	f04f 0c00 	mov.w	ip, #0
 80093f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093f8:	f880 c06b 	strb.w	ip, [r0, #107]	; 0x6b
 80093fc:	6453      	str	r3, [r2, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->BrakeActionLock)
 80093fe:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8009402:	b91b      	cbnz	r3, 800940c <R3_2_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8009404:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 8009408:	2b02      	cmp	r3, #2
 800940a:	d00c      	beq.n	8009426 <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800940c:	f06f 0301 	mvn.w	r3, #1
 8009410:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009412:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8009414:	07db      	lsls	r3, r3, #31
 8009416:	d5fc      	bpl.n	8009412 <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009418:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked = false;
 800941c:	2300      	movs	r3, #0
 800941e:	6111      	str	r1, [r2, #16]
 8009420:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
 8009424:	4770      	bx	lr
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8009426:	6a0b      	ldr	r3, [r1, #32]
{
 8009428:	b410      	push	{r4}
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800942a:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 800942e:	629c      	str	r4, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8009430:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8009432:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
 8009436:	629c      	str	r4, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009438:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800943a:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 800943e:	6299      	str	r1, [r3, #40]	; 0x28
 8009440:	f06f 0301 	mvn.w	r3, #1
 8009444:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009446:	6913      	ldr	r3, [r2, #16]
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8009448:	07d9      	lsls	r1, r3, #31
 800944a:	d5fc      	bpl.n	8009446 <R3_2_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800944c:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked = false;
 8009450:	2300      	movs	r3, #0
 8009452:	6111      	str	r1, [r2, #16]
}
 8009454:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->ADCRegularLocked = false;
 8009458:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
}
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop

08009460 <R3_2_RLGetPhaseCurrents>:
  *         of phase A and B in ab_t format.
  */
static void R3_2_RLGetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{

  if (MC_NULL == pStator_Currents)
 8009460:	b329      	cbz	r1, 80094ae <R3_2_RLGetPhaseCurrents+0x4e>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009462:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 8009466:	b410      	push	{r4}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009468:	6894      	ldr	r4, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800946a:	6863      	ldr	r3, [r4, #4]
 800946c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009474:	6063      	str	r3, [r4, #4]
    int32_t wAux;

    /* disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8009476:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
 800947a:	6f43      	ldr	r3, [r0, #116]	; 0x74

    /* Check saturation */
    if (wAux > -INT16_MAX)
 800947c:	480e      	ldr	r0, [pc, #56]	; (80094b8 <R3_2_RLGetPhaseCurrents+0x58>)
    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 800947e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8009482:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009484:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009488:	1a9b      	subs	r3, r3, r2
    if (wAux > -INT16_MAX)
 800948a:	4283      	cmp	r3, r0
 800948c:	da09      	bge.n	80094a2 <R3_2_RLGetPhaseCurrents+0x42>
 800948e:	4b0b      	ldr	r3, [pc, #44]	; (80094bc <R3_2_RLGetPhaseCurrents+0x5c>)
    }

    pStator_Currents->a = (int16_t)wAux;
    pStator_Currents->b = (int16_t)wAux;
  }
}
 8009490:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 8009494:	2200      	movs	r2, #0
 8009496:	f363 020f 	bfi	r2, r3, #0, #16
 800949a:	f363 421f 	bfi	r2, r3, #16, #16
 800949e:	600a      	str	r2, [r1, #0]
}
 80094a0:	4770      	bx	lr
      if (wAux < INT16_MAX)
 80094a2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80094a6:	4293      	cmp	r3, r2
 80094a8:	dc02      	bgt.n	80094b0 <R3_2_RLGetPhaseCurrents+0x50>
    pStator_Currents->a = (int16_t)wAux;
 80094aa:	b21b      	sxth	r3, r3
 80094ac:	e7f0      	b.n	8009490 <R3_2_RLGetPhaseCurrents+0x30>
 80094ae:	4770      	bx	lr
 80094b0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80094b4:	e7ec      	b.n	8009490 <R3_2_RLGetPhaseCurrents+0x30>
 80094b6:	bf00      	nop
 80094b8:	ffff8002 	.word	0xffff8002
 80094bc:	ffff8001 	.word	0xffff8001

080094c0 <R3_2_RLTurnOnLowSides>:
  * @param  ticks: Duty cycle of the boot capacitors charge, specific to motor.
  */
static void R3_2_RLTurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80094c0:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88

  pHandle->ADCRegularLocked = true;
 80094c4:	2301      	movs	r3, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80094c6:	688a      	ldr	r2, [r1, #8]
{
 80094c8:	b410      	push	{r4}
  pHandle->ADCRegularLocked = true;
 80094ca:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->CCR1, CompareValue);
 80094ce:	2400      	movs	r4, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80094d0:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80094d4:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80094d6:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80094d8:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Wait until next update */
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 80094da:	07db      	lsls	r3, r3, #31
 80094dc:	d5fc      	bpl.n	80094d8 <R3_2_RLTurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80094de:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80094e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094e4:	6453      	str	r3, [r2, #68]	; 0x44
  }

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 80094e6:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d10b      	bne.n	8009506 <R3_2_RLTurnOnLowSides+0x46>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80094ee:	e9d1 2008 	ldrd	r2, r0, [r1, #32]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80094f2:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80094f6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80094f8:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80094fa:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80094fe:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 8009502:	6284      	str	r4, [r0, #40]	; 0x28
 8009504:	629a      	str	r2, [r3, #40]	; 0x28
  else
  {
    /* Nothing to do */
  }
  return;
}
 8009506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800950a:	4770      	bx	lr

0800950c <R3_2_RLSwitchOnPWM>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
static void R3_2_RLSwitchOnPWM( PWMC_Handle_t *pHdl)
{
  if (MC_NULL == pHdl)
 800950c:	2800      	cmp	r0, #0
 800950e:	d04c      	beq.n	80095aa <R3_2_RLSwitchOnPWM+0x9e>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009510:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCx_1;
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;

    pHandle->ADCRegularLocked=true;
 8009514:	2201      	movs	r2, #1
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009516:	688b      	ldr	r3, [r1, #8]
{
 8009518:	b4f0      	push	{r4, r5, r6, r7}
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 800951a:	e9d1 5400 	ldrd	r5, r4, [r1]
    pHandle->ADCRegularLocked=true;
 800951e:	f880 208c 	strb.w	r2, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009522:	f06f 0201 	mvn.w	r2, #1
 8009526:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009528:	691a      	ldr	r2, [r3, #16]
    /* wait for a new PWM period */
    LL_TIM_ClearFlag_UPDATE(TIMx);
    while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 800952a:	07d6      	lsls	r6, r2, #31
 800952c:	d5fc      	bpl.n	8009528 <R3_2_RLSwitchOnPWM+0x1c>
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800952e:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009532:	f06f 0601 	mvn.w	r6, #1
 8009536:	611e      	str	r6, [r3, #16]
 8009538:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800953a:	2601      	movs	r6, #1
 800953c:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 800953e:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009540:	691a      	ldr	r2, [r3, #16]

    while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8009542:	07d2      	lsls	r2, r2, #31
 8009544:	d5fc      	bpl.n	8009540 <R3_2_RLSwitchOnPWM+0x34>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009546:	68da      	ldr	r2, [r3, #12]
 8009548:	f042 0201 	orr.w	r2, r2, #1
 800954c:	60da      	str	r2, [r3, #12]

    /* enable TIMx update interrupt*/
    LL_TIM_EnableIT_UPDATE(TIMx);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800954e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009550:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009554:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009556:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009558:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800955c:	645a      	str	r2, [r3, #68]	; 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->pParams_str->LowSideOutputs)
 800955e:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 8009562:	2a02      	cmp	r2, #2
 8009564:	d00f      	beq.n	8009586 <R3_2_RLSwitchOnPWM+0x7a>
      /* Nothing to do */
    }

    /* set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx_1 */
    pHdl->Sector = SECTOR_4;
 8009566:	2303      	movs	r3, #3
 8009568:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
  MODIFY_REG(ADCx->CR,
 800956c:	68aa      	ldr	r2, [r5, #8]
 800956e:	4913      	ldr	r1, [pc, #76]	; (80095bc <R3_2_RLSwitchOnPWM+0xb0>)
 8009570:	400a      	ands	r2, r1
 8009572:	f042 0208 	orr.w	r2, r2, #8
 8009576:	60aa      	str	r2, [r5, #8]
 8009578:	68a3      	ldr	r3, [r4, #8]
 800957a:	400b      	ands	r3, r1
 800957c:	f043 0308 	orr.w	r3, r3, #8
 8009580:	60a3      	str	r3, [r4, #8]

    LL_ADC_INJ_StartConversion(ADCx_1);
    LL_ADC_INJ_StartConversion(ADCx_2);
  }
  return;
}
 8009582:	bcf0      	pop	{r4, r5, r6, r7}
 8009584:	4770      	bx	lr
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8009586:	6a1a      	ldr	r2, [r3, #32]
        LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8009588:	6a0e      	ldr	r6, [r1, #32]
 800958a:	f8b1 70ac 	ldrh.w	r7, [r1, #172]	; 0xac
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800958e:	f240 5355 	movw	r3, #1365	; 0x555
 8009592:	421a      	tst	r2, r3
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009594:	e9d1 2309 	ldrd	r2, r3, [r1, #36]	; 0x24
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8009598:	d008      	beq.n	80095ac <R3_2_RLSwitchOnPWM+0xa0>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800959a:	61b7      	str	r7, [r6, #24]
        LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800959c:	f8b1 60ae 	ldrh.w	r6, [r1, #174]	; 0xae
 80095a0:	6196      	str	r6, [r2, #24]
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80095a2:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 80095a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80095a8:	e7dd      	b.n	8009566 <R3_2_RLSwitchOnPWM+0x5a>
 80095aa:	4770      	bx	lr
  WRITE_REG(GPIOx->BRR, PinMask);
 80095ac:	62b7      	str	r7, [r6, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80095ae:	f8b1 60ae 	ldrh.w	r6, [r1, #174]	; 0xae
 80095b2:	6296      	str	r6, [r2, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80095b4:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 80095b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80095ba:	e7d4      	b.n	8009566 <R3_2_RLSwitchOnPWM+0x5a>
 80095bc:	7fffffc0 	.word	0x7fffffc0

080095c0 <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 80095c0:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 80095c4:	b510      	push	{r4, lr}
 80095c6:	f00c 0c3c 	and.w	ip, ip, #60	; 0x3c
 80095ca:	f101 0e08 	add.w	lr, r1, #8
 80095ce:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 80095d0:	f85c 300e 	ldr.w	r3, [ip, lr]
 80095d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095dc:	431a      	orrs	r2, r3
 80095de:	f84c 200e 	str.w	r2, [ip, lr]
  SET_BIT(DACx->SWTRIGR,
 80095e2:	684a      	ldr	r2, [r1, #4]
 80095e4:	f000 0303 	and.w	r3, r0, #3
 80095e8:	4313      	orrs	r3, r2
 80095ea:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 80095ec:	680a      	ldr	r2, [r1, #0]
 80095ee:	2301      	movs	r3, #1
 80095f0:	f000 0010 	and.w	r0, r0, #16
 80095f4:	fa03 f000 	lsl.w	r0, r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 80095f8:	ea30 0302 	bics.w	r3, r0, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80095fc:	4b14      	ldr	r3, [pc, #80]	; (8009650 <R3_2_SetAOReferenceVoltage+0x90>)
 80095fe:	d013      	beq.n	8009628 <R3_2_SetAOReferenceVoltage+0x68>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4c14      	ldr	r4, [pc, #80]	; (8009654 <R3_2_SetAOReferenceVoltage+0x94>)
  SET_BIT(DACx->CR,
 8009604:	680a      	ldr	r2, [r1, #0]
 8009606:	fba4 4303 	umull	r4, r3, r4, r3
 800960a:	0cdb      	lsrs	r3, r3, #19
 800960c:	00db      	lsls	r3, r3, #3
 800960e:	4310      	orrs	r0, r2
 8009610:	6008      	str	r0, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 8009612:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 8009614:	9b00      	ldr	r3, [sp, #0]
 8009616:	b12b      	cbz	r3, 8009624 <R3_2_SetAOReferenceVoltage+0x64>
      wait_loop_index--;
 8009618:	9b00      	ldr	r3, [sp, #0]
 800961a:	3b01      	subs	r3, #1
 800961c:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 800961e:	9b00      	ldr	r3, [sp, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1f9      	bne.n	8009618 <R3_2_SetAOReferenceVoltage+0x58>
}
 8009624:	b002      	add	sp, #8
 8009626:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8009628:	4a0a      	ldr	r2, [pc, #40]	; (8009654 <R3_2_SetAOReferenceVoltage+0x94>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	fba2 2303 	umull	r2, r3, r2, r3
 8009630:	0cdb      	lsrs	r3, r3, #19
 8009632:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009636:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8009638:	9b01      	ldr	r3, [sp, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d0f2      	beq.n	8009624 <R3_2_SetAOReferenceVoltage+0x64>
      wait_loop_index--;
 800963e:	9b01      	ldr	r3, [sp, #4]
 8009640:	3b01      	subs	r3, #1
 8009642:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8009644:	9b01      	ldr	r3, [sp, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1f9      	bne.n	800963e <R3_2_SetAOReferenceVoltage+0x7e>
}
 800964a:	b002      	add	sp, #8
 800964c:	bd10      	pop	{r4, pc}
 800964e:	bf00      	nop
 8009650:	200004c8 	.word	0x200004c8
 8009654:	431bde83 	.word	0x431bde83

08009658 <R3_2_Init>:
  if (MC_NULL == pHandle)
 8009658:	2800      	cmp	r0, #0
 800965a:	f000 80fc 	beq.w	8009856 <R3_2_Init+0x1fe>
{
 800965e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8009662:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCx_1;
 8009666:	681f      	ldr	r7, [r3, #0]
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 8009668:	685e      	ldr	r6, [r3, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800966a:	687a      	ldr	r2, [r7, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800966c:	689c      	ldr	r4, [r3, #8]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800966e:	f8d3 a014 	ldr.w	sl, [r3, #20]
 8009672:	4605      	mov	r5, r0
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8009674:	e9d3 e00b 	ldrd	lr, r0, [r3, #44]	; 0x2c
{
 8009678:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800967a:	2104      	movs	r1, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800967c:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8009680:	9001      	str	r0, [sp, #4]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8009682:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009684:	9002      	str	r0, [sp, #8]
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 8009686:	e9d3 cb03 	ldrd	ip, fp, [r3, #12]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 800968a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800968c:	9003      	str	r0, [sp, #12]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800968e:	e9d3 9806 	ldrd	r9, r8, [r3, #24]
 8009692:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8009694:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8009696:	687a      	ldr	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8009698:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800969a:	f022 0220 	bic.w	r2, r2, #32
 800969e:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80096a0:	6038      	str	r0, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80096a2:	6872      	ldr	r2, [r6, #4]
 80096a4:	f022 0204 	bic.w	r2, r2, #4
 80096a8:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80096aa:	6031      	str	r1, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80096ac:	6872      	ldr	r2, [r6, #4]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80096ae:	498f      	ldr	r1, [pc, #572]	; (80098ec <R3_2_Init+0x294>)
 80096b0:	f022 0220 	bic.w	r2, r2, #32
 80096b4:	6072      	str	r2, [r6, #4]
      if (TIM1 ==  TIMx)
 80096b6:	4a8e      	ldr	r2, [pc, #568]	; (80098f0 <R3_2_Init+0x298>)
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80096b8:	6030      	str	r0, [r6, #0]
 80096ba:	4294      	cmp	r4, r2
 80096bc:	690a      	ldr	r2, [r1, #16]
 80096be:	bf0c      	ite	eq
 80096c0:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 80096c4:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 80096c8:	610a      	str	r2, [r1, #16]
      if (OPAMPParams != NULL)
 80096ca:	f1bc 0f00 	cmp.w	ip, #0
 80096ce:	d011      	beq.n	80096f4 <R3_2_Init+0x9c>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 80096d0:	e9dc 0103 	ldrd	r0, r1, [ip, #12]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 80096d4:	6802      	ldr	r2, [r0, #0]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 80096d6:	f8dc c024 	ldr.w	ip, [ip, #36]	; 0x24
 80096da:	f042 0201 	orr.w	r2, r2, #1
 80096de:	6002      	str	r2, [r0, #0]
 80096e0:	680a      	ldr	r2, [r1, #0]
 80096e2:	f042 0201 	orr.w	r2, r2, #1
 80096e6:	600a      	str	r2, [r1, #0]
 80096e8:	f8dc 2000 	ldr.w	r2, [ip]
 80096ec:	f042 0201 	orr.w	r2, r2, #1
 80096f0:	f8cc 2000 	str.w	r2, [ip]
      if (COMP_OCPAx != NULL)
 80096f4:	f1bb 0f00 	cmp.w	fp, #0
 80096f8:	d018      	beq.n	800972c <R3_2_Init+0xd4>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 80096fa:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
 80096fe:	2a01      	cmp	r2, #1
 8009700:	d008      	beq.n	8009714 <R3_2_Init+0xbc>
 8009702:	f1be 0f00 	cmp.w	lr, #0
 8009706:	d005      	beq.n	8009714 <R3_2_Init+0xbc>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 8009708:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 800970c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800970e:	4671      	mov	r1, lr
 8009710:	f7ff ff56 	bl	80095c0 <R3_2_SetAOReferenceVoltage>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8009714:	f8db 3000 	ldr.w	r3, [fp]
 8009718:	f043 0301 	orr.w	r3, r3, #1
 800971c:	f8cb 3000 	str.w	r3, [fp]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009720:	f8db 3000 	ldr.w	r3, [fp]
 8009724:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009728:	f8cb 3000 	str.w	r3, [fp]
      if (COMP_OCPBx != NULL)
 800972c:	f1ba 0f00 	cmp.w	sl, #0
 8009730:	d019      	beq.n	8009766 <R3_2_Init+0x10e>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 8009732:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009736:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 800973a:	2a01      	cmp	r2, #1
 800973c:	d007      	beq.n	800974e <R3_2_Init+0xf6>
 800973e:	9a01      	ldr	r2, [sp, #4]
 8009740:	b12a      	cbz	r2, 800974e <R3_2_Init+0xf6>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 8009742:	4611      	mov	r1, r2
 8009744:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009746:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 800974a:	f7ff ff39 	bl	80095c0 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800974e:	f8da 3000 	ldr.w	r3, [sl]
 8009752:	f043 0301 	orr.w	r3, r3, #1
 8009756:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800975a:	f8da 3000 	ldr.w	r3, [sl]
 800975e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009762:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OCPCx != NULL)
 8009766:	f1b9 0f00 	cmp.w	r9, #0
 800976a:	d019      	beq.n	80097a0 <R3_2_Init+0x148>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 800976c:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009770:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8009774:	2a01      	cmp	r2, #1
 8009776:	d007      	beq.n	8009788 <R3_2_Init+0x130>
 8009778:	9a02      	ldr	r2, [sp, #8]
 800977a:	b12a      	cbz	r2, 8009788 <R3_2_Init+0x130>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 800977c:	4611      	mov	r1, r2
 800977e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009780:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 8009784:	f7ff ff1c 	bl	80095c0 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8009788:	f8d9 3000 	ldr.w	r3, [r9]
 800978c:	f043 0301 	orr.w	r3, r3, #1
 8009790:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009794:	f8d9 3000 	ldr.w	r3, [r9]
 8009798:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800979c:	f8c9 3000 	str.w	r3, [r9]
      if (COMP_OVPx != NULL)
 80097a0:	f1b8 0f00 	cmp.w	r8, #0
 80097a4:	d019      	beq.n	80097da <R3_2_Init+0x182>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 80097a6:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80097aa:	f893 20c6 	ldrb.w	r2, [r3, #198]	; 0xc6
 80097ae:	2a01      	cmp	r2, #1
 80097b0:	d007      	beq.n	80097c2 <R3_2_Init+0x16a>
 80097b2:	9a03      	ldr	r2, [sp, #12]
 80097b4:	b12a      	cbz	r2, 80097c2 <R3_2_Init+0x16a>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 80097b6:	4611      	mov	r1, r2
 80097b8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80097ba:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
 80097be:	f7ff feff 	bl	80095c0 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80097c2:	f8d8 3000 	ldr.w	r3, [r8]
 80097c6:	f043 0301 	orr.w	r3, r3, #1
 80097ca:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80097ce:	f8d8 3000 	ldr.w	r3, [r8]
 80097d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097d6:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80097da:	68bb      	ldr	r3, [r7, #8]
      if (0U == LL_ADC_IsEnabled(ADCx_1))
 80097dc:	07d9      	lsls	r1, r3, #31
 80097de:	d56a      	bpl.n	80098b6 <R3_2_Init+0x25e>
 80097e0:	68b3      	ldr	r3, [r6, #8]
      if (0U == LL_ADC_IsEnabled(ADCx_2))
 80097e2:	07da      	lsls	r2, r3, #31
 80097e4:	d563      	bpl.n	80098ae <R3_2_Init+0x256>
  volatile uint32_t Brk2Timeout = 1000;
 80097e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80097ea:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80097ec:	6823      	ldr	r3, [r4, #0]
  if (2U == pHandle->pParams_str->FreqRatio)
 80097ee:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 80097f2:	f023 0301 	bic.w	r3, r3, #1
 80097f6:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80097f8:	6863      	ldr	r3, [r4, #4]
 80097fa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80097fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009802:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009804:	69a3      	ldr	r3, [r4, #24]
 8009806:	f043 0308 	orr.w	r3, r3, #8
 800980a:	61a3      	str	r3, [r4, #24]
 800980c:	69a3      	ldr	r3, [r4, #24]
 800980e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009812:	61a3      	str	r3, [r4, #24]
 8009814:	69e3      	ldr	r3, [r4, #28]
 8009816:	f043 0308 	orr.w	r3, r3, #8
 800981a:	61e3      	str	r3, [r4, #28]
 800981c:	69e3      	ldr	r3, [r4, #28]
 800981e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009822:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009824:	6963      	ldr	r3, [r4, #20]
 8009826:	f043 0301 	orr.w	r3, r3, #1
 800982a:	6163      	str	r3, [r4, #20]
 800982c:	f892 30c7 	ldrb.w	r3, [r2, #199]	; 0xc7
 8009830:	2b02      	cmp	r3, #2
 8009832:	d011      	beq.n	8009858 <R3_2_Init+0x200>
    if (M1 == pHandle->_Super.Motor)
 8009834:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
 8009838:	b9b3      	cbnz	r3, 8009868 <R3_2_Init+0x210>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 800983a:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 800983e:	2b01      	cmp	r3, #1
 8009840:	d00e      	beq.n	8009860 <R3_2_Init+0x208>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 8009842:	2b03      	cmp	r3, #3
 8009844:	d110      	bne.n	8009868 <R3_2_Init+0x210>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009846:	2101      	movs	r1, #1
 8009848:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800984a:	6961      	ldr	r1, [r4, #20]
 800984c:	f041 0101 	orr.w	r1, r1, #1
 8009850:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009852:	6323      	str	r3, [r4, #48]	; 0x30
}
 8009854:	e008      	b.n	8009868 <R3_2_Init+0x210>
 8009856:	4770      	bx	lr
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 8009858:	f892 30c8 	ldrb.w	r3, [r2, #200]	; 0xc8
 800985c:	2b01      	cmp	r3, #1
 800985e:	d039      	beq.n	80098d4 <R3_2_Init+0x27c>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 8009860:	f8b5 307c 	ldrh.w	r3, [r5, #124]	; 0x7c
 8009864:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8009866:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8009868:	f06f 0380 	mvn.w	r3, #128	; 0x80
 800986c:	6123      	str	r3, [r4, #16]
  if ((pHandle->pParams_str->BKIN2Mode) != NONE)
 800986e:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 8009872:	b17b      	cbz	r3, 8009894 <R3_2_Init+0x23c>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8009874:	6923      	ldr	r3, [r4, #16]
 8009876:	05db      	lsls	r3, r3, #23
 8009878:	d52a      	bpl.n	80098d0 <R3_2_Init+0x278>
    while ((Brk2Timeout != 0u) && (1U == result))
 800987a:	9b05      	ldr	r3, [sp, #20]
 800987c:	b153      	cbz	r3, 8009894 <R3_2_Init+0x23c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800987e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009882:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 8009884:	9b05      	ldr	r3, [sp, #20]
 8009886:	3b01      	subs	r3, #1
 8009888:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800988a:	6923      	ldr	r3, [r4, #16]
 800988c:	f413 7f80 	tst.w	r3, #256	; 0x100
    while ((Brk2Timeout != 0u) && (1U == result))
 8009890:	9b05      	ldr	r3, [sp, #20]
 8009892:	d11a      	bne.n	80098ca <R3_2_Init+0x272>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8009894:	68e3      	ldr	r3, [r4, #12]
 8009896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800989a:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 800989c:	6a23      	ldr	r3, [r4, #32]
 800989e:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 80098a2:	f043 0305 	orr.w	r3, r3, #5
 80098a6:	6223      	str	r3, [r4, #32]
}
 80098a8:	b007      	add	sp, #28
 80098aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        R3_2_ADCxInit(ADCx_2);
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7ff fb94 	bl	8008fdc <R3_2_ADCxInit>
 80098b4:	e797      	b.n	80097e6 <R3_2_Init+0x18e>
        R3_2_ADCxInit(ADCx_1);
 80098b6:	4638      	mov	r0, r7
 80098b8:	f7ff fb90 	bl	8008fdc <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80098bc:	2340      	movs	r3, #64	; 0x40
 80098be:	603b      	str	r3, [r7, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098c6:	607b      	str	r3, [r7, #4]
}
 80098c8:	e78a      	b.n	80097e0 <R3_2_Init+0x188>
    while ((Brk2Timeout != 0u) && (1U == result))
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1d9      	bne.n	8009882 <R3_2_Init+0x22a>
 80098ce:	e7e1      	b.n	8009894 <R3_2_Init+0x23c>
 80098d0:	9b05      	ldr	r3, [sp, #20]
 80098d2:	e7df      	b.n	8009894 <R3_2_Init+0x23c>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 80098d4:	f892 10c1 	ldrb.w	r1, [r2, #193]	; 0xc1
 80098d8:	2903      	cmp	r1, #3
 80098da:	d1c1      	bne.n	8009860 <R3_2_Init+0x208>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80098dc:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80098de:	6963      	ldr	r3, [r4, #20]
 80098e0:	f043 0301 	orr.w	r3, r3, #1
 80098e4:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80098e6:	6321      	str	r1, [r4, #48]	; 0x30
}
 80098e8:	e7ba      	b.n	8009860 <R3_2_Init+0x208>
 80098ea:	bf00      	nop
 80098ec:	e0042000 	.word	0xe0042000
 80098f0:	40012c00 	.word	0x40012c00

080098f4 <R3_2_SetOffsetCalib>:
{
 80098f4:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 80098f6:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 80098fa:	680b      	ldr	r3, [r1, #0]
 80098fc:	6703      	str	r3, [r0, #112]	; 0x70
  pHdl->offsetCalibStatus = true;
 80098fe:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8009900:	e9c0 421d 	strd	r4, r2, [r0, #116]	; 0x74
  pHdl->offsetCalibStatus = true;
 8009904:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8009908:	f85d 4b04 	ldr.w	r4, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop

08009910 <R3_2_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 8009910:	e9d0 231d 	ldrd	r2, r3, [r0, #116]	; 0x74
 8009914:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8009916:	608b      	str	r3, [r1, #8]
 8009918:	e9c1 0200 	strd	r0, r2, [r1]
}
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop

08009920 <R3_2_CurrentReadingPolarization>:
{
 8009920:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009922:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  if (true == pHandle->_Super.offsetCalibStatus)
 8009926:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
  ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 800992a:	e9d3 7600 	ldrd	r7, r6, [r3]
{
 800992e:	b085      	sub	sp, #20
 8009930:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 8009932:	b1aa      	cbz	r2, 8009960 <R3_2_CurrentReadingPolarization+0x40>
  MODIFY_REG(ADCx->CR,
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	494f      	ldr	r1, [pc, #316]	; (8009a74 <R3_2_CurrentReadingPolarization+0x154>)
 8009938:	400a      	ands	r2, r1
 800993a:	f042 0208 	orr.w	r2, r2, #8
 800993e:	60ba      	str	r2, [r7, #8]
 8009940:	68b3      	ldr	r3, [r6, #8]
 8009942:	400b      	ands	r3, r1
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009944:	2280      	movs	r2, #128	; 0x80
 8009946:	f043 0308 	orr.w	r3, r3, #8
 800994a:	60b3      	str	r3, [r6, #8]
 800994c:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
  pHandle->_Super.Sector = SECTOR_5;
 8009950:	2204      	movs	r2, #4
  pHandle->BrakeActionLock = false;
 8009952:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 8009954:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
  pHandle->BrakeActionLock = false;
 8009958:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 800995c:	b005      	add	sp, #20
 800995e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009960:	689d      	ldr	r5, [r3, #8]
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8009962:	6803      	ldr	r3, [r0, #0]
 8009964:	9302      	str	r3, [sp, #8]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8009966:	6943      	ldr	r3, [r0, #20]
 8009968:	9303      	str	r3, [sp, #12]
    pHandle->PolarizationCounter = 0U;
 800996a:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  CLEAR_BIT(TIMx->CCER, Channels);
 800996e:	6a2b      	ldr	r3, [r5, #32]
    pHandle->PhaseCOffset = 0U;
 8009970:	6782      	str	r2, [r0, #120]	; 0x78
 8009972:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8009976:	f023 0305 	bic.w	r3, r3, #5
    pHandle->PhaseBOffset = 0U;
 800997a:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 800997e:	622b      	str	r3, [r5, #32]
  pHandle->PolarizationSector=SECTOR_5;
 8009980:	2304      	movs	r3, #4
 8009982:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_5;   
 8009986:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800998a:	4b3b      	ldr	r3, [pc, #236]	; (8009a78 <R3_2_CurrentReadingPolarization+0x158>)
 800998c:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 800998e:	4b3b      	ldr	r3, [pc, #236]	; (8009a7c <R3_2_CurrentReadingPolarization+0x15c>)
 8009990:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009992:	2380      	movs	r3, #128	; 0x80
 8009994:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8009998:	f7ff fcd6 	bl	8009348 <R3_2_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 800999c:	4a38      	ldr	r2, [pc, #224]	; (8009a80 <R3_2_CurrentReadingPolarization+0x160>)
 800999e:	686b      	ldr	r3, [r5, #4]
 80099a0:	4013      	ands	r3, r2
 80099a2:	2b70      	cmp	r3, #112	; 0x70
 80099a4:	d1fb      	bne.n	800999e <R3_2_CurrentReadingPolarization+0x7e>
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	4932      	ldr	r1, [pc, #200]	; (8009a74 <R3_2_CurrentReadingPolarization+0x154>)
 80099aa:	400a      	ands	r2, r1
 80099ac:	f042 0208 	orr.w	r2, r2, #8
 80099b0:	60ba      	str	r2, [r7, #8]
 80099b2:	68b3      	ldr	r3, [r6, #8]
    waitForPolarizationEnd(TIMx,
 80099b4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80099b8:	400b      	ands	r3, r1
 80099ba:	f043 0308 	orr.w	r3, r3, #8
 80099be:	60b3      	str	r3, [r6, #8]
 80099c0:	f104 0144 	add.w	r1, r4, #68	; 0x44
 80099c4:	f104 0380 	add.w	r3, r4, #128	; 0x80
 80099c8:	f892 20c1 	ldrb.w	r2, [r2, #193]	; 0xc1
 80099cc:	4628      	mov	r0, r5
 80099ce:	e9cd 1300 	strd	r1, r3, [sp]
 80099d2:	f7ff fae5 	bl	8008fa0 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 80099d6:	4620      	mov	r0, r4
 80099d8:	f7ff fd02 	bl	80093e0 <R3_2_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 80099dc:	2200      	movs	r2, #0
 80099de:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  pHandle->PolarizationSector=SECTOR_1;
 80099e2:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_1;   
 80099e6:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 80099ea:	4a26      	ldr	r2, [pc, #152]	; (8009a84 <R3_2_CurrentReadingPolarization+0x164>)
 80099ec:	6022      	str	r2, [r4, #0]
    R3_2_SwitchOnPWM(&pHandle->_Super);
 80099ee:	4620      	mov	r0, r4
 80099f0:	f7ff fcaa 	bl	8009348 <R3_2_SwitchOnPWM>
    waitForPolarizationEnd(TIMx,
 80099f4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80099f8:	9b01      	ldr	r3, [sp, #4]
 80099fa:	f892 20c1 	ldrb.w	r2, [r2, #193]	; 0xc1
 80099fe:	9900      	ldr	r1, [sp, #0]
 8009a00:	4628      	mov	r0, r5
 8009a02:	f7ff facd 	bl	8008fa0 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 8009a06:	4620      	mov	r0, r4
 8009a08:	f7ff fcea 	bl	80093e0 <R3_2_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8009a0c:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8009a10:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8009a12:	0909      	lsrs	r1, r1, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8009a14:	0912      	lsrs	r2, r2, #4
 8009a16:	e9c4 121c 	strd	r1, r2, [r4, #112]	; 0x70
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8009a1a:	091b      	lsrs	r3, r3, #4
 8009a1c:	67a3      	str	r3, [r4, #120]	; 0x78
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8009a1e:	9902      	ldr	r1, [sp, #8]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8009a20:	9a03      	ldr	r2, [sp, #12]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009a22:	69ab      	ldr	r3, [r5, #24]
 8009a24:	6162      	str	r2, [r4, #20]
 8009a26:	f023 0308 	bic.w	r3, r3, #8
    pHandle->_Super.offsetCalibStatus = true;
 8009a2a:	2001      	movs	r0, #1
 8009a2c:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8009a30:	6021      	str	r1, [r4, #0]
 8009a32:	61ab      	str	r3, [r5, #24]
 8009a34:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 8009a36:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8009a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a3e:	61aa      	str	r2, [r5, #24]
 8009a40:	69ea      	ldr	r2, [r5, #28]
 8009a42:	f022 0208 	bic.w	r2, r2, #8
 8009a46:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009a48:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009a4a:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009a4c:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009a4e:	69ab      	ldr	r3, [r5, #24]
 8009a50:	f043 0308 	orr.w	r3, r3, #8
 8009a54:	61ab      	str	r3, [r5, #24]
 8009a56:	69ab      	ldr	r3, [r5, #24]
 8009a58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009a5c:	61ab      	str	r3, [r5, #24]
 8009a5e:	69eb      	ldr	r3, [r5, #28]
 8009a60:	f043 0308 	orr.w	r3, r3, #8
 8009a64:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009a66:	6a2b      	ldr	r3, [r5, #32]
 8009a68:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8009a6c:	f043 0305 	orr.w	r3, r3, #5
 8009a70:	622b      	str	r3, [r5, #32]
}
 8009a72:	e76d      	b.n	8009950 <R3_2_CurrentReadingPolarization+0x30>
 8009a74:	7fffffc0 	.word	0x7fffffc0
 8009a78:	08009255 	.word	0x08009255
 8009a7c:	08009215 	.word	0x08009215
 8009a80:	02000070 	.word	0x02000070
 8009a84:	080092ad 	.word	0x080092ad

08009a88 <R3_2_SetADCSampPointSectX>:
  if (MC_NULL == pHdl)
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	d03a      	beq.n	8009b02 <R3_2_SetADCSampPointSectX+0x7a>
{
 8009a8c:	b530      	push	{r4, r5, lr}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 8009a8e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8009a92:	f8b0 e07c 	ldrh.w	lr, [r0, #124]	; 0x7c
 8009a96:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8009a9a:	ebae 0203 	sub.w	r2, lr, r3
 8009a9e:	f8b1 40b2 	ldrh.w	r4, [r1, #178]	; 0xb2
 8009aa2:	b292      	uxth	r2, r2
 8009aa4:	42a2      	cmp	r2, r4
 8009aa6:	d916      	bls.n	8009ad6 <R3_2_SetADCSampPointSectX+0x4e>
      pHandle->_Super.Sector = SECTOR_5;
 8009aa8:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 8009aaa:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 8009aae:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 8009ab2:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009ab4:	688a      	ldr	r2, [r1, #8]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8009ab6:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8009ab8:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8009abc:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009ac0:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009ac2:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009ac4:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009ac6:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009ac8:	6852      	ldr	r2, [r2, #4]
 8009aca:	4b11      	ldr	r3, [pc, #68]	; (8009b10 <R3_2_SetADCSampPointSectX+0x88>)
 8009acc:	421a      	tst	r2, r3
    returnValue = 0U;
 8009ace:	bf14      	ite	ne
 8009ad0:	2001      	movne	r0, #1
 8009ad2:	2000      	moveq	r0, #0
}
 8009ad4:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 8009ad6:	f8b0 c048 	ldrh.w	ip, [r0, #72]	; 0x48
 8009ada:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 8009ade:	fa1f fc8c 	uxth.w	ip, ip
 8009ae2:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8009ae6:	d80d      	bhi.n	8009b04 <R3_2_SetADCSampPointSectX+0x7c>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8009ae8:	4423      	add	r3, r4
 8009aea:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 8009aec:	459e      	cmp	lr, r3
 8009aee:	d8e1      	bhi.n	8009ab4 <R3_2_SetADCSampPointSectX+0x2c>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8009af0:	43db      	mvns	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 8009af2:	f44f 7280 	mov.w	r2, #256	; 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8009af6:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 8009afa:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	e7d8      	b.n	8009ab4 <R3_2_SetADCSampPointSectX+0x2c>
}
 8009b02:	4770      	bx	lr
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8009b04:	f8b1 20b6 	ldrh.w	r2, [r1, #182]	; 0xb6
 8009b08:	1a9b      	subs	r3, r3, r2
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	e7d2      	b.n	8009ab4 <R3_2_SetADCSampPointSectX+0x2c>
 8009b0e:	bf00      	nop
 8009b10:	02000070 	.word	0x02000070

08009b14 <R3_2_TIMx_UP_IRQHandler>:
  if (MC_NULL == pHandle)
 8009b14:	4602      	mov	r2, r0
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d043      	beq.n	8009ba2 <R3_2_TIMx_UP_IRQHandler+0x8e>
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009b1a:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
{
 8009b1e:	b5f0      	push	{r4, r5, r6, r7, lr}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009b20:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    if (OPAMPParams != NULL)
 8009b24:	2c00      	cmp	r4, #0
 8009b26:	d036      	beq.n	8009b96 <R3_2_TIMx_UP_IRQHandler+0x82>
      while (0x0u != pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR)
 8009b28:	f890 c06a 	ldrb.w	ip, [r0, #106]	; 0x6a
 8009b2c:	eb01 038c 	add.w	r3, r1, ip, lsl #2
 8009b30:	46e6      	mov	lr, ip
 8009b32:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009b34:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1fc      	bne.n	8009b34 <R3_2_TIMx_UP_IRQHandler+0x20>
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 8009b3a:	eb04 038c 	add.w	r3, r4, ip, lsl #2
 8009b3e:	6bde      	ldr	r6, [r3, #60]	; 0x3c
      if (OpampConfig != OPAMP_UNCHANGED)
 8009b40:	1c77      	adds	r7, r6, #1
 8009b42:	d005      	beq.n	8009b50 <R3_2_TIMx_UP_IRQHandler+0x3c>
        operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8009b44:	68df      	ldr	r7, [r3, #12]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8009b46:	683c      	ldr	r4, [r7, #0]
 8009b48:	f424 7486 	bic.w	r4, r4, #268	; 0x10c
 8009b4c:	4334      	orrs	r4, r6
 8009b4e:	603c      	str	r4, [r7, #0]
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 8009b50:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      if (OpampConfig != OPAMP_UNCHANGED)
 8009b52:	1c66      	adds	r6, r4, #1
 8009b54:	d005      	beq.n	8009b62 <R3_2_TIMx_UP_IRQHandler+0x4e>
        operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8009b56:	6a5e      	ldr	r6, [r3, #36]	; 0x24
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8009b58:	6833      	ldr	r3, [r6, #0]
 8009b5a:	f423 7386 	bic.w	r3, r3, #268	; 0x10c
 8009b5e:	4323      	orrs	r3, r4
 8009b60:	6033      	str	r3, [r6, #0]
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009b62:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8009b66:	f8b2 307e 	ldrh.w	r3, [r2, #126]	; 0x7e
 8009b6a:	6fcc      	ldr	r4, [r1, #124]	; 0x7c
 8009b6c:	431c      	orrs	r4, r3
 8009b6e:	64c4      	str	r4, [r0, #76]	; 0x4c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009b70:	6e48      	ldr	r0, [r1, #100]	; 0x64
 8009b72:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
 8009b76:	430b      	orrs	r3, r1
 8009b78:	64c3      	str	r3, [r0, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009b7a:	686b      	ldr	r3, [r5, #4]
 8009b7c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009b84:	2180      	movs	r1, #128	; 0x80
 8009b86:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8009b8a:	606b      	str	r3, [r5, #4]
    tempPointer = &(pHandle->_Super.Motor);
 8009b8c:	f102 0068 	add.w	r0, r2, #104	; 0x68
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009b90:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
}
 8009b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009b96:	f890 e06a 	ldrb.w	lr, [r0, #106]	; 0x6a
 8009b9a:	eb01 038e 	add.w	r3, r1, lr, lsl #2
 8009b9e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009ba0:	e7df      	b.n	8009b62 <R3_2_TIMx_UP_IRQHandler+0x4e>
}
 8009ba2:	4770      	bx	lr

08009ba4 <R3_2_BRK2_IRQHandler>:
  if (MC_NULL == pHandle)
 8009ba4:	b168      	cbz	r0, 8009bc2 <R3_2_BRK2_IRQHandler+0x1e>
    if (false == pHandle->BrakeActionLock)
 8009ba6:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8009baa:	b92b      	cbnz	r3, 8009bb8 <R3_2_BRK2_IRQHandler+0x14>
      if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8009bac:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009bb0:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 8009bb4:	2a02      	cmp	r2, #2
 8009bb6:	d005      	beq.n	8009bc4 <R3_2_BRK2_IRQHandler+0x20>
    pHandle->OverCurrentFlag = true;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
    tempPointer = &(pHandle->_Super.Motor);
 8009bbe:	3068      	adds	r0, #104	; 0x68
 8009bc0:	4770      	bx	lr
}
 8009bc2:	4770      	bx	lr
{
 8009bc4:	b430      	push	{r4, r5}
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8009bc6:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8009bca:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 8009bd0:	62a5      	str	r5, [r4, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8009bd2:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009bd6:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8009bda:	628c      	str	r4, [r1, #40]	; 0x28
 8009bdc:	6293      	str	r3, [r2, #40]	; 0x28
    pHandle->OverCurrentFlag = true;
 8009bde:	2301      	movs	r3, #1
 8009be0:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
}
 8009be4:	bc30      	pop	{r4, r5}
    tempPointer = &(pHandle->_Super.Motor);
 8009be6:	3068      	adds	r0, #104	; 0x68
}
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop

08009bec <R3_2_BRK_IRQHandler>:
  if (MC_NULL == pHandle)
 8009bec:	4603      	mov	r3, r0
 8009bee:	b160      	cbz	r0, 8009c0a <R3_2_BRK_IRQHandler+0x1e>
    pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009bf0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8009bf4:	6891      	ldr	r1, [r2, #8]
 8009bf6:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    pHandle->OverVoltageFlag = true;
 8009bf8:	f240 1c01 	movw	ip, #257	; 0x101
    pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009bfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c00:	644a      	str	r2, [r1, #68]	; 0x44
    tempPointer = &(pHandle->_Super.Motor);
 8009c02:	3068      	adds	r0, #104	; 0x68
    pHandle->OverVoltageFlag = true;
 8009c04:	f8a3 c083 	strh.w	ip, [r3, #131]	; 0x83
    tempPointer = &(pHandle->_Super.Motor);
 8009c08:	4770      	bx	lr
}
 8009c0a:	4770      	bx	lr

08009c0c <R3_2_IsOverCurrentOccurred>:
  if (true == pHandle->OverVoltageFlag)
 8009c0c:	f890 3083 	ldrb.w	r3, [r0, #131]	; 0x83
 8009c10:	b16b      	cbz	r3, 8009c2e <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8009c12:	2300      	movs	r3, #0
 8009c14:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
 8009c18:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8009c1a:	2302      	movs	r3, #2
  if (true == pHandle->OverCurrentFlag)
 8009c1c:	f890 2082 	ldrb.w	r2, [r0, #130]	; 0x82
 8009c20:	b11a      	cbz	r2, 8009c2a <R3_2_IsOverCurrentOccurred+0x1e>
    pHandle->OverCurrentFlag = false;
 8009c22:	2300      	movs	r3, #0
 8009c24:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
    retVal |= MC_BREAK_IN;
 8009c28:	460b      	mov	r3, r1
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	4770      	bx	lr
 8009c2e:	2140      	movs	r1, #64	; 0x40
 8009c30:	e7f4      	b.n	8009c1c <R3_2_IsOverCurrentOccurred+0x10>
 8009c32:	bf00      	nop

08009c34 <R3_2_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 8009c34:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
{
 8009c38:	b430      	push	{r4, r5}
  if (false == pHandle->_Super.RLDetectionMode)
 8009c3a:	2900      	cmp	r1, #0
 8009c3c:	d13d      	bne.n	8009cba <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009c3e:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 8009c42:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009c44:	699a      	ldr	r2, [r3, #24]
 8009c46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009c4a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8009c4e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009c52:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009c54:	6a1a      	ldr	r2, [r3, #32]
 8009c56:	f042 0201 	orr.w	r2, r2, #1
 8009c5a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009c5c:	6a1a      	ldr	r2, [r3, #32]
 8009c5e:	f022 0204 	bic.w	r2, r2, #4
 8009c62:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009c64:	6359      	str	r1, [r3, #52]	; 0x34
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 8009c66:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
 8009c6a:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8009c6c:	f103 0418 	add.w	r4, r3, #24
 8009c70:	d030      	beq.n	8009cd4 <R3_2_RLDetectionModeEnable+0xa0>
    else if (ES_GPIO ==  pHandle->pParams_str->LowSideOutputs)
 8009c72:	2a02      	cmp	r2, #2
 8009c74:	d10f      	bne.n	8009c96 <R3_2_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009c76:	699a      	ldr	r2, [r3, #24]
 8009c78:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009c7c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8009c80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c84:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009c86:	6a1a      	ldr	r2, [r3, #32]
 8009c88:	f042 0210 	orr.w	r2, r2, #16
 8009c8c:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009c8e:	6a1a      	ldr	r2, [r3, #32]
 8009c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c94:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009c96:	6862      	ldr	r2, [r4, #4]
 8009c98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009c9c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8009ca0:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8009ca4:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009ca6:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8009ca8:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8009caa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009cae:	621a      	str	r2, [r3, #32]
 8009cb0:	6a1a      	ldr	r2, [r3, #32]
 8009cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cb6:	621a      	str	r2, [r3, #32]
 8009cb8:	6701      	str	r1, [r0, #112]	; 0x70
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8009cba:	4b0f      	ldr	r3, [pc, #60]	; (8009cf8 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8009cbc:	490f      	ldr	r1, [pc, #60]	; (8009cfc <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009cbe:	4a10      	ldr	r2, [pc, #64]	; (8009d00 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8009cc0:	4c10      	ldr	r4, [pc, #64]	; (8009d04 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8009cc2:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 8009cc4:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8009cc6:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009cc8:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8009ccc:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 8009cce:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
}
 8009cd2:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009cd4:	699a      	ldr	r2, [r3, #24]
 8009cd6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009cda:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8009cde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ce2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009ce4:	6a1a      	ldr	r2, [r3, #32]
 8009ce6:	f022 0210 	bic.w	r2, r2, #16
 8009cea:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8009cec:	6a1a      	ldr	r2, [r3, #32]
 8009cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cf2:	621a      	str	r2, [r3, #32]
}
 8009cf4:	e7cf      	b.n	8009c96 <R3_2_RLDetectionModeEnable+0x62>
 8009cf6:	bf00      	nop
 8009cf8:	080094c1 	.word	0x080094c1
 8009cfc:	0800950d 	.word	0x0800950d
 8009d00:	080093e1 	.word	0x080093e1
 8009d04:	08009461 	.word	0x08009461

08009d08 <R3_2_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 8009d08:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d03c      	beq.n	8009d8a <R3_2_RLDetectionModeDisable+0x82>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009d10:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8009d14:	688b      	ldr	r3, [r1, #8]
{
 8009d16:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009d18:	699a      	ldr	r2, [r3, #24]
 8009d1a:	4c43      	ldr	r4, [pc, #268]	; (8009e28 <R3_2_RLDetectionModeDisable+0x120>)
 8009d1c:	4022      	ands	r2, r4
 8009d1e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009d22:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009d24:	6a1a      	ldr	r2, [r3, #32]
 8009d26:	f042 0201 	orr.w	r2, r2, #1
 8009d2a:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 8009d2c:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 8009d30:	2a01      	cmp	r2, #1
 8009d32:	d02b      	beq.n	8009d8c <R3_2_RLDetectionModeDisable+0x84>
    else if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8009d34:	2a02      	cmp	r2, #2
 8009d36:	d050      	beq.n	8009dda <R3_2_RLDetectionModeDisable+0xd2>
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 8009d38:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 8009d3c:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009d3e:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009d40:	6999      	ldr	r1, [r3, #24]
 8009d42:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8009d46:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8009d4a:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8009d4e:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009d50:	6a19      	ldr	r1, [r3, #32]
 8009d52:	f041 0110 	orr.w	r1, r1, #16
 8009d56:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009d58:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009d5a:	69d9      	ldr	r1, [r3, #28]
 8009d5c:	400c      	ands	r4, r1
 8009d5e:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8009d62:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009d64:	6a19      	ldr	r1, [r3, #32]
 8009d66:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009d6a:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8009d6c:	492f      	ldr	r1, [pc, #188]	; (8009e2c <R3_2_RLDetectionModeDisable+0x124>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009d6e:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009d70:	4a2f      	ldr	r2, [pc, #188]	; (8009e30 <R3_2_RLDetectionModeDisable+0x128>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8009d72:	6001      	str	r1, [r0, #0]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8009d74:	492f      	ldr	r1, [pc, #188]	; (8009e34 <R3_2_RLDetectionModeDisable+0x12c>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8009d76:	4c30      	ldr	r4, [pc, #192]	; (8009e38 <R3_2_RLDetectionModeDisable+0x130>)
 8009d78:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 8009d7a:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009d7c:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8009d80:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8009d84:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
}
 8009d88:	4770      	bx	lr
 8009d8a:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8009d8c:	6a19      	ldr	r1, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 8009d8e:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 8009d92:	f041 0104 	orr.w	r1, r1, #4
 8009d96:	0852      	lsrs	r2, r2, #1
 8009d98:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009d9a:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009d9c:	6999      	ldr	r1, [r3, #24]
 8009d9e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8009da2:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8009da6:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8009daa:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009dac:	6a19      	ldr	r1, [r3, #32]
 8009dae:	f041 0110 	orr.w	r1, r1, #16
 8009db2:	6219      	str	r1, [r3, #32]
 8009db4:	6a19      	ldr	r1, [r3, #32]
 8009db6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8009dba:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009dbc:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009dbe:	69d9      	ldr	r1, [r3, #28]
 8009dc0:	400c      	ands	r4, r1
 8009dc2:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8009dc6:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009dc8:	6a19      	ldr	r1, [r3, #32]
 8009dca:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009dce:	6219      	str	r1, [r3, #32]
 8009dd0:	6a19      	ldr	r1, [r3, #32]
 8009dd2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8009dd6:	6219      	str	r1, [r3, #32]
}
 8009dd8:	e7c8      	b.n	8009d6c <R3_2_RLDetectionModeDisable+0x64>
  CLEAR_BIT(TIMx->CCER, Channels);
 8009dda:	6a19      	ldr	r1, [r3, #32]
 8009ddc:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 8009de0:	f021 0104 	bic.w	r1, r1, #4
 8009de4:	0852      	lsrs	r2, r2, #1
 8009de6:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009de8:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009dea:	6999      	ldr	r1, [r3, #24]
 8009dec:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8009df0:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8009df4:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8009df8:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009dfa:	6a19      	ldr	r1, [r3, #32]
 8009dfc:	f041 0110 	orr.w	r1, r1, #16
 8009e00:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009e02:	6a19      	ldr	r1, [r3, #32]
 8009e04:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8009e08:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009e0a:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009e0c:	69d9      	ldr	r1, [r3, #28]
 8009e0e:	400c      	ands	r4, r1
 8009e10:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8009e14:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009e16:	6a19      	ldr	r1, [r3, #32]
 8009e18:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009e1c:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009e1e:	6a19      	ldr	r1, [r3, #32]
 8009e20:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8009e24:	6219      	str	r1, [r3, #32]
}
 8009e26:	e7a1      	b.n	8009d6c <R3_2_RLDetectionModeDisable+0x64>
 8009e28:	fffeff8c 	.word	0xfffeff8c
 8009e2c:	08009091 	.word	0x08009091
 8009e30:	080093e1 	.word	0x080093e1
 8009e34:	08009349 	.word	0x08009349
 8009e38:	080092f9 	.word	0x080092f9

08009e3c <R3_2_RLDetectionModeSetDuty>:
  if (MC_NULL == pHdl)
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d03d      	beq.n	8009ebc <R3_2_RLDetectionModeSetDuty+0x80>
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009e40:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 8009e44:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
{
 8009e48:	b410      	push	{r4}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009e4a:	689c      	ldr	r4, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009e4c:	69e3      	ldr	r3, [r4, #28]
 8009e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 8009e52:	fb02 f101 	mul.w	r1, r2, r1
 8009e56:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
 8009e5a:	0c09      	lsrs	r1, r1, #16
    pHandle->ADCRegularLocked = true;
 8009e5c:	f04f 0c01 	mov.w	ip, #1
 8009e60:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
    pHandle->_Super.CntPhA = (uint16_t)val;
 8009e64:	87c1      	strh	r1, [r0, #62]	; 0x3e
    pHandle->ADCRegularLocked = true;
 8009e66:	f880 c08c 	strb.w	ip, [r0, #140]	; 0x8c
 8009e6a:	61e3      	str	r3, [r4, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 8009e6c:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 8009e70:	1ad2      	subs	r2, r2, r3
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 8009e72:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009e76:	6422      	str	r2, [r4, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009e78:	63e3      	str	r3, [r4, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009e7a:	6361      	str	r1, [r4, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009e7c:	6863      	ldr	r3, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8009e7e:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
 8009e82:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e8a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    pHdl->Sector = SECTOR_4;
 8009e8e:	2103      	movs	r1, #3
 8009e90:	6063      	str	r3, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8009e92:	4562      	cmp	r2, ip
    pHdl->Sector = SECTOR_4;
 8009e94:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009e98:	6863      	ldr	r3, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8009e9a:	d008      	beq.n	8009eae <R3_2_RLDetectionModeSetDuty+0x72>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009e9c:	4a08      	ldr	r2, [pc, #32]	; (8009ec0 <R3_2_RLDetectionModeSetDuty+0x84>)
}
 8009e9e:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009ea2:	4213      	tst	r3, r2
      hAux = MC_DURATION;
 8009ea4:	bf14      	ite	ne
 8009ea6:	4662      	movne	r2, ip
 8009ea8:	2200      	moveq	r2, #0
}
 8009eaa:	4610      	mov	r0, r2
 8009eac:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
}
 8009eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eb8:	4610      	mov	r0, r2
 8009eba:	4770      	bx	lr
 8009ebc:	4770      	bx	lr
 8009ebe:	bf00      	nop
 8009ec0:	02000070 	.word	0x02000070

08009ec4 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8009ec4:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8009ec8:	8c02      	ldrh	r2, [r0, #32]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8009eca:	8b03      	ldrh	r3, [r0, #24]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8009ecc:	4494      	add	ip, r2
{
 8009ece:	b410      	push	{r4}
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8009ed0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8009ed4:	b14b      	cbz	r3, 8009eea <RVBS_Clear+0x26>
    {
      pHandle->aBuffer[index] = aux;
 8009ed6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009ed8:	2300      	movs	r3, #0
 8009eda:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8009edc:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 8009ede:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8009ee2:	8b01      	ldrh	r1, [r0, #24]
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	4291      	cmp	r1, r2
 8009ee8:	d8f7      	bhi.n	8009eda <RVBS_Clear+0x16>
    }
    pHandle->_Super.LatestConv = aux;
 8009eea:	2300      	movs	r3, #0
 8009eec:	f36c 030f 	bfi	r3, ip, #0, #16
 8009ef0:	f36c 431f 	bfi	r3, ip, #16, #16
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8009ef4:	2200      	movs	r2, #0
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 8009ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.LatestConv = aux;
 8009efa:	6043      	str	r3, [r0, #4]
    pHandle->index = 0U;
 8009efc:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
}
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop

08009f04 <RVBS_Init>:
{
 8009f04:	b510      	push	{r4, lr}
 8009f06:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8009f08:	300c      	adds	r0, #12
 8009f0a:	f7fa fb23 	bl	8004554 <RCM_RegisterRegConv>
 8009f0e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    RVBS_Clear(pHandle);
 8009f12:	4620      	mov	r0, r4
 8009f14:	f7ff ffd6 	bl	8009ec4 <RVBS_Clear>
}
 8009f18:	bd10      	pop	{r4, pc}
 8009f1a:	bf00      	nop

08009f1c <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8009f1c:	8b42      	ldrh	r2, [r0, #26]
 8009f1e:	8b81      	ldrh	r1, [r0, #28]
 8009f20:	428a      	cmp	r2, r1
 8009f22:	d00e      	beq.n	8009f42 <RVBS_CheckFaultState+0x26>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8009f24:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 8009f28:	8c03      	ldrh	r3, [r0, #32]
 8009f2a:	4563      	cmp	r3, ip
 8009f2c:	d807      	bhi.n	8009f3e <RVBS_CheckFaultState+0x22>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8009f2e:	7f83      	ldrb	r3, [r0, #30]
 8009f30:	b983      	cbnz	r3, 8009f54 <RVBS_CheckFaultState+0x38>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8009f32:	4561      	cmp	r1, ip
 8009f34:	d912      	bls.n	8009f5c <RVBS_CheckFaultState+0x40>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8009f36:	2201      	movs	r2, #1
 8009f38:	7782      	strb	r2, [r0, #30]
          fault = MC_NO_ERROR;
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 8009f3e:	2004      	movs	r0, #4
 8009f40:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8009f42:	88c3      	ldrh	r3, [r0, #6]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d309      	bcc.n	8009f5c <RVBS_CheckFaultState+0x40>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8009f48:	8c00      	ldrh	r0, [r0, #32]
        fault = MC_UNDER_VOLT;
 8009f4a:	4298      	cmp	r0, r3
 8009f4c:	bf8c      	ite	hi
 8009f4e:	2004      	movhi	r0, #4
 8009f50:	2000      	movls	r0, #0
 8009f52:	4770      	bx	lr
          fault = MC_OVER_VOLT;
        }
      }
      else
      {
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8009f54:	4562      	cmp	r2, ip
 8009f56:	d303      	bcc.n	8009f60 <RVBS_CheckFaultState+0x44>
        fault = MC_NO_ERROR;
 8009f58:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8009f5a:	4770      	bx	lr
        fault = MC_OVER_VOLT;
 8009f5c:	2002      	movs	r0, #2
 8009f5e:	4770      	bx	lr
          pHandle->OverVoltageHysteresisUpDir = false;
 8009f60:	2300      	movs	r3, #0
 8009f62:	7783      	strb	r3, [r0, #30]
          fault = MC_OVER_VOLT;
 8009f64:	2002      	movs	r0, #2
 8009f66:	4770      	bx	lr

08009f68 <RVBS_CalcAvVbus>:
{
 8009f68:	b538      	push	{r3, r4, r5, lr}
 8009f6a:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8009f6c:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8009f70:	f7fa fbd8 	bl	8004724 <RCM_ExecRegularConv>
    if (0xFFFFU == hAux)
 8009f74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f78:	4298      	cmp	r0, r3
 8009f7a:	d024      	beq.n	8009fc6 <RVBS_CalcAvVbus+0x5e>
      pHandle->aBuffer[pHandle->index] = hAux;
 8009f7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f7e:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
 8009f82:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009f86:	f8b4 e018 	ldrh.w	lr, [r4, #24]
 8009f8a:	f01e 02ff 	ands.w	r2, lr, #255	; 0xff
 8009f8e:	d00d      	beq.n	8009fac <RVBS_CalcAvVbus+0x44>
 8009f90:	3a01      	subs	r2, #1
 8009f92:	b2d2      	uxtb	r2, r2
 8009f94:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
 8009f98:	3b02      	subs	r3, #2
      wtemp = 0u;
 8009f9a:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 8009f9c:	f833 1f02 	ldrh.w	r1, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009fa0:	459c      	cmp	ip, r3
        wtemp += pHandle->aBuffer[i];
 8009fa2:	440a      	add	r2, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009fa4:	d1fa      	bne.n	8009f9c <RVBS_CalcAvVbus+0x34>
      wtemp /= pHandle->LowPassFilterBW;
 8009fa6:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8009faa:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8009fac:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009fb0:	4575      	cmp	r5, lr
        pHandle->index++;
 8009fb2:	bf34      	ite	cc
 8009fb4:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 8009fb6:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8009fb8:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8009fba:	80a0      	strh	r0, [r4, #4]
        pHandle->index++;
 8009fbc:	bf34      	ite	cc
 8009fbe:	f884 5029 	strbcc.w	r5, [r4, #41]	; 0x29
        pHandle->index = 0U;
 8009fc2:	f884 3029 	strbcs.w	r3, [r4, #41]	; 0x29
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f7ff ffa8 	bl	8009f1c <RVBS_CheckFaultState>
 8009fcc:	8120      	strh	r0, [r4, #8]
}
 8009fce:	bd38      	pop	{r3, r4, r5, pc}

08009fd0 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8009fd0:	2300      	movs	r3, #0
    pHandle->TargetFinal = 0;
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8009fd2:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8009fd4:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8009fd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8009fdc:	6142      	str	r2, [r0, #20]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 8009fde:	4770      	bx	lr

08009fe0 <SPD_GetElAngle>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8009fe0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop

08009fe8 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8009fe8:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop

08009ff0 <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 8009ff0:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop

08009ff8 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8009ff8:	f9b1 3000 	ldrsh.w	r3, [r1]
    else
    {
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
    }

    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8009ffc:	8a81      	ldrh	r1, [r0, #20]
{
 8009ffe:	b500      	push	{lr}
    if (*pMecSpeedUnit < 0)
 800a000:	2b00      	cmp	r3, #0
      hAux = -(*pMecSpeedUnit);
 800a002:	bfb8      	it	lt
 800a004:	425b      	neglt	r3, r3
    {
      SpeedError = true;
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800a006:	f8b0 e016 	ldrh.w	lr, [r0, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800a00a:	f890 c003 	ldrb.w	ip, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800a00e:	7802      	ldrb	r2, [r0, #0]
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 800a010:	b29b      	uxth	r3, r3
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800a012:	459e      	cmp	lr, r3
 800a014:	d819      	bhi.n	800a04a <SPD_IsMecSpeedReliable+0x52>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800a016:	4299      	cmp	r1, r3
 800a018:	bf2c      	ite	cs
 800a01a:	2300      	movcs	r3, #0
 800a01c:	2301      	movcc	r3, #1
    {
      SpeedError = true;
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 800a01e:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800a022:	f8b0 e018 	ldrh.w	lr, [r0, #24]
    if (pHandle->hMecAccelUnitP < 0)
 800a026:	2900      	cmp	r1, #0
      hAux = -(pHandle->hMecAccelUnitP);
 800a028:	bfb8      	it	lt
 800a02a:	4249      	neglt	r1, r1
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 800a02c:	b289      	uxth	r1, r1
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800a02e:	458e      	cmp	lr, r1
 800a030:	d300      	bcc.n	800a034 <SPD_IsMecSpeedReliable+0x3c>
    {
      SpeedError = true;
    }

    if (true == SpeedError)
 800a032:	b163      	cbz	r3, 800a04e <SPD_IsMecSpeedReliable+0x56>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800a034:	4594      	cmp	ip, r2
 800a036:	d901      	bls.n	800a03c <SPD_IsMecSpeedReliable+0x44>
      {
        bSpeedErrorNumber++;
 800a038:	3201      	adds	r2, #1
 800a03a:	b2d2      	uxtb	r2, r2
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
    {
      SpeedSensorReliability = false;
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800a03c:	7002      	strb	r2, [r0, #0]
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 800a03e:	ebb2 000c 	subs.w	r0, r2, ip
 800a042:	bf18      	it	ne
 800a044:	2001      	movne	r0, #1
 800a046:	f85d fb04 	ldr.w	pc, [sp], #4
      SpeedError = true;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e7e7      	b.n	800a01e <SPD_IsMecSpeedReliable+0x26>
        bSpeedErrorNumber = 0u;
 800a04e:	4594      	cmp	ip, r2
 800a050:	bf88      	it	hi
 800a052:	2200      	movhi	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800a054:	7002      	strb	r2, [r0, #0]
}
 800a056:	ebb2 000c 	subs.w	r0, r2, ip
 800a05a:	bf18      	it	ne
 800a05c:	2001      	movne	r0, #1
 800a05e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a062:	bf00      	nop

0800a064 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 800a064:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800a068:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wAux *= INT16_MAX;
 800a06c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800a070:	fb93 f0f0 	sdiv	r0, r3, r0
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 800a074:	b200      	sxth	r0, r0
 800a076:	4770      	bx	lr

0800a078 <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800a078:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
    pHandle->PISpeed = pPI;
 800a07c:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800a07e:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
    pHandle->SPD = SPD_Handle;
 800a082:	6142      	str	r2, [r0, #20]
{
 800a084:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 800a086:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 800a08a:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 800a08c:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800a08e:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800a092:	0409      	lsls	r1, r1, #16
 800a094:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 800a098:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 800a09a:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 800a09e:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 800a0a0:	6183      	str	r3, [r0, #24]
}
 800a0a2:	4770      	bx	lr

0800a0a4 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 800a0a4:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 800a0a6:	4770      	bx	lr

0800a0a8 <STC_GetSpeedSensor>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 800a0a8:	6940      	ldr	r0, [r0, #20]
 800a0aa:	4770      	bx	lr

0800a0ac <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 800a0ac:	7803      	ldrb	r3, [r0, #0]
 800a0ae:	2b03      	cmp	r3, #3
 800a0b0:	d000      	beq.n	800a0b4 <STC_Clear+0x8>
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 800a0b2:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 800a0b4:	6900      	ldr	r0, [r0, #16]
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	f7fe be92 	b.w	8008de0 <PID_SetIntegralTerm>

0800a0bc <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 800a0bc:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop

0800a0c4 <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 800a0c4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop

0800a0cc <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800a0cc:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 800a0ce:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800a0d0:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 800a0d2:	4770      	bx	lr

0800a0d4 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 800a0d4:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800a0d6:	7803      	ldrb	r3, [r0, #0]
 800a0d8:	2b04      	cmp	r3, #4
{
 800a0da:	4604      	mov	r4, r0
 800a0dc:	460e      	mov	r6, r1
 800a0de:	4615      	mov	r5, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800a0e0:	d01e      	beq.n	800a120 <STC_ExecRamp+0x4c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800a0e2:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800a0e4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800a0e8:	4299      	cmp	r1, r3
 800a0ea:	dd01      	ble.n	800a0f0 <STC_ExecRamp+0x1c>
        allowedRange = false;
 800a0ec:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 800a0ee:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 800a0f0:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800a0f4:	428b      	cmp	r3, r1
 800a0f6:	dcf9      	bgt.n	800a0ec <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800a0f8:	8c23      	ldrh	r3, [r4, #32]
 800a0fa:	4299      	cmp	r1, r3
 800a0fc:	da03      	bge.n	800a106 <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800a0fe:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 800a102:	428b      	cmp	r3, r1
 800a104:	dbf2      	blt.n	800a0ec <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 800a106:	b9ad      	cbnz	r5, 800a134 <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 800a108:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800a10a:	0436      	lsls	r6, r6, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 800a10c:	2b03      	cmp	r3, #3
        pHandle->RampRemainingStep = 0U;
 800a10e:	f04f 0300 	mov.w	r3, #0
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800a112:	bf0c      	ite	eq
 800a114:	6066      	streq	r6, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 800a116:	60a6      	strne	r6, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 800a118:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 800a11a:	61a3      	str	r3, [r4, #24]
 800a11c:	2001      	movs	r0, #1
}
 800a11e:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 800a120:	f7ff ffd0 	bl	800a0c4 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 800a124:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a126:	429e      	cmp	r6, r3
 800a128:	dce0      	bgt.n	800a0ec <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800a12a:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800a12e:	42b3      	cmp	r3, r6
 800a130:	dcdc      	bgt.n	800a0ec <STC_ExecRamp+0x18>
 800a132:	e7e8      	b.n	800a106 <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800a134:	8ba3      	ldrh	r3, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 800a136:	8066      	strh	r6, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800a138:	fb05 f303 	mul.w	r3, r5, r3
        wAux /= 1000U;
 800a13c:	4d06      	ldr	r5, [pc, #24]	; (800a158 <STC_ExecRamp+0x84>)
 800a13e:	fba5 2303 	umull	r2, r3, r5, r3
 800a142:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 800a144:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800a146:	1a30      	subs	r0, r6, r0
 800a148:	0400      	lsls	r0, r0, #16
        pHandle->RampRemainingStep++;
 800a14a:	60e3      	str	r3, [r4, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800a14c:	fb90 f0f3 	sdiv	r0, r0, r3
        pHandle->IncDecAmount = wAux1;
 800a150:	61a0      	str	r0, [r4, #24]
 800a152:	2001      	movs	r0, #1
}
 800a154:	bd70      	pop	{r4, r5, r6, pc}
 800a156:	bf00      	nop
 800a158:	10624dd3 	.word	0x10624dd3

0800a15c <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 800a15c:	2300      	movs	r3, #0
 800a15e:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 800a160:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 800a162:	4770      	bx	lr

0800a164 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 800a164:	b538      	push	{r3, r4, r5, lr}
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
    {
      wCurrentReference = pHandle->TorqueRef;
 800a166:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800a16a:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 800a16c:	68c3      	ldr	r3, [r0, #12]
      wCurrentReference = pHandle->TorqueRef;
 800a16e:	2a04      	cmp	r2, #4
 800a170:	bf08      	it	eq
 800a172:	460d      	moveq	r5, r1
    if (pHandle->RampRemainingStep > 1U)
 800a174:	2b01      	cmp	r3, #1
{
 800a176:	4604      	mov	r4, r0
    if (pHandle->RampRemainingStep > 1U)
 800a178:	d908      	bls.n	800a18c <STC_CalcTorqueReference+0x28>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 800a17a:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 800a17c:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800a17e:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 800a180:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 800a182:	2a03      	cmp	r2, #3
 800a184:	d00b      	beq.n	800a19e <STC_CalcTorqueReference+0x3a>
      pHandle->SpeedRefUnitExt = wCurrentReference;
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
    }
    else
    {
      pHandle->TorqueRef = wCurrentReference;
 800a186:	60a5      	str	r5, [r4, #8]
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 800a188:	1428      	asrs	r0, r5, #16
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 800a18a:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 800a18c:	d1f9      	bne.n	800a182 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800a18e:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800a192:	2300      	movs	r3, #0
    if (MCM_SPEED_MODE == pHandle->Mode)
 800a194:	2a03      	cmp	r2, #3
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800a196:	ea4f 4505 	mov.w	r5, r5, lsl #16
      pHandle->RampRemainingStep = 0U;
 800a19a:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800a19c:	d1f3      	bne.n	800a186 <STC_CalcTorqueReference+0x22>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800a19e:	6960      	ldr	r0, [r4, #20]
 800a1a0:	f7ff ff22 	bl	8009fe8 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 800a1a4:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 800a1a8:	b209      	sxth	r1, r1
 800a1aa:	6920      	ldr	r0, [r4, #16]
 800a1ac:	f7fe fe4a 	bl	8008e44 <PI_Controller>
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800a1b0:	0403      	lsls	r3, r0, #16
 800a1b2:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 800a1b6:	bd38      	pop	{r3, r4, r5, pc}

0800a1b8 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 800a1b8:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop

0800a1c0 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 800a1c0:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	b299      	uxth	r1, r3
 800a1c8:	f361 020f 	bfi	r2, r1, #0, #16
 800a1cc:	0c1b      	lsrs	r3, r3, #16
 800a1ce:	f363 421f 	bfi	r2, r3, #16, #16
{
 800a1d2:	b082      	sub	sp, #8
}
 800a1d4:	4610      	mov	r0, r2
 800a1d6:	b002      	add	sp, #8
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop

0800a1dc <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 800a1dc:	b510      	push	{r4, lr}
 800a1de:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800a1e0:	6940      	ldr	r0, [r0, #20]
 800a1e2:	f7ff ff01 	bl	8009fe8 <SPD_GetAvrgMecSpeedUnit>
 800a1e6:	0400      	lsls	r0, r0, #16
 800a1e8:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 800a1ea:	bd10      	pop	{r4, pc}

0800a1ec <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800a1ec:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800a1ee:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800a1f0:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 800a1f2:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 800a1f6:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 800a1f8:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 800a1fa:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 800a1fc:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->bTransitionStarted = false;
 800a1fe:	8583      	strh	r3, [r0, #44]	; 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800a200:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->hElAngleAccu = 0;
 800a202:	6303      	str	r3, [r0, #48]	; 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop

0800a208 <VSS_Init>:
{
 800a208:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 800a20a:	f7ff ffef 	bl	800a1ec <VSS_Clear>
}
 800a20e:	bd08      	pop	{r3, pc}

0800a210 <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a210:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 800a212:	8601      	strh	r1, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a214:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 800a218:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a21a:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop

0800a220 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800a220:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a224:	b99b      	cbnz	r3, 800a24e <VSS_SetMecAcceleration+0x2e>
{
 800a226:	b510      	push	{r4, lr}
    {
      if (0U == hDurationms)
 800a228:	b992      	cbnz	r2, 800a250 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a22a:	8b43      	ldrh	r3, [r0, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a22c:	69c4      	ldr	r4, [r0, #28]
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800a22e:	8181      	strh	r1, [r0, #12]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a230:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a234:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a238:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800a23a:	fb9c f3f3 	sdiv	r3, ip, r3

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a23e:	f890 c001 	ldrb.w	ip, [r0, #1]

        pHandle->hRemainingStep = 0U;
 800a242:	8502      	strh	r2, [r0, #40]	; 0x28
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800a244:	fb1c f303 	smulbb	r3, ip, r3
 800a248:	81c3      	strh	r3, [r0, #14]

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800a24a:	8541      	strh	r1, [r0, #42]	; 0x2a
      }
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800a24c:	bd10      	pop	{r4, pc}
 800a24e:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800a250:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 800a252:	4c16      	ldr	r4, [pc, #88]	; (800a2ac <VSS_SetMecAcceleration+0x8c>)
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a254:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800a258:	fb03 f202 	mul.w	r2, r3, r2
 800a25c:	fba4 2302 	umull	r2, r3, r4, r2
 800a260:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 800a264:	3301      	adds	r3, #1
 800a266:	b29b      	uxth	r3, r3
        pHandle->hRemainingStep = hNbrStep;
 800a268:	8503      	strh	r3, [r0, #40]	; 0x28
        if (0U == hNbrStep)
 800a26a:	b923      	cbnz	r3, 800a276 <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800a26c:	ea4f 430c 	mov.w	r3, ip, lsl #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800a270:	8541      	strh	r1, [r0, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800a272:	6243      	str	r3, [r0, #36]	; 0x24
}
 800a274:	bd10      	pop	{r4, pc}
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a276:	8b42      	ldrh	r2, [r0, #26]
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a278:	7844      	ldrb	r4, [r0, #1]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800a27a:	8541      	strh	r1, [r0, #42]	; 0x2a
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a27c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a280:	ea4f 0e42 	mov.w	lr, r2, lsl #1
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800a284:	69c2      	ldr	r2, [r0, #28]
 800a286:	fb01 f202 	mul.w	r2, r1, r2
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800a28a:	fb92 f2fe 	sdiv	r2, r2, lr
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a28e:	fb9c fef4 	sdiv	lr, ip, r4
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800a292:	eba2 020e 	sub.w	r2, r2, lr
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800a296:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800a298:	fb92 f3f3 	sdiv	r3, r2, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800a29c:	fb04 f303 	mul.w	r3, r4, r3
 800a2a0:	6203      	str	r3, [r0, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800a2a2:	ea4f 430c 	mov.w	r3, ip, lsl #16
 800a2a6:	6243      	str	r3, [r0, #36]	; 0x24
 800a2a8:	e7e4      	b.n	800a274 <VSS_SetMecAcceleration+0x54>
 800a2aa:	bf00      	nop
 800a2ac:	10624dd3 	.word	0x10624dd3

0800a2b0 <__errno>:
 800a2b0:	4b01      	ldr	r3, [pc, #4]	; (800a2b8 <__errno+0x8>)
 800a2b2:	6818      	ldr	r0, [r3, #0]
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	200004d4 	.word	0x200004d4

0800a2bc <__sflush_r>:
 800a2bc:	898a      	ldrh	r2, [r1, #12]
 800a2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	0710      	lsls	r0, r2, #28
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	d458      	bmi.n	800a37c <__sflush_r+0xc0>
 800a2ca:	684b      	ldr	r3, [r1, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	dc05      	bgt.n	800a2dc <__sflush_r+0x20>
 800a2d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	dc02      	bgt.n	800a2dc <__sflush_r+0x20>
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2de:	2e00      	cmp	r6, #0
 800a2e0:	d0f9      	beq.n	800a2d6 <__sflush_r+0x1a>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2e8:	682f      	ldr	r7, [r5, #0]
 800a2ea:	602b      	str	r3, [r5, #0]
 800a2ec:	d032      	beq.n	800a354 <__sflush_r+0x98>
 800a2ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	075a      	lsls	r2, r3, #29
 800a2f4:	d505      	bpl.n	800a302 <__sflush_r+0x46>
 800a2f6:	6863      	ldr	r3, [r4, #4]
 800a2f8:	1ac0      	subs	r0, r0, r3
 800a2fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2fc:	b10b      	cbz	r3, 800a302 <__sflush_r+0x46>
 800a2fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a300:	1ac0      	subs	r0, r0, r3
 800a302:	2300      	movs	r3, #0
 800a304:	4602      	mov	r2, r0
 800a306:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a308:	6a21      	ldr	r1, [r4, #32]
 800a30a:	4628      	mov	r0, r5
 800a30c:	47b0      	blx	r6
 800a30e:	1c43      	adds	r3, r0, #1
 800a310:	89a3      	ldrh	r3, [r4, #12]
 800a312:	d106      	bne.n	800a322 <__sflush_r+0x66>
 800a314:	6829      	ldr	r1, [r5, #0]
 800a316:	291d      	cmp	r1, #29
 800a318:	d82c      	bhi.n	800a374 <__sflush_r+0xb8>
 800a31a:	4a2a      	ldr	r2, [pc, #168]	; (800a3c4 <__sflush_r+0x108>)
 800a31c:	40ca      	lsrs	r2, r1
 800a31e:	07d6      	lsls	r6, r2, #31
 800a320:	d528      	bpl.n	800a374 <__sflush_r+0xb8>
 800a322:	2200      	movs	r2, #0
 800a324:	6062      	str	r2, [r4, #4]
 800a326:	04d9      	lsls	r1, r3, #19
 800a328:	6922      	ldr	r2, [r4, #16]
 800a32a:	6022      	str	r2, [r4, #0]
 800a32c:	d504      	bpl.n	800a338 <__sflush_r+0x7c>
 800a32e:	1c42      	adds	r2, r0, #1
 800a330:	d101      	bne.n	800a336 <__sflush_r+0x7a>
 800a332:	682b      	ldr	r3, [r5, #0]
 800a334:	b903      	cbnz	r3, 800a338 <__sflush_r+0x7c>
 800a336:	6560      	str	r0, [r4, #84]	; 0x54
 800a338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a33a:	602f      	str	r7, [r5, #0]
 800a33c:	2900      	cmp	r1, #0
 800a33e:	d0ca      	beq.n	800a2d6 <__sflush_r+0x1a>
 800a340:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a344:	4299      	cmp	r1, r3
 800a346:	d002      	beq.n	800a34e <__sflush_r+0x92>
 800a348:	4628      	mov	r0, r5
 800a34a:	f000 f9bf 	bl	800a6cc <_free_r>
 800a34e:	2000      	movs	r0, #0
 800a350:	6360      	str	r0, [r4, #52]	; 0x34
 800a352:	e7c1      	b.n	800a2d8 <__sflush_r+0x1c>
 800a354:	6a21      	ldr	r1, [r4, #32]
 800a356:	2301      	movs	r3, #1
 800a358:	4628      	mov	r0, r5
 800a35a:	47b0      	blx	r6
 800a35c:	1c41      	adds	r1, r0, #1
 800a35e:	d1c7      	bne.n	800a2f0 <__sflush_r+0x34>
 800a360:	682b      	ldr	r3, [r5, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d0c4      	beq.n	800a2f0 <__sflush_r+0x34>
 800a366:	2b1d      	cmp	r3, #29
 800a368:	d001      	beq.n	800a36e <__sflush_r+0xb2>
 800a36a:	2b16      	cmp	r3, #22
 800a36c:	d101      	bne.n	800a372 <__sflush_r+0xb6>
 800a36e:	602f      	str	r7, [r5, #0]
 800a370:	e7b1      	b.n	800a2d6 <__sflush_r+0x1a>
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a378:	81a3      	strh	r3, [r4, #12]
 800a37a:	e7ad      	b.n	800a2d8 <__sflush_r+0x1c>
 800a37c:	690f      	ldr	r7, [r1, #16]
 800a37e:	2f00      	cmp	r7, #0
 800a380:	d0a9      	beq.n	800a2d6 <__sflush_r+0x1a>
 800a382:	0793      	lsls	r3, r2, #30
 800a384:	680e      	ldr	r6, [r1, #0]
 800a386:	bf08      	it	eq
 800a388:	694b      	ldreq	r3, [r1, #20]
 800a38a:	600f      	str	r7, [r1, #0]
 800a38c:	bf18      	it	ne
 800a38e:	2300      	movne	r3, #0
 800a390:	eba6 0807 	sub.w	r8, r6, r7
 800a394:	608b      	str	r3, [r1, #8]
 800a396:	f1b8 0f00 	cmp.w	r8, #0
 800a39a:	dd9c      	ble.n	800a2d6 <__sflush_r+0x1a>
 800a39c:	6a21      	ldr	r1, [r4, #32]
 800a39e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3a0:	4643      	mov	r3, r8
 800a3a2:	463a      	mov	r2, r7
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	47b0      	blx	r6
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	dc06      	bgt.n	800a3ba <__sflush_r+0xfe>
 800a3ac:	89a3      	ldrh	r3, [r4, #12]
 800a3ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3b2:	81a3      	strh	r3, [r4, #12]
 800a3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b8:	e78e      	b.n	800a2d8 <__sflush_r+0x1c>
 800a3ba:	4407      	add	r7, r0
 800a3bc:	eba8 0800 	sub.w	r8, r8, r0
 800a3c0:	e7e9      	b.n	800a396 <__sflush_r+0xda>
 800a3c2:	bf00      	nop
 800a3c4:	20400001 	.word	0x20400001

0800a3c8 <_fflush_r>:
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	690b      	ldr	r3, [r1, #16]
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	b913      	cbnz	r3, 800a3d8 <_fflush_r+0x10>
 800a3d2:	2500      	movs	r5, #0
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	bd38      	pop	{r3, r4, r5, pc}
 800a3d8:	b118      	cbz	r0, 800a3e2 <_fflush_r+0x1a>
 800a3da:	6983      	ldr	r3, [r0, #24]
 800a3dc:	b90b      	cbnz	r3, 800a3e2 <_fflush_r+0x1a>
 800a3de:	f000 f899 	bl	800a514 <__sinit>
 800a3e2:	4b14      	ldr	r3, [pc, #80]	; (800a434 <_fflush_r+0x6c>)
 800a3e4:	429c      	cmp	r4, r3
 800a3e6:	d11b      	bne.n	800a420 <_fflush_r+0x58>
 800a3e8:	686c      	ldr	r4, [r5, #4]
 800a3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d0ef      	beq.n	800a3d2 <_fflush_r+0xa>
 800a3f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3f4:	07d0      	lsls	r0, r2, #31
 800a3f6:	d404      	bmi.n	800a402 <_fflush_r+0x3a>
 800a3f8:	0599      	lsls	r1, r3, #22
 800a3fa:	d402      	bmi.n	800a402 <_fflush_r+0x3a>
 800a3fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3fe:	f000 f94c 	bl	800a69a <__retarget_lock_acquire_recursive>
 800a402:	4628      	mov	r0, r5
 800a404:	4621      	mov	r1, r4
 800a406:	f7ff ff59 	bl	800a2bc <__sflush_r>
 800a40a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a40c:	07da      	lsls	r2, r3, #31
 800a40e:	4605      	mov	r5, r0
 800a410:	d4e0      	bmi.n	800a3d4 <_fflush_r+0xc>
 800a412:	89a3      	ldrh	r3, [r4, #12]
 800a414:	059b      	lsls	r3, r3, #22
 800a416:	d4dd      	bmi.n	800a3d4 <_fflush_r+0xc>
 800a418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a41a:	f000 f93f 	bl	800a69c <__retarget_lock_release_recursive>
 800a41e:	e7d9      	b.n	800a3d4 <_fflush_r+0xc>
 800a420:	4b05      	ldr	r3, [pc, #20]	; (800a438 <_fflush_r+0x70>)
 800a422:	429c      	cmp	r4, r3
 800a424:	d101      	bne.n	800a42a <_fflush_r+0x62>
 800a426:	68ac      	ldr	r4, [r5, #8]
 800a428:	e7df      	b.n	800a3ea <_fflush_r+0x22>
 800a42a:	4b04      	ldr	r3, [pc, #16]	; (800a43c <_fflush_r+0x74>)
 800a42c:	429c      	cmp	r4, r3
 800a42e:	bf08      	it	eq
 800a430:	68ec      	ldreq	r4, [r5, #12]
 800a432:	e7da      	b.n	800a3ea <_fflush_r+0x22>
 800a434:	0800d7c0 	.word	0x0800d7c0
 800a438:	0800d7e0 	.word	0x0800d7e0
 800a43c:	0800d7a0 	.word	0x0800d7a0

0800a440 <fflush>:
 800a440:	4601      	mov	r1, r0
 800a442:	b920      	cbnz	r0, 800a44e <fflush+0xe>
 800a444:	4b04      	ldr	r3, [pc, #16]	; (800a458 <fflush+0x18>)
 800a446:	4905      	ldr	r1, [pc, #20]	; (800a45c <fflush+0x1c>)
 800a448:	6818      	ldr	r0, [r3, #0]
 800a44a:	f000 b8e1 	b.w	800a610 <_fwalk_reent>
 800a44e:	4b04      	ldr	r3, [pc, #16]	; (800a460 <fflush+0x20>)
 800a450:	6818      	ldr	r0, [r3, #0]
 800a452:	f7ff bfb9 	b.w	800a3c8 <_fflush_r>
 800a456:	bf00      	nop
 800a458:	0800d800 	.word	0x0800d800
 800a45c:	0800a3c9 	.word	0x0800a3c9
 800a460:	200004d4 	.word	0x200004d4

0800a464 <std>:
 800a464:	2300      	movs	r3, #0
 800a466:	b510      	push	{r4, lr}
 800a468:	4604      	mov	r4, r0
 800a46a:	e9c0 3300 	strd	r3, r3, [r0]
 800a46e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a472:	6083      	str	r3, [r0, #8]
 800a474:	8181      	strh	r1, [r0, #12]
 800a476:	6643      	str	r3, [r0, #100]	; 0x64
 800a478:	81c2      	strh	r2, [r0, #14]
 800a47a:	6183      	str	r3, [r0, #24]
 800a47c:	4619      	mov	r1, r3
 800a47e:	2208      	movs	r2, #8
 800a480:	305c      	adds	r0, #92	; 0x5c
 800a482:	f000 f91a 	bl	800a6ba <memset>
 800a486:	4b05      	ldr	r3, [pc, #20]	; (800a49c <std+0x38>)
 800a488:	6263      	str	r3, [r4, #36]	; 0x24
 800a48a:	4b05      	ldr	r3, [pc, #20]	; (800a4a0 <std+0x3c>)
 800a48c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a48e:	4b05      	ldr	r3, [pc, #20]	; (800a4a4 <std+0x40>)
 800a490:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a492:	4b05      	ldr	r3, [pc, #20]	; (800a4a8 <std+0x44>)
 800a494:	6224      	str	r4, [r4, #32]
 800a496:	6323      	str	r3, [r4, #48]	; 0x30
 800a498:	bd10      	pop	{r4, pc}
 800a49a:	bf00      	nop
 800a49c:	0800b29d 	.word	0x0800b29d
 800a4a0:	0800b2bf 	.word	0x0800b2bf
 800a4a4:	0800b2f7 	.word	0x0800b2f7
 800a4a8:	0800b31b 	.word	0x0800b31b

0800a4ac <_cleanup_r>:
 800a4ac:	4901      	ldr	r1, [pc, #4]	; (800a4b4 <_cleanup_r+0x8>)
 800a4ae:	f000 b8af 	b.w	800a610 <_fwalk_reent>
 800a4b2:	bf00      	nop
 800a4b4:	0800a3c9 	.word	0x0800a3c9

0800a4b8 <__sfmoreglue>:
 800a4b8:	b570      	push	{r4, r5, r6, lr}
 800a4ba:	2268      	movs	r2, #104	; 0x68
 800a4bc:	1e4d      	subs	r5, r1, #1
 800a4be:	4355      	muls	r5, r2
 800a4c0:	460e      	mov	r6, r1
 800a4c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4c6:	f000 f96d 	bl	800a7a4 <_malloc_r>
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	b140      	cbz	r0, 800a4e0 <__sfmoreglue+0x28>
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	e9c0 1600 	strd	r1, r6, [r0]
 800a4d4:	300c      	adds	r0, #12
 800a4d6:	60a0      	str	r0, [r4, #8]
 800a4d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4dc:	f000 f8ed 	bl	800a6ba <memset>
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	bd70      	pop	{r4, r5, r6, pc}

0800a4e4 <__sfp_lock_acquire>:
 800a4e4:	4801      	ldr	r0, [pc, #4]	; (800a4ec <__sfp_lock_acquire+0x8>)
 800a4e6:	f000 b8d8 	b.w	800a69a <__retarget_lock_acquire_recursive>
 800a4ea:	bf00      	nop
 800a4ec:	20001cc9 	.word	0x20001cc9

0800a4f0 <__sfp_lock_release>:
 800a4f0:	4801      	ldr	r0, [pc, #4]	; (800a4f8 <__sfp_lock_release+0x8>)
 800a4f2:	f000 b8d3 	b.w	800a69c <__retarget_lock_release_recursive>
 800a4f6:	bf00      	nop
 800a4f8:	20001cc9 	.word	0x20001cc9

0800a4fc <__sinit_lock_acquire>:
 800a4fc:	4801      	ldr	r0, [pc, #4]	; (800a504 <__sinit_lock_acquire+0x8>)
 800a4fe:	f000 b8cc 	b.w	800a69a <__retarget_lock_acquire_recursive>
 800a502:	bf00      	nop
 800a504:	20001cca 	.word	0x20001cca

0800a508 <__sinit_lock_release>:
 800a508:	4801      	ldr	r0, [pc, #4]	; (800a510 <__sinit_lock_release+0x8>)
 800a50a:	f000 b8c7 	b.w	800a69c <__retarget_lock_release_recursive>
 800a50e:	bf00      	nop
 800a510:	20001cca 	.word	0x20001cca

0800a514 <__sinit>:
 800a514:	b510      	push	{r4, lr}
 800a516:	4604      	mov	r4, r0
 800a518:	f7ff fff0 	bl	800a4fc <__sinit_lock_acquire>
 800a51c:	69a3      	ldr	r3, [r4, #24]
 800a51e:	b11b      	cbz	r3, 800a528 <__sinit+0x14>
 800a520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a524:	f7ff bff0 	b.w	800a508 <__sinit_lock_release>
 800a528:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a52c:	6523      	str	r3, [r4, #80]	; 0x50
 800a52e:	4b13      	ldr	r3, [pc, #76]	; (800a57c <__sinit+0x68>)
 800a530:	4a13      	ldr	r2, [pc, #76]	; (800a580 <__sinit+0x6c>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	62a2      	str	r2, [r4, #40]	; 0x28
 800a536:	42a3      	cmp	r3, r4
 800a538:	bf04      	itt	eq
 800a53a:	2301      	moveq	r3, #1
 800a53c:	61a3      	streq	r3, [r4, #24]
 800a53e:	4620      	mov	r0, r4
 800a540:	f000 f820 	bl	800a584 <__sfp>
 800a544:	6060      	str	r0, [r4, #4]
 800a546:	4620      	mov	r0, r4
 800a548:	f000 f81c 	bl	800a584 <__sfp>
 800a54c:	60a0      	str	r0, [r4, #8]
 800a54e:	4620      	mov	r0, r4
 800a550:	f000 f818 	bl	800a584 <__sfp>
 800a554:	2200      	movs	r2, #0
 800a556:	60e0      	str	r0, [r4, #12]
 800a558:	2104      	movs	r1, #4
 800a55a:	6860      	ldr	r0, [r4, #4]
 800a55c:	f7ff ff82 	bl	800a464 <std>
 800a560:	68a0      	ldr	r0, [r4, #8]
 800a562:	2201      	movs	r2, #1
 800a564:	2109      	movs	r1, #9
 800a566:	f7ff ff7d 	bl	800a464 <std>
 800a56a:	68e0      	ldr	r0, [r4, #12]
 800a56c:	2202      	movs	r2, #2
 800a56e:	2112      	movs	r1, #18
 800a570:	f7ff ff78 	bl	800a464 <std>
 800a574:	2301      	movs	r3, #1
 800a576:	61a3      	str	r3, [r4, #24]
 800a578:	e7d2      	b.n	800a520 <__sinit+0xc>
 800a57a:	bf00      	nop
 800a57c:	0800d800 	.word	0x0800d800
 800a580:	0800a4ad 	.word	0x0800a4ad

0800a584 <__sfp>:
 800a584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a586:	4607      	mov	r7, r0
 800a588:	f7ff ffac 	bl	800a4e4 <__sfp_lock_acquire>
 800a58c:	4b1e      	ldr	r3, [pc, #120]	; (800a608 <__sfp+0x84>)
 800a58e:	681e      	ldr	r6, [r3, #0]
 800a590:	69b3      	ldr	r3, [r6, #24]
 800a592:	b913      	cbnz	r3, 800a59a <__sfp+0x16>
 800a594:	4630      	mov	r0, r6
 800a596:	f7ff ffbd 	bl	800a514 <__sinit>
 800a59a:	3648      	adds	r6, #72	; 0x48
 800a59c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	d503      	bpl.n	800a5ac <__sfp+0x28>
 800a5a4:	6833      	ldr	r3, [r6, #0]
 800a5a6:	b30b      	cbz	r3, 800a5ec <__sfp+0x68>
 800a5a8:	6836      	ldr	r6, [r6, #0]
 800a5aa:	e7f7      	b.n	800a59c <__sfp+0x18>
 800a5ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5b0:	b9d5      	cbnz	r5, 800a5e8 <__sfp+0x64>
 800a5b2:	4b16      	ldr	r3, [pc, #88]	; (800a60c <__sfp+0x88>)
 800a5b4:	60e3      	str	r3, [r4, #12]
 800a5b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5ba:	6665      	str	r5, [r4, #100]	; 0x64
 800a5bc:	f000 f86c 	bl	800a698 <__retarget_lock_init_recursive>
 800a5c0:	f7ff ff96 	bl	800a4f0 <__sfp_lock_release>
 800a5c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a5c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5cc:	6025      	str	r5, [r4, #0]
 800a5ce:	61a5      	str	r5, [r4, #24]
 800a5d0:	2208      	movs	r2, #8
 800a5d2:	4629      	mov	r1, r5
 800a5d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a5d8:	f000 f86f 	bl	800a6ba <memset>
 800a5dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e8:	3468      	adds	r4, #104	; 0x68
 800a5ea:	e7d9      	b.n	800a5a0 <__sfp+0x1c>
 800a5ec:	2104      	movs	r1, #4
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	f7ff ff62 	bl	800a4b8 <__sfmoreglue>
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	6030      	str	r0, [r6, #0]
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d1d5      	bne.n	800a5a8 <__sfp+0x24>
 800a5fc:	f7ff ff78 	bl	800a4f0 <__sfp_lock_release>
 800a600:	230c      	movs	r3, #12
 800a602:	603b      	str	r3, [r7, #0]
 800a604:	e7ee      	b.n	800a5e4 <__sfp+0x60>
 800a606:	bf00      	nop
 800a608:	0800d800 	.word	0x0800d800
 800a60c:	ffff0001 	.word	0xffff0001

0800a610 <_fwalk_reent>:
 800a610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a614:	4606      	mov	r6, r0
 800a616:	4688      	mov	r8, r1
 800a618:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a61c:	2700      	movs	r7, #0
 800a61e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a622:	f1b9 0901 	subs.w	r9, r9, #1
 800a626:	d505      	bpl.n	800a634 <_fwalk_reent+0x24>
 800a628:	6824      	ldr	r4, [r4, #0]
 800a62a:	2c00      	cmp	r4, #0
 800a62c:	d1f7      	bne.n	800a61e <_fwalk_reent+0xe>
 800a62e:	4638      	mov	r0, r7
 800a630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a634:	89ab      	ldrh	r3, [r5, #12]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d907      	bls.n	800a64a <_fwalk_reent+0x3a>
 800a63a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a63e:	3301      	adds	r3, #1
 800a640:	d003      	beq.n	800a64a <_fwalk_reent+0x3a>
 800a642:	4629      	mov	r1, r5
 800a644:	4630      	mov	r0, r6
 800a646:	47c0      	blx	r8
 800a648:	4307      	orrs	r7, r0
 800a64a:	3568      	adds	r5, #104	; 0x68
 800a64c:	e7e9      	b.n	800a622 <_fwalk_reent+0x12>
	...

0800a650 <__libc_init_array>:
 800a650:	b570      	push	{r4, r5, r6, lr}
 800a652:	4d0d      	ldr	r5, [pc, #52]	; (800a688 <__libc_init_array+0x38>)
 800a654:	4c0d      	ldr	r4, [pc, #52]	; (800a68c <__libc_init_array+0x3c>)
 800a656:	1b64      	subs	r4, r4, r5
 800a658:	10a4      	asrs	r4, r4, #2
 800a65a:	2600      	movs	r6, #0
 800a65c:	42a6      	cmp	r6, r4
 800a65e:	d109      	bne.n	800a674 <__libc_init_array+0x24>
 800a660:	4d0b      	ldr	r5, [pc, #44]	; (800a690 <__libc_init_array+0x40>)
 800a662:	4c0c      	ldr	r4, [pc, #48]	; (800a694 <__libc_init_array+0x44>)
 800a664:	f002 fd6c 	bl	800d140 <_init>
 800a668:	1b64      	subs	r4, r4, r5
 800a66a:	10a4      	asrs	r4, r4, #2
 800a66c:	2600      	movs	r6, #0
 800a66e:	42a6      	cmp	r6, r4
 800a670:	d105      	bne.n	800a67e <__libc_init_array+0x2e>
 800a672:	bd70      	pop	{r4, r5, r6, pc}
 800a674:	f855 3b04 	ldr.w	r3, [r5], #4
 800a678:	4798      	blx	r3
 800a67a:	3601      	adds	r6, #1
 800a67c:	e7ee      	b.n	800a65c <__libc_init_array+0xc>
 800a67e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a682:	4798      	blx	r3
 800a684:	3601      	adds	r6, #1
 800a686:	e7f2      	b.n	800a66e <__libc_init_array+0x1e>
 800a688:	0800db98 	.word	0x0800db98
 800a68c:	0800db98 	.word	0x0800db98
 800a690:	0800db98 	.word	0x0800db98
 800a694:	0800db9c 	.word	0x0800db9c

0800a698 <__retarget_lock_init_recursive>:
 800a698:	4770      	bx	lr

0800a69a <__retarget_lock_acquire_recursive>:
 800a69a:	4770      	bx	lr

0800a69c <__retarget_lock_release_recursive>:
 800a69c:	4770      	bx	lr

0800a69e <memcpy>:
 800a69e:	440a      	add	r2, r1
 800a6a0:	4291      	cmp	r1, r2
 800a6a2:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6a6:	d100      	bne.n	800a6aa <memcpy+0xc>
 800a6a8:	4770      	bx	lr
 800a6aa:	b510      	push	{r4, lr}
 800a6ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6b4:	4291      	cmp	r1, r2
 800a6b6:	d1f9      	bne.n	800a6ac <memcpy+0xe>
 800a6b8:	bd10      	pop	{r4, pc}

0800a6ba <memset>:
 800a6ba:	4402      	add	r2, r0
 800a6bc:	4603      	mov	r3, r0
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d100      	bne.n	800a6c4 <memset+0xa>
 800a6c2:	4770      	bx	lr
 800a6c4:	f803 1b01 	strb.w	r1, [r3], #1
 800a6c8:	e7f9      	b.n	800a6be <memset+0x4>
	...

0800a6cc <_free_r>:
 800a6cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6ce:	2900      	cmp	r1, #0
 800a6d0:	d044      	beq.n	800a75c <_free_r+0x90>
 800a6d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6d6:	9001      	str	r0, [sp, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f1a1 0404 	sub.w	r4, r1, #4
 800a6de:	bfb8      	it	lt
 800a6e0:	18e4      	addlt	r4, r4, r3
 800a6e2:	f001 fe1f 	bl	800c324 <__malloc_lock>
 800a6e6:	4a1e      	ldr	r2, [pc, #120]	; (800a760 <_free_r+0x94>)
 800a6e8:	9801      	ldr	r0, [sp, #4]
 800a6ea:	6813      	ldr	r3, [r2, #0]
 800a6ec:	b933      	cbnz	r3, 800a6fc <_free_r+0x30>
 800a6ee:	6063      	str	r3, [r4, #4]
 800a6f0:	6014      	str	r4, [r2, #0]
 800a6f2:	b003      	add	sp, #12
 800a6f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6f8:	f001 be1a 	b.w	800c330 <__malloc_unlock>
 800a6fc:	42a3      	cmp	r3, r4
 800a6fe:	d908      	bls.n	800a712 <_free_r+0x46>
 800a700:	6825      	ldr	r5, [r4, #0]
 800a702:	1961      	adds	r1, r4, r5
 800a704:	428b      	cmp	r3, r1
 800a706:	bf01      	itttt	eq
 800a708:	6819      	ldreq	r1, [r3, #0]
 800a70a:	685b      	ldreq	r3, [r3, #4]
 800a70c:	1949      	addeq	r1, r1, r5
 800a70e:	6021      	streq	r1, [r4, #0]
 800a710:	e7ed      	b.n	800a6ee <_free_r+0x22>
 800a712:	461a      	mov	r2, r3
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	b10b      	cbz	r3, 800a71c <_free_r+0x50>
 800a718:	42a3      	cmp	r3, r4
 800a71a:	d9fa      	bls.n	800a712 <_free_r+0x46>
 800a71c:	6811      	ldr	r1, [r2, #0]
 800a71e:	1855      	adds	r5, r2, r1
 800a720:	42a5      	cmp	r5, r4
 800a722:	d10b      	bne.n	800a73c <_free_r+0x70>
 800a724:	6824      	ldr	r4, [r4, #0]
 800a726:	4421      	add	r1, r4
 800a728:	1854      	adds	r4, r2, r1
 800a72a:	42a3      	cmp	r3, r4
 800a72c:	6011      	str	r1, [r2, #0]
 800a72e:	d1e0      	bne.n	800a6f2 <_free_r+0x26>
 800a730:	681c      	ldr	r4, [r3, #0]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	6053      	str	r3, [r2, #4]
 800a736:	4421      	add	r1, r4
 800a738:	6011      	str	r1, [r2, #0]
 800a73a:	e7da      	b.n	800a6f2 <_free_r+0x26>
 800a73c:	d902      	bls.n	800a744 <_free_r+0x78>
 800a73e:	230c      	movs	r3, #12
 800a740:	6003      	str	r3, [r0, #0]
 800a742:	e7d6      	b.n	800a6f2 <_free_r+0x26>
 800a744:	6825      	ldr	r5, [r4, #0]
 800a746:	1961      	adds	r1, r4, r5
 800a748:	428b      	cmp	r3, r1
 800a74a:	bf04      	itt	eq
 800a74c:	6819      	ldreq	r1, [r3, #0]
 800a74e:	685b      	ldreq	r3, [r3, #4]
 800a750:	6063      	str	r3, [r4, #4]
 800a752:	bf04      	itt	eq
 800a754:	1949      	addeq	r1, r1, r5
 800a756:	6021      	streq	r1, [r4, #0]
 800a758:	6054      	str	r4, [r2, #4]
 800a75a:	e7ca      	b.n	800a6f2 <_free_r+0x26>
 800a75c:	b003      	add	sp, #12
 800a75e:	bd30      	pop	{r4, r5, pc}
 800a760:	20001ccc 	.word	0x20001ccc

0800a764 <sbrk_aligned>:
 800a764:	b570      	push	{r4, r5, r6, lr}
 800a766:	4e0e      	ldr	r6, [pc, #56]	; (800a7a0 <sbrk_aligned+0x3c>)
 800a768:	460c      	mov	r4, r1
 800a76a:	6831      	ldr	r1, [r6, #0]
 800a76c:	4605      	mov	r5, r0
 800a76e:	b911      	cbnz	r1, 800a776 <sbrk_aligned+0x12>
 800a770:	f000 fd84 	bl	800b27c <_sbrk_r>
 800a774:	6030      	str	r0, [r6, #0]
 800a776:	4621      	mov	r1, r4
 800a778:	4628      	mov	r0, r5
 800a77a:	f000 fd7f 	bl	800b27c <_sbrk_r>
 800a77e:	1c43      	adds	r3, r0, #1
 800a780:	d00a      	beq.n	800a798 <sbrk_aligned+0x34>
 800a782:	1cc4      	adds	r4, r0, #3
 800a784:	f024 0403 	bic.w	r4, r4, #3
 800a788:	42a0      	cmp	r0, r4
 800a78a:	d007      	beq.n	800a79c <sbrk_aligned+0x38>
 800a78c:	1a21      	subs	r1, r4, r0
 800a78e:	4628      	mov	r0, r5
 800a790:	f000 fd74 	bl	800b27c <_sbrk_r>
 800a794:	3001      	adds	r0, #1
 800a796:	d101      	bne.n	800a79c <sbrk_aligned+0x38>
 800a798:	f04f 34ff 	mov.w	r4, #4294967295
 800a79c:	4620      	mov	r0, r4
 800a79e:	bd70      	pop	{r4, r5, r6, pc}
 800a7a0:	20001cd0 	.word	0x20001cd0

0800a7a4 <_malloc_r>:
 800a7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a8:	1ccd      	adds	r5, r1, #3
 800a7aa:	f025 0503 	bic.w	r5, r5, #3
 800a7ae:	3508      	adds	r5, #8
 800a7b0:	2d0c      	cmp	r5, #12
 800a7b2:	bf38      	it	cc
 800a7b4:	250c      	movcc	r5, #12
 800a7b6:	2d00      	cmp	r5, #0
 800a7b8:	4607      	mov	r7, r0
 800a7ba:	db01      	blt.n	800a7c0 <_malloc_r+0x1c>
 800a7bc:	42a9      	cmp	r1, r5
 800a7be:	d905      	bls.n	800a7cc <_malloc_r+0x28>
 800a7c0:	230c      	movs	r3, #12
 800a7c2:	603b      	str	r3, [r7, #0]
 800a7c4:	2600      	movs	r6, #0
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7cc:	4e2e      	ldr	r6, [pc, #184]	; (800a888 <_malloc_r+0xe4>)
 800a7ce:	f001 fda9 	bl	800c324 <__malloc_lock>
 800a7d2:	6833      	ldr	r3, [r6, #0]
 800a7d4:	461c      	mov	r4, r3
 800a7d6:	bb34      	cbnz	r4, 800a826 <_malloc_r+0x82>
 800a7d8:	4629      	mov	r1, r5
 800a7da:	4638      	mov	r0, r7
 800a7dc:	f7ff ffc2 	bl	800a764 <sbrk_aligned>
 800a7e0:	1c43      	adds	r3, r0, #1
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	d14d      	bne.n	800a882 <_malloc_r+0xde>
 800a7e6:	6834      	ldr	r4, [r6, #0]
 800a7e8:	4626      	mov	r6, r4
 800a7ea:	2e00      	cmp	r6, #0
 800a7ec:	d140      	bne.n	800a870 <_malloc_r+0xcc>
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	4631      	mov	r1, r6
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	eb04 0803 	add.w	r8, r4, r3
 800a7f8:	f000 fd40 	bl	800b27c <_sbrk_r>
 800a7fc:	4580      	cmp	r8, r0
 800a7fe:	d13a      	bne.n	800a876 <_malloc_r+0xd2>
 800a800:	6821      	ldr	r1, [r4, #0]
 800a802:	3503      	adds	r5, #3
 800a804:	1a6d      	subs	r5, r5, r1
 800a806:	f025 0503 	bic.w	r5, r5, #3
 800a80a:	3508      	adds	r5, #8
 800a80c:	2d0c      	cmp	r5, #12
 800a80e:	bf38      	it	cc
 800a810:	250c      	movcc	r5, #12
 800a812:	4629      	mov	r1, r5
 800a814:	4638      	mov	r0, r7
 800a816:	f7ff ffa5 	bl	800a764 <sbrk_aligned>
 800a81a:	3001      	adds	r0, #1
 800a81c:	d02b      	beq.n	800a876 <_malloc_r+0xd2>
 800a81e:	6823      	ldr	r3, [r4, #0]
 800a820:	442b      	add	r3, r5
 800a822:	6023      	str	r3, [r4, #0]
 800a824:	e00e      	b.n	800a844 <_malloc_r+0xa0>
 800a826:	6822      	ldr	r2, [r4, #0]
 800a828:	1b52      	subs	r2, r2, r5
 800a82a:	d41e      	bmi.n	800a86a <_malloc_r+0xc6>
 800a82c:	2a0b      	cmp	r2, #11
 800a82e:	d916      	bls.n	800a85e <_malloc_r+0xba>
 800a830:	1961      	adds	r1, r4, r5
 800a832:	42a3      	cmp	r3, r4
 800a834:	6025      	str	r5, [r4, #0]
 800a836:	bf18      	it	ne
 800a838:	6059      	strne	r1, [r3, #4]
 800a83a:	6863      	ldr	r3, [r4, #4]
 800a83c:	bf08      	it	eq
 800a83e:	6031      	streq	r1, [r6, #0]
 800a840:	5162      	str	r2, [r4, r5]
 800a842:	604b      	str	r3, [r1, #4]
 800a844:	4638      	mov	r0, r7
 800a846:	f104 060b 	add.w	r6, r4, #11
 800a84a:	f001 fd71 	bl	800c330 <__malloc_unlock>
 800a84e:	f026 0607 	bic.w	r6, r6, #7
 800a852:	1d23      	adds	r3, r4, #4
 800a854:	1af2      	subs	r2, r6, r3
 800a856:	d0b6      	beq.n	800a7c6 <_malloc_r+0x22>
 800a858:	1b9b      	subs	r3, r3, r6
 800a85a:	50a3      	str	r3, [r4, r2]
 800a85c:	e7b3      	b.n	800a7c6 <_malloc_r+0x22>
 800a85e:	6862      	ldr	r2, [r4, #4]
 800a860:	42a3      	cmp	r3, r4
 800a862:	bf0c      	ite	eq
 800a864:	6032      	streq	r2, [r6, #0]
 800a866:	605a      	strne	r2, [r3, #4]
 800a868:	e7ec      	b.n	800a844 <_malloc_r+0xa0>
 800a86a:	4623      	mov	r3, r4
 800a86c:	6864      	ldr	r4, [r4, #4]
 800a86e:	e7b2      	b.n	800a7d6 <_malloc_r+0x32>
 800a870:	4634      	mov	r4, r6
 800a872:	6876      	ldr	r6, [r6, #4]
 800a874:	e7b9      	b.n	800a7ea <_malloc_r+0x46>
 800a876:	230c      	movs	r3, #12
 800a878:	603b      	str	r3, [r7, #0]
 800a87a:	4638      	mov	r0, r7
 800a87c:	f001 fd58 	bl	800c330 <__malloc_unlock>
 800a880:	e7a1      	b.n	800a7c6 <_malloc_r+0x22>
 800a882:	6025      	str	r5, [r4, #0]
 800a884:	e7de      	b.n	800a844 <_malloc_r+0xa0>
 800a886:	bf00      	nop
 800a888:	20001ccc 	.word	0x20001ccc

0800a88c <__cvt>:
 800a88c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a890:	ec55 4b10 	vmov	r4, r5, d0
 800a894:	2d00      	cmp	r5, #0
 800a896:	460e      	mov	r6, r1
 800a898:	4619      	mov	r1, r3
 800a89a:	462b      	mov	r3, r5
 800a89c:	bfbb      	ittet	lt
 800a89e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a8a2:	461d      	movlt	r5, r3
 800a8a4:	2300      	movge	r3, #0
 800a8a6:	232d      	movlt	r3, #45	; 0x2d
 800a8a8:	700b      	strb	r3, [r1, #0]
 800a8aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a8b0:	4691      	mov	r9, r2
 800a8b2:	f023 0820 	bic.w	r8, r3, #32
 800a8b6:	bfbc      	itt	lt
 800a8b8:	4622      	movlt	r2, r4
 800a8ba:	4614      	movlt	r4, r2
 800a8bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8c0:	d005      	beq.n	800a8ce <__cvt+0x42>
 800a8c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a8c6:	d100      	bne.n	800a8ca <__cvt+0x3e>
 800a8c8:	3601      	adds	r6, #1
 800a8ca:	2102      	movs	r1, #2
 800a8cc:	e000      	b.n	800a8d0 <__cvt+0x44>
 800a8ce:	2103      	movs	r1, #3
 800a8d0:	ab03      	add	r3, sp, #12
 800a8d2:	9301      	str	r3, [sp, #4]
 800a8d4:	ab02      	add	r3, sp, #8
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	ec45 4b10 	vmov	d0, r4, r5
 800a8dc:	4653      	mov	r3, sl
 800a8de:	4632      	mov	r2, r6
 800a8e0:	f000 feae 	bl	800b640 <_dtoa_r>
 800a8e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a8e8:	4607      	mov	r7, r0
 800a8ea:	d102      	bne.n	800a8f2 <__cvt+0x66>
 800a8ec:	f019 0f01 	tst.w	r9, #1
 800a8f0:	d022      	beq.n	800a938 <__cvt+0xac>
 800a8f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8f6:	eb07 0906 	add.w	r9, r7, r6
 800a8fa:	d110      	bne.n	800a91e <__cvt+0x92>
 800a8fc:	783b      	ldrb	r3, [r7, #0]
 800a8fe:	2b30      	cmp	r3, #48	; 0x30
 800a900:	d10a      	bne.n	800a918 <__cvt+0x8c>
 800a902:	2200      	movs	r2, #0
 800a904:	2300      	movs	r3, #0
 800a906:	4620      	mov	r0, r4
 800a908:	4629      	mov	r1, r5
 800a90a:	f7f6 f905 	bl	8000b18 <__aeabi_dcmpeq>
 800a90e:	b918      	cbnz	r0, 800a918 <__cvt+0x8c>
 800a910:	f1c6 0601 	rsb	r6, r6, #1
 800a914:	f8ca 6000 	str.w	r6, [sl]
 800a918:	f8da 3000 	ldr.w	r3, [sl]
 800a91c:	4499      	add	r9, r3
 800a91e:	2200      	movs	r2, #0
 800a920:	2300      	movs	r3, #0
 800a922:	4620      	mov	r0, r4
 800a924:	4629      	mov	r1, r5
 800a926:	f7f6 f8f7 	bl	8000b18 <__aeabi_dcmpeq>
 800a92a:	b108      	cbz	r0, 800a930 <__cvt+0xa4>
 800a92c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a930:	2230      	movs	r2, #48	; 0x30
 800a932:	9b03      	ldr	r3, [sp, #12]
 800a934:	454b      	cmp	r3, r9
 800a936:	d307      	bcc.n	800a948 <__cvt+0xbc>
 800a938:	9b03      	ldr	r3, [sp, #12]
 800a93a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a93c:	1bdb      	subs	r3, r3, r7
 800a93e:	4638      	mov	r0, r7
 800a940:	6013      	str	r3, [r2, #0]
 800a942:	b004      	add	sp, #16
 800a944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a948:	1c59      	adds	r1, r3, #1
 800a94a:	9103      	str	r1, [sp, #12]
 800a94c:	701a      	strb	r2, [r3, #0]
 800a94e:	e7f0      	b.n	800a932 <__cvt+0xa6>

0800a950 <__exponent>:
 800a950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a952:	4603      	mov	r3, r0
 800a954:	2900      	cmp	r1, #0
 800a956:	bfb8      	it	lt
 800a958:	4249      	neglt	r1, r1
 800a95a:	f803 2b02 	strb.w	r2, [r3], #2
 800a95e:	bfb4      	ite	lt
 800a960:	222d      	movlt	r2, #45	; 0x2d
 800a962:	222b      	movge	r2, #43	; 0x2b
 800a964:	2909      	cmp	r1, #9
 800a966:	7042      	strb	r2, [r0, #1]
 800a968:	dd2a      	ble.n	800a9c0 <__exponent+0x70>
 800a96a:	f10d 0407 	add.w	r4, sp, #7
 800a96e:	46a4      	mov	ip, r4
 800a970:	270a      	movs	r7, #10
 800a972:	46a6      	mov	lr, r4
 800a974:	460a      	mov	r2, r1
 800a976:	fb91 f6f7 	sdiv	r6, r1, r7
 800a97a:	fb07 1516 	mls	r5, r7, r6, r1
 800a97e:	3530      	adds	r5, #48	; 0x30
 800a980:	2a63      	cmp	r2, #99	; 0x63
 800a982:	f104 34ff 	add.w	r4, r4, #4294967295
 800a986:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a98a:	4631      	mov	r1, r6
 800a98c:	dcf1      	bgt.n	800a972 <__exponent+0x22>
 800a98e:	3130      	adds	r1, #48	; 0x30
 800a990:	f1ae 0502 	sub.w	r5, lr, #2
 800a994:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a998:	1c44      	adds	r4, r0, #1
 800a99a:	4629      	mov	r1, r5
 800a99c:	4561      	cmp	r1, ip
 800a99e:	d30a      	bcc.n	800a9b6 <__exponent+0x66>
 800a9a0:	f10d 0209 	add.w	r2, sp, #9
 800a9a4:	eba2 020e 	sub.w	r2, r2, lr
 800a9a8:	4565      	cmp	r5, ip
 800a9aa:	bf88      	it	hi
 800a9ac:	2200      	movhi	r2, #0
 800a9ae:	4413      	add	r3, r2
 800a9b0:	1a18      	subs	r0, r3, r0
 800a9b2:	b003      	add	sp, #12
 800a9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a9be:	e7ed      	b.n	800a99c <__exponent+0x4c>
 800a9c0:	2330      	movs	r3, #48	; 0x30
 800a9c2:	3130      	adds	r1, #48	; 0x30
 800a9c4:	7083      	strb	r3, [r0, #2]
 800a9c6:	70c1      	strb	r1, [r0, #3]
 800a9c8:	1d03      	adds	r3, r0, #4
 800a9ca:	e7f1      	b.n	800a9b0 <__exponent+0x60>

0800a9cc <_printf_float>:
 800a9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d0:	ed2d 8b02 	vpush	{d8}
 800a9d4:	b08d      	sub	sp, #52	; 0x34
 800a9d6:	460c      	mov	r4, r1
 800a9d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a9dc:	4616      	mov	r6, r2
 800a9de:	461f      	mov	r7, r3
 800a9e0:	4605      	mov	r5, r0
 800a9e2:	f001 fc1b 	bl	800c21c <_localeconv_r>
 800a9e6:	f8d0 a000 	ldr.w	sl, [r0]
 800a9ea:	4650      	mov	r0, sl
 800a9ec:	f7f5 fc18 	bl	8000220 <strlen>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a9f4:	6823      	ldr	r3, [r4, #0]
 800a9f6:	9305      	str	r3, [sp, #20]
 800a9f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a9fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aa00:	3307      	adds	r3, #7
 800aa02:	f023 0307 	bic.w	r3, r3, #7
 800aa06:	f103 0208 	add.w	r2, r3, #8
 800aa0a:	f8c8 2000 	str.w	r2, [r8]
 800aa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aa16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aa1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa1e:	9307      	str	r3, [sp, #28]
 800aa20:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa24:	ee08 0a10 	vmov	s16, r0
 800aa28:	4b9f      	ldr	r3, [pc, #636]	; (800aca8 <_printf_float+0x2dc>)
 800aa2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa2e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa32:	f7f6 f8a3 	bl	8000b7c <__aeabi_dcmpun>
 800aa36:	bb88      	cbnz	r0, 800aa9c <_printf_float+0xd0>
 800aa38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa3c:	4b9a      	ldr	r3, [pc, #616]	; (800aca8 <_printf_float+0x2dc>)
 800aa3e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa42:	f7f6 f87d 	bl	8000b40 <__aeabi_dcmple>
 800aa46:	bb48      	cbnz	r0, 800aa9c <_printf_float+0xd0>
 800aa48:	2200      	movs	r2, #0
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	4640      	mov	r0, r8
 800aa4e:	4649      	mov	r1, r9
 800aa50:	f7f6 f86c 	bl	8000b2c <__aeabi_dcmplt>
 800aa54:	b110      	cbz	r0, 800aa5c <_printf_float+0x90>
 800aa56:	232d      	movs	r3, #45	; 0x2d
 800aa58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa5c:	4b93      	ldr	r3, [pc, #588]	; (800acac <_printf_float+0x2e0>)
 800aa5e:	4894      	ldr	r0, [pc, #592]	; (800acb0 <_printf_float+0x2e4>)
 800aa60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aa64:	bf94      	ite	ls
 800aa66:	4698      	movls	r8, r3
 800aa68:	4680      	movhi	r8, r0
 800aa6a:	2303      	movs	r3, #3
 800aa6c:	6123      	str	r3, [r4, #16]
 800aa6e:	9b05      	ldr	r3, [sp, #20]
 800aa70:	f023 0204 	bic.w	r2, r3, #4
 800aa74:	6022      	str	r2, [r4, #0]
 800aa76:	f04f 0900 	mov.w	r9, #0
 800aa7a:	9700      	str	r7, [sp, #0]
 800aa7c:	4633      	mov	r3, r6
 800aa7e:	aa0b      	add	r2, sp, #44	; 0x2c
 800aa80:	4621      	mov	r1, r4
 800aa82:	4628      	mov	r0, r5
 800aa84:	f000 f9d8 	bl	800ae38 <_printf_common>
 800aa88:	3001      	adds	r0, #1
 800aa8a:	f040 8090 	bne.w	800abae <_printf_float+0x1e2>
 800aa8e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa92:	b00d      	add	sp, #52	; 0x34
 800aa94:	ecbd 8b02 	vpop	{d8}
 800aa98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa9c:	4642      	mov	r2, r8
 800aa9e:	464b      	mov	r3, r9
 800aaa0:	4640      	mov	r0, r8
 800aaa2:	4649      	mov	r1, r9
 800aaa4:	f7f6 f86a 	bl	8000b7c <__aeabi_dcmpun>
 800aaa8:	b140      	cbz	r0, 800aabc <_printf_float+0xf0>
 800aaaa:	464b      	mov	r3, r9
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	bfbc      	itt	lt
 800aab0:	232d      	movlt	r3, #45	; 0x2d
 800aab2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aab6:	487f      	ldr	r0, [pc, #508]	; (800acb4 <_printf_float+0x2e8>)
 800aab8:	4b7f      	ldr	r3, [pc, #508]	; (800acb8 <_printf_float+0x2ec>)
 800aaba:	e7d1      	b.n	800aa60 <_printf_float+0x94>
 800aabc:	6863      	ldr	r3, [r4, #4]
 800aabe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aac2:	9206      	str	r2, [sp, #24]
 800aac4:	1c5a      	adds	r2, r3, #1
 800aac6:	d13f      	bne.n	800ab48 <_printf_float+0x17c>
 800aac8:	2306      	movs	r3, #6
 800aaca:	6063      	str	r3, [r4, #4]
 800aacc:	9b05      	ldr	r3, [sp, #20]
 800aace:	6861      	ldr	r1, [r4, #4]
 800aad0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aad4:	2300      	movs	r3, #0
 800aad6:	9303      	str	r3, [sp, #12]
 800aad8:	ab0a      	add	r3, sp, #40	; 0x28
 800aada:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aade:	ab09      	add	r3, sp, #36	; 0x24
 800aae0:	ec49 8b10 	vmov	d0, r8, r9
 800aae4:	9300      	str	r3, [sp, #0]
 800aae6:	6022      	str	r2, [r4, #0]
 800aae8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aaec:	4628      	mov	r0, r5
 800aaee:	f7ff fecd 	bl	800a88c <__cvt>
 800aaf2:	9b06      	ldr	r3, [sp, #24]
 800aaf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaf6:	2b47      	cmp	r3, #71	; 0x47
 800aaf8:	4680      	mov	r8, r0
 800aafa:	d108      	bne.n	800ab0e <_printf_float+0x142>
 800aafc:	1cc8      	adds	r0, r1, #3
 800aafe:	db02      	blt.n	800ab06 <_printf_float+0x13a>
 800ab00:	6863      	ldr	r3, [r4, #4]
 800ab02:	4299      	cmp	r1, r3
 800ab04:	dd41      	ble.n	800ab8a <_printf_float+0x1be>
 800ab06:	f1ab 0b02 	sub.w	fp, fp, #2
 800ab0a:	fa5f fb8b 	uxtb.w	fp, fp
 800ab0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab12:	d820      	bhi.n	800ab56 <_printf_float+0x18a>
 800ab14:	3901      	subs	r1, #1
 800ab16:	465a      	mov	r2, fp
 800ab18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab1c:	9109      	str	r1, [sp, #36]	; 0x24
 800ab1e:	f7ff ff17 	bl	800a950 <__exponent>
 800ab22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab24:	1813      	adds	r3, r2, r0
 800ab26:	2a01      	cmp	r2, #1
 800ab28:	4681      	mov	r9, r0
 800ab2a:	6123      	str	r3, [r4, #16]
 800ab2c:	dc02      	bgt.n	800ab34 <_printf_float+0x168>
 800ab2e:	6822      	ldr	r2, [r4, #0]
 800ab30:	07d2      	lsls	r2, r2, #31
 800ab32:	d501      	bpl.n	800ab38 <_printf_float+0x16c>
 800ab34:	3301      	adds	r3, #1
 800ab36:	6123      	str	r3, [r4, #16]
 800ab38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d09c      	beq.n	800aa7a <_printf_float+0xae>
 800ab40:	232d      	movs	r3, #45	; 0x2d
 800ab42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab46:	e798      	b.n	800aa7a <_printf_float+0xae>
 800ab48:	9a06      	ldr	r2, [sp, #24]
 800ab4a:	2a47      	cmp	r2, #71	; 0x47
 800ab4c:	d1be      	bne.n	800aacc <_printf_float+0x100>
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1bc      	bne.n	800aacc <_printf_float+0x100>
 800ab52:	2301      	movs	r3, #1
 800ab54:	e7b9      	b.n	800aaca <_printf_float+0xfe>
 800ab56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab5a:	d118      	bne.n	800ab8e <_printf_float+0x1c2>
 800ab5c:	2900      	cmp	r1, #0
 800ab5e:	6863      	ldr	r3, [r4, #4]
 800ab60:	dd0b      	ble.n	800ab7a <_printf_float+0x1ae>
 800ab62:	6121      	str	r1, [r4, #16]
 800ab64:	b913      	cbnz	r3, 800ab6c <_printf_float+0x1a0>
 800ab66:	6822      	ldr	r2, [r4, #0]
 800ab68:	07d0      	lsls	r0, r2, #31
 800ab6a:	d502      	bpl.n	800ab72 <_printf_float+0x1a6>
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	440b      	add	r3, r1
 800ab70:	6123      	str	r3, [r4, #16]
 800ab72:	65a1      	str	r1, [r4, #88]	; 0x58
 800ab74:	f04f 0900 	mov.w	r9, #0
 800ab78:	e7de      	b.n	800ab38 <_printf_float+0x16c>
 800ab7a:	b913      	cbnz	r3, 800ab82 <_printf_float+0x1b6>
 800ab7c:	6822      	ldr	r2, [r4, #0]
 800ab7e:	07d2      	lsls	r2, r2, #31
 800ab80:	d501      	bpl.n	800ab86 <_printf_float+0x1ba>
 800ab82:	3302      	adds	r3, #2
 800ab84:	e7f4      	b.n	800ab70 <_printf_float+0x1a4>
 800ab86:	2301      	movs	r3, #1
 800ab88:	e7f2      	b.n	800ab70 <_printf_float+0x1a4>
 800ab8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ab8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab90:	4299      	cmp	r1, r3
 800ab92:	db05      	blt.n	800aba0 <_printf_float+0x1d4>
 800ab94:	6823      	ldr	r3, [r4, #0]
 800ab96:	6121      	str	r1, [r4, #16]
 800ab98:	07d8      	lsls	r0, r3, #31
 800ab9a:	d5ea      	bpl.n	800ab72 <_printf_float+0x1a6>
 800ab9c:	1c4b      	adds	r3, r1, #1
 800ab9e:	e7e7      	b.n	800ab70 <_printf_float+0x1a4>
 800aba0:	2900      	cmp	r1, #0
 800aba2:	bfd4      	ite	le
 800aba4:	f1c1 0202 	rsble	r2, r1, #2
 800aba8:	2201      	movgt	r2, #1
 800abaa:	4413      	add	r3, r2
 800abac:	e7e0      	b.n	800ab70 <_printf_float+0x1a4>
 800abae:	6823      	ldr	r3, [r4, #0]
 800abb0:	055a      	lsls	r2, r3, #21
 800abb2:	d407      	bmi.n	800abc4 <_printf_float+0x1f8>
 800abb4:	6923      	ldr	r3, [r4, #16]
 800abb6:	4642      	mov	r2, r8
 800abb8:	4631      	mov	r1, r6
 800abba:	4628      	mov	r0, r5
 800abbc:	47b8      	blx	r7
 800abbe:	3001      	adds	r0, #1
 800abc0:	d12c      	bne.n	800ac1c <_printf_float+0x250>
 800abc2:	e764      	b.n	800aa8e <_printf_float+0xc2>
 800abc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800abc8:	f240 80e0 	bls.w	800ad8c <_printf_float+0x3c0>
 800abcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abd0:	2200      	movs	r2, #0
 800abd2:	2300      	movs	r3, #0
 800abd4:	f7f5 ffa0 	bl	8000b18 <__aeabi_dcmpeq>
 800abd8:	2800      	cmp	r0, #0
 800abda:	d034      	beq.n	800ac46 <_printf_float+0x27a>
 800abdc:	4a37      	ldr	r2, [pc, #220]	; (800acbc <_printf_float+0x2f0>)
 800abde:	2301      	movs	r3, #1
 800abe0:	4631      	mov	r1, r6
 800abe2:	4628      	mov	r0, r5
 800abe4:	47b8      	blx	r7
 800abe6:	3001      	adds	r0, #1
 800abe8:	f43f af51 	beq.w	800aa8e <_printf_float+0xc2>
 800abec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abf0:	429a      	cmp	r2, r3
 800abf2:	db02      	blt.n	800abfa <_printf_float+0x22e>
 800abf4:	6823      	ldr	r3, [r4, #0]
 800abf6:	07d8      	lsls	r0, r3, #31
 800abf8:	d510      	bpl.n	800ac1c <_printf_float+0x250>
 800abfa:	ee18 3a10 	vmov	r3, s16
 800abfe:	4652      	mov	r2, sl
 800ac00:	4631      	mov	r1, r6
 800ac02:	4628      	mov	r0, r5
 800ac04:	47b8      	blx	r7
 800ac06:	3001      	adds	r0, #1
 800ac08:	f43f af41 	beq.w	800aa8e <_printf_float+0xc2>
 800ac0c:	f04f 0800 	mov.w	r8, #0
 800ac10:	f104 091a 	add.w	r9, r4, #26
 800ac14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac16:	3b01      	subs	r3, #1
 800ac18:	4543      	cmp	r3, r8
 800ac1a:	dc09      	bgt.n	800ac30 <_printf_float+0x264>
 800ac1c:	6823      	ldr	r3, [r4, #0]
 800ac1e:	079b      	lsls	r3, r3, #30
 800ac20:	f100 8105 	bmi.w	800ae2e <_printf_float+0x462>
 800ac24:	68e0      	ldr	r0, [r4, #12]
 800ac26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac28:	4298      	cmp	r0, r3
 800ac2a:	bfb8      	it	lt
 800ac2c:	4618      	movlt	r0, r3
 800ac2e:	e730      	b.n	800aa92 <_printf_float+0xc6>
 800ac30:	2301      	movs	r3, #1
 800ac32:	464a      	mov	r2, r9
 800ac34:	4631      	mov	r1, r6
 800ac36:	4628      	mov	r0, r5
 800ac38:	47b8      	blx	r7
 800ac3a:	3001      	adds	r0, #1
 800ac3c:	f43f af27 	beq.w	800aa8e <_printf_float+0xc2>
 800ac40:	f108 0801 	add.w	r8, r8, #1
 800ac44:	e7e6      	b.n	800ac14 <_printf_float+0x248>
 800ac46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	dc39      	bgt.n	800acc0 <_printf_float+0x2f4>
 800ac4c:	4a1b      	ldr	r2, [pc, #108]	; (800acbc <_printf_float+0x2f0>)
 800ac4e:	2301      	movs	r3, #1
 800ac50:	4631      	mov	r1, r6
 800ac52:	4628      	mov	r0, r5
 800ac54:	47b8      	blx	r7
 800ac56:	3001      	adds	r0, #1
 800ac58:	f43f af19 	beq.w	800aa8e <_printf_float+0xc2>
 800ac5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac60:	4313      	orrs	r3, r2
 800ac62:	d102      	bne.n	800ac6a <_printf_float+0x29e>
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	07d9      	lsls	r1, r3, #31
 800ac68:	d5d8      	bpl.n	800ac1c <_printf_float+0x250>
 800ac6a:	ee18 3a10 	vmov	r3, s16
 800ac6e:	4652      	mov	r2, sl
 800ac70:	4631      	mov	r1, r6
 800ac72:	4628      	mov	r0, r5
 800ac74:	47b8      	blx	r7
 800ac76:	3001      	adds	r0, #1
 800ac78:	f43f af09 	beq.w	800aa8e <_printf_float+0xc2>
 800ac7c:	f04f 0900 	mov.w	r9, #0
 800ac80:	f104 0a1a 	add.w	sl, r4, #26
 800ac84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac86:	425b      	negs	r3, r3
 800ac88:	454b      	cmp	r3, r9
 800ac8a:	dc01      	bgt.n	800ac90 <_printf_float+0x2c4>
 800ac8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac8e:	e792      	b.n	800abb6 <_printf_float+0x1ea>
 800ac90:	2301      	movs	r3, #1
 800ac92:	4652      	mov	r2, sl
 800ac94:	4631      	mov	r1, r6
 800ac96:	4628      	mov	r0, r5
 800ac98:	47b8      	blx	r7
 800ac9a:	3001      	adds	r0, #1
 800ac9c:	f43f aef7 	beq.w	800aa8e <_printf_float+0xc2>
 800aca0:	f109 0901 	add.w	r9, r9, #1
 800aca4:	e7ee      	b.n	800ac84 <_printf_float+0x2b8>
 800aca6:	bf00      	nop
 800aca8:	7fefffff 	.word	0x7fefffff
 800acac:	0800d804 	.word	0x0800d804
 800acb0:	0800d808 	.word	0x0800d808
 800acb4:	0800d810 	.word	0x0800d810
 800acb8:	0800d80c 	.word	0x0800d80c
 800acbc:	0800d814 	.word	0x0800d814
 800acc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acc4:	429a      	cmp	r2, r3
 800acc6:	bfa8      	it	ge
 800acc8:	461a      	movge	r2, r3
 800acca:	2a00      	cmp	r2, #0
 800accc:	4691      	mov	r9, r2
 800acce:	dc37      	bgt.n	800ad40 <_printf_float+0x374>
 800acd0:	f04f 0b00 	mov.w	fp, #0
 800acd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acd8:	f104 021a 	add.w	r2, r4, #26
 800acdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acde:	9305      	str	r3, [sp, #20]
 800ace0:	eba3 0309 	sub.w	r3, r3, r9
 800ace4:	455b      	cmp	r3, fp
 800ace6:	dc33      	bgt.n	800ad50 <_printf_float+0x384>
 800ace8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acec:	429a      	cmp	r2, r3
 800acee:	db3b      	blt.n	800ad68 <_printf_float+0x39c>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	07da      	lsls	r2, r3, #31
 800acf4:	d438      	bmi.n	800ad68 <_printf_float+0x39c>
 800acf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acf8:	9a05      	ldr	r2, [sp, #20]
 800acfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acfc:	1a9a      	subs	r2, r3, r2
 800acfe:	eba3 0901 	sub.w	r9, r3, r1
 800ad02:	4591      	cmp	r9, r2
 800ad04:	bfa8      	it	ge
 800ad06:	4691      	movge	r9, r2
 800ad08:	f1b9 0f00 	cmp.w	r9, #0
 800ad0c:	dc35      	bgt.n	800ad7a <_printf_float+0x3ae>
 800ad0e:	f04f 0800 	mov.w	r8, #0
 800ad12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad16:	f104 0a1a 	add.w	sl, r4, #26
 800ad1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad1e:	1a9b      	subs	r3, r3, r2
 800ad20:	eba3 0309 	sub.w	r3, r3, r9
 800ad24:	4543      	cmp	r3, r8
 800ad26:	f77f af79 	ble.w	800ac1c <_printf_float+0x250>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	4652      	mov	r2, sl
 800ad2e:	4631      	mov	r1, r6
 800ad30:	4628      	mov	r0, r5
 800ad32:	47b8      	blx	r7
 800ad34:	3001      	adds	r0, #1
 800ad36:	f43f aeaa 	beq.w	800aa8e <_printf_float+0xc2>
 800ad3a:	f108 0801 	add.w	r8, r8, #1
 800ad3e:	e7ec      	b.n	800ad1a <_printf_float+0x34e>
 800ad40:	4613      	mov	r3, r2
 800ad42:	4631      	mov	r1, r6
 800ad44:	4642      	mov	r2, r8
 800ad46:	4628      	mov	r0, r5
 800ad48:	47b8      	blx	r7
 800ad4a:	3001      	adds	r0, #1
 800ad4c:	d1c0      	bne.n	800acd0 <_printf_float+0x304>
 800ad4e:	e69e      	b.n	800aa8e <_printf_float+0xc2>
 800ad50:	2301      	movs	r3, #1
 800ad52:	4631      	mov	r1, r6
 800ad54:	4628      	mov	r0, r5
 800ad56:	9205      	str	r2, [sp, #20]
 800ad58:	47b8      	blx	r7
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	f43f ae97 	beq.w	800aa8e <_printf_float+0xc2>
 800ad60:	9a05      	ldr	r2, [sp, #20]
 800ad62:	f10b 0b01 	add.w	fp, fp, #1
 800ad66:	e7b9      	b.n	800acdc <_printf_float+0x310>
 800ad68:	ee18 3a10 	vmov	r3, s16
 800ad6c:	4652      	mov	r2, sl
 800ad6e:	4631      	mov	r1, r6
 800ad70:	4628      	mov	r0, r5
 800ad72:	47b8      	blx	r7
 800ad74:	3001      	adds	r0, #1
 800ad76:	d1be      	bne.n	800acf6 <_printf_float+0x32a>
 800ad78:	e689      	b.n	800aa8e <_printf_float+0xc2>
 800ad7a:	9a05      	ldr	r2, [sp, #20]
 800ad7c:	464b      	mov	r3, r9
 800ad7e:	4442      	add	r2, r8
 800ad80:	4631      	mov	r1, r6
 800ad82:	4628      	mov	r0, r5
 800ad84:	47b8      	blx	r7
 800ad86:	3001      	adds	r0, #1
 800ad88:	d1c1      	bne.n	800ad0e <_printf_float+0x342>
 800ad8a:	e680      	b.n	800aa8e <_printf_float+0xc2>
 800ad8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad8e:	2a01      	cmp	r2, #1
 800ad90:	dc01      	bgt.n	800ad96 <_printf_float+0x3ca>
 800ad92:	07db      	lsls	r3, r3, #31
 800ad94:	d538      	bpl.n	800ae08 <_printf_float+0x43c>
 800ad96:	2301      	movs	r3, #1
 800ad98:	4642      	mov	r2, r8
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	47b8      	blx	r7
 800ada0:	3001      	adds	r0, #1
 800ada2:	f43f ae74 	beq.w	800aa8e <_printf_float+0xc2>
 800ada6:	ee18 3a10 	vmov	r3, s16
 800adaa:	4652      	mov	r2, sl
 800adac:	4631      	mov	r1, r6
 800adae:	4628      	mov	r0, r5
 800adb0:	47b8      	blx	r7
 800adb2:	3001      	adds	r0, #1
 800adb4:	f43f ae6b 	beq.w	800aa8e <_printf_float+0xc2>
 800adb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800adbc:	2200      	movs	r2, #0
 800adbe:	2300      	movs	r3, #0
 800adc0:	f7f5 feaa 	bl	8000b18 <__aeabi_dcmpeq>
 800adc4:	b9d8      	cbnz	r0, 800adfe <_printf_float+0x432>
 800adc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adc8:	f108 0201 	add.w	r2, r8, #1
 800adcc:	3b01      	subs	r3, #1
 800adce:	4631      	mov	r1, r6
 800add0:	4628      	mov	r0, r5
 800add2:	47b8      	blx	r7
 800add4:	3001      	adds	r0, #1
 800add6:	d10e      	bne.n	800adf6 <_printf_float+0x42a>
 800add8:	e659      	b.n	800aa8e <_printf_float+0xc2>
 800adda:	2301      	movs	r3, #1
 800addc:	4652      	mov	r2, sl
 800adde:	4631      	mov	r1, r6
 800ade0:	4628      	mov	r0, r5
 800ade2:	47b8      	blx	r7
 800ade4:	3001      	adds	r0, #1
 800ade6:	f43f ae52 	beq.w	800aa8e <_printf_float+0xc2>
 800adea:	f108 0801 	add.w	r8, r8, #1
 800adee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adf0:	3b01      	subs	r3, #1
 800adf2:	4543      	cmp	r3, r8
 800adf4:	dcf1      	bgt.n	800adda <_printf_float+0x40e>
 800adf6:	464b      	mov	r3, r9
 800adf8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800adfc:	e6dc      	b.n	800abb8 <_printf_float+0x1ec>
 800adfe:	f04f 0800 	mov.w	r8, #0
 800ae02:	f104 0a1a 	add.w	sl, r4, #26
 800ae06:	e7f2      	b.n	800adee <_printf_float+0x422>
 800ae08:	2301      	movs	r3, #1
 800ae0a:	4642      	mov	r2, r8
 800ae0c:	e7df      	b.n	800adce <_printf_float+0x402>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	464a      	mov	r2, r9
 800ae12:	4631      	mov	r1, r6
 800ae14:	4628      	mov	r0, r5
 800ae16:	47b8      	blx	r7
 800ae18:	3001      	adds	r0, #1
 800ae1a:	f43f ae38 	beq.w	800aa8e <_printf_float+0xc2>
 800ae1e:	f108 0801 	add.w	r8, r8, #1
 800ae22:	68e3      	ldr	r3, [r4, #12]
 800ae24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae26:	1a5b      	subs	r3, r3, r1
 800ae28:	4543      	cmp	r3, r8
 800ae2a:	dcf0      	bgt.n	800ae0e <_printf_float+0x442>
 800ae2c:	e6fa      	b.n	800ac24 <_printf_float+0x258>
 800ae2e:	f04f 0800 	mov.w	r8, #0
 800ae32:	f104 0919 	add.w	r9, r4, #25
 800ae36:	e7f4      	b.n	800ae22 <_printf_float+0x456>

0800ae38 <_printf_common>:
 800ae38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae3c:	4616      	mov	r6, r2
 800ae3e:	4699      	mov	r9, r3
 800ae40:	688a      	ldr	r2, [r1, #8]
 800ae42:	690b      	ldr	r3, [r1, #16]
 800ae44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	bfb8      	it	lt
 800ae4c:	4613      	movlt	r3, r2
 800ae4e:	6033      	str	r3, [r6, #0]
 800ae50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae54:	4607      	mov	r7, r0
 800ae56:	460c      	mov	r4, r1
 800ae58:	b10a      	cbz	r2, 800ae5e <_printf_common+0x26>
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	6033      	str	r3, [r6, #0]
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	0699      	lsls	r1, r3, #26
 800ae62:	bf42      	ittt	mi
 800ae64:	6833      	ldrmi	r3, [r6, #0]
 800ae66:	3302      	addmi	r3, #2
 800ae68:	6033      	strmi	r3, [r6, #0]
 800ae6a:	6825      	ldr	r5, [r4, #0]
 800ae6c:	f015 0506 	ands.w	r5, r5, #6
 800ae70:	d106      	bne.n	800ae80 <_printf_common+0x48>
 800ae72:	f104 0a19 	add.w	sl, r4, #25
 800ae76:	68e3      	ldr	r3, [r4, #12]
 800ae78:	6832      	ldr	r2, [r6, #0]
 800ae7a:	1a9b      	subs	r3, r3, r2
 800ae7c:	42ab      	cmp	r3, r5
 800ae7e:	dc26      	bgt.n	800aece <_printf_common+0x96>
 800ae80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae84:	1e13      	subs	r3, r2, #0
 800ae86:	6822      	ldr	r2, [r4, #0]
 800ae88:	bf18      	it	ne
 800ae8a:	2301      	movne	r3, #1
 800ae8c:	0692      	lsls	r2, r2, #26
 800ae8e:	d42b      	bmi.n	800aee8 <_printf_common+0xb0>
 800ae90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae94:	4649      	mov	r1, r9
 800ae96:	4638      	mov	r0, r7
 800ae98:	47c0      	blx	r8
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	d01e      	beq.n	800aedc <_printf_common+0xa4>
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	68e5      	ldr	r5, [r4, #12]
 800aea2:	6832      	ldr	r2, [r6, #0]
 800aea4:	f003 0306 	and.w	r3, r3, #6
 800aea8:	2b04      	cmp	r3, #4
 800aeaa:	bf08      	it	eq
 800aeac:	1aad      	subeq	r5, r5, r2
 800aeae:	68a3      	ldr	r3, [r4, #8]
 800aeb0:	6922      	ldr	r2, [r4, #16]
 800aeb2:	bf0c      	ite	eq
 800aeb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aeb8:	2500      	movne	r5, #0
 800aeba:	4293      	cmp	r3, r2
 800aebc:	bfc4      	itt	gt
 800aebe:	1a9b      	subgt	r3, r3, r2
 800aec0:	18ed      	addgt	r5, r5, r3
 800aec2:	2600      	movs	r6, #0
 800aec4:	341a      	adds	r4, #26
 800aec6:	42b5      	cmp	r5, r6
 800aec8:	d11a      	bne.n	800af00 <_printf_common+0xc8>
 800aeca:	2000      	movs	r0, #0
 800aecc:	e008      	b.n	800aee0 <_printf_common+0xa8>
 800aece:	2301      	movs	r3, #1
 800aed0:	4652      	mov	r2, sl
 800aed2:	4649      	mov	r1, r9
 800aed4:	4638      	mov	r0, r7
 800aed6:	47c0      	blx	r8
 800aed8:	3001      	adds	r0, #1
 800aeda:	d103      	bne.n	800aee4 <_printf_common+0xac>
 800aedc:	f04f 30ff 	mov.w	r0, #4294967295
 800aee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee4:	3501      	adds	r5, #1
 800aee6:	e7c6      	b.n	800ae76 <_printf_common+0x3e>
 800aee8:	18e1      	adds	r1, r4, r3
 800aeea:	1c5a      	adds	r2, r3, #1
 800aeec:	2030      	movs	r0, #48	; 0x30
 800aeee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aef2:	4422      	add	r2, r4
 800aef4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aefc:	3302      	adds	r3, #2
 800aefe:	e7c7      	b.n	800ae90 <_printf_common+0x58>
 800af00:	2301      	movs	r3, #1
 800af02:	4622      	mov	r2, r4
 800af04:	4649      	mov	r1, r9
 800af06:	4638      	mov	r0, r7
 800af08:	47c0      	blx	r8
 800af0a:	3001      	adds	r0, #1
 800af0c:	d0e6      	beq.n	800aedc <_printf_common+0xa4>
 800af0e:	3601      	adds	r6, #1
 800af10:	e7d9      	b.n	800aec6 <_printf_common+0x8e>
	...

0800af14 <_printf_i>:
 800af14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af18:	7e0f      	ldrb	r7, [r1, #24]
 800af1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af1c:	2f78      	cmp	r7, #120	; 0x78
 800af1e:	4691      	mov	r9, r2
 800af20:	4680      	mov	r8, r0
 800af22:	460c      	mov	r4, r1
 800af24:	469a      	mov	sl, r3
 800af26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af2a:	d807      	bhi.n	800af3c <_printf_i+0x28>
 800af2c:	2f62      	cmp	r7, #98	; 0x62
 800af2e:	d80a      	bhi.n	800af46 <_printf_i+0x32>
 800af30:	2f00      	cmp	r7, #0
 800af32:	f000 80d8 	beq.w	800b0e6 <_printf_i+0x1d2>
 800af36:	2f58      	cmp	r7, #88	; 0x58
 800af38:	f000 80a3 	beq.w	800b082 <_printf_i+0x16e>
 800af3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af44:	e03a      	b.n	800afbc <_printf_i+0xa8>
 800af46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af4a:	2b15      	cmp	r3, #21
 800af4c:	d8f6      	bhi.n	800af3c <_printf_i+0x28>
 800af4e:	a101      	add	r1, pc, #4	; (adr r1, 800af54 <_printf_i+0x40>)
 800af50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af54:	0800afad 	.word	0x0800afad
 800af58:	0800afc1 	.word	0x0800afc1
 800af5c:	0800af3d 	.word	0x0800af3d
 800af60:	0800af3d 	.word	0x0800af3d
 800af64:	0800af3d 	.word	0x0800af3d
 800af68:	0800af3d 	.word	0x0800af3d
 800af6c:	0800afc1 	.word	0x0800afc1
 800af70:	0800af3d 	.word	0x0800af3d
 800af74:	0800af3d 	.word	0x0800af3d
 800af78:	0800af3d 	.word	0x0800af3d
 800af7c:	0800af3d 	.word	0x0800af3d
 800af80:	0800b0cd 	.word	0x0800b0cd
 800af84:	0800aff1 	.word	0x0800aff1
 800af88:	0800b0af 	.word	0x0800b0af
 800af8c:	0800af3d 	.word	0x0800af3d
 800af90:	0800af3d 	.word	0x0800af3d
 800af94:	0800b0ef 	.word	0x0800b0ef
 800af98:	0800af3d 	.word	0x0800af3d
 800af9c:	0800aff1 	.word	0x0800aff1
 800afa0:	0800af3d 	.word	0x0800af3d
 800afa4:	0800af3d 	.word	0x0800af3d
 800afa8:	0800b0b7 	.word	0x0800b0b7
 800afac:	682b      	ldr	r3, [r5, #0]
 800afae:	1d1a      	adds	r2, r3, #4
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	602a      	str	r2, [r5, #0]
 800afb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afbc:	2301      	movs	r3, #1
 800afbe:	e0a3      	b.n	800b108 <_printf_i+0x1f4>
 800afc0:	6820      	ldr	r0, [r4, #0]
 800afc2:	6829      	ldr	r1, [r5, #0]
 800afc4:	0606      	lsls	r6, r0, #24
 800afc6:	f101 0304 	add.w	r3, r1, #4
 800afca:	d50a      	bpl.n	800afe2 <_printf_i+0xce>
 800afcc:	680e      	ldr	r6, [r1, #0]
 800afce:	602b      	str	r3, [r5, #0]
 800afd0:	2e00      	cmp	r6, #0
 800afd2:	da03      	bge.n	800afdc <_printf_i+0xc8>
 800afd4:	232d      	movs	r3, #45	; 0x2d
 800afd6:	4276      	negs	r6, r6
 800afd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afdc:	485e      	ldr	r0, [pc, #376]	; (800b158 <_printf_i+0x244>)
 800afde:	230a      	movs	r3, #10
 800afe0:	e019      	b.n	800b016 <_printf_i+0x102>
 800afe2:	680e      	ldr	r6, [r1, #0]
 800afe4:	602b      	str	r3, [r5, #0]
 800afe6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800afea:	bf18      	it	ne
 800afec:	b236      	sxthne	r6, r6
 800afee:	e7ef      	b.n	800afd0 <_printf_i+0xbc>
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	6820      	ldr	r0, [r4, #0]
 800aff4:	1d19      	adds	r1, r3, #4
 800aff6:	6029      	str	r1, [r5, #0]
 800aff8:	0601      	lsls	r1, r0, #24
 800affa:	d501      	bpl.n	800b000 <_printf_i+0xec>
 800affc:	681e      	ldr	r6, [r3, #0]
 800affe:	e002      	b.n	800b006 <_printf_i+0xf2>
 800b000:	0646      	lsls	r6, r0, #25
 800b002:	d5fb      	bpl.n	800affc <_printf_i+0xe8>
 800b004:	881e      	ldrh	r6, [r3, #0]
 800b006:	4854      	ldr	r0, [pc, #336]	; (800b158 <_printf_i+0x244>)
 800b008:	2f6f      	cmp	r7, #111	; 0x6f
 800b00a:	bf0c      	ite	eq
 800b00c:	2308      	moveq	r3, #8
 800b00e:	230a      	movne	r3, #10
 800b010:	2100      	movs	r1, #0
 800b012:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b016:	6865      	ldr	r5, [r4, #4]
 800b018:	60a5      	str	r5, [r4, #8]
 800b01a:	2d00      	cmp	r5, #0
 800b01c:	bfa2      	ittt	ge
 800b01e:	6821      	ldrge	r1, [r4, #0]
 800b020:	f021 0104 	bicge.w	r1, r1, #4
 800b024:	6021      	strge	r1, [r4, #0]
 800b026:	b90e      	cbnz	r6, 800b02c <_printf_i+0x118>
 800b028:	2d00      	cmp	r5, #0
 800b02a:	d04d      	beq.n	800b0c8 <_printf_i+0x1b4>
 800b02c:	4615      	mov	r5, r2
 800b02e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b032:	fb03 6711 	mls	r7, r3, r1, r6
 800b036:	5dc7      	ldrb	r7, [r0, r7]
 800b038:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b03c:	4637      	mov	r7, r6
 800b03e:	42bb      	cmp	r3, r7
 800b040:	460e      	mov	r6, r1
 800b042:	d9f4      	bls.n	800b02e <_printf_i+0x11a>
 800b044:	2b08      	cmp	r3, #8
 800b046:	d10b      	bne.n	800b060 <_printf_i+0x14c>
 800b048:	6823      	ldr	r3, [r4, #0]
 800b04a:	07de      	lsls	r6, r3, #31
 800b04c:	d508      	bpl.n	800b060 <_printf_i+0x14c>
 800b04e:	6923      	ldr	r3, [r4, #16]
 800b050:	6861      	ldr	r1, [r4, #4]
 800b052:	4299      	cmp	r1, r3
 800b054:	bfde      	ittt	le
 800b056:	2330      	movle	r3, #48	; 0x30
 800b058:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b05c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b060:	1b52      	subs	r2, r2, r5
 800b062:	6122      	str	r2, [r4, #16]
 800b064:	f8cd a000 	str.w	sl, [sp]
 800b068:	464b      	mov	r3, r9
 800b06a:	aa03      	add	r2, sp, #12
 800b06c:	4621      	mov	r1, r4
 800b06e:	4640      	mov	r0, r8
 800b070:	f7ff fee2 	bl	800ae38 <_printf_common>
 800b074:	3001      	adds	r0, #1
 800b076:	d14c      	bne.n	800b112 <_printf_i+0x1fe>
 800b078:	f04f 30ff 	mov.w	r0, #4294967295
 800b07c:	b004      	add	sp, #16
 800b07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b082:	4835      	ldr	r0, [pc, #212]	; (800b158 <_printf_i+0x244>)
 800b084:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b088:	6829      	ldr	r1, [r5, #0]
 800b08a:	6823      	ldr	r3, [r4, #0]
 800b08c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b090:	6029      	str	r1, [r5, #0]
 800b092:	061d      	lsls	r5, r3, #24
 800b094:	d514      	bpl.n	800b0c0 <_printf_i+0x1ac>
 800b096:	07df      	lsls	r7, r3, #31
 800b098:	bf44      	itt	mi
 800b09a:	f043 0320 	orrmi.w	r3, r3, #32
 800b09e:	6023      	strmi	r3, [r4, #0]
 800b0a0:	b91e      	cbnz	r6, 800b0aa <_printf_i+0x196>
 800b0a2:	6823      	ldr	r3, [r4, #0]
 800b0a4:	f023 0320 	bic.w	r3, r3, #32
 800b0a8:	6023      	str	r3, [r4, #0]
 800b0aa:	2310      	movs	r3, #16
 800b0ac:	e7b0      	b.n	800b010 <_printf_i+0xfc>
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	f043 0320 	orr.w	r3, r3, #32
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	2378      	movs	r3, #120	; 0x78
 800b0b8:	4828      	ldr	r0, [pc, #160]	; (800b15c <_printf_i+0x248>)
 800b0ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0be:	e7e3      	b.n	800b088 <_printf_i+0x174>
 800b0c0:	0659      	lsls	r1, r3, #25
 800b0c2:	bf48      	it	mi
 800b0c4:	b2b6      	uxthmi	r6, r6
 800b0c6:	e7e6      	b.n	800b096 <_printf_i+0x182>
 800b0c8:	4615      	mov	r5, r2
 800b0ca:	e7bb      	b.n	800b044 <_printf_i+0x130>
 800b0cc:	682b      	ldr	r3, [r5, #0]
 800b0ce:	6826      	ldr	r6, [r4, #0]
 800b0d0:	6961      	ldr	r1, [r4, #20]
 800b0d2:	1d18      	adds	r0, r3, #4
 800b0d4:	6028      	str	r0, [r5, #0]
 800b0d6:	0635      	lsls	r5, r6, #24
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	d501      	bpl.n	800b0e0 <_printf_i+0x1cc>
 800b0dc:	6019      	str	r1, [r3, #0]
 800b0de:	e002      	b.n	800b0e6 <_printf_i+0x1d2>
 800b0e0:	0670      	lsls	r0, r6, #25
 800b0e2:	d5fb      	bpl.n	800b0dc <_printf_i+0x1c8>
 800b0e4:	8019      	strh	r1, [r3, #0]
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	6123      	str	r3, [r4, #16]
 800b0ea:	4615      	mov	r5, r2
 800b0ec:	e7ba      	b.n	800b064 <_printf_i+0x150>
 800b0ee:	682b      	ldr	r3, [r5, #0]
 800b0f0:	1d1a      	adds	r2, r3, #4
 800b0f2:	602a      	str	r2, [r5, #0]
 800b0f4:	681d      	ldr	r5, [r3, #0]
 800b0f6:	6862      	ldr	r2, [r4, #4]
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	f7f5 f898 	bl	8000230 <memchr>
 800b100:	b108      	cbz	r0, 800b106 <_printf_i+0x1f2>
 800b102:	1b40      	subs	r0, r0, r5
 800b104:	6060      	str	r0, [r4, #4]
 800b106:	6863      	ldr	r3, [r4, #4]
 800b108:	6123      	str	r3, [r4, #16]
 800b10a:	2300      	movs	r3, #0
 800b10c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b110:	e7a8      	b.n	800b064 <_printf_i+0x150>
 800b112:	6923      	ldr	r3, [r4, #16]
 800b114:	462a      	mov	r2, r5
 800b116:	4649      	mov	r1, r9
 800b118:	4640      	mov	r0, r8
 800b11a:	47d0      	blx	sl
 800b11c:	3001      	adds	r0, #1
 800b11e:	d0ab      	beq.n	800b078 <_printf_i+0x164>
 800b120:	6823      	ldr	r3, [r4, #0]
 800b122:	079b      	lsls	r3, r3, #30
 800b124:	d413      	bmi.n	800b14e <_printf_i+0x23a>
 800b126:	68e0      	ldr	r0, [r4, #12]
 800b128:	9b03      	ldr	r3, [sp, #12]
 800b12a:	4298      	cmp	r0, r3
 800b12c:	bfb8      	it	lt
 800b12e:	4618      	movlt	r0, r3
 800b130:	e7a4      	b.n	800b07c <_printf_i+0x168>
 800b132:	2301      	movs	r3, #1
 800b134:	4632      	mov	r2, r6
 800b136:	4649      	mov	r1, r9
 800b138:	4640      	mov	r0, r8
 800b13a:	47d0      	blx	sl
 800b13c:	3001      	adds	r0, #1
 800b13e:	d09b      	beq.n	800b078 <_printf_i+0x164>
 800b140:	3501      	adds	r5, #1
 800b142:	68e3      	ldr	r3, [r4, #12]
 800b144:	9903      	ldr	r1, [sp, #12]
 800b146:	1a5b      	subs	r3, r3, r1
 800b148:	42ab      	cmp	r3, r5
 800b14a:	dcf2      	bgt.n	800b132 <_printf_i+0x21e>
 800b14c:	e7eb      	b.n	800b126 <_printf_i+0x212>
 800b14e:	2500      	movs	r5, #0
 800b150:	f104 0619 	add.w	r6, r4, #25
 800b154:	e7f5      	b.n	800b142 <_printf_i+0x22e>
 800b156:	bf00      	nop
 800b158:	0800d816 	.word	0x0800d816
 800b15c:	0800d827 	.word	0x0800d827

0800b160 <iprintf>:
 800b160:	b40f      	push	{r0, r1, r2, r3}
 800b162:	4b0a      	ldr	r3, [pc, #40]	; (800b18c <iprintf+0x2c>)
 800b164:	b513      	push	{r0, r1, r4, lr}
 800b166:	681c      	ldr	r4, [r3, #0]
 800b168:	b124      	cbz	r4, 800b174 <iprintf+0x14>
 800b16a:	69a3      	ldr	r3, [r4, #24]
 800b16c:	b913      	cbnz	r3, 800b174 <iprintf+0x14>
 800b16e:	4620      	mov	r0, r4
 800b170:	f7ff f9d0 	bl	800a514 <__sinit>
 800b174:	ab05      	add	r3, sp, #20
 800b176:	9a04      	ldr	r2, [sp, #16]
 800b178:	68a1      	ldr	r1, [r4, #8]
 800b17a:	9301      	str	r3, [sp, #4]
 800b17c:	4620      	mov	r0, r4
 800b17e:	f001 fca1 	bl	800cac4 <_vfiprintf_r>
 800b182:	b002      	add	sp, #8
 800b184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b188:	b004      	add	sp, #16
 800b18a:	4770      	bx	lr
 800b18c:	200004d4 	.word	0x200004d4

0800b190 <_puts_r>:
 800b190:	b570      	push	{r4, r5, r6, lr}
 800b192:	460e      	mov	r6, r1
 800b194:	4605      	mov	r5, r0
 800b196:	b118      	cbz	r0, 800b1a0 <_puts_r+0x10>
 800b198:	6983      	ldr	r3, [r0, #24]
 800b19a:	b90b      	cbnz	r3, 800b1a0 <_puts_r+0x10>
 800b19c:	f7ff f9ba 	bl	800a514 <__sinit>
 800b1a0:	69ab      	ldr	r3, [r5, #24]
 800b1a2:	68ac      	ldr	r4, [r5, #8]
 800b1a4:	b913      	cbnz	r3, 800b1ac <_puts_r+0x1c>
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	f7ff f9b4 	bl	800a514 <__sinit>
 800b1ac:	4b2c      	ldr	r3, [pc, #176]	; (800b260 <_puts_r+0xd0>)
 800b1ae:	429c      	cmp	r4, r3
 800b1b0:	d120      	bne.n	800b1f4 <_puts_r+0x64>
 800b1b2:	686c      	ldr	r4, [r5, #4]
 800b1b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1b6:	07db      	lsls	r3, r3, #31
 800b1b8:	d405      	bmi.n	800b1c6 <_puts_r+0x36>
 800b1ba:	89a3      	ldrh	r3, [r4, #12]
 800b1bc:	0598      	lsls	r0, r3, #22
 800b1be:	d402      	bmi.n	800b1c6 <_puts_r+0x36>
 800b1c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1c2:	f7ff fa6a 	bl	800a69a <__retarget_lock_acquire_recursive>
 800b1c6:	89a3      	ldrh	r3, [r4, #12]
 800b1c8:	0719      	lsls	r1, r3, #28
 800b1ca:	d51d      	bpl.n	800b208 <_puts_r+0x78>
 800b1cc:	6923      	ldr	r3, [r4, #16]
 800b1ce:	b1db      	cbz	r3, 800b208 <_puts_r+0x78>
 800b1d0:	3e01      	subs	r6, #1
 800b1d2:	68a3      	ldr	r3, [r4, #8]
 800b1d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	60a3      	str	r3, [r4, #8]
 800b1dc:	bb39      	cbnz	r1, 800b22e <_puts_r+0x9e>
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	da38      	bge.n	800b254 <_puts_r+0xc4>
 800b1e2:	4622      	mov	r2, r4
 800b1e4:	210a      	movs	r1, #10
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f000 f8ba 	bl	800b360 <__swbuf_r>
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d011      	beq.n	800b214 <_puts_r+0x84>
 800b1f0:	250a      	movs	r5, #10
 800b1f2:	e011      	b.n	800b218 <_puts_r+0x88>
 800b1f4:	4b1b      	ldr	r3, [pc, #108]	; (800b264 <_puts_r+0xd4>)
 800b1f6:	429c      	cmp	r4, r3
 800b1f8:	d101      	bne.n	800b1fe <_puts_r+0x6e>
 800b1fa:	68ac      	ldr	r4, [r5, #8]
 800b1fc:	e7da      	b.n	800b1b4 <_puts_r+0x24>
 800b1fe:	4b1a      	ldr	r3, [pc, #104]	; (800b268 <_puts_r+0xd8>)
 800b200:	429c      	cmp	r4, r3
 800b202:	bf08      	it	eq
 800b204:	68ec      	ldreq	r4, [r5, #12]
 800b206:	e7d5      	b.n	800b1b4 <_puts_r+0x24>
 800b208:	4621      	mov	r1, r4
 800b20a:	4628      	mov	r0, r5
 800b20c:	f000 f90c 	bl	800b428 <__swsetup_r>
 800b210:	2800      	cmp	r0, #0
 800b212:	d0dd      	beq.n	800b1d0 <_puts_r+0x40>
 800b214:	f04f 35ff 	mov.w	r5, #4294967295
 800b218:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b21a:	07da      	lsls	r2, r3, #31
 800b21c:	d405      	bmi.n	800b22a <_puts_r+0x9a>
 800b21e:	89a3      	ldrh	r3, [r4, #12]
 800b220:	059b      	lsls	r3, r3, #22
 800b222:	d402      	bmi.n	800b22a <_puts_r+0x9a>
 800b224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b226:	f7ff fa39 	bl	800a69c <__retarget_lock_release_recursive>
 800b22a:	4628      	mov	r0, r5
 800b22c:	bd70      	pop	{r4, r5, r6, pc}
 800b22e:	2b00      	cmp	r3, #0
 800b230:	da04      	bge.n	800b23c <_puts_r+0xac>
 800b232:	69a2      	ldr	r2, [r4, #24]
 800b234:	429a      	cmp	r2, r3
 800b236:	dc06      	bgt.n	800b246 <_puts_r+0xb6>
 800b238:	290a      	cmp	r1, #10
 800b23a:	d004      	beq.n	800b246 <_puts_r+0xb6>
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	1c5a      	adds	r2, r3, #1
 800b240:	6022      	str	r2, [r4, #0]
 800b242:	7019      	strb	r1, [r3, #0]
 800b244:	e7c5      	b.n	800b1d2 <_puts_r+0x42>
 800b246:	4622      	mov	r2, r4
 800b248:	4628      	mov	r0, r5
 800b24a:	f000 f889 	bl	800b360 <__swbuf_r>
 800b24e:	3001      	adds	r0, #1
 800b250:	d1bf      	bne.n	800b1d2 <_puts_r+0x42>
 800b252:	e7df      	b.n	800b214 <_puts_r+0x84>
 800b254:	6823      	ldr	r3, [r4, #0]
 800b256:	250a      	movs	r5, #10
 800b258:	1c5a      	adds	r2, r3, #1
 800b25a:	6022      	str	r2, [r4, #0]
 800b25c:	701d      	strb	r5, [r3, #0]
 800b25e:	e7db      	b.n	800b218 <_puts_r+0x88>
 800b260:	0800d7c0 	.word	0x0800d7c0
 800b264:	0800d7e0 	.word	0x0800d7e0
 800b268:	0800d7a0 	.word	0x0800d7a0

0800b26c <puts>:
 800b26c:	4b02      	ldr	r3, [pc, #8]	; (800b278 <puts+0xc>)
 800b26e:	4601      	mov	r1, r0
 800b270:	6818      	ldr	r0, [r3, #0]
 800b272:	f7ff bf8d 	b.w	800b190 <_puts_r>
 800b276:	bf00      	nop
 800b278:	200004d4 	.word	0x200004d4

0800b27c <_sbrk_r>:
 800b27c:	b538      	push	{r3, r4, r5, lr}
 800b27e:	4d06      	ldr	r5, [pc, #24]	; (800b298 <_sbrk_r+0x1c>)
 800b280:	2300      	movs	r3, #0
 800b282:	4604      	mov	r4, r0
 800b284:	4608      	mov	r0, r1
 800b286:	602b      	str	r3, [r5, #0]
 800b288:	f7f9 ff24 	bl	80050d4 <_sbrk>
 800b28c:	1c43      	adds	r3, r0, #1
 800b28e:	d102      	bne.n	800b296 <_sbrk_r+0x1a>
 800b290:	682b      	ldr	r3, [r5, #0]
 800b292:	b103      	cbz	r3, 800b296 <_sbrk_r+0x1a>
 800b294:	6023      	str	r3, [r4, #0]
 800b296:	bd38      	pop	{r3, r4, r5, pc}
 800b298:	20001cd4 	.word	0x20001cd4

0800b29c <__sread>:
 800b29c:	b510      	push	{r4, lr}
 800b29e:	460c      	mov	r4, r1
 800b2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2a4:	f001 fd3e 	bl	800cd24 <_read_r>
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	bfab      	itete	ge
 800b2ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b2ae:	89a3      	ldrhlt	r3, [r4, #12]
 800b2b0:	181b      	addge	r3, r3, r0
 800b2b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b2b6:	bfac      	ite	ge
 800b2b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b2ba:	81a3      	strhlt	r3, [r4, #12]
 800b2bc:	bd10      	pop	{r4, pc}

0800b2be <__swrite>:
 800b2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c2:	461f      	mov	r7, r3
 800b2c4:	898b      	ldrh	r3, [r1, #12]
 800b2c6:	05db      	lsls	r3, r3, #23
 800b2c8:	4605      	mov	r5, r0
 800b2ca:	460c      	mov	r4, r1
 800b2cc:	4616      	mov	r6, r2
 800b2ce:	d505      	bpl.n	800b2dc <__swrite+0x1e>
 800b2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f000 ffa4 	bl	800c224 <_lseek_r>
 800b2dc:	89a3      	ldrh	r3, [r4, #12]
 800b2de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2e6:	81a3      	strh	r3, [r4, #12]
 800b2e8:	4632      	mov	r2, r6
 800b2ea:	463b      	mov	r3, r7
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f2:	f000 b887 	b.w	800b404 <_write_r>

0800b2f6 <__sseek>:
 800b2f6:	b510      	push	{r4, lr}
 800b2f8:	460c      	mov	r4, r1
 800b2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2fe:	f000 ff91 	bl	800c224 <_lseek_r>
 800b302:	1c43      	adds	r3, r0, #1
 800b304:	89a3      	ldrh	r3, [r4, #12]
 800b306:	bf15      	itete	ne
 800b308:	6560      	strne	r0, [r4, #84]	; 0x54
 800b30a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b30e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b312:	81a3      	strheq	r3, [r4, #12]
 800b314:	bf18      	it	ne
 800b316:	81a3      	strhne	r3, [r4, #12]
 800b318:	bd10      	pop	{r4, pc}

0800b31a <__sclose>:
 800b31a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b31e:	f000 b8f1 	b.w	800b504 <_close_r>
	...

0800b324 <strdup>:
 800b324:	4b02      	ldr	r3, [pc, #8]	; (800b330 <strdup+0xc>)
 800b326:	4601      	mov	r1, r0
 800b328:	6818      	ldr	r0, [r3, #0]
 800b32a:	f000 b803 	b.w	800b334 <_strdup_r>
 800b32e:	bf00      	nop
 800b330:	200004d4 	.word	0x200004d4

0800b334 <_strdup_r>:
 800b334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b336:	4604      	mov	r4, r0
 800b338:	4608      	mov	r0, r1
 800b33a:	460d      	mov	r5, r1
 800b33c:	f7f4 ff70 	bl	8000220 <strlen>
 800b340:	1c42      	adds	r2, r0, #1
 800b342:	4611      	mov	r1, r2
 800b344:	4620      	mov	r0, r4
 800b346:	9201      	str	r2, [sp, #4]
 800b348:	f7ff fa2c 	bl	800a7a4 <_malloc_r>
 800b34c:	4604      	mov	r4, r0
 800b34e:	b118      	cbz	r0, 800b358 <_strdup_r+0x24>
 800b350:	9a01      	ldr	r2, [sp, #4]
 800b352:	4629      	mov	r1, r5
 800b354:	f7ff f9a3 	bl	800a69e <memcpy>
 800b358:	4620      	mov	r0, r4
 800b35a:	b003      	add	sp, #12
 800b35c:	bd30      	pop	{r4, r5, pc}
	...

0800b360 <__swbuf_r>:
 800b360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b362:	460e      	mov	r6, r1
 800b364:	4614      	mov	r4, r2
 800b366:	4605      	mov	r5, r0
 800b368:	b118      	cbz	r0, 800b372 <__swbuf_r+0x12>
 800b36a:	6983      	ldr	r3, [r0, #24]
 800b36c:	b90b      	cbnz	r3, 800b372 <__swbuf_r+0x12>
 800b36e:	f7ff f8d1 	bl	800a514 <__sinit>
 800b372:	4b21      	ldr	r3, [pc, #132]	; (800b3f8 <__swbuf_r+0x98>)
 800b374:	429c      	cmp	r4, r3
 800b376:	d12b      	bne.n	800b3d0 <__swbuf_r+0x70>
 800b378:	686c      	ldr	r4, [r5, #4]
 800b37a:	69a3      	ldr	r3, [r4, #24]
 800b37c:	60a3      	str	r3, [r4, #8]
 800b37e:	89a3      	ldrh	r3, [r4, #12]
 800b380:	071a      	lsls	r2, r3, #28
 800b382:	d52f      	bpl.n	800b3e4 <__swbuf_r+0x84>
 800b384:	6923      	ldr	r3, [r4, #16]
 800b386:	b36b      	cbz	r3, 800b3e4 <__swbuf_r+0x84>
 800b388:	6923      	ldr	r3, [r4, #16]
 800b38a:	6820      	ldr	r0, [r4, #0]
 800b38c:	1ac0      	subs	r0, r0, r3
 800b38e:	6963      	ldr	r3, [r4, #20]
 800b390:	b2f6      	uxtb	r6, r6
 800b392:	4283      	cmp	r3, r0
 800b394:	4637      	mov	r7, r6
 800b396:	dc04      	bgt.n	800b3a2 <__swbuf_r+0x42>
 800b398:	4621      	mov	r1, r4
 800b39a:	4628      	mov	r0, r5
 800b39c:	f7ff f814 	bl	800a3c8 <_fflush_r>
 800b3a0:	bb30      	cbnz	r0, 800b3f0 <__swbuf_r+0x90>
 800b3a2:	68a3      	ldr	r3, [r4, #8]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	60a3      	str	r3, [r4, #8]
 800b3a8:	6823      	ldr	r3, [r4, #0]
 800b3aa:	1c5a      	adds	r2, r3, #1
 800b3ac:	6022      	str	r2, [r4, #0]
 800b3ae:	701e      	strb	r6, [r3, #0]
 800b3b0:	6963      	ldr	r3, [r4, #20]
 800b3b2:	3001      	adds	r0, #1
 800b3b4:	4283      	cmp	r3, r0
 800b3b6:	d004      	beq.n	800b3c2 <__swbuf_r+0x62>
 800b3b8:	89a3      	ldrh	r3, [r4, #12]
 800b3ba:	07db      	lsls	r3, r3, #31
 800b3bc:	d506      	bpl.n	800b3cc <__swbuf_r+0x6c>
 800b3be:	2e0a      	cmp	r6, #10
 800b3c0:	d104      	bne.n	800b3cc <__swbuf_r+0x6c>
 800b3c2:	4621      	mov	r1, r4
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	f7fe ffff 	bl	800a3c8 <_fflush_r>
 800b3ca:	b988      	cbnz	r0, 800b3f0 <__swbuf_r+0x90>
 800b3cc:	4638      	mov	r0, r7
 800b3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3d0:	4b0a      	ldr	r3, [pc, #40]	; (800b3fc <__swbuf_r+0x9c>)
 800b3d2:	429c      	cmp	r4, r3
 800b3d4:	d101      	bne.n	800b3da <__swbuf_r+0x7a>
 800b3d6:	68ac      	ldr	r4, [r5, #8]
 800b3d8:	e7cf      	b.n	800b37a <__swbuf_r+0x1a>
 800b3da:	4b09      	ldr	r3, [pc, #36]	; (800b400 <__swbuf_r+0xa0>)
 800b3dc:	429c      	cmp	r4, r3
 800b3de:	bf08      	it	eq
 800b3e0:	68ec      	ldreq	r4, [r5, #12]
 800b3e2:	e7ca      	b.n	800b37a <__swbuf_r+0x1a>
 800b3e4:	4621      	mov	r1, r4
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	f000 f81e 	bl	800b428 <__swsetup_r>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	d0cb      	beq.n	800b388 <__swbuf_r+0x28>
 800b3f0:	f04f 37ff 	mov.w	r7, #4294967295
 800b3f4:	e7ea      	b.n	800b3cc <__swbuf_r+0x6c>
 800b3f6:	bf00      	nop
 800b3f8:	0800d7c0 	.word	0x0800d7c0
 800b3fc:	0800d7e0 	.word	0x0800d7e0
 800b400:	0800d7a0 	.word	0x0800d7a0

0800b404 <_write_r>:
 800b404:	b538      	push	{r3, r4, r5, lr}
 800b406:	4d07      	ldr	r5, [pc, #28]	; (800b424 <_write_r+0x20>)
 800b408:	4604      	mov	r4, r0
 800b40a:	4608      	mov	r0, r1
 800b40c:	4611      	mov	r1, r2
 800b40e:	2200      	movs	r2, #0
 800b410:	602a      	str	r2, [r5, #0]
 800b412:	461a      	mov	r2, r3
 800b414:	f7f6 fd48 	bl	8001ea8 <_write>
 800b418:	1c43      	adds	r3, r0, #1
 800b41a:	d102      	bne.n	800b422 <_write_r+0x1e>
 800b41c:	682b      	ldr	r3, [r5, #0]
 800b41e:	b103      	cbz	r3, 800b422 <_write_r+0x1e>
 800b420:	6023      	str	r3, [r4, #0]
 800b422:	bd38      	pop	{r3, r4, r5, pc}
 800b424:	20001cd4 	.word	0x20001cd4

0800b428 <__swsetup_r>:
 800b428:	4b32      	ldr	r3, [pc, #200]	; (800b4f4 <__swsetup_r+0xcc>)
 800b42a:	b570      	push	{r4, r5, r6, lr}
 800b42c:	681d      	ldr	r5, [r3, #0]
 800b42e:	4606      	mov	r6, r0
 800b430:	460c      	mov	r4, r1
 800b432:	b125      	cbz	r5, 800b43e <__swsetup_r+0x16>
 800b434:	69ab      	ldr	r3, [r5, #24]
 800b436:	b913      	cbnz	r3, 800b43e <__swsetup_r+0x16>
 800b438:	4628      	mov	r0, r5
 800b43a:	f7ff f86b 	bl	800a514 <__sinit>
 800b43e:	4b2e      	ldr	r3, [pc, #184]	; (800b4f8 <__swsetup_r+0xd0>)
 800b440:	429c      	cmp	r4, r3
 800b442:	d10f      	bne.n	800b464 <__swsetup_r+0x3c>
 800b444:	686c      	ldr	r4, [r5, #4]
 800b446:	89a3      	ldrh	r3, [r4, #12]
 800b448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b44c:	0719      	lsls	r1, r3, #28
 800b44e:	d42c      	bmi.n	800b4aa <__swsetup_r+0x82>
 800b450:	06dd      	lsls	r5, r3, #27
 800b452:	d411      	bmi.n	800b478 <__swsetup_r+0x50>
 800b454:	2309      	movs	r3, #9
 800b456:	6033      	str	r3, [r6, #0]
 800b458:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b45c:	81a3      	strh	r3, [r4, #12]
 800b45e:	f04f 30ff 	mov.w	r0, #4294967295
 800b462:	e03e      	b.n	800b4e2 <__swsetup_r+0xba>
 800b464:	4b25      	ldr	r3, [pc, #148]	; (800b4fc <__swsetup_r+0xd4>)
 800b466:	429c      	cmp	r4, r3
 800b468:	d101      	bne.n	800b46e <__swsetup_r+0x46>
 800b46a:	68ac      	ldr	r4, [r5, #8]
 800b46c:	e7eb      	b.n	800b446 <__swsetup_r+0x1e>
 800b46e:	4b24      	ldr	r3, [pc, #144]	; (800b500 <__swsetup_r+0xd8>)
 800b470:	429c      	cmp	r4, r3
 800b472:	bf08      	it	eq
 800b474:	68ec      	ldreq	r4, [r5, #12]
 800b476:	e7e6      	b.n	800b446 <__swsetup_r+0x1e>
 800b478:	0758      	lsls	r0, r3, #29
 800b47a:	d512      	bpl.n	800b4a2 <__swsetup_r+0x7a>
 800b47c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b47e:	b141      	cbz	r1, 800b492 <__swsetup_r+0x6a>
 800b480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b484:	4299      	cmp	r1, r3
 800b486:	d002      	beq.n	800b48e <__swsetup_r+0x66>
 800b488:	4630      	mov	r0, r6
 800b48a:	f7ff f91f 	bl	800a6cc <_free_r>
 800b48e:	2300      	movs	r3, #0
 800b490:	6363      	str	r3, [r4, #52]	; 0x34
 800b492:	89a3      	ldrh	r3, [r4, #12]
 800b494:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b498:	81a3      	strh	r3, [r4, #12]
 800b49a:	2300      	movs	r3, #0
 800b49c:	6063      	str	r3, [r4, #4]
 800b49e:	6923      	ldr	r3, [r4, #16]
 800b4a0:	6023      	str	r3, [r4, #0]
 800b4a2:	89a3      	ldrh	r3, [r4, #12]
 800b4a4:	f043 0308 	orr.w	r3, r3, #8
 800b4a8:	81a3      	strh	r3, [r4, #12]
 800b4aa:	6923      	ldr	r3, [r4, #16]
 800b4ac:	b94b      	cbnz	r3, 800b4c2 <__swsetup_r+0x9a>
 800b4ae:	89a3      	ldrh	r3, [r4, #12]
 800b4b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4b8:	d003      	beq.n	800b4c2 <__swsetup_r+0x9a>
 800b4ba:	4621      	mov	r1, r4
 800b4bc:	4630      	mov	r0, r6
 800b4be:	f000 fee9 	bl	800c294 <__smakebuf_r>
 800b4c2:	89a0      	ldrh	r0, [r4, #12]
 800b4c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4c8:	f010 0301 	ands.w	r3, r0, #1
 800b4cc:	d00a      	beq.n	800b4e4 <__swsetup_r+0xbc>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	60a3      	str	r3, [r4, #8]
 800b4d2:	6963      	ldr	r3, [r4, #20]
 800b4d4:	425b      	negs	r3, r3
 800b4d6:	61a3      	str	r3, [r4, #24]
 800b4d8:	6923      	ldr	r3, [r4, #16]
 800b4da:	b943      	cbnz	r3, 800b4ee <__swsetup_r+0xc6>
 800b4dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4e0:	d1ba      	bne.n	800b458 <__swsetup_r+0x30>
 800b4e2:	bd70      	pop	{r4, r5, r6, pc}
 800b4e4:	0781      	lsls	r1, r0, #30
 800b4e6:	bf58      	it	pl
 800b4e8:	6963      	ldrpl	r3, [r4, #20]
 800b4ea:	60a3      	str	r3, [r4, #8]
 800b4ec:	e7f4      	b.n	800b4d8 <__swsetup_r+0xb0>
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	e7f7      	b.n	800b4e2 <__swsetup_r+0xba>
 800b4f2:	bf00      	nop
 800b4f4:	200004d4 	.word	0x200004d4
 800b4f8:	0800d7c0 	.word	0x0800d7c0
 800b4fc:	0800d7e0 	.word	0x0800d7e0
 800b500:	0800d7a0 	.word	0x0800d7a0

0800b504 <_close_r>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	4d06      	ldr	r5, [pc, #24]	; (800b520 <_close_r+0x1c>)
 800b508:	2300      	movs	r3, #0
 800b50a:	4604      	mov	r4, r0
 800b50c:	4608      	mov	r0, r1
 800b50e:	602b      	str	r3, [r5, #0]
 800b510:	f7f9 fdd2 	bl	80050b8 <_close>
 800b514:	1c43      	adds	r3, r0, #1
 800b516:	d102      	bne.n	800b51e <_close_r+0x1a>
 800b518:	682b      	ldr	r3, [r5, #0]
 800b51a:	b103      	cbz	r3, 800b51e <_close_r+0x1a>
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	bd38      	pop	{r3, r4, r5, pc}
 800b520:	20001cd4 	.word	0x20001cd4

0800b524 <quorem>:
 800b524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b528:	6903      	ldr	r3, [r0, #16]
 800b52a:	690c      	ldr	r4, [r1, #16]
 800b52c:	42a3      	cmp	r3, r4
 800b52e:	4607      	mov	r7, r0
 800b530:	f2c0 8081 	blt.w	800b636 <quorem+0x112>
 800b534:	3c01      	subs	r4, #1
 800b536:	f101 0814 	add.w	r8, r1, #20
 800b53a:	f100 0514 	add.w	r5, r0, #20
 800b53e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b542:	9301      	str	r3, [sp, #4]
 800b544:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b548:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b54c:	3301      	adds	r3, #1
 800b54e:	429a      	cmp	r2, r3
 800b550:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b554:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b558:	fbb2 f6f3 	udiv	r6, r2, r3
 800b55c:	d331      	bcc.n	800b5c2 <quorem+0x9e>
 800b55e:	f04f 0e00 	mov.w	lr, #0
 800b562:	4640      	mov	r0, r8
 800b564:	46ac      	mov	ip, r5
 800b566:	46f2      	mov	sl, lr
 800b568:	f850 2b04 	ldr.w	r2, [r0], #4
 800b56c:	b293      	uxth	r3, r2
 800b56e:	fb06 e303 	mla	r3, r6, r3, lr
 800b572:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b576:	b29b      	uxth	r3, r3
 800b578:	ebaa 0303 	sub.w	r3, sl, r3
 800b57c:	f8dc a000 	ldr.w	sl, [ip]
 800b580:	0c12      	lsrs	r2, r2, #16
 800b582:	fa13 f38a 	uxtah	r3, r3, sl
 800b586:	fb06 e202 	mla	r2, r6, r2, lr
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	9b00      	ldr	r3, [sp, #0]
 800b58e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b592:	b292      	uxth	r2, r2
 800b594:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b598:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b59c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b5a0:	4581      	cmp	r9, r0
 800b5a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5a6:	f84c 3b04 	str.w	r3, [ip], #4
 800b5aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b5ae:	d2db      	bcs.n	800b568 <quorem+0x44>
 800b5b0:	f855 300b 	ldr.w	r3, [r5, fp]
 800b5b4:	b92b      	cbnz	r3, 800b5c2 <quorem+0x9e>
 800b5b6:	9b01      	ldr	r3, [sp, #4]
 800b5b8:	3b04      	subs	r3, #4
 800b5ba:	429d      	cmp	r5, r3
 800b5bc:	461a      	mov	r2, r3
 800b5be:	d32e      	bcc.n	800b61e <quorem+0xfa>
 800b5c0:	613c      	str	r4, [r7, #16]
 800b5c2:	4638      	mov	r0, r7
 800b5c4:	f001 f93c 	bl	800c840 <__mcmp>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	db24      	blt.n	800b616 <quorem+0xf2>
 800b5cc:	3601      	adds	r6, #1
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	f04f 0c00 	mov.w	ip, #0
 800b5d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b5d8:	f8d0 e000 	ldr.w	lr, [r0]
 800b5dc:	b293      	uxth	r3, r2
 800b5de:	ebac 0303 	sub.w	r3, ip, r3
 800b5e2:	0c12      	lsrs	r2, r2, #16
 800b5e4:	fa13 f38e 	uxtah	r3, r3, lr
 800b5e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b5ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5f6:	45c1      	cmp	r9, r8
 800b5f8:	f840 3b04 	str.w	r3, [r0], #4
 800b5fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b600:	d2e8      	bcs.n	800b5d4 <quorem+0xb0>
 800b602:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b606:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b60a:	b922      	cbnz	r2, 800b616 <quorem+0xf2>
 800b60c:	3b04      	subs	r3, #4
 800b60e:	429d      	cmp	r5, r3
 800b610:	461a      	mov	r2, r3
 800b612:	d30a      	bcc.n	800b62a <quorem+0x106>
 800b614:	613c      	str	r4, [r7, #16]
 800b616:	4630      	mov	r0, r6
 800b618:	b003      	add	sp, #12
 800b61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b61e:	6812      	ldr	r2, [r2, #0]
 800b620:	3b04      	subs	r3, #4
 800b622:	2a00      	cmp	r2, #0
 800b624:	d1cc      	bne.n	800b5c0 <quorem+0x9c>
 800b626:	3c01      	subs	r4, #1
 800b628:	e7c7      	b.n	800b5ba <quorem+0x96>
 800b62a:	6812      	ldr	r2, [r2, #0]
 800b62c:	3b04      	subs	r3, #4
 800b62e:	2a00      	cmp	r2, #0
 800b630:	d1f0      	bne.n	800b614 <quorem+0xf0>
 800b632:	3c01      	subs	r4, #1
 800b634:	e7eb      	b.n	800b60e <quorem+0xea>
 800b636:	2000      	movs	r0, #0
 800b638:	e7ee      	b.n	800b618 <quorem+0xf4>
 800b63a:	0000      	movs	r0, r0
 800b63c:	0000      	movs	r0, r0
	...

0800b640 <_dtoa_r>:
 800b640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b644:	ed2d 8b04 	vpush	{d8-d9}
 800b648:	ec57 6b10 	vmov	r6, r7, d0
 800b64c:	b093      	sub	sp, #76	; 0x4c
 800b64e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b650:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b654:	9106      	str	r1, [sp, #24]
 800b656:	ee10 aa10 	vmov	sl, s0
 800b65a:	4604      	mov	r4, r0
 800b65c:	9209      	str	r2, [sp, #36]	; 0x24
 800b65e:	930c      	str	r3, [sp, #48]	; 0x30
 800b660:	46bb      	mov	fp, r7
 800b662:	b975      	cbnz	r5, 800b682 <_dtoa_r+0x42>
 800b664:	2010      	movs	r0, #16
 800b666:	f000 fe55 	bl	800c314 <malloc>
 800b66a:	4602      	mov	r2, r0
 800b66c:	6260      	str	r0, [r4, #36]	; 0x24
 800b66e:	b920      	cbnz	r0, 800b67a <_dtoa_r+0x3a>
 800b670:	4ba7      	ldr	r3, [pc, #668]	; (800b910 <_dtoa_r+0x2d0>)
 800b672:	21ea      	movs	r1, #234	; 0xea
 800b674:	48a7      	ldr	r0, [pc, #668]	; (800b914 <_dtoa_r+0x2d4>)
 800b676:	f001 fb67 	bl	800cd48 <__assert_func>
 800b67a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b67e:	6005      	str	r5, [r0, #0]
 800b680:	60c5      	str	r5, [r0, #12]
 800b682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b684:	6819      	ldr	r1, [r3, #0]
 800b686:	b151      	cbz	r1, 800b69e <_dtoa_r+0x5e>
 800b688:	685a      	ldr	r2, [r3, #4]
 800b68a:	604a      	str	r2, [r1, #4]
 800b68c:	2301      	movs	r3, #1
 800b68e:	4093      	lsls	r3, r2
 800b690:	608b      	str	r3, [r1, #8]
 800b692:	4620      	mov	r0, r4
 800b694:	f000 fe92 	bl	800c3bc <_Bfree>
 800b698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b69a:	2200      	movs	r2, #0
 800b69c:	601a      	str	r2, [r3, #0]
 800b69e:	1e3b      	subs	r3, r7, #0
 800b6a0:	bfaa      	itet	ge
 800b6a2:	2300      	movge	r3, #0
 800b6a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b6a8:	f8c8 3000 	strge.w	r3, [r8]
 800b6ac:	4b9a      	ldr	r3, [pc, #616]	; (800b918 <_dtoa_r+0x2d8>)
 800b6ae:	bfbc      	itt	lt
 800b6b0:	2201      	movlt	r2, #1
 800b6b2:	f8c8 2000 	strlt.w	r2, [r8]
 800b6b6:	ea33 030b 	bics.w	r3, r3, fp
 800b6ba:	d11b      	bne.n	800b6f4 <_dtoa_r+0xb4>
 800b6bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6be:	f242 730f 	movw	r3, #9999	; 0x270f
 800b6c2:	6013      	str	r3, [r2, #0]
 800b6c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6c8:	4333      	orrs	r3, r6
 800b6ca:	f000 8592 	beq.w	800c1f2 <_dtoa_r+0xbb2>
 800b6ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6d0:	b963      	cbnz	r3, 800b6ec <_dtoa_r+0xac>
 800b6d2:	4b92      	ldr	r3, [pc, #584]	; (800b91c <_dtoa_r+0x2dc>)
 800b6d4:	e022      	b.n	800b71c <_dtoa_r+0xdc>
 800b6d6:	4b92      	ldr	r3, [pc, #584]	; (800b920 <_dtoa_r+0x2e0>)
 800b6d8:	9301      	str	r3, [sp, #4]
 800b6da:	3308      	adds	r3, #8
 800b6dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b6de:	6013      	str	r3, [r2, #0]
 800b6e0:	9801      	ldr	r0, [sp, #4]
 800b6e2:	b013      	add	sp, #76	; 0x4c
 800b6e4:	ecbd 8b04 	vpop	{d8-d9}
 800b6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ec:	4b8b      	ldr	r3, [pc, #556]	; (800b91c <_dtoa_r+0x2dc>)
 800b6ee:	9301      	str	r3, [sp, #4]
 800b6f0:	3303      	adds	r3, #3
 800b6f2:	e7f3      	b.n	800b6dc <_dtoa_r+0x9c>
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	4650      	mov	r0, sl
 800b6fa:	4659      	mov	r1, fp
 800b6fc:	f7f5 fa0c 	bl	8000b18 <__aeabi_dcmpeq>
 800b700:	ec4b ab19 	vmov	d9, sl, fp
 800b704:	4680      	mov	r8, r0
 800b706:	b158      	cbz	r0, 800b720 <_dtoa_r+0xe0>
 800b708:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b70a:	2301      	movs	r3, #1
 800b70c:	6013      	str	r3, [r2, #0]
 800b70e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b710:	2b00      	cmp	r3, #0
 800b712:	f000 856b 	beq.w	800c1ec <_dtoa_r+0xbac>
 800b716:	4883      	ldr	r0, [pc, #524]	; (800b924 <_dtoa_r+0x2e4>)
 800b718:	6018      	str	r0, [r3, #0]
 800b71a:	1e43      	subs	r3, r0, #1
 800b71c:	9301      	str	r3, [sp, #4]
 800b71e:	e7df      	b.n	800b6e0 <_dtoa_r+0xa0>
 800b720:	ec4b ab10 	vmov	d0, sl, fp
 800b724:	aa10      	add	r2, sp, #64	; 0x40
 800b726:	a911      	add	r1, sp, #68	; 0x44
 800b728:	4620      	mov	r0, r4
 800b72a:	f001 f92f 	bl	800c98c <__d2b>
 800b72e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b732:	ee08 0a10 	vmov	s16, r0
 800b736:	2d00      	cmp	r5, #0
 800b738:	f000 8084 	beq.w	800b844 <_dtoa_r+0x204>
 800b73c:	ee19 3a90 	vmov	r3, s19
 800b740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b744:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b748:	4656      	mov	r6, sl
 800b74a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b74e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b752:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b756:	4b74      	ldr	r3, [pc, #464]	; (800b928 <_dtoa_r+0x2e8>)
 800b758:	2200      	movs	r2, #0
 800b75a:	4630      	mov	r0, r6
 800b75c:	4639      	mov	r1, r7
 800b75e:	f7f4 fdbb 	bl	80002d8 <__aeabi_dsub>
 800b762:	a365      	add	r3, pc, #404	; (adr r3, 800b8f8 <_dtoa_r+0x2b8>)
 800b764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b768:	f7f4 ff6e 	bl	8000648 <__aeabi_dmul>
 800b76c:	a364      	add	r3, pc, #400	; (adr r3, 800b900 <_dtoa_r+0x2c0>)
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	f7f4 fdb3 	bl	80002dc <__adddf3>
 800b776:	4606      	mov	r6, r0
 800b778:	4628      	mov	r0, r5
 800b77a:	460f      	mov	r7, r1
 800b77c:	f7f4 fefa 	bl	8000574 <__aeabi_i2d>
 800b780:	a361      	add	r3, pc, #388	; (adr r3, 800b908 <_dtoa_r+0x2c8>)
 800b782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b786:	f7f4 ff5f 	bl	8000648 <__aeabi_dmul>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	4630      	mov	r0, r6
 800b790:	4639      	mov	r1, r7
 800b792:	f7f4 fda3 	bl	80002dc <__adddf3>
 800b796:	4606      	mov	r6, r0
 800b798:	460f      	mov	r7, r1
 800b79a:	f7f5 fa05 	bl	8000ba8 <__aeabi_d2iz>
 800b79e:	2200      	movs	r2, #0
 800b7a0:	9000      	str	r0, [sp, #0]
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	4630      	mov	r0, r6
 800b7a6:	4639      	mov	r1, r7
 800b7a8:	f7f5 f9c0 	bl	8000b2c <__aeabi_dcmplt>
 800b7ac:	b150      	cbz	r0, 800b7c4 <_dtoa_r+0x184>
 800b7ae:	9800      	ldr	r0, [sp, #0]
 800b7b0:	f7f4 fee0 	bl	8000574 <__aeabi_i2d>
 800b7b4:	4632      	mov	r2, r6
 800b7b6:	463b      	mov	r3, r7
 800b7b8:	f7f5 f9ae 	bl	8000b18 <__aeabi_dcmpeq>
 800b7bc:	b910      	cbnz	r0, 800b7c4 <_dtoa_r+0x184>
 800b7be:	9b00      	ldr	r3, [sp, #0]
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	9b00      	ldr	r3, [sp, #0]
 800b7c6:	2b16      	cmp	r3, #22
 800b7c8:	d85a      	bhi.n	800b880 <_dtoa_r+0x240>
 800b7ca:	9a00      	ldr	r2, [sp, #0]
 800b7cc:	4b57      	ldr	r3, [pc, #348]	; (800b92c <_dtoa_r+0x2ec>)
 800b7ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d6:	ec51 0b19 	vmov	r0, r1, d9
 800b7da:	f7f5 f9a7 	bl	8000b2c <__aeabi_dcmplt>
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	d050      	beq.n	800b884 <_dtoa_r+0x244>
 800b7e2:	9b00      	ldr	r3, [sp, #0]
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b7ee:	1b5d      	subs	r5, r3, r5
 800b7f0:	1e6b      	subs	r3, r5, #1
 800b7f2:	9305      	str	r3, [sp, #20]
 800b7f4:	bf45      	ittet	mi
 800b7f6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b7fa:	9304      	strmi	r3, [sp, #16]
 800b7fc:	2300      	movpl	r3, #0
 800b7fe:	2300      	movmi	r3, #0
 800b800:	bf4c      	ite	mi
 800b802:	9305      	strmi	r3, [sp, #20]
 800b804:	9304      	strpl	r3, [sp, #16]
 800b806:	9b00      	ldr	r3, [sp, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	db3d      	blt.n	800b888 <_dtoa_r+0x248>
 800b80c:	9b05      	ldr	r3, [sp, #20]
 800b80e:	9a00      	ldr	r2, [sp, #0]
 800b810:	920a      	str	r2, [sp, #40]	; 0x28
 800b812:	4413      	add	r3, r2
 800b814:	9305      	str	r3, [sp, #20]
 800b816:	2300      	movs	r3, #0
 800b818:	9307      	str	r3, [sp, #28]
 800b81a:	9b06      	ldr	r3, [sp, #24]
 800b81c:	2b09      	cmp	r3, #9
 800b81e:	f200 8089 	bhi.w	800b934 <_dtoa_r+0x2f4>
 800b822:	2b05      	cmp	r3, #5
 800b824:	bfc4      	itt	gt
 800b826:	3b04      	subgt	r3, #4
 800b828:	9306      	strgt	r3, [sp, #24]
 800b82a:	9b06      	ldr	r3, [sp, #24]
 800b82c:	f1a3 0302 	sub.w	r3, r3, #2
 800b830:	bfcc      	ite	gt
 800b832:	2500      	movgt	r5, #0
 800b834:	2501      	movle	r5, #1
 800b836:	2b03      	cmp	r3, #3
 800b838:	f200 8087 	bhi.w	800b94a <_dtoa_r+0x30a>
 800b83c:	e8df f003 	tbb	[pc, r3]
 800b840:	59383a2d 	.word	0x59383a2d
 800b844:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b848:	441d      	add	r5, r3
 800b84a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b84e:	2b20      	cmp	r3, #32
 800b850:	bfc1      	itttt	gt
 800b852:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b856:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b85a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b85e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b862:	bfda      	itte	le
 800b864:	f1c3 0320 	rsble	r3, r3, #32
 800b868:	fa06 f003 	lslle.w	r0, r6, r3
 800b86c:	4318      	orrgt	r0, r3
 800b86e:	f7f4 fe71 	bl	8000554 <__aeabi_ui2d>
 800b872:	2301      	movs	r3, #1
 800b874:	4606      	mov	r6, r0
 800b876:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b87a:	3d01      	subs	r5, #1
 800b87c:	930e      	str	r3, [sp, #56]	; 0x38
 800b87e:	e76a      	b.n	800b756 <_dtoa_r+0x116>
 800b880:	2301      	movs	r3, #1
 800b882:	e7b2      	b.n	800b7ea <_dtoa_r+0x1aa>
 800b884:	900b      	str	r0, [sp, #44]	; 0x2c
 800b886:	e7b1      	b.n	800b7ec <_dtoa_r+0x1ac>
 800b888:	9b04      	ldr	r3, [sp, #16]
 800b88a:	9a00      	ldr	r2, [sp, #0]
 800b88c:	1a9b      	subs	r3, r3, r2
 800b88e:	9304      	str	r3, [sp, #16]
 800b890:	4253      	negs	r3, r2
 800b892:	9307      	str	r3, [sp, #28]
 800b894:	2300      	movs	r3, #0
 800b896:	930a      	str	r3, [sp, #40]	; 0x28
 800b898:	e7bf      	b.n	800b81a <_dtoa_r+0x1da>
 800b89a:	2300      	movs	r3, #0
 800b89c:	9308      	str	r3, [sp, #32]
 800b89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	dc55      	bgt.n	800b950 <_dtoa_r+0x310>
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	9209      	str	r2, [sp, #36]	; 0x24
 800b8ae:	e00c      	b.n	800b8ca <_dtoa_r+0x28a>
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e7f3      	b.n	800b89c <_dtoa_r+0x25c>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8b8:	9308      	str	r3, [sp, #32]
 800b8ba:	9b00      	ldr	r3, [sp, #0]
 800b8bc:	4413      	add	r3, r2
 800b8be:	9302      	str	r3, [sp, #8]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	9303      	str	r3, [sp, #12]
 800b8c6:	bfb8      	it	lt
 800b8c8:	2301      	movlt	r3, #1
 800b8ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	6042      	str	r2, [r0, #4]
 800b8d0:	2204      	movs	r2, #4
 800b8d2:	f102 0614 	add.w	r6, r2, #20
 800b8d6:	429e      	cmp	r6, r3
 800b8d8:	6841      	ldr	r1, [r0, #4]
 800b8da:	d93d      	bls.n	800b958 <_dtoa_r+0x318>
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f000 fd2d 	bl	800c33c <_Balloc>
 800b8e2:	9001      	str	r0, [sp, #4]
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d13b      	bne.n	800b960 <_dtoa_r+0x320>
 800b8e8:	4b11      	ldr	r3, [pc, #68]	; (800b930 <_dtoa_r+0x2f0>)
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b8f0:	e6c0      	b.n	800b674 <_dtoa_r+0x34>
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e7df      	b.n	800b8b6 <_dtoa_r+0x276>
 800b8f6:	bf00      	nop
 800b8f8:	636f4361 	.word	0x636f4361
 800b8fc:	3fd287a7 	.word	0x3fd287a7
 800b900:	8b60c8b3 	.word	0x8b60c8b3
 800b904:	3fc68a28 	.word	0x3fc68a28
 800b908:	509f79fb 	.word	0x509f79fb
 800b90c:	3fd34413 	.word	0x3fd34413
 800b910:	0800d845 	.word	0x0800d845
 800b914:	0800d85c 	.word	0x0800d85c
 800b918:	7ff00000 	.word	0x7ff00000
 800b91c:	0800d841 	.word	0x0800d841
 800b920:	0800d838 	.word	0x0800d838
 800b924:	0800d815 	.word	0x0800d815
 800b928:	3ff80000 	.word	0x3ff80000
 800b92c:	0800d950 	.word	0x0800d950
 800b930:	0800d8b7 	.word	0x0800d8b7
 800b934:	2501      	movs	r5, #1
 800b936:	2300      	movs	r3, #0
 800b938:	9306      	str	r3, [sp, #24]
 800b93a:	9508      	str	r5, [sp, #32]
 800b93c:	f04f 33ff 	mov.w	r3, #4294967295
 800b940:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b944:	2200      	movs	r2, #0
 800b946:	2312      	movs	r3, #18
 800b948:	e7b0      	b.n	800b8ac <_dtoa_r+0x26c>
 800b94a:	2301      	movs	r3, #1
 800b94c:	9308      	str	r3, [sp, #32]
 800b94e:	e7f5      	b.n	800b93c <_dtoa_r+0x2fc>
 800b950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b952:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b956:	e7b8      	b.n	800b8ca <_dtoa_r+0x28a>
 800b958:	3101      	adds	r1, #1
 800b95a:	6041      	str	r1, [r0, #4]
 800b95c:	0052      	lsls	r2, r2, #1
 800b95e:	e7b8      	b.n	800b8d2 <_dtoa_r+0x292>
 800b960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b962:	9a01      	ldr	r2, [sp, #4]
 800b964:	601a      	str	r2, [r3, #0]
 800b966:	9b03      	ldr	r3, [sp, #12]
 800b968:	2b0e      	cmp	r3, #14
 800b96a:	f200 809d 	bhi.w	800baa8 <_dtoa_r+0x468>
 800b96e:	2d00      	cmp	r5, #0
 800b970:	f000 809a 	beq.w	800baa8 <_dtoa_r+0x468>
 800b974:	9b00      	ldr	r3, [sp, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	dd32      	ble.n	800b9e0 <_dtoa_r+0x3a0>
 800b97a:	4ab7      	ldr	r2, [pc, #732]	; (800bc58 <_dtoa_r+0x618>)
 800b97c:	f003 030f 	and.w	r3, r3, #15
 800b980:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b984:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b988:	9b00      	ldr	r3, [sp, #0]
 800b98a:	05d8      	lsls	r0, r3, #23
 800b98c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b990:	d516      	bpl.n	800b9c0 <_dtoa_r+0x380>
 800b992:	4bb2      	ldr	r3, [pc, #712]	; (800bc5c <_dtoa_r+0x61c>)
 800b994:	ec51 0b19 	vmov	r0, r1, d9
 800b998:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b99c:	f7f4 ff7e 	bl	800089c <__aeabi_ddiv>
 800b9a0:	f007 070f 	and.w	r7, r7, #15
 800b9a4:	4682      	mov	sl, r0
 800b9a6:	468b      	mov	fp, r1
 800b9a8:	2503      	movs	r5, #3
 800b9aa:	4eac      	ldr	r6, [pc, #688]	; (800bc5c <_dtoa_r+0x61c>)
 800b9ac:	b957      	cbnz	r7, 800b9c4 <_dtoa_r+0x384>
 800b9ae:	4642      	mov	r2, r8
 800b9b0:	464b      	mov	r3, r9
 800b9b2:	4650      	mov	r0, sl
 800b9b4:	4659      	mov	r1, fp
 800b9b6:	f7f4 ff71 	bl	800089c <__aeabi_ddiv>
 800b9ba:	4682      	mov	sl, r0
 800b9bc:	468b      	mov	fp, r1
 800b9be:	e028      	b.n	800ba12 <_dtoa_r+0x3d2>
 800b9c0:	2502      	movs	r5, #2
 800b9c2:	e7f2      	b.n	800b9aa <_dtoa_r+0x36a>
 800b9c4:	07f9      	lsls	r1, r7, #31
 800b9c6:	d508      	bpl.n	800b9da <_dtoa_r+0x39a>
 800b9c8:	4640      	mov	r0, r8
 800b9ca:	4649      	mov	r1, r9
 800b9cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b9d0:	f7f4 fe3a 	bl	8000648 <__aeabi_dmul>
 800b9d4:	3501      	adds	r5, #1
 800b9d6:	4680      	mov	r8, r0
 800b9d8:	4689      	mov	r9, r1
 800b9da:	107f      	asrs	r7, r7, #1
 800b9dc:	3608      	adds	r6, #8
 800b9de:	e7e5      	b.n	800b9ac <_dtoa_r+0x36c>
 800b9e0:	f000 809b 	beq.w	800bb1a <_dtoa_r+0x4da>
 800b9e4:	9b00      	ldr	r3, [sp, #0]
 800b9e6:	4f9d      	ldr	r7, [pc, #628]	; (800bc5c <_dtoa_r+0x61c>)
 800b9e8:	425e      	negs	r6, r3
 800b9ea:	4b9b      	ldr	r3, [pc, #620]	; (800bc58 <_dtoa_r+0x618>)
 800b9ec:	f006 020f 	and.w	r2, r6, #15
 800b9f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f8:	ec51 0b19 	vmov	r0, r1, d9
 800b9fc:	f7f4 fe24 	bl	8000648 <__aeabi_dmul>
 800ba00:	1136      	asrs	r6, r6, #4
 800ba02:	4682      	mov	sl, r0
 800ba04:	468b      	mov	fp, r1
 800ba06:	2300      	movs	r3, #0
 800ba08:	2502      	movs	r5, #2
 800ba0a:	2e00      	cmp	r6, #0
 800ba0c:	d17a      	bne.n	800bb04 <_dtoa_r+0x4c4>
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1d3      	bne.n	800b9ba <_dtoa_r+0x37a>
 800ba12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f000 8082 	beq.w	800bb1e <_dtoa_r+0x4de>
 800ba1a:	4b91      	ldr	r3, [pc, #580]	; (800bc60 <_dtoa_r+0x620>)
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	4650      	mov	r0, sl
 800ba20:	4659      	mov	r1, fp
 800ba22:	f7f5 f883 	bl	8000b2c <__aeabi_dcmplt>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	d079      	beq.n	800bb1e <_dtoa_r+0x4de>
 800ba2a:	9b03      	ldr	r3, [sp, #12]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d076      	beq.n	800bb1e <_dtoa_r+0x4de>
 800ba30:	9b02      	ldr	r3, [sp, #8]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	dd36      	ble.n	800baa4 <_dtoa_r+0x464>
 800ba36:	9b00      	ldr	r3, [sp, #0]
 800ba38:	4650      	mov	r0, sl
 800ba3a:	4659      	mov	r1, fp
 800ba3c:	1e5f      	subs	r7, r3, #1
 800ba3e:	2200      	movs	r2, #0
 800ba40:	4b88      	ldr	r3, [pc, #544]	; (800bc64 <_dtoa_r+0x624>)
 800ba42:	f7f4 fe01 	bl	8000648 <__aeabi_dmul>
 800ba46:	9e02      	ldr	r6, [sp, #8]
 800ba48:	4682      	mov	sl, r0
 800ba4a:	468b      	mov	fp, r1
 800ba4c:	3501      	adds	r5, #1
 800ba4e:	4628      	mov	r0, r5
 800ba50:	f7f4 fd90 	bl	8000574 <__aeabi_i2d>
 800ba54:	4652      	mov	r2, sl
 800ba56:	465b      	mov	r3, fp
 800ba58:	f7f4 fdf6 	bl	8000648 <__aeabi_dmul>
 800ba5c:	4b82      	ldr	r3, [pc, #520]	; (800bc68 <_dtoa_r+0x628>)
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f7f4 fc3c 	bl	80002dc <__adddf3>
 800ba64:	46d0      	mov	r8, sl
 800ba66:	46d9      	mov	r9, fp
 800ba68:	4682      	mov	sl, r0
 800ba6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ba6e:	2e00      	cmp	r6, #0
 800ba70:	d158      	bne.n	800bb24 <_dtoa_r+0x4e4>
 800ba72:	4b7e      	ldr	r3, [pc, #504]	; (800bc6c <_dtoa_r+0x62c>)
 800ba74:	2200      	movs	r2, #0
 800ba76:	4640      	mov	r0, r8
 800ba78:	4649      	mov	r1, r9
 800ba7a:	f7f4 fc2d 	bl	80002d8 <__aeabi_dsub>
 800ba7e:	4652      	mov	r2, sl
 800ba80:	465b      	mov	r3, fp
 800ba82:	4680      	mov	r8, r0
 800ba84:	4689      	mov	r9, r1
 800ba86:	f7f5 f86f 	bl	8000b68 <__aeabi_dcmpgt>
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	f040 8295 	bne.w	800bfba <_dtoa_r+0x97a>
 800ba90:	4652      	mov	r2, sl
 800ba92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ba96:	4640      	mov	r0, r8
 800ba98:	4649      	mov	r1, r9
 800ba9a:	f7f5 f847 	bl	8000b2c <__aeabi_dcmplt>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	f040 8289 	bne.w	800bfb6 <_dtoa_r+0x976>
 800baa4:	ec5b ab19 	vmov	sl, fp, d9
 800baa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f2c0 8148 	blt.w	800bd40 <_dtoa_r+0x700>
 800bab0:	9a00      	ldr	r2, [sp, #0]
 800bab2:	2a0e      	cmp	r2, #14
 800bab4:	f300 8144 	bgt.w	800bd40 <_dtoa_r+0x700>
 800bab8:	4b67      	ldr	r3, [pc, #412]	; (800bc58 <_dtoa_r+0x618>)
 800baba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800babe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	f280 80d5 	bge.w	800bc74 <_dtoa_r+0x634>
 800baca:	9b03      	ldr	r3, [sp, #12]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	f300 80d1 	bgt.w	800bc74 <_dtoa_r+0x634>
 800bad2:	f040 826f 	bne.w	800bfb4 <_dtoa_r+0x974>
 800bad6:	4b65      	ldr	r3, [pc, #404]	; (800bc6c <_dtoa_r+0x62c>)
 800bad8:	2200      	movs	r2, #0
 800bada:	4640      	mov	r0, r8
 800badc:	4649      	mov	r1, r9
 800bade:	f7f4 fdb3 	bl	8000648 <__aeabi_dmul>
 800bae2:	4652      	mov	r2, sl
 800bae4:	465b      	mov	r3, fp
 800bae6:	f7f5 f835 	bl	8000b54 <__aeabi_dcmpge>
 800baea:	9e03      	ldr	r6, [sp, #12]
 800baec:	4637      	mov	r7, r6
 800baee:	2800      	cmp	r0, #0
 800baf0:	f040 8245 	bne.w	800bf7e <_dtoa_r+0x93e>
 800baf4:	9d01      	ldr	r5, [sp, #4]
 800baf6:	2331      	movs	r3, #49	; 0x31
 800baf8:	f805 3b01 	strb.w	r3, [r5], #1
 800bafc:	9b00      	ldr	r3, [sp, #0]
 800bafe:	3301      	adds	r3, #1
 800bb00:	9300      	str	r3, [sp, #0]
 800bb02:	e240      	b.n	800bf86 <_dtoa_r+0x946>
 800bb04:	07f2      	lsls	r2, r6, #31
 800bb06:	d505      	bpl.n	800bb14 <_dtoa_r+0x4d4>
 800bb08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb0c:	f7f4 fd9c 	bl	8000648 <__aeabi_dmul>
 800bb10:	3501      	adds	r5, #1
 800bb12:	2301      	movs	r3, #1
 800bb14:	1076      	asrs	r6, r6, #1
 800bb16:	3708      	adds	r7, #8
 800bb18:	e777      	b.n	800ba0a <_dtoa_r+0x3ca>
 800bb1a:	2502      	movs	r5, #2
 800bb1c:	e779      	b.n	800ba12 <_dtoa_r+0x3d2>
 800bb1e:	9f00      	ldr	r7, [sp, #0]
 800bb20:	9e03      	ldr	r6, [sp, #12]
 800bb22:	e794      	b.n	800ba4e <_dtoa_r+0x40e>
 800bb24:	9901      	ldr	r1, [sp, #4]
 800bb26:	4b4c      	ldr	r3, [pc, #304]	; (800bc58 <_dtoa_r+0x618>)
 800bb28:	4431      	add	r1, r6
 800bb2a:	910d      	str	r1, [sp, #52]	; 0x34
 800bb2c:	9908      	ldr	r1, [sp, #32]
 800bb2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bb32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb36:	2900      	cmp	r1, #0
 800bb38:	d043      	beq.n	800bbc2 <_dtoa_r+0x582>
 800bb3a:	494d      	ldr	r1, [pc, #308]	; (800bc70 <_dtoa_r+0x630>)
 800bb3c:	2000      	movs	r0, #0
 800bb3e:	f7f4 fead 	bl	800089c <__aeabi_ddiv>
 800bb42:	4652      	mov	r2, sl
 800bb44:	465b      	mov	r3, fp
 800bb46:	f7f4 fbc7 	bl	80002d8 <__aeabi_dsub>
 800bb4a:	9d01      	ldr	r5, [sp, #4]
 800bb4c:	4682      	mov	sl, r0
 800bb4e:	468b      	mov	fp, r1
 800bb50:	4649      	mov	r1, r9
 800bb52:	4640      	mov	r0, r8
 800bb54:	f7f5 f828 	bl	8000ba8 <__aeabi_d2iz>
 800bb58:	4606      	mov	r6, r0
 800bb5a:	f7f4 fd0b 	bl	8000574 <__aeabi_i2d>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	460b      	mov	r3, r1
 800bb62:	4640      	mov	r0, r8
 800bb64:	4649      	mov	r1, r9
 800bb66:	f7f4 fbb7 	bl	80002d8 <__aeabi_dsub>
 800bb6a:	3630      	adds	r6, #48	; 0x30
 800bb6c:	f805 6b01 	strb.w	r6, [r5], #1
 800bb70:	4652      	mov	r2, sl
 800bb72:	465b      	mov	r3, fp
 800bb74:	4680      	mov	r8, r0
 800bb76:	4689      	mov	r9, r1
 800bb78:	f7f4 ffd8 	bl	8000b2c <__aeabi_dcmplt>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	d163      	bne.n	800bc48 <_dtoa_r+0x608>
 800bb80:	4642      	mov	r2, r8
 800bb82:	464b      	mov	r3, r9
 800bb84:	4936      	ldr	r1, [pc, #216]	; (800bc60 <_dtoa_r+0x620>)
 800bb86:	2000      	movs	r0, #0
 800bb88:	f7f4 fba6 	bl	80002d8 <__aeabi_dsub>
 800bb8c:	4652      	mov	r2, sl
 800bb8e:	465b      	mov	r3, fp
 800bb90:	f7f4 ffcc 	bl	8000b2c <__aeabi_dcmplt>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	f040 80b5 	bne.w	800bd04 <_dtoa_r+0x6c4>
 800bb9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb9c:	429d      	cmp	r5, r3
 800bb9e:	d081      	beq.n	800baa4 <_dtoa_r+0x464>
 800bba0:	4b30      	ldr	r3, [pc, #192]	; (800bc64 <_dtoa_r+0x624>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	4650      	mov	r0, sl
 800bba6:	4659      	mov	r1, fp
 800bba8:	f7f4 fd4e 	bl	8000648 <__aeabi_dmul>
 800bbac:	4b2d      	ldr	r3, [pc, #180]	; (800bc64 <_dtoa_r+0x624>)
 800bbae:	4682      	mov	sl, r0
 800bbb0:	468b      	mov	fp, r1
 800bbb2:	4640      	mov	r0, r8
 800bbb4:	4649      	mov	r1, r9
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f7f4 fd46 	bl	8000648 <__aeabi_dmul>
 800bbbc:	4680      	mov	r8, r0
 800bbbe:	4689      	mov	r9, r1
 800bbc0:	e7c6      	b.n	800bb50 <_dtoa_r+0x510>
 800bbc2:	4650      	mov	r0, sl
 800bbc4:	4659      	mov	r1, fp
 800bbc6:	f7f4 fd3f 	bl	8000648 <__aeabi_dmul>
 800bbca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbcc:	9d01      	ldr	r5, [sp, #4]
 800bbce:	930f      	str	r3, [sp, #60]	; 0x3c
 800bbd0:	4682      	mov	sl, r0
 800bbd2:	468b      	mov	fp, r1
 800bbd4:	4649      	mov	r1, r9
 800bbd6:	4640      	mov	r0, r8
 800bbd8:	f7f4 ffe6 	bl	8000ba8 <__aeabi_d2iz>
 800bbdc:	4606      	mov	r6, r0
 800bbde:	f7f4 fcc9 	bl	8000574 <__aeabi_i2d>
 800bbe2:	3630      	adds	r6, #48	; 0x30
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	4640      	mov	r0, r8
 800bbea:	4649      	mov	r1, r9
 800bbec:	f7f4 fb74 	bl	80002d8 <__aeabi_dsub>
 800bbf0:	f805 6b01 	strb.w	r6, [r5], #1
 800bbf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbf6:	429d      	cmp	r5, r3
 800bbf8:	4680      	mov	r8, r0
 800bbfa:	4689      	mov	r9, r1
 800bbfc:	f04f 0200 	mov.w	r2, #0
 800bc00:	d124      	bne.n	800bc4c <_dtoa_r+0x60c>
 800bc02:	4b1b      	ldr	r3, [pc, #108]	; (800bc70 <_dtoa_r+0x630>)
 800bc04:	4650      	mov	r0, sl
 800bc06:	4659      	mov	r1, fp
 800bc08:	f7f4 fb68 	bl	80002dc <__adddf3>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	460b      	mov	r3, r1
 800bc10:	4640      	mov	r0, r8
 800bc12:	4649      	mov	r1, r9
 800bc14:	f7f4 ffa8 	bl	8000b68 <__aeabi_dcmpgt>
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d173      	bne.n	800bd04 <_dtoa_r+0x6c4>
 800bc1c:	4652      	mov	r2, sl
 800bc1e:	465b      	mov	r3, fp
 800bc20:	4913      	ldr	r1, [pc, #76]	; (800bc70 <_dtoa_r+0x630>)
 800bc22:	2000      	movs	r0, #0
 800bc24:	f7f4 fb58 	bl	80002d8 <__aeabi_dsub>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	4640      	mov	r0, r8
 800bc2e:	4649      	mov	r1, r9
 800bc30:	f7f4 ff7c 	bl	8000b2c <__aeabi_dcmplt>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	f43f af35 	beq.w	800baa4 <_dtoa_r+0x464>
 800bc3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bc3c:	1e6b      	subs	r3, r5, #1
 800bc3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bc44:	2b30      	cmp	r3, #48	; 0x30
 800bc46:	d0f8      	beq.n	800bc3a <_dtoa_r+0x5fa>
 800bc48:	9700      	str	r7, [sp, #0]
 800bc4a:	e049      	b.n	800bce0 <_dtoa_r+0x6a0>
 800bc4c:	4b05      	ldr	r3, [pc, #20]	; (800bc64 <_dtoa_r+0x624>)
 800bc4e:	f7f4 fcfb 	bl	8000648 <__aeabi_dmul>
 800bc52:	4680      	mov	r8, r0
 800bc54:	4689      	mov	r9, r1
 800bc56:	e7bd      	b.n	800bbd4 <_dtoa_r+0x594>
 800bc58:	0800d950 	.word	0x0800d950
 800bc5c:	0800d928 	.word	0x0800d928
 800bc60:	3ff00000 	.word	0x3ff00000
 800bc64:	40240000 	.word	0x40240000
 800bc68:	401c0000 	.word	0x401c0000
 800bc6c:	40140000 	.word	0x40140000
 800bc70:	3fe00000 	.word	0x3fe00000
 800bc74:	9d01      	ldr	r5, [sp, #4]
 800bc76:	4656      	mov	r6, sl
 800bc78:	465f      	mov	r7, fp
 800bc7a:	4642      	mov	r2, r8
 800bc7c:	464b      	mov	r3, r9
 800bc7e:	4630      	mov	r0, r6
 800bc80:	4639      	mov	r1, r7
 800bc82:	f7f4 fe0b 	bl	800089c <__aeabi_ddiv>
 800bc86:	f7f4 ff8f 	bl	8000ba8 <__aeabi_d2iz>
 800bc8a:	4682      	mov	sl, r0
 800bc8c:	f7f4 fc72 	bl	8000574 <__aeabi_i2d>
 800bc90:	4642      	mov	r2, r8
 800bc92:	464b      	mov	r3, r9
 800bc94:	f7f4 fcd8 	bl	8000648 <__aeabi_dmul>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	4630      	mov	r0, r6
 800bc9e:	4639      	mov	r1, r7
 800bca0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bca4:	f7f4 fb18 	bl	80002d8 <__aeabi_dsub>
 800bca8:	f805 6b01 	strb.w	r6, [r5], #1
 800bcac:	9e01      	ldr	r6, [sp, #4]
 800bcae:	9f03      	ldr	r7, [sp, #12]
 800bcb0:	1bae      	subs	r6, r5, r6
 800bcb2:	42b7      	cmp	r7, r6
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	d135      	bne.n	800bd26 <_dtoa_r+0x6e6>
 800bcba:	f7f4 fb0f 	bl	80002dc <__adddf3>
 800bcbe:	4642      	mov	r2, r8
 800bcc0:	464b      	mov	r3, r9
 800bcc2:	4606      	mov	r6, r0
 800bcc4:	460f      	mov	r7, r1
 800bcc6:	f7f4 ff4f 	bl	8000b68 <__aeabi_dcmpgt>
 800bcca:	b9d0      	cbnz	r0, 800bd02 <_dtoa_r+0x6c2>
 800bccc:	4642      	mov	r2, r8
 800bcce:	464b      	mov	r3, r9
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	4639      	mov	r1, r7
 800bcd4:	f7f4 ff20 	bl	8000b18 <__aeabi_dcmpeq>
 800bcd8:	b110      	cbz	r0, 800bce0 <_dtoa_r+0x6a0>
 800bcda:	f01a 0f01 	tst.w	sl, #1
 800bcde:	d110      	bne.n	800bd02 <_dtoa_r+0x6c2>
 800bce0:	4620      	mov	r0, r4
 800bce2:	ee18 1a10 	vmov	r1, s16
 800bce6:	f000 fb69 	bl	800c3bc <_Bfree>
 800bcea:	2300      	movs	r3, #0
 800bcec:	9800      	ldr	r0, [sp, #0]
 800bcee:	702b      	strb	r3, [r5, #0]
 800bcf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	6018      	str	r0, [r3, #0]
 800bcf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	f43f acf1 	beq.w	800b6e0 <_dtoa_r+0xa0>
 800bcfe:	601d      	str	r5, [r3, #0]
 800bd00:	e4ee      	b.n	800b6e0 <_dtoa_r+0xa0>
 800bd02:	9f00      	ldr	r7, [sp, #0]
 800bd04:	462b      	mov	r3, r5
 800bd06:	461d      	mov	r5, r3
 800bd08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd0c:	2a39      	cmp	r2, #57	; 0x39
 800bd0e:	d106      	bne.n	800bd1e <_dtoa_r+0x6de>
 800bd10:	9a01      	ldr	r2, [sp, #4]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d1f7      	bne.n	800bd06 <_dtoa_r+0x6c6>
 800bd16:	9901      	ldr	r1, [sp, #4]
 800bd18:	2230      	movs	r2, #48	; 0x30
 800bd1a:	3701      	adds	r7, #1
 800bd1c:	700a      	strb	r2, [r1, #0]
 800bd1e:	781a      	ldrb	r2, [r3, #0]
 800bd20:	3201      	adds	r2, #1
 800bd22:	701a      	strb	r2, [r3, #0]
 800bd24:	e790      	b.n	800bc48 <_dtoa_r+0x608>
 800bd26:	4ba6      	ldr	r3, [pc, #664]	; (800bfc0 <_dtoa_r+0x980>)
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f7f4 fc8d 	bl	8000648 <__aeabi_dmul>
 800bd2e:	2200      	movs	r2, #0
 800bd30:	2300      	movs	r3, #0
 800bd32:	4606      	mov	r6, r0
 800bd34:	460f      	mov	r7, r1
 800bd36:	f7f4 feef 	bl	8000b18 <__aeabi_dcmpeq>
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	d09d      	beq.n	800bc7a <_dtoa_r+0x63a>
 800bd3e:	e7cf      	b.n	800bce0 <_dtoa_r+0x6a0>
 800bd40:	9a08      	ldr	r2, [sp, #32]
 800bd42:	2a00      	cmp	r2, #0
 800bd44:	f000 80d7 	beq.w	800bef6 <_dtoa_r+0x8b6>
 800bd48:	9a06      	ldr	r2, [sp, #24]
 800bd4a:	2a01      	cmp	r2, #1
 800bd4c:	f300 80ba 	bgt.w	800bec4 <_dtoa_r+0x884>
 800bd50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd52:	2a00      	cmp	r2, #0
 800bd54:	f000 80b2 	beq.w	800bebc <_dtoa_r+0x87c>
 800bd58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bd5c:	9e07      	ldr	r6, [sp, #28]
 800bd5e:	9d04      	ldr	r5, [sp, #16]
 800bd60:	9a04      	ldr	r2, [sp, #16]
 800bd62:	441a      	add	r2, r3
 800bd64:	9204      	str	r2, [sp, #16]
 800bd66:	9a05      	ldr	r2, [sp, #20]
 800bd68:	2101      	movs	r1, #1
 800bd6a:	441a      	add	r2, r3
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	9205      	str	r2, [sp, #20]
 800bd70:	f000 fbdc 	bl	800c52c <__i2b>
 800bd74:	4607      	mov	r7, r0
 800bd76:	2d00      	cmp	r5, #0
 800bd78:	dd0c      	ble.n	800bd94 <_dtoa_r+0x754>
 800bd7a:	9b05      	ldr	r3, [sp, #20]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	dd09      	ble.n	800bd94 <_dtoa_r+0x754>
 800bd80:	42ab      	cmp	r3, r5
 800bd82:	9a04      	ldr	r2, [sp, #16]
 800bd84:	bfa8      	it	ge
 800bd86:	462b      	movge	r3, r5
 800bd88:	1ad2      	subs	r2, r2, r3
 800bd8a:	9204      	str	r2, [sp, #16]
 800bd8c:	9a05      	ldr	r2, [sp, #20]
 800bd8e:	1aed      	subs	r5, r5, r3
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	9305      	str	r3, [sp, #20]
 800bd94:	9b07      	ldr	r3, [sp, #28]
 800bd96:	b31b      	cbz	r3, 800bde0 <_dtoa_r+0x7a0>
 800bd98:	9b08      	ldr	r3, [sp, #32]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f000 80af 	beq.w	800befe <_dtoa_r+0x8be>
 800bda0:	2e00      	cmp	r6, #0
 800bda2:	dd13      	ble.n	800bdcc <_dtoa_r+0x78c>
 800bda4:	4639      	mov	r1, r7
 800bda6:	4632      	mov	r2, r6
 800bda8:	4620      	mov	r0, r4
 800bdaa:	f000 fc7f 	bl	800c6ac <__pow5mult>
 800bdae:	ee18 2a10 	vmov	r2, s16
 800bdb2:	4601      	mov	r1, r0
 800bdb4:	4607      	mov	r7, r0
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	f000 fbce 	bl	800c558 <__multiply>
 800bdbc:	ee18 1a10 	vmov	r1, s16
 800bdc0:	4680      	mov	r8, r0
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f000 fafa 	bl	800c3bc <_Bfree>
 800bdc8:	ee08 8a10 	vmov	s16, r8
 800bdcc:	9b07      	ldr	r3, [sp, #28]
 800bdce:	1b9a      	subs	r2, r3, r6
 800bdd0:	d006      	beq.n	800bde0 <_dtoa_r+0x7a0>
 800bdd2:	ee18 1a10 	vmov	r1, s16
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f000 fc68 	bl	800c6ac <__pow5mult>
 800bddc:	ee08 0a10 	vmov	s16, r0
 800bde0:	2101      	movs	r1, #1
 800bde2:	4620      	mov	r0, r4
 800bde4:	f000 fba2 	bl	800c52c <__i2b>
 800bde8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	4606      	mov	r6, r0
 800bdee:	f340 8088 	ble.w	800bf02 <_dtoa_r+0x8c2>
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	4601      	mov	r1, r0
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f000 fc58 	bl	800c6ac <__pow5mult>
 800bdfc:	9b06      	ldr	r3, [sp, #24]
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	4606      	mov	r6, r0
 800be02:	f340 8081 	ble.w	800bf08 <_dtoa_r+0x8c8>
 800be06:	f04f 0800 	mov.w	r8, #0
 800be0a:	6933      	ldr	r3, [r6, #16]
 800be0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800be10:	6918      	ldr	r0, [r3, #16]
 800be12:	f000 fb3b 	bl	800c48c <__hi0bits>
 800be16:	f1c0 0020 	rsb	r0, r0, #32
 800be1a:	9b05      	ldr	r3, [sp, #20]
 800be1c:	4418      	add	r0, r3
 800be1e:	f010 001f 	ands.w	r0, r0, #31
 800be22:	f000 8092 	beq.w	800bf4a <_dtoa_r+0x90a>
 800be26:	f1c0 0320 	rsb	r3, r0, #32
 800be2a:	2b04      	cmp	r3, #4
 800be2c:	f340 808a 	ble.w	800bf44 <_dtoa_r+0x904>
 800be30:	f1c0 001c 	rsb	r0, r0, #28
 800be34:	9b04      	ldr	r3, [sp, #16]
 800be36:	4403      	add	r3, r0
 800be38:	9304      	str	r3, [sp, #16]
 800be3a:	9b05      	ldr	r3, [sp, #20]
 800be3c:	4403      	add	r3, r0
 800be3e:	4405      	add	r5, r0
 800be40:	9305      	str	r3, [sp, #20]
 800be42:	9b04      	ldr	r3, [sp, #16]
 800be44:	2b00      	cmp	r3, #0
 800be46:	dd07      	ble.n	800be58 <_dtoa_r+0x818>
 800be48:	ee18 1a10 	vmov	r1, s16
 800be4c:	461a      	mov	r2, r3
 800be4e:	4620      	mov	r0, r4
 800be50:	f000 fc86 	bl	800c760 <__lshift>
 800be54:	ee08 0a10 	vmov	s16, r0
 800be58:	9b05      	ldr	r3, [sp, #20]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	dd05      	ble.n	800be6a <_dtoa_r+0x82a>
 800be5e:	4631      	mov	r1, r6
 800be60:	461a      	mov	r2, r3
 800be62:	4620      	mov	r0, r4
 800be64:	f000 fc7c 	bl	800c760 <__lshift>
 800be68:	4606      	mov	r6, r0
 800be6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d06e      	beq.n	800bf4e <_dtoa_r+0x90e>
 800be70:	ee18 0a10 	vmov	r0, s16
 800be74:	4631      	mov	r1, r6
 800be76:	f000 fce3 	bl	800c840 <__mcmp>
 800be7a:	2800      	cmp	r0, #0
 800be7c:	da67      	bge.n	800bf4e <_dtoa_r+0x90e>
 800be7e:	9b00      	ldr	r3, [sp, #0]
 800be80:	3b01      	subs	r3, #1
 800be82:	ee18 1a10 	vmov	r1, s16
 800be86:	9300      	str	r3, [sp, #0]
 800be88:	220a      	movs	r2, #10
 800be8a:	2300      	movs	r3, #0
 800be8c:	4620      	mov	r0, r4
 800be8e:	f000 fab7 	bl	800c400 <__multadd>
 800be92:	9b08      	ldr	r3, [sp, #32]
 800be94:	ee08 0a10 	vmov	s16, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	f000 81b1 	beq.w	800c200 <_dtoa_r+0xbc0>
 800be9e:	2300      	movs	r3, #0
 800bea0:	4639      	mov	r1, r7
 800bea2:	220a      	movs	r2, #10
 800bea4:	4620      	mov	r0, r4
 800bea6:	f000 faab 	bl	800c400 <__multadd>
 800beaa:	9b02      	ldr	r3, [sp, #8]
 800beac:	2b00      	cmp	r3, #0
 800beae:	4607      	mov	r7, r0
 800beb0:	f300 808e 	bgt.w	800bfd0 <_dtoa_r+0x990>
 800beb4:	9b06      	ldr	r3, [sp, #24]
 800beb6:	2b02      	cmp	r3, #2
 800beb8:	dc51      	bgt.n	800bf5e <_dtoa_r+0x91e>
 800beba:	e089      	b.n	800bfd0 <_dtoa_r+0x990>
 800bebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bebe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bec2:	e74b      	b.n	800bd5c <_dtoa_r+0x71c>
 800bec4:	9b03      	ldr	r3, [sp, #12]
 800bec6:	1e5e      	subs	r6, r3, #1
 800bec8:	9b07      	ldr	r3, [sp, #28]
 800beca:	42b3      	cmp	r3, r6
 800becc:	bfbf      	itttt	lt
 800bece:	9b07      	ldrlt	r3, [sp, #28]
 800bed0:	9607      	strlt	r6, [sp, #28]
 800bed2:	1af2      	sublt	r2, r6, r3
 800bed4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bed6:	bfb6      	itet	lt
 800bed8:	189b      	addlt	r3, r3, r2
 800beda:	1b9e      	subge	r6, r3, r6
 800bedc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bede:	9b03      	ldr	r3, [sp, #12]
 800bee0:	bfb8      	it	lt
 800bee2:	2600      	movlt	r6, #0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	bfb7      	itett	lt
 800bee8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800beec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bef0:	1a9d      	sublt	r5, r3, r2
 800bef2:	2300      	movlt	r3, #0
 800bef4:	e734      	b.n	800bd60 <_dtoa_r+0x720>
 800bef6:	9e07      	ldr	r6, [sp, #28]
 800bef8:	9d04      	ldr	r5, [sp, #16]
 800befa:	9f08      	ldr	r7, [sp, #32]
 800befc:	e73b      	b.n	800bd76 <_dtoa_r+0x736>
 800befe:	9a07      	ldr	r2, [sp, #28]
 800bf00:	e767      	b.n	800bdd2 <_dtoa_r+0x792>
 800bf02:	9b06      	ldr	r3, [sp, #24]
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	dc18      	bgt.n	800bf3a <_dtoa_r+0x8fa>
 800bf08:	f1ba 0f00 	cmp.w	sl, #0
 800bf0c:	d115      	bne.n	800bf3a <_dtoa_r+0x8fa>
 800bf0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf12:	b993      	cbnz	r3, 800bf3a <_dtoa_r+0x8fa>
 800bf14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bf18:	0d1b      	lsrs	r3, r3, #20
 800bf1a:	051b      	lsls	r3, r3, #20
 800bf1c:	b183      	cbz	r3, 800bf40 <_dtoa_r+0x900>
 800bf1e:	9b04      	ldr	r3, [sp, #16]
 800bf20:	3301      	adds	r3, #1
 800bf22:	9304      	str	r3, [sp, #16]
 800bf24:	9b05      	ldr	r3, [sp, #20]
 800bf26:	3301      	adds	r3, #1
 800bf28:	9305      	str	r3, [sp, #20]
 800bf2a:	f04f 0801 	mov.w	r8, #1
 800bf2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f47f af6a 	bne.w	800be0a <_dtoa_r+0x7ca>
 800bf36:	2001      	movs	r0, #1
 800bf38:	e76f      	b.n	800be1a <_dtoa_r+0x7da>
 800bf3a:	f04f 0800 	mov.w	r8, #0
 800bf3e:	e7f6      	b.n	800bf2e <_dtoa_r+0x8ee>
 800bf40:	4698      	mov	r8, r3
 800bf42:	e7f4      	b.n	800bf2e <_dtoa_r+0x8ee>
 800bf44:	f43f af7d 	beq.w	800be42 <_dtoa_r+0x802>
 800bf48:	4618      	mov	r0, r3
 800bf4a:	301c      	adds	r0, #28
 800bf4c:	e772      	b.n	800be34 <_dtoa_r+0x7f4>
 800bf4e:	9b03      	ldr	r3, [sp, #12]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	dc37      	bgt.n	800bfc4 <_dtoa_r+0x984>
 800bf54:	9b06      	ldr	r3, [sp, #24]
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	dd34      	ble.n	800bfc4 <_dtoa_r+0x984>
 800bf5a:	9b03      	ldr	r3, [sp, #12]
 800bf5c:	9302      	str	r3, [sp, #8]
 800bf5e:	9b02      	ldr	r3, [sp, #8]
 800bf60:	b96b      	cbnz	r3, 800bf7e <_dtoa_r+0x93e>
 800bf62:	4631      	mov	r1, r6
 800bf64:	2205      	movs	r2, #5
 800bf66:	4620      	mov	r0, r4
 800bf68:	f000 fa4a 	bl	800c400 <__multadd>
 800bf6c:	4601      	mov	r1, r0
 800bf6e:	4606      	mov	r6, r0
 800bf70:	ee18 0a10 	vmov	r0, s16
 800bf74:	f000 fc64 	bl	800c840 <__mcmp>
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	f73f adbb 	bgt.w	800baf4 <_dtoa_r+0x4b4>
 800bf7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf80:	9d01      	ldr	r5, [sp, #4]
 800bf82:	43db      	mvns	r3, r3
 800bf84:	9300      	str	r3, [sp, #0]
 800bf86:	f04f 0800 	mov.w	r8, #0
 800bf8a:	4631      	mov	r1, r6
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f000 fa15 	bl	800c3bc <_Bfree>
 800bf92:	2f00      	cmp	r7, #0
 800bf94:	f43f aea4 	beq.w	800bce0 <_dtoa_r+0x6a0>
 800bf98:	f1b8 0f00 	cmp.w	r8, #0
 800bf9c:	d005      	beq.n	800bfaa <_dtoa_r+0x96a>
 800bf9e:	45b8      	cmp	r8, r7
 800bfa0:	d003      	beq.n	800bfaa <_dtoa_r+0x96a>
 800bfa2:	4641      	mov	r1, r8
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	f000 fa09 	bl	800c3bc <_Bfree>
 800bfaa:	4639      	mov	r1, r7
 800bfac:	4620      	mov	r0, r4
 800bfae:	f000 fa05 	bl	800c3bc <_Bfree>
 800bfb2:	e695      	b.n	800bce0 <_dtoa_r+0x6a0>
 800bfb4:	2600      	movs	r6, #0
 800bfb6:	4637      	mov	r7, r6
 800bfb8:	e7e1      	b.n	800bf7e <_dtoa_r+0x93e>
 800bfba:	9700      	str	r7, [sp, #0]
 800bfbc:	4637      	mov	r7, r6
 800bfbe:	e599      	b.n	800baf4 <_dtoa_r+0x4b4>
 800bfc0:	40240000 	.word	0x40240000
 800bfc4:	9b08      	ldr	r3, [sp, #32]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	f000 80ca 	beq.w	800c160 <_dtoa_r+0xb20>
 800bfcc:	9b03      	ldr	r3, [sp, #12]
 800bfce:	9302      	str	r3, [sp, #8]
 800bfd0:	2d00      	cmp	r5, #0
 800bfd2:	dd05      	ble.n	800bfe0 <_dtoa_r+0x9a0>
 800bfd4:	4639      	mov	r1, r7
 800bfd6:	462a      	mov	r2, r5
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f000 fbc1 	bl	800c760 <__lshift>
 800bfde:	4607      	mov	r7, r0
 800bfe0:	f1b8 0f00 	cmp.w	r8, #0
 800bfe4:	d05b      	beq.n	800c09e <_dtoa_r+0xa5e>
 800bfe6:	6879      	ldr	r1, [r7, #4]
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f000 f9a7 	bl	800c33c <_Balloc>
 800bfee:	4605      	mov	r5, r0
 800bff0:	b928      	cbnz	r0, 800bffe <_dtoa_r+0x9be>
 800bff2:	4b87      	ldr	r3, [pc, #540]	; (800c210 <_dtoa_r+0xbd0>)
 800bff4:	4602      	mov	r2, r0
 800bff6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bffa:	f7ff bb3b 	b.w	800b674 <_dtoa_r+0x34>
 800bffe:	693a      	ldr	r2, [r7, #16]
 800c000:	3202      	adds	r2, #2
 800c002:	0092      	lsls	r2, r2, #2
 800c004:	f107 010c 	add.w	r1, r7, #12
 800c008:	300c      	adds	r0, #12
 800c00a:	f7fe fb48 	bl	800a69e <memcpy>
 800c00e:	2201      	movs	r2, #1
 800c010:	4629      	mov	r1, r5
 800c012:	4620      	mov	r0, r4
 800c014:	f000 fba4 	bl	800c760 <__lshift>
 800c018:	9b01      	ldr	r3, [sp, #4]
 800c01a:	f103 0901 	add.w	r9, r3, #1
 800c01e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c022:	4413      	add	r3, r2
 800c024:	9305      	str	r3, [sp, #20]
 800c026:	f00a 0301 	and.w	r3, sl, #1
 800c02a:	46b8      	mov	r8, r7
 800c02c:	9304      	str	r3, [sp, #16]
 800c02e:	4607      	mov	r7, r0
 800c030:	4631      	mov	r1, r6
 800c032:	ee18 0a10 	vmov	r0, s16
 800c036:	f7ff fa75 	bl	800b524 <quorem>
 800c03a:	4641      	mov	r1, r8
 800c03c:	9002      	str	r0, [sp, #8]
 800c03e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c042:	ee18 0a10 	vmov	r0, s16
 800c046:	f000 fbfb 	bl	800c840 <__mcmp>
 800c04a:	463a      	mov	r2, r7
 800c04c:	9003      	str	r0, [sp, #12]
 800c04e:	4631      	mov	r1, r6
 800c050:	4620      	mov	r0, r4
 800c052:	f000 fc11 	bl	800c878 <__mdiff>
 800c056:	68c2      	ldr	r2, [r0, #12]
 800c058:	f109 3bff 	add.w	fp, r9, #4294967295
 800c05c:	4605      	mov	r5, r0
 800c05e:	bb02      	cbnz	r2, 800c0a2 <_dtoa_r+0xa62>
 800c060:	4601      	mov	r1, r0
 800c062:	ee18 0a10 	vmov	r0, s16
 800c066:	f000 fbeb 	bl	800c840 <__mcmp>
 800c06a:	4602      	mov	r2, r0
 800c06c:	4629      	mov	r1, r5
 800c06e:	4620      	mov	r0, r4
 800c070:	9207      	str	r2, [sp, #28]
 800c072:	f000 f9a3 	bl	800c3bc <_Bfree>
 800c076:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c07a:	ea43 0102 	orr.w	r1, r3, r2
 800c07e:	9b04      	ldr	r3, [sp, #16]
 800c080:	430b      	orrs	r3, r1
 800c082:	464d      	mov	r5, r9
 800c084:	d10f      	bne.n	800c0a6 <_dtoa_r+0xa66>
 800c086:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c08a:	d02a      	beq.n	800c0e2 <_dtoa_r+0xaa2>
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	dd02      	ble.n	800c098 <_dtoa_r+0xa58>
 800c092:	9b02      	ldr	r3, [sp, #8]
 800c094:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c098:	f88b a000 	strb.w	sl, [fp]
 800c09c:	e775      	b.n	800bf8a <_dtoa_r+0x94a>
 800c09e:	4638      	mov	r0, r7
 800c0a0:	e7ba      	b.n	800c018 <_dtoa_r+0x9d8>
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	e7e2      	b.n	800c06c <_dtoa_r+0xa2c>
 800c0a6:	9b03      	ldr	r3, [sp, #12]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	db04      	blt.n	800c0b6 <_dtoa_r+0xa76>
 800c0ac:	9906      	ldr	r1, [sp, #24]
 800c0ae:	430b      	orrs	r3, r1
 800c0b0:	9904      	ldr	r1, [sp, #16]
 800c0b2:	430b      	orrs	r3, r1
 800c0b4:	d122      	bne.n	800c0fc <_dtoa_r+0xabc>
 800c0b6:	2a00      	cmp	r2, #0
 800c0b8:	ddee      	ble.n	800c098 <_dtoa_r+0xa58>
 800c0ba:	ee18 1a10 	vmov	r1, s16
 800c0be:	2201      	movs	r2, #1
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f000 fb4d 	bl	800c760 <__lshift>
 800c0c6:	4631      	mov	r1, r6
 800c0c8:	ee08 0a10 	vmov	s16, r0
 800c0cc:	f000 fbb8 	bl	800c840 <__mcmp>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	dc03      	bgt.n	800c0dc <_dtoa_r+0xa9c>
 800c0d4:	d1e0      	bne.n	800c098 <_dtoa_r+0xa58>
 800c0d6:	f01a 0f01 	tst.w	sl, #1
 800c0da:	d0dd      	beq.n	800c098 <_dtoa_r+0xa58>
 800c0dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c0e0:	d1d7      	bne.n	800c092 <_dtoa_r+0xa52>
 800c0e2:	2339      	movs	r3, #57	; 0x39
 800c0e4:	f88b 3000 	strb.w	r3, [fp]
 800c0e8:	462b      	mov	r3, r5
 800c0ea:	461d      	mov	r5, r3
 800c0ec:	3b01      	subs	r3, #1
 800c0ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c0f2:	2a39      	cmp	r2, #57	; 0x39
 800c0f4:	d071      	beq.n	800c1da <_dtoa_r+0xb9a>
 800c0f6:	3201      	adds	r2, #1
 800c0f8:	701a      	strb	r2, [r3, #0]
 800c0fa:	e746      	b.n	800bf8a <_dtoa_r+0x94a>
 800c0fc:	2a00      	cmp	r2, #0
 800c0fe:	dd07      	ble.n	800c110 <_dtoa_r+0xad0>
 800c100:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c104:	d0ed      	beq.n	800c0e2 <_dtoa_r+0xaa2>
 800c106:	f10a 0301 	add.w	r3, sl, #1
 800c10a:	f88b 3000 	strb.w	r3, [fp]
 800c10e:	e73c      	b.n	800bf8a <_dtoa_r+0x94a>
 800c110:	9b05      	ldr	r3, [sp, #20]
 800c112:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c116:	4599      	cmp	r9, r3
 800c118:	d047      	beq.n	800c1aa <_dtoa_r+0xb6a>
 800c11a:	ee18 1a10 	vmov	r1, s16
 800c11e:	2300      	movs	r3, #0
 800c120:	220a      	movs	r2, #10
 800c122:	4620      	mov	r0, r4
 800c124:	f000 f96c 	bl	800c400 <__multadd>
 800c128:	45b8      	cmp	r8, r7
 800c12a:	ee08 0a10 	vmov	s16, r0
 800c12e:	f04f 0300 	mov.w	r3, #0
 800c132:	f04f 020a 	mov.w	r2, #10
 800c136:	4641      	mov	r1, r8
 800c138:	4620      	mov	r0, r4
 800c13a:	d106      	bne.n	800c14a <_dtoa_r+0xb0a>
 800c13c:	f000 f960 	bl	800c400 <__multadd>
 800c140:	4680      	mov	r8, r0
 800c142:	4607      	mov	r7, r0
 800c144:	f109 0901 	add.w	r9, r9, #1
 800c148:	e772      	b.n	800c030 <_dtoa_r+0x9f0>
 800c14a:	f000 f959 	bl	800c400 <__multadd>
 800c14e:	4639      	mov	r1, r7
 800c150:	4680      	mov	r8, r0
 800c152:	2300      	movs	r3, #0
 800c154:	220a      	movs	r2, #10
 800c156:	4620      	mov	r0, r4
 800c158:	f000 f952 	bl	800c400 <__multadd>
 800c15c:	4607      	mov	r7, r0
 800c15e:	e7f1      	b.n	800c144 <_dtoa_r+0xb04>
 800c160:	9b03      	ldr	r3, [sp, #12]
 800c162:	9302      	str	r3, [sp, #8]
 800c164:	9d01      	ldr	r5, [sp, #4]
 800c166:	ee18 0a10 	vmov	r0, s16
 800c16a:	4631      	mov	r1, r6
 800c16c:	f7ff f9da 	bl	800b524 <quorem>
 800c170:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c174:	9b01      	ldr	r3, [sp, #4]
 800c176:	f805 ab01 	strb.w	sl, [r5], #1
 800c17a:	1aea      	subs	r2, r5, r3
 800c17c:	9b02      	ldr	r3, [sp, #8]
 800c17e:	4293      	cmp	r3, r2
 800c180:	dd09      	ble.n	800c196 <_dtoa_r+0xb56>
 800c182:	ee18 1a10 	vmov	r1, s16
 800c186:	2300      	movs	r3, #0
 800c188:	220a      	movs	r2, #10
 800c18a:	4620      	mov	r0, r4
 800c18c:	f000 f938 	bl	800c400 <__multadd>
 800c190:	ee08 0a10 	vmov	s16, r0
 800c194:	e7e7      	b.n	800c166 <_dtoa_r+0xb26>
 800c196:	9b02      	ldr	r3, [sp, #8]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	bfc8      	it	gt
 800c19c:	461d      	movgt	r5, r3
 800c19e:	9b01      	ldr	r3, [sp, #4]
 800c1a0:	bfd8      	it	le
 800c1a2:	2501      	movle	r5, #1
 800c1a4:	441d      	add	r5, r3
 800c1a6:	f04f 0800 	mov.w	r8, #0
 800c1aa:	ee18 1a10 	vmov	r1, s16
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f000 fad5 	bl	800c760 <__lshift>
 800c1b6:	4631      	mov	r1, r6
 800c1b8:	ee08 0a10 	vmov	s16, r0
 800c1bc:	f000 fb40 	bl	800c840 <__mcmp>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	dc91      	bgt.n	800c0e8 <_dtoa_r+0xaa8>
 800c1c4:	d102      	bne.n	800c1cc <_dtoa_r+0xb8c>
 800c1c6:	f01a 0f01 	tst.w	sl, #1
 800c1ca:	d18d      	bne.n	800c0e8 <_dtoa_r+0xaa8>
 800c1cc:	462b      	mov	r3, r5
 800c1ce:	461d      	mov	r5, r3
 800c1d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1d4:	2a30      	cmp	r2, #48	; 0x30
 800c1d6:	d0fa      	beq.n	800c1ce <_dtoa_r+0xb8e>
 800c1d8:	e6d7      	b.n	800bf8a <_dtoa_r+0x94a>
 800c1da:	9a01      	ldr	r2, [sp, #4]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d184      	bne.n	800c0ea <_dtoa_r+0xaaa>
 800c1e0:	9b00      	ldr	r3, [sp, #0]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	9300      	str	r3, [sp, #0]
 800c1e6:	2331      	movs	r3, #49	; 0x31
 800c1e8:	7013      	strb	r3, [r2, #0]
 800c1ea:	e6ce      	b.n	800bf8a <_dtoa_r+0x94a>
 800c1ec:	4b09      	ldr	r3, [pc, #36]	; (800c214 <_dtoa_r+0xbd4>)
 800c1ee:	f7ff ba95 	b.w	800b71c <_dtoa_r+0xdc>
 800c1f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f47f aa6e 	bne.w	800b6d6 <_dtoa_r+0x96>
 800c1fa:	4b07      	ldr	r3, [pc, #28]	; (800c218 <_dtoa_r+0xbd8>)
 800c1fc:	f7ff ba8e 	b.w	800b71c <_dtoa_r+0xdc>
 800c200:	9b02      	ldr	r3, [sp, #8]
 800c202:	2b00      	cmp	r3, #0
 800c204:	dcae      	bgt.n	800c164 <_dtoa_r+0xb24>
 800c206:	9b06      	ldr	r3, [sp, #24]
 800c208:	2b02      	cmp	r3, #2
 800c20a:	f73f aea8 	bgt.w	800bf5e <_dtoa_r+0x91e>
 800c20e:	e7a9      	b.n	800c164 <_dtoa_r+0xb24>
 800c210:	0800d8b7 	.word	0x0800d8b7
 800c214:	0800d814 	.word	0x0800d814
 800c218:	0800d838 	.word	0x0800d838

0800c21c <_localeconv_r>:
 800c21c:	4800      	ldr	r0, [pc, #0]	; (800c220 <_localeconv_r+0x4>)
 800c21e:	4770      	bx	lr
 800c220:	20000628 	.word	0x20000628

0800c224 <_lseek_r>:
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	4d07      	ldr	r5, [pc, #28]	; (800c244 <_lseek_r+0x20>)
 800c228:	4604      	mov	r4, r0
 800c22a:	4608      	mov	r0, r1
 800c22c:	4611      	mov	r1, r2
 800c22e:	2200      	movs	r2, #0
 800c230:	602a      	str	r2, [r5, #0]
 800c232:	461a      	mov	r2, r3
 800c234:	f7f8 ff4c 	bl	80050d0 <_lseek>
 800c238:	1c43      	adds	r3, r0, #1
 800c23a:	d102      	bne.n	800c242 <_lseek_r+0x1e>
 800c23c:	682b      	ldr	r3, [r5, #0]
 800c23e:	b103      	cbz	r3, 800c242 <_lseek_r+0x1e>
 800c240:	6023      	str	r3, [r4, #0]
 800c242:	bd38      	pop	{r3, r4, r5, pc}
 800c244:	20001cd4 	.word	0x20001cd4

0800c248 <__swhatbuf_r>:
 800c248:	b570      	push	{r4, r5, r6, lr}
 800c24a:	460e      	mov	r6, r1
 800c24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c250:	2900      	cmp	r1, #0
 800c252:	b096      	sub	sp, #88	; 0x58
 800c254:	4614      	mov	r4, r2
 800c256:	461d      	mov	r5, r3
 800c258:	da08      	bge.n	800c26c <__swhatbuf_r+0x24>
 800c25a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c25e:	2200      	movs	r2, #0
 800c260:	602a      	str	r2, [r5, #0]
 800c262:	061a      	lsls	r2, r3, #24
 800c264:	d410      	bmi.n	800c288 <__swhatbuf_r+0x40>
 800c266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c26a:	e00e      	b.n	800c28a <__swhatbuf_r+0x42>
 800c26c:	466a      	mov	r2, sp
 800c26e:	f000 fd9b 	bl	800cda8 <_fstat_r>
 800c272:	2800      	cmp	r0, #0
 800c274:	dbf1      	blt.n	800c25a <__swhatbuf_r+0x12>
 800c276:	9a01      	ldr	r2, [sp, #4]
 800c278:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c27c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c280:	425a      	negs	r2, r3
 800c282:	415a      	adcs	r2, r3
 800c284:	602a      	str	r2, [r5, #0]
 800c286:	e7ee      	b.n	800c266 <__swhatbuf_r+0x1e>
 800c288:	2340      	movs	r3, #64	; 0x40
 800c28a:	2000      	movs	r0, #0
 800c28c:	6023      	str	r3, [r4, #0]
 800c28e:	b016      	add	sp, #88	; 0x58
 800c290:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c294 <__smakebuf_r>:
 800c294:	898b      	ldrh	r3, [r1, #12]
 800c296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c298:	079d      	lsls	r5, r3, #30
 800c29a:	4606      	mov	r6, r0
 800c29c:	460c      	mov	r4, r1
 800c29e:	d507      	bpl.n	800c2b0 <__smakebuf_r+0x1c>
 800c2a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	6123      	str	r3, [r4, #16]
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	6163      	str	r3, [r4, #20]
 800c2ac:	b002      	add	sp, #8
 800c2ae:	bd70      	pop	{r4, r5, r6, pc}
 800c2b0:	ab01      	add	r3, sp, #4
 800c2b2:	466a      	mov	r2, sp
 800c2b4:	f7ff ffc8 	bl	800c248 <__swhatbuf_r>
 800c2b8:	9900      	ldr	r1, [sp, #0]
 800c2ba:	4605      	mov	r5, r0
 800c2bc:	4630      	mov	r0, r6
 800c2be:	f7fe fa71 	bl	800a7a4 <_malloc_r>
 800c2c2:	b948      	cbnz	r0, 800c2d8 <__smakebuf_r+0x44>
 800c2c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2c8:	059a      	lsls	r2, r3, #22
 800c2ca:	d4ef      	bmi.n	800c2ac <__smakebuf_r+0x18>
 800c2cc:	f023 0303 	bic.w	r3, r3, #3
 800c2d0:	f043 0302 	orr.w	r3, r3, #2
 800c2d4:	81a3      	strh	r3, [r4, #12]
 800c2d6:	e7e3      	b.n	800c2a0 <__smakebuf_r+0xc>
 800c2d8:	4b0d      	ldr	r3, [pc, #52]	; (800c310 <__smakebuf_r+0x7c>)
 800c2da:	62b3      	str	r3, [r6, #40]	; 0x28
 800c2dc:	89a3      	ldrh	r3, [r4, #12]
 800c2de:	6020      	str	r0, [r4, #0]
 800c2e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2e4:	81a3      	strh	r3, [r4, #12]
 800c2e6:	9b00      	ldr	r3, [sp, #0]
 800c2e8:	6163      	str	r3, [r4, #20]
 800c2ea:	9b01      	ldr	r3, [sp, #4]
 800c2ec:	6120      	str	r0, [r4, #16]
 800c2ee:	b15b      	cbz	r3, 800c308 <__smakebuf_r+0x74>
 800c2f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	f000 fd69 	bl	800cdcc <_isatty_r>
 800c2fa:	b128      	cbz	r0, 800c308 <__smakebuf_r+0x74>
 800c2fc:	89a3      	ldrh	r3, [r4, #12]
 800c2fe:	f023 0303 	bic.w	r3, r3, #3
 800c302:	f043 0301 	orr.w	r3, r3, #1
 800c306:	81a3      	strh	r3, [r4, #12]
 800c308:	89a0      	ldrh	r0, [r4, #12]
 800c30a:	4305      	orrs	r5, r0
 800c30c:	81a5      	strh	r5, [r4, #12]
 800c30e:	e7cd      	b.n	800c2ac <__smakebuf_r+0x18>
 800c310:	0800a4ad 	.word	0x0800a4ad

0800c314 <malloc>:
 800c314:	4b02      	ldr	r3, [pc, #8]	; (800c320 <malloc+0xc>)
 800c316:	4601      	mov	r1, r0
 800c318:	6818      	ldr	r0, [r3, #0]
 800c31a:	f7fe ba43 	b.w	800a7a4 <_malloc_r>
 800c31e:	bf00      	nop
 800c320:	200004d4 	.word	0x200004d4

0800c324 <__malloc_lock>:
 800c324:	4801      	ldr	r0, [pc, #4]	; (800c32c <__malloc_lock+0x8>)
 800c326:	f7fe b9b8 	b.w	800a69a <__retarget_lock_acquire_recursive>
 800c32a:	bf00      	nop
 800c32c:	20001cc8 	.word	0x20001cc8

0800c330 <__malloc_unlock>:
 800c330:	4801      	ldr	r0, [pc, #4]	; (800c338 <__malloc_unlock+0x8>)
 800c332:	f7fe b9b3 	b.w	800a69c <__retarget_lock_release_recursive>
 800c336:	bf00      	nop
 800c338:	20001cc8 	.word	0x20001cc8

0800c33c <_Balloc>:
 800c33c:	b570      	push	{r4, r5, r6, lr}
 800c33e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c340:	4604      	mov	r4, r0
 800c342:	460d      	mov	r5, r1
 800c344:	b976      	cbnz	r6, 800c364 <_Balloc+0x28>
 800c346:	2010      	movs	r0, #16
 800c348:	f7ff ffe4 	bl	800c314 <malloc>
 800c34c:	4602      	mov	r2, r0
 800c34e:	6260      	str	r0, [r4, #36]	; 0x24
 800c350:	b920      	cbnz	r0, 800c35c <_Balloc+0x20>
 800c352:	4b18      	ldr	r3, [pc, #96]	; (800c3b4 <_Balloc+0x78>)
 800c354:	4818      	ldr	r0, [pc, #96]	; (800c3b8 <_Balloc+0x7c>)
 800c356:	2166      	movs	r1, #102	; 0x66
 800c358:	f000 fcf6 	bl	800cd48 <__assert_func>
 800c35c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c360:	6006      	str	r6, [r0, #0]
 800c362:	60c6      	str	r6, [r0, #12]
 800c364:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c366:	68f3      	ldr	r3, [r6, #12]
 800c368:	b183      	cbz	r3, 800c38c <_Balloc+0x50>
 800c36a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c372:	b9b8      	cbnz	r0, 800c3a4 <_Balloc+0x68>
 800c374:	2101      	movs	r1, #1
 800c376:	fa01 f605 	lsl.w	r6, r1, r5
 800c37a:	1d72      	adds	r2, r6, #5
 800c37c:	0092      	lsls	r2, r2, #2
 800c37e:	4620      	mov	r0, r4
 800c380:	f000 fb60 	bl	800ca44 <_calloc_r>
 800c384:	b160      	cbz	r0, 800c3a0 <_Balloc+0x64>
 800c386:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c38a:	e00e      	b.n	800c3aa <_Balloc+0x6e>
 800c38c:	2221      	movs	r2, #33	; 0x21
 800c38e:	2104      	movs	r1, #4
 800c390:	4620      	mov	r0, r4
 800c392:	f000 fb57 	bl	800ca44 <_calloc_r>
 800c396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c398:	60f0      	str	r0, [r6, #12]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d1e4      	bne.n	800c36a <_Balloc+0x2e>
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	bd70      	pop	{r4, r5, r6, pc}
 800c3a4:	6802      	ldr	r2, [r0, #0]
 800c3a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3b0:	e7f7      	b.n	800c3a2 <_Balloc+0x66>
 800c3b2:	bf00      	nop
 800c3b4:	0800d845 	.word	0x0800d845
 800c3b8:	0800d8c8 	.word	0x0800d8c8

0800c3bc <_Bfree>:
 800c3bc:	b570      	push	{r4, r5, r6, lr}
 800c3be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c3c0:	4605      	mov	r5, r0
 800c3c2:	460c      	mov	r4, r1
 800c3c4:	b976      	cbnz	r6, 800c3e4 <_Bfree+0x28>
 800c3c6:	2010      	movs	r0, #16
 800c3c8:	f7ff ffa4 	bl	800c314 <malloc>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	6268      	str	r0, [r5, #36]	; 0x24
 800c3d0:	b920      	cbnz	r0, 800c3dc <_Bfree+0x20>
 800c3d2:	4b09      	ldr	r3, [pc, #36]	; (800c3f8 <_Bfree+0x3c>)
 800c3d4:	4809      	ldr	r0, [pc, #36]	; (800c3fc <_Bfree+0x40>)
 800c3d6:	218a      	movs	r1, #138	; 0x8a
 800c3d8:	f000 fcb6 	bl	800cd48 <__assert_func>
 800c3dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3e0:	6006      	str	r6, [r0, #0]
 800c3e2:	60c6      	str	r6, [r0, #12]
 800c3e4:	b13c      	cbz	r4, 800c3f6 <_Bfree+0x3a>
 800c3e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c3e8:	6862      	ldr	r2, [r4, #4]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3f0:	6021      	str	r1, [r4, #0]
 800c3f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c3f6:	bd70      	pop	{r4, r5, r6, pc}
 800c3f8:	0800d845 	.word	0x0800d845
 800c3fc:	0800d8c8 	.word	0x0800d8c8

0800c400 <__multadd>:
 800c400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c404:	690d      	ldr	r5, [r1, #16]
 800c406:	4607      	mov	r7, r0
 800c408:	460c      	mov	r4, r1
 800c40a:	461e      	mov	r6, r3
 800c40c:	f101 0c14 	add.w	ip, r1, #20
 800c410:	2000      	movs	r0, #0
 800c412:	f8dc 3000 	ldr.w	r3, [ip]
 800c416:	b299      	uxth	r1, r3
 800c418:	fb02 6101 	mla	r1, r2, r1, r6
 800c41c:	0c1e      	lsrs	r6, r3, #16
 800c41e:	0c0b      	lsrs	r3, r1, #16
 800c420:	fb02 3306 	mla	r3, r2, r6, r3
 800c424:	b289      	uxth	r1, r1
 800c426:	3001      	adds	r0, #1
 800c428:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c42c:	4285      	cmp	r5, r0
 800c42e:	f84c 1b04 	str.w	r1, [ip], #4
 800c432:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c436:	dcec      	bgt.n	800c412 <__multadd+0x12>
 800c438:	b30e      	cbz	r6, 800c47e <__multadd+0x7e>
 800c43a:	68a3      	ldr	r3, [r4, #8]
 800c43c:	42ab      	cmp	r3, r5
 800c43e:	dc19      	bgt.n	800c474 <__multadd+0x74>
 800c440:	6861      	ldr	r1, [r4, #4]
 800c442:	4638      	mov	r0, r7
 800c444:	3101      	adds	r1, #1
 800c446:	f7ff ff79 	bl	800c33c <_Balloc>
 800c44a:	4680      	mov	r8, r0
 800c44c:	b928      	cbnz	r0, 800c45a <__multadd+0x5a>
 800c44e:	4602      	mov	r2, r0
 800c450:	4b0c      	ldr	r3, [pc, #48]	; (800c484 <__multadd+0x84>)
 800c452:	480d      	ldr	r0, [pc, #52]	; (800c488 <__multadd+0x88>)
 800c454:	21b5      	movs	r1, #181	; 0xb5
 800c456:	f000 fc77 	bl	800cd48 <__assert_func>
 800c45a:	6922      	ldr	r2, [r4, #16]
 800c45c:	3202      	adds	r2, #2
 800c45e:	f104 010c 	add.w	r1, r4, #12
 800c462:	0092      	lsls	r2, r2, #2
 800c464:	300c      	adds	r0, #12
 800c466:	f7fe f91a 	bl	800a69e <memcpy>
 800c46a:	4621      	mov	r1, r4
 800c46c:	4638      	mov	r0, r7
 800c46e:	f7ff ffa5 	bl	800c3bc <_Bfree>
 800c472:	4644      	mov	r4, r8
 800c474:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c478:	3501      	adds	r5, #1
 800c47a:	615e      	str	r6, [r3, #20]
 800c47c:	6125      	str	r5, [r4, #16]
 800c47e:	4620      	mov	r0, r4
 800c480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c484:	0800d8b7 	.word	0x0800d8b7
 800c488:	0800d8c8 	.word	0x0800d8c8

0800c48c <__hi0bits>:
 800c48c:	0c03      	lsrs	r3, r0, #16
 800c48e:	041b      	lsls	r3, r3, #16
 800c490:	b9d3      	cbnz	r3, 800c4c8 <__hi0bits+0x3c>
 800c492:	0400      	lsls	r0, r0, #16
 800c494:	2310      	movs	r3, #16
 800c496:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c49a:	bf04      	itt	eq
 800c49c:	0200      	lsleq	r0, r0, #8
 800c49e:	3308      	addeq	r3, #8
 800c4a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c4a4:	bf04      	itt	eq
 800c4a6:	0100      	lsleq	r0, r0, #4
 800c4a8:	3304      	addeq	r3, #4
 800c4aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c4ae:	bf04      	itt	eq
 800c4b0:	0080      	lsleq	r0, r0, #2
 800c4b2:	3302      	addeq	r3, #2
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	db05      	blt.n	800c4c4 <__hi0bits+0x38>
 800c4b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c4bc:	f103 0301 	add.w	r3, r3, #1
 800c4c0:	bf08      	it	eq
 800c4c2:	2320      	moveq	r3, #32
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	4770      	bx	lr
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	e7e4      	b.n	800c496 <__hi0bits+0xa>

0800c4cc <__lo0bits>:
 800c4cc:	6803      	ldr	r3, [r0, #0]
 800c4ce:	f013 0207 	ands.w	r2, r3, #7
 800c4d2:	4601      	mov	r1, r0
 800c4d4:	d00b      	beq.n	800c4ee <__lo0bits+0x22>
 800c4d6:	07da      	lsls	r2, r3, #31
 800c4d8:	d423      	bmi.n	800c522 <__lo0bits+0x56>
 800c4da:	0798      	lsls	r0, r3, #30
 800c4dc:	bf49      	itett	mi
 800c4de:	085b      	lsrmi	r3, r3, #1
 800c4e0:	089b      	lsrpl	r3, r3, #2
 800c4e2:	2001      	movmi	r0, #1
 800c4e4:	600b      	strmi	r3, [r1, #0]
 800c4e6:	bf5c      	itt	pl
 800c4e8:	600b      	strpl	r3, [r1, #0]
 800c4ea:	2002      	movpl	r0, #2
 800c4ec:	4770      	bx	lr
 800c4ee:	b298      	uxth	r0, r3
 800c4f0:	b9a8      	cbnz	r0, 800c51e <__lo0bits+0x52>
 800c4f2:	0c1b      	lsrs	r3, r3, #16
 800c4f4:	2010      	movs	r0, #16
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	b90a      	cbnz	r2, 800c4fe <__lo0bits+0x32>
 800c4fa:	3008      	adds	r0, #8
 800c4fc:	0a1b      	lsrs	r3, r3, #8
 800c4fe:	071a      	lsls	r2, r3, #28
 800c500:	bf04      	itt	eq
 800c502:	091b      	lsreq	r3, r3, #4
 800c504:	3004      	addeq	r0, #4
 800c506:	079a      	lsls	r2, r3, #30
 800c508:	bf04      	itt	eq
 800c50a:	089b      	lsreq	r3, r3, #2
 800c50c:	3002      	addeq	r0, #2
 800c50e:	07da      	lsls	r2, r3, #31
 800c510:	d403      	bmi.n	800c51a <__lo0bits+0x4e>
 800c512:	085b      	lsrs	r3, r3, #1
 800c514:	f100 0001 	add.w	r0, r0, #1
 800c518:	d005      	beq.n	800c526 <__lo0bits+0x5a>
 800c51a:	600b      	str	r3, [r1, #0]
 800c51c:	4770      	bx	lr
 800c51e:	4610      	mov	r0, r2
 800c520:	e7e9      	b.n	800c4f6 <__lo0bits+0x2a>
 800c522:	2000      	movs	r0, #0
 800c524:	4770      	bx	lr
 800c526:	2020      	movs	r0, #32
 800c528:	4770      	bx	lr
	...

0800c52c <__i2b>:
 800c52c:	b510      	push	{r4, lr}
 800c52e:	460c      	mov	r4, r1
 800c530:	2101      	movs	r1, #1
 800c532:	f7ff ff03 	bl	800c33c <_Balloc>
 800c536:	4602      	mov	r2, r0
 800c538:	b928      	cbnz	r0, 800c546 <__i2b+0x1a>
 800c53a:	4b05      	ldr	r3, [pc, #20]	; (800c550 <__i2b+0x24>)
 800c53c:	4805      	ldr	r0, [pc, #20]	; (800c554 <__i2b+0x28>)
 800c53e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c542:	f000 fc01 	bl	800cd48 <__assert_func>
 800c546:	2301      	movs	r3, #1
 800c548:	6144      	str	r4, [r0, #20]
 800c54a:	6103      	str	r3, [r0, #16]
 800c54c:	bd10      	pop	{r4, pc}
 800c54e:	bf00      	nop
 800c550:	0800d8b7 	.word	0x0800d8b7
 800c554:	0800d8c8 	.word	0x0800d8c8

0800c558 <__multiply>:
 800c558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c55c:	4691      	mov	r9, r2
 800c55e:	690a      	ldr	r2, [r1, #16]
 800c560:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c564:	429a      	cmp	r2, r3
 800c566:	bfb8      	it	lt
 800c568:	460b      	movlt	r3, r1
 800c56a:	460c      	mov	r4, r1
 800c56c:	bfbc      	itt	lt
 800c56e:	464c      	movlt	r4, r9
 800c570:	4699      	movlt	r9, r3
 800c572:	6927      	ldr	r7, [r4, #16]
 800c574:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c578:	68a3      	ldr	r3, [r4, #8]
 800c57a:	6861      	ldr	r1, [r4, #4]
 800c57c:	eb07 060a 	add.w	r6, r7, sl
 800c580:	42b3      	cmp	r3, r6
 800c582:	b085      	sub	sp, #20
 800c584:	bfb8      	it	lt
 800c586:	3101      	addlt	r1, #1
 800c588:	f7ff fed8 	bl	800c33c <_Balloc>
 800c58c:	b930      	cbnz	r0, 800c59c <__multiply+0x44>
 800c58e:	4602      	mov	r2, r0
 800c590:	4b44      	ldr	r3, [pc, #272]	; (800c6a4 <__multiply+0x14c>)
 800c592:	4845      	ldr	r0, [pc, #276]	; (800c6a8 <__multiply+0x150>)
 800c594:	f240 115d 	movw	r1, #349	; 0x15d
 800c598:	f000 fbd6 	bl	800cd48 <__assert_func>
 800c59c:	f100 0514 	add.w	r5, r0, #20
 800c5a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c5a4:	462b      	mov	r3, r5
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	4543      	cmp	r3, r8
 800c5aa:	d321      	bcc.n	800c5f0 <__multiply+0x98>
 800c5ac:	f104 0314 	add.w	r3, r4, #20
 800c5b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c5b4:	f109 0314 	add.w	r3, r9, #20
 800c5b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c5bc:	9202      	str	r2, [sp, #8]
 800c5be:	1b3a      	subs	r2, r7, r4
 800c5c0:	3a15      	subs	r2, #21
 800c5c2:	f022 0203 	bic.w	r2, r2, #3
 800c5c6:	3204      	adds	r2, #4
 800c5c8:	f104 0115 	add.w	r1, r4, #21
 800c5cc:	428f      	cmp	r7, r1
 800c5ce:	bf38      	it	cc
 800c5d0:	2204      	movcc	r2, #4
 800c5d2:	9201      	str	r2, [sp, #4]
 800c5d4:	9a02      	ldr	r2, [sp, #8]
 800c5d6:	9303      	str	r3, [sp, #12]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d80c      	bhi.n	800c5f6 <__multiply+0x9e>
 800c5dc:	2e00      	cmp	r6, #0
 800c5de:	dd03      	ble.n	800c5e8 <__multiply+0x90>
 800c5e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d05a      	beq.n	800c69e <__multiply+0x146>
 800c5e8:	6106      	str	r6, [r0, #16]
 800c5ea:	b005      	add	sp, #20
 800c5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f0:	f843 2b04 	str.w	r2, [r3], #4
 800c5f4:	e7d8      	b.n	800c5a8 <__multiply+0x50>
 800c5f6:	f8b3 a000 	ldrh.w	sl, [r3]
 800c5fa:	f1ba 0f00 	cmp.w	sl, #0
 800c5fe:	d024      	beq.n	800c64a <__multiply+0xf2>
 800c600:	f104 0e14 	add.w	lr, r4, #20
 800c604:	46a9      	mov	r9, r5
 800c606:	f04f 0c00 	mov.w	ip, #0
 800c60a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c60e:	f8d9 1000 	ldr.w	r1, [r9]
 800c612:	fa1f fb82 	uxth.w	fp, r2
 800c616:	b289      	uxth	r1, r1
 800c618:	fb0a 110b 	mla	r1, sl, fp, r1
 800c61c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c620:	f8d9 2000 	ldr.w	r2, [r9]
 800c624:	4461      	add	r1, ip
 800c626:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c62a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c62e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c632:	b289      	uxth	r1, r1
 800c634:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c638:	4577      	cmp	r7, lr
 800c63a:	f849 1b04 	str.w	r1, [r9], #4
 800c63e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c642:	d8e2      	bhi.n	800c60a <__multiply+0xb2>
 800c644:	9a01      	ldr	r2, [sp, #4]
 800c646:	f845 c002 	str.w	ip, [r5, r2]
 800c64a:	9a03      	ldr	r2, [sp, #12]
 800c64c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c650:	3304      	adds	r3, #4
 800c652:	f1b9 0f00 	cmp.w	r9, #0
 800c656:	d020      	beq.n	800c69a <__multiply+0x142>
 800c658:	6829      	ldr	r1, [r5, #0]
 800c65a:	f104 0c14 	add.w	ip, r4, #20
 800c65e:	46ae      	mov	lr, r5
 800c660:	f04f 0a00 	mov.w	sl, #0
 800c664:	f8bc b000 	ldrh.w	fp, [ip]
 800c668:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c66c:	fb09 220b 	mla	r2, r9, fp, r2
 800c670:	4492      	add	sl, r2
 800c672:	b289      	uxth	r1, r1
 800c674:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c678:	f84e 1b04 	str.w	r1, [lr], #4
 800c67c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c680:	f8be 1000 	ldrh.w	r1, [lr]
 800c684:	0c12      	lsrs	r2, r2, #16
 800c686:	fb09 1102 	mla	r1, r9, r2, r1
 800c68a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c68e:	4567      	cmp	r7, ip
 800c690:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c694:	d8e6      	bhi.n	800c664 <__multiply+0x10c>
 800c696:	9a01      	ldr	r2, [sp, #4]
 800c698:	50a9      	str	r1, [r5, r2]
 800c69a:	3504      	adds	r5, #4
 800c69c:	e79a      	b.n	800c5d4 <__multiply+0x7c>
 800c69e:	3e01      	subs	r6, #1
 800c6a0:	e79c      	b.n	800c5dc <__multiply+0x84>
 800c6a2:	bf00      	nop
 800c6a4:	0800d8b7 	.word	0x0800d8b7
 800c6a8:	0800d8c8 	.word	0x0800d8c8

0800c6ac <__pow5mult>:
 800c6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6b0:	4615      	mov	r5, r2
 800c6b2:	f012 0203 	ands.w	r2, r2, #3
 800c6b6:	4606      	mov	r6, r0
 800c6b8:	460f      	mov	r7, r1
 800c6ba:	d007      	beq.n	800c6cc <__pow5mult+0x20>
 800c6bc:	4c25      	ldr	r4, [pc, #148]	; (800c754 <__pow5mult+0xa8>)
 800c6be:	3a01      	subs	r2, #1
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c6c6:	f7ff fe9b 	bl	800c400 <__multadd>
 800c6ca:	4607      	mov	r7, r0
 800c6cc:	10ad      	asrs	r5, r5, #2
 800c6ce:	d03d      	beq.n	800c74c <__pow5mult+0xa0>
 800c6d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c6d2:	b97c      	cbnz	r4, 800c6f4 <__pow5mult+0x48>
 800c6d4:	2010      	movs	r0, #16
 800c6d6:	f7ff fe1d 	bl	800c314 <malloc>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	6270      	str	r0, [r6, #36]	; 0x24
 800c6de:	b928      	cbnz	r0, 800c6ec <__pow5mult+0x40>
 800c6e0:	4b1d      	ldr	r3, [pc, #116]	; (800c758 <__pow5mult+0xac>)
 800c6e2:	481e      	ldr	r0, [pc, #120]	; (800c75c <__pow5mult+0xb0>)
 800c6e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c6e8:	f000 fb2e 	bl	800cd48 <__assert_func>
 800c6ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6f0:	6004      	str	r4, [r0, #0]
 800c6f2:	60c4      	str	r4, [r0, #12]
 800c6f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c6f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c6fc:	b94c      	cbnz	r4, 800c712 <__pow5mult+0x66>
 800c6fe:	f240 2171 	movw	r1, #625	; 0x271
 800c702:	4630      	mov	r0, r6
 800c704:	f7ff ff12 	bl	800c52c <__i2b>
 800c708:	2300      	movs	r3, #0
 800c70a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c70e:	4604      	mov	r4, r0
 800c710:	6003      	str	r3, [r0, #0]
 800c712:	f04f 0900 	mov.w	r9, #0
 800c716:	07eb      	lsls	r3, r5, #31
 800c718:	d50a      	bpl.n	800c730 <__pow5mult+0x84>
 800c71a:	4639      	mov	r1, r7
 800c71c:	4622      	mov	r2, r4
 800c71e:	4630      	mov	r0, r6
 800c720:	f7ff ff1a 	bl	800c558 <__multiply>
 800c724:	4639      	mov	r1, r7
 800c726:	4680      	mov	r8, r0
 800c728:	4630      	mov	r0, r6
 800c72a:	f7ff fe47 	bl	800c3bc <_Bfree>
 800c72e:	4647      	mov	r7, r8
 800c730:	106d      	asrs	r5, r5, #1
 800c732:	d00b      	beq.n	800c74c <__pow5mult+0xa0>
 800c734:	6820      	ldr	r0, [r4, #0]
 800c736:	b938      	cbnz	r0, 800c748 <__pow5mult+0x9c>
 800c738:	4622      	mov	r2, r4
 800c73a:	4621      	mov	r1, r4
 800c73c:	4630      	mov	r0, r6
 800c73e:	f7ff ff0b 	bl	800c558 <__multiply>
 800c742:	6020      	str	r0, [r4, #0]
 800c744:	f8c0 9000 	str.w	r9, [r0]
 800c748:	4604      	mov	r4, r0
 800c74a:	e7e4      	b.n	800c716 <__pow5mult+0x6a>
 800c74c:	4638      	mov	r0, r7
 800c74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c752:	bf00      	nop
 800c754:	0800da18 	.word	0x0800da18
 800c758:	0800d845 	.word	0x0800d845
 800c75c:	0800d8c8 	.word	0x0800d8c8

0800c760 <__lshift>:
 800c760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c764:	460c      	mov	r4, r1
 800c766:	6849      	ldr	r1, [r1, #4]
 800c768:	6923      	ldr	r3, [r4, #16]
 800c76a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c76e:	68a3      	ldr	r3, [r4, #8]
 800c770:	4607      	mov	r7, r0
 800c772:	4691      	mov	r9, r2
 800c774:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c778:	f108 0601 	add.w	r6, r8, #1
 800c77c:	42b3      	cmp	r3, r6
 800c77e:	db0b      	blt.n	800c798 <__lshift+0x38>
 800c780:	4638      	mov	r0, r7
 800c782:	f7ff fddb 	bl	800c33c <_Balloc>
 800c786:	4605      	mov	r5, r0
 800c788:	b948      	cbnz	r0, 800c79e <__lshift+0x3e>
 800c78a:	4602      	mov	r2, r0
 800c78c:	4b2a      	ldr	r3, [pc, #168]	; (800c838 <__lshift+0xd8>)
 800c78e:	482b      	ldr	r0, [pc, #172]	; (800c83c <__lshift+0xdc>)
 800c790:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c794:	f000 fad8 	bl	800cd48 <__assert_func>
 800c798:	3101      	adds	r1, #1
 800c79a:	005b      	lsls	r3, r3, #1
 800c79c:	e7ee      	b.n	800c77c <__lshift+0x1c>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	f100 0114 	add.w	r1, r0, #20
 800c7a4:	f100 0210 	add.w	r2, r0, #16
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	4553      	cmp	r3, sl
 800c7ac:	db37      	blt.n	800c81e <__lshift+0xbe>
 800c7ae:	6920      	ldr	r0, [r4, #16]
 800c7b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7b4:	f104 0314 	add.w	r3, r4, #20
 800c7b8:	f019 091f 	ands.w	r9, r9, #31
 800c7bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c7c4:	d02f      	beq.n	800c826 <__lshift+0xc6>
 800c7c6:	f1c9 0e20 	rsb	lr, r9, #32
 800c7ca:	468a      	mov	sl, r1
 800c7cc:	f04f 0c00 	mov.w	ip, #0
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	fa02 f209 	lsl.w	r2, r2, r9
 800c7d6:	ea42 020c 	orr.w	r2, r2, ip
 800c7da:	f84a 2b04 	str.w	r2, [sl], #4
 800c7de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7e2:	4298      	cmp	r0, r3
 800c7e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c7e8:	d8f2      	bhi.n	800c7d0 <__lshift+0x70>
 800c7ea:	1b03      	subs	r3, r0, r4
 800c7ec:	3b15      	subs	r3, #21
 800c7ee:	f023 0303 	bic.w	r3, r3, #3
 800c7f2:	3304      	adds	r3, #4
 800c7f4:	f104 0215 	add.w	r2, r4, #21
 800c7f8:	4290      	cmp	r0, r2
 800c7fa:	bf38      	it	cc
 800c7fc:	2304      	movcc	r3, #4
 800c7fe:	f841 c003 	str.w	ip, [r1, r3]
 800c802:	f1bc 0f00 	cmp.w	ip, #0
 800c806:	d001      	beq.n	800c80c <__lshift+0xac>
 800c808:	f108 0602 	add.w	r6, r8, #2
 800c80c:	3e01      	subs	r6, #1
 800c80e:	4638      	mov	r0, r7
 800c810:	612e      	str	r6, [r5, #16]
 800c812:	4621      	mov	r1, r4
 800c814:	f7ff fdd2 	bl	800c3bc <_Bfree>
 800c818:	4628      	mov	r0, r5
 800c81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c81e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c822:	3301      	adds	r3, #1
 800c824:	e7c1      	b.n	800c7aa <__lshift+0x4a>
 800c826:	3904      	subs	r1, #4
 800c828:	f853 2b04 	ldr.w	r2, [r3], #4
 800c82c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c830:	4298      	cmp	r0, r3
 800c832:	d8f9      	bhi.n	800c828 <__lshift+0xc8>
 800c834:	e7ea      	b.n	800c80c <__lshift+0xac>
 800c836:	bf00      	nop
 800c838:	0800d8b7 	.word	0x0800d8b7
 800c83c:	0800d8c8 	.word	0x0800d8c8

0800c840 <__mcmp>:
 800c840:	b530      	push	{r4, r5, lr}
 800c842:	6902      	ldr	r2, [r0, #16]
 800c844:	690c      	ldr	r4, [r1, #16]
 800c846:	1b12      	subs	r2, r2, r4
 800c848:	d10e      	bne.n	800c868 <__mcmp+0x28>
 800c84a:	f100 0314 	add.w	r3, r0, #20
 800c84e:	3114      	adds	r1, #20
 800c850:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c854:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c858:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c85c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c860:	42a5      	cmp	r5, r4
 800c862:	d003      	beq.n	800c86c <__mcmp+0x2c>
 800c864:	d305      	bcc.n	800c872 <__mcmp+0x32>
 800c866:	2201      	movs	r2, #1
 800c868:	4610      	mov	r0, r2
 800c86a:	bd30      	pop	{r4, r5, pc}
 800c86c:	4283      	cmp	r3, r0
 800c86e:	d3f3      	bcc.n	800c858 <__mcmp+0x18>
 800c870:	e7fa      	b.n	800c868 <__mcmp+0x28>
 800c872:	f04f 32ff 	mov.w	r2, #4294967295
 800c876:	e7f7      	b.n	800c868 <__mcmp+0x28>

0800c878 <__mdiff>:
 800c878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c87c:	460c      	mov	r4, r1
 800c87e:	4606      	mov	r6, r0
 800c880:	4611      	mov	r1, r2
 800c882:	4620      	mov	r0, r4
 800c884:	4690      	mov	r8, r2
 800c886:	f7ff ffdb 	bl	800c840 <__mcmp>
 800c88a:	1e05      	subs	r5, r0, #0
 800c88c:	d110      	bne.n	800c8b0 <__mdiff+0x38>
 800c88e:	4629      	mov	r1, r5
 800c890:	4630      	mov	r0, r6
 800c892:	f7ff fd53 	bl	800c33c <_Balloc>
 800c896:	b930      	cbnz	r0, 800c8a6 <__mdiff+0x2e>
 800c898:	4b3a      	ldr	r3, [pc, #232]	; (800c984 <__mdiff+0x10c>)
 800c89a:	4602      	mov	r2, r0
 800c89c:	f240 2132 	movw	r1, #562	; 0x232
 800c8a0:	4839      	ldr	r0, [pc, #228]	; (800c988 <__mdiff+0x110>)
 800c8a2:	f000 fa51 	bl	800cd48 <__assert_func>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c8ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b0:	bfa4      	itt	ge
 800c8b2:	4643      	movge	r3, r8
 800c8b4:	46a0      	movge	r8, r4
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c8bc:	bfa6      	itte	ge
 800c8be:	461c      	movge	r4, r3
 800c8c0:	2500      	movge	r5, #0
 800c8c2:	2501      	movlt	r5, #1
 800c8c4:	f7ff fd3a 	bl	800c33c <_Balloc>
 800c8c8:	b920      	cbnz	r0, 800c8d4 <__mdiff+0x5c>
 800c8ca:	4b2e      	ldr	r3, [pc, #184]	; (800c984 <__mdiff+0x10c>)
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c8d2:	e7e5      	b.n	800c8a0 <__mdiff+0x28>
 800c8d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c8d8:	6926      	ldr	r6, [r4, #16]
 800c8da:	60c5      	str	r5, [r0, #12]
 800c8dc:	f104 0914 	add.w	r9, r4, #20
 800c8e0:	f108 0514 	add.w	r5, r8, #20
 800c8e4:	f100 0e14 	add.w	lr, r0, #20
 800c8e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c8ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c8f0:	f108 0210 	add.w	r2, r8, #16
 800c8f4:	46f2      	mov	sl, lr
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c8fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c900:	fa1f f883 	uxth.w	r8, r3
 800c904:	fa11 f18b 	uxtah	r1, r1, fp
 800c908:	0c1b      	lsrs	r3, r3, #16
 800c90a:	eba1 0808 	sub.w	r8, r1, r8
 800c90e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c912:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c916:	fa1f f888 	uxth.w	r8, r8
 800c91a:	1419      	asrs	r1, r3, #16
 800c91c:	454e      	cmp	r6, r9
 800c91e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c922:	f84a 3b04 	str.w	r3, [sl], #4
 800c926:	d8e7      	bhi.n	800c8f8 <__mdiff+0x80>
 800c928:	1b33      	subs	r3, r6, r4
 800c92a:	3b15      	subs	r3, #21
 800c92c:	f023 0303 	bic.w	r3, r3, #3
 800c930:	3304      	adds	r3, #4
 800c932:	3415      	adds	r4, #21
 800c934:	42a6      	cmp	r6, r4
 800c936:	bf38      	it	cc
 800c938:	2304      	movcc	r3, #4
 800c93a:	441d      	add	r5, r3
 800c93c:	4473      	add	r3, lr
 800c93e:	469e      	mov	lr, r3
 800c940:	462e      	mov	r6, r5
 800c942:	4566      	cmp	r6, ip
 800c944:	d30e      	bcc.n	800c964 <__mdiff+0xec>
 800c946:	f10c 0203 	add.w	r2, ip, #3
 800c94a:	1b52      	subs	r2, r2, r5
 800c94c:	f022 0203 	bic.w	r2, r2, #3
 800c950:	3d03      	subs	r5, #3
 800c952:	45ac      	cmp	ip, r5
 800c954:	bf38      	it	cc
 800c956:	2200      	movcc	r2, #0
 800c958:	441a      	add	r2, r3
 800c95a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c95e:	b17b      	cbz	r3, 800c980 <__mdiff+0x108>
 800c960:	6107      	str	r7, [r0, #16]
 800c962:	e7a3      	b.n	800c8ac <__mdiff+0x34>
 800c964:	f856 8b04 	ldr.w	r8, [r6], #4
 800c968:	fa11 f288 	uxtah	r2, r1, r8
 800c96c:	1414      	asrs	r4, r2, #16
 800c96e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c972:	b292      	uxth	r2, r2
 800c974:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c978:	f84e 2b04 	str.w	r2, [lr], #4
 800c97c:	1421      	asrs	r1, r4, #16
 800c97e:	e7e0      	b.n	800c942 <__mdiff+0xca>
 800c980:	3f01      	subs	r7, #1
 800c982:	e7ea      	b.n	800c95a <__mdiff+0xe2>
 800c984:	0800d8b7 	.word	0x0800d8b7
 800c988:	0800d8c8 	.word	0x0800d8c8

0800c98c <__d2b>:
 800c98c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c990:	4689      	mov	r9, r1
 800c992:	2101      	movs	r1, #1
 800c994:	ec57 6b10 	vmov	r6, r7, d0
 800c998:	4690      	mov	r8, r2
 800c99a:	f7ff fccf 	bl	800c33c <_Balloc>
 800c99e:	4604      	mov	r4, r0
 800c9a0:	b930      	cbnz	r0, 800c9b0 <__d2b+0x24>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	4b25      	ldr	r3, [pc, #148]	; (800ca3c <__d2b+0xb0>)
 800c9a6:	4826      	ldr	r0, [pc, #152]	; (800ca40 <__d2b+0xb4>)
 800c9a8:	f240 310a 	movw	r1, #778	; 0x30a
 800c9ac:	f000 f9cc 	bl	800cd48 <__assert_func>
 800c9b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c9b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c9b8:	bb35      	cbnz	r5, 800ca08 <__d2b+0x7c>
 800c9ba:	2e00      	cmp	r6, #0
 800c9bc:	9301      	str	r3, [sp, #4]
 800c9be:	d028      	beq.n	800ca12 <__d2b+0x86>
 800c9c0:	4668      	mov	r0, sp
 800c9c2:	9600      	str	r6, [sp, #0]
 800c9c4:	f7ff fd82 	bl	800c4cc <__lo0bits>
 800c9c8:	9900      	ldr	r1, [sp, #0]
 800c9ca:	b300      	cbz	r0, 800ca0e <__d2b+0x82>
 800c9cc:	9a01      	ldr	r2, [sp, #4]
 800c9ce:	f1c0 0320 	rsb	r3, r0, #32
 800c9d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c9d6:	430b      	orrs	r3, r1
 800c9d8:	40c2      	lsrs	r2, r0
 800c9da:	6163      	str	r3, [r4, #20]
 800c9dc:	9201      	str	r2, [sp, #4]
 800c9de:	9b01      	ldr	r3, [sp, #4]
 800c9e0:	61a3      	str	r3, [r4, #24]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	bf14      	ite	ne
 800c9e6:	2202      	movne	r2, #2
 800c9e8:	2201      	moveq	r2, #1
 800c9ea:	6122      	str	r2, [r4, #16]
 800c9ec:	b1d5      	cbz	r5, 800ca24 <__d2b+0x98>
 800c9ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c9f2:	4405      	add	r5, r0
 800c9f4:	f8c9 5000 	str.w	r5, [r9]
 800c9f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c9fc:	f8c8 0000 	str.w	r0, [r8]
 800ca00:	4620      	mov	r0, r4
 800ca02:	b003      	add	sp, #12
 800ca04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca0c:	e7d5      	b.n	800c9ba <__d2b+0x2e>
 800ca0e:	6161      	str	r1, [r4, #20]
 800ca10:	e7e5      	b.n	800c9de <__d2b+0x52>
 800ca12:	a801      	add	r0, sp, #4
 800ca14:	f7ff fd5a 	bl	800c4cc <__lo0bits>
 800ca18:	9b01      	ldr	r3, [sp, #4]
 800ca1a:	6163      	str	r3, [r4, #20]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	6122      	str	r2, [r4, #16]
 800ca20:	3020      	adds	r0, #32
 800ca22:	e7e3      	b.n	800c9ec <__d2b+0x60>
 800ca24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca2c:	f8c9 0000 	str.w	r0, [r9]
 800ca30:	6918      	ldr	r0, [r3, #16]
 800ca32:	f7ff fd2b 	bl	800c48c <__hi0bits>
 800ca36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca3a:	e7df      	b.n	800c9fc <__d2b+0x70>
 800ca3c:	0800d8b7 	.word	0x0800d8b7
 800ca40:	0800d8c8 	.word	0x0800d8c8

0800ca44 <_calloc_r>:
 800ca44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca46:	fba1 2402 	umull	r2, r4, r1, r2
 800ca4a:	b94c      	cbnz	r4, 800ca60 <_calloc_r+0x1c>
 800ca4c:	4611      	mov	r1, r2
 800ca4e:	9201      	str	r2, [sp, #4]
 800ca50:	f7fd fea8 	bl	800a7a4 <_malloc_r>
 800ca54:	9a01      	ldr	r2, [sp, #4]
 800ca56:	4605      	mov	r5, r0
 800ca58:	b930      	cbnz	r0, 800ca68 <_calloc_r+0x24>
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	b003      	add	sp, #12
 800ca5e:	bd30      	pop	{r4, r5, pc}
 800ca60:	220c      	movs	r2, #12
 800ca62:	6002      	str	r2, [r0, #0]
 800ca64:	2500      	movs	r5, #0
 800ca66:	e7f8      	b.n	800ca5a <_calloc_r+0x16>
 800ca68:	4621      	mov	r1, r4
 800ca6a:	f7fd fe26 	bl	800a6ba <memset>
 800ca6e:	e7f4      	b.n	800ca5a <_calloc_r+0x16>

0800ca70 <__sfputc_r>:
 800ca70:	6893      	ldr	r3, [r2, #8]
 800ca72:	3b01      	subs	r3, #1
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	b410      	push	{r4}
 800ca78:	6093      	str	r3, [r2, #8]
 800ca7a:	da08      	bge.n	800ca8e <__sfputc_r+0x1e>
 800ca7c:	6994      	ldr	r4, [r2, #24]
 800ca7e:	42a3      	cmp	r3, r4
 800ca80:	db01      	blt.n	800ca86 <__sfputc_r+0x16>
 800ca82:	290a      	cmp	r1, #10
 800ca84:	d103      	bne.n	800ca8e <__sfputc_r+0x1e>
 800ca86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca8a:	f7fe bc69 	b.w	800b360 <__swbuf_r>
 800ca8e:	6813      	ldr	r3, [r2, #0]
 800ca90:	1c58      	adds	r0, r3, #1
 800ca92:	6010      	str	r0, [r2, #0]
 800ca94:	7019      	strb	r1, [r3, #0]
 800ca96:	4608      	mov	r0, r1
 800ca98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca9c:	4770      	bx	lr

0800ca9e <__sfputs_r>:
 800ca9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caa0:	4606      	mov	r6, r0
 800caa2:	460f      	mov	r7, r1
 800caa4:	4614      	mov	r4, r2
 800caa6:	18d5      	adds	r5, r2, r3
 800caa8:	42ac      	cmp	r4, r5
 800caaa:	d101      	bne.n	800cab0 <__sfputs_r+0x12>
 800caac:	2000      	movs	r0, #0
 800caae:	e007      	b.n	800cac0 <__sfputs_r+0x22>
 800cab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cab4:	463a      	mov	r2, r7
 800cab6:	4630      	mov	r0, r6
 800cab8:	f7ff ffda 	bl	800ca70 <__sfputc_r>
 800cabc:	1c43      	adds	r3, r0, #1
 800cabe:	d1f3      	bne.n	800caa8 <__sfputs_r+0xa>
 800cac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cac4 <_vfiprintf_r>:
 800cac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac8:	460d      	mov	r5, r1
 800caca:	b09d      	sub	sp, #116	; 0x74
 800cacc:	4614      	mov	r4, r2
 800cace:	4698      	mov	r8, r3
 800cad0:	4606      	mov	r6, r0
 800cad2:	b118      	cbz	r0, 800cadc <_vfiprintf_r+0x18>
 800cad4:	6983      	ldr	r3, [r0, #24]
 800cad6:	b90b      	cbnz	r3, 800cadc <_vfiprintf_r+0x18>
 800cad8:	f7fd fd1c 	bl	800a514 <__sinit>
 800cadc:	4b89      	ldr	r3, [pc, #548]	; (800cd04 <_vfiprintf_r+0x240>)
 800cade:	429d      	cmp	r5, r3
 800cae0:	d11b      	bne.n	800cb1a <_vfiprintf_r+0x56>
 800cae2:	6875      	ldr	r5, [r6, #4]
 800cae4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cae6:	07d9      	lsls	r1, r3, #31
 800cae8:	d405      	bmi.n	800caf6 <_vfiprintf_r+0x32>
 800caea:	89ab      	ldrh	r3, [r5, #12]
 800caec:	059a      	lsls	r2, r3, #22
 800caee:	d402      	bmi.n	800caf6 <_vfiprintf_r+0x32>
 800caf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800caf2:	f7fd fdd2 	bl	800a69a <__retarget_lock_acquire_recursive>
 800caf6:	89ab      	ldrh	r3, [r5, #12]
 800caf8:	071b      	lsls	r3, r3, #28
 800cafa:	d501      	bpl.n	800cb00 <_vfiprintf_r+0x3c>
 800cafc:	692b      	ldr	r3, [r5, #16]
 800cafe:	b9eb      	cbnz	r3, 800cb3c <_vfiprintf_r+0x78>
 800cb00:	4629      	mov	r1, r5
 800cb02:	4630      	mov	r0, r6
 800cb04:	f7fe fc90 	bl	800b428 <__swsetup_r>
 800cb08:	b1c0      	cbz	r0, 800cb3c <_vfiprintf_r+0x78>
 800cb0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb0c:	07dc      	lsls	r4, r3, #31
 800cb0e:	d50e      	bpl.n	800cb2e <_vfiprintf_r+0x6a>
 800cb10:	f04f 30ff 	mov.w	r0, #4294967295
 800cb14:	b01d      	add	sp, #116	; 0x74
 800cb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb1a:	4b7b      	ldr	r3, [pc, #492]	; (800cd08 <_vfiprintf_r+0x244>)
 800cb1c:	429d      	cmp	r5, r3
 800cb1e:	d101      	bne.n	800cb24 <_vfiprintf_r+0x60>
 800cb20:	68b5      	ldr	r5, [r6, #8]
 800cb22:	e7df      	b.n	800cae4 <_vfiprintf_r+0x20>
 800cb24:	4b79      	ldr	r3, [pc, #484]	; (800cd0c <_vfiprintf_r+0x248>)
 800cb26:	429d      	cmp	r5, r3
 800cb28:	bf08      	it	eq
 800cb2a:	68f5      	ldreq	r5, [r6, #12]
 800cb2c:	e7da      	b.n	800cae4 <_vfiprintf_r+0x20>
 800cb2e:	89ab      	ldrh	r3, [r5, #12]
 800cb30:	0598      	lsls	r0, r3, #22
 800cb32:	d4ed      	bmi.n	800cb10 <_vfiprintf_r+0x4c>
 800cb34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb36:	f7fd fdb1 	bl	800a69c <__retarget_lock_release_recursive>
 800cb3a:	e7e9      	b.n	800cb10 <_vfiprintf_r+0x4c>
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb40:	2320      	movs	r3, #32
 800cb42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb46:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb4a:	2330      	movs	r3, #48	; 0x30
 800cb4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cd10 <_vfiprintf_r+0x24c>
 800cb50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb54:	f04f 0901 	mov.w	r9, #1
 800cb58:	4623      	mov	r3, r4
 800cb5a:	469a      	mov	sl, r3
 800cb5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb60:	b10a      	cbz	r2, 800cb66 <_vfiprintf_r+0xa2>
 800cb62:	2a25      	cmp	r2, #37	; 0x25
 800cb64:	d1f9      	bne.n	800cb5a <_vfiprintf_r+0x96>
 800cb66:	ebba 0b04 	subs.w	fp, sl, r4
 800cb6a:	d00b      	beq.n	800cb84 <_vfiprintf_r+0xc0>
 800cb6c:	465b      	mov	r3, fp
 800cb6e:	4622      	mov	r2, r4
 800cb70:	4629      	mov	r1, r5
 800cb72:	4630      	mov	r0, r6
 800cb74:	f7ff ff93 	bl	800ca9e <__sfputs_r>
 800cb78:	3001      	adds	r0, #1
 800cb7a:	f000 80aa 	beq.w	800ccd2 <_vfiprintf_r+0x20e>
 800cb7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb80:	445a      	add	r2, fp
 800cb82:	9209      	str	r2, [sp, #36]	; 0x24
 800cb84:	f89a 3000 	ldrb.w	r3, [sl]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	f000 80a2 	beq.w	800ccd2 <_vfiprintf_r+0x20e>
 800cb8e:	2300      	movs	r3, #0
 800cb90:	f04f 32ff 	mov.w	r2, #4294967295
 800cb94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb98:	f10a 0a01 	add.w	sl, sl, #1
 800cb9c:	9304      	str	r3, [sp, #16]
 800cb9e:	9307      	str	r3, [sp, #28]
 800cba0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cba4:	931a      	str	r3, [sp, #104]	; 0x68
 800cba6:	4654      	mov	r4, sl
 800cba8:	2205      	movs	r2, #5
 800cbaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbae:	4858      	ldr	r0, [pc, #352]	; (800cd10 <_vfiprintf_r+0x24c>)
 800cbb0:	f7f3 fb3e 	bl	8000230 <memchr>
 800cbb4:	9a04      	ldr	r2, [sp, #16]
 800cbb6:	b9d8      	cbnz	r0, 800cbf0 <_vfiprintf_r+0x12c>
 800cbb8:	06d1      	lsls	r1, r2, #27
 800cbba:	bf44      	itt	mi
 800cbbc:	2320      	movmi	r3, #32
 800cbbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbc2:	0713      	lsls	r3, r2, #28
 800cbc4:	bf44      	itt	mi
 800cbc6:	232b      	movmi	r3, #43	; 0x2b
 800cbc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbcc:	f89a 3000 	ldrb.w	r3, [sl]
 800cbd0:	2b2a      	cmp	r3, #42	; 0x2a
 800cbd2:	d015      	beq.n	800cc00 <_vfiprintf_r+0x13c>
 800cbd4:	9a07      	ldr	r2, [sp, #28]
 800cbd6:	4654      	mov	r4, sl
 800cbd8:	2000      	movs	r0, #0
 800cbda:	f04f 0c0a 	mov.w	ip, #10
 800cbde:	4621      	mov	r1, r4
 800cbe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbe4:	3b30      	subs	r3, #48	; 0x30
 800cbe6:	2b09      	cmp	r3, #9
 800cbe8:	d94e      	bls.n	800cc88 <_vfiprintf_r+0x1c4>
 800cbea:	b1b0      	cbz	r0, 800cc1a <_vfiprintf_r+0x156>
 800cbec:	9207      	str	r2, [sp, #28]
 800cbee:	e014      	b.n	800cc1a <_vfiprintf_r+0x156>
 800cbf0:	eba0 0308 	sub.w	r3, r0, r8
 800cbf4:	fa09 f303 	lsl.w	r3, r9, r3
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	9304      	str	r3, [sp, #16]
 800cbfc:	46a2      	mov	sl, r4
 800cbfe:	e7d2      	b.n	800cba6 <_vfiprintf_r+0xe2>
 800cc00:	9b03      	ldr	r3, [sp, #12]
 800cc02:	1d19      	adds	r1, r3, #4
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	9103      	str	r1, [sp, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	bfbb      	ittet	lt
 800cc0c:	425b      	neglt	r3, r3
 800cc0e:	f042 0202 	orrlt.w	r2, r2, #2
 800cc12:	9307      	strge	r3, [sp, #28]
 800cc14:	9307      	strlt	r3, [sp, #28]
 800cc16:	bfb8      	it	lt
 800cc18:	9204      	strlt	r2, [sp, #16]
 800cc1a:	7823      	ldrb	r3, [r4, #0]
 800cc1c:	2b2e      	cmp	r3, #46	; 0x2e
 800cc1e:	d10c      	bne.n	800cc3a <_vfiprintf_r+0x176>
 800cc20:	7863      	ldrb	r3, [r4, #1]
 800cc22:	2b2a      	cmp	r3, #42	; 0x2a
 800cc24:	d135      	bne.n	800cc92 <_vfiprintf_r+0x1ce>
 800cc26:	9b03      	ldr	r3, [sp, #12]
 800cc28:	1d1a      	adds	r2, r3, #4
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	9203      	str	r2, [sp, #12]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	bfb8      	it	lt
 800cc32:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc36:	3402      	adds	r4, #2
 800cc38:	9305      	str	r3, [sp, #20]
 800cc3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cd20 <_vfiprintf_r+0x25c>
 800cc3e:	7821      	ldrb	r1, [r4, #0]
 800cc40:	2203      	movs	r2, #3
 800cc42:	4650      	mov	r0, sl
 800cc44:	f7f3 faf4 	bl	8000230 <memchr>
 800cc48:	b140      	cbz	r0, 800cc5c <_vfiprintf_r+0x198>
 800cc4a:	2340      	movs	r3, #64	; 0x40
 800cc4c:	eba0 000a 	sub.w	r0, r0, sl
 800cc50:	fa03 f000 	lsl.w	r0, r3, r0
 800cc54:	9b04      	ldr	r3, [sp, #16]
 800cc56:	4303      	orrs	r3, r0
 800cc58:	3401      	adds	r4, #1
 800cc5a:	9304      	str	r3, [sp, #16]
 800cc5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc60:	482c      	ldr	r0, [pc, #176]	; (800cd14 <_vfiprintf_r+0x250>)
 800cc62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc66:	2206      	movs	r2, #6
 800cc68:	f7f3 fae2 	bl	8000230 <memchr>
 800cc6c:	2800      	cmp	r0, #0
 800cc6e:	d03f      	beq.n	800ccf0 <_vfiprintf_r+0x22c>
 800cc70:	4b29      	ldr	r3, [pc, #164]	; (800cd18 <_vfiprintf_r+0x254>)
 800cc72:	bb1b      	cbnz	r3, 800ccbc <_vfiprintf_r+0x1f8>
 800cc74:	9b03      	ldr	r3, [sp, #12]
 800cc76:	3307      	adds	r3, #7
 800cc78:	f023 0307 	bic.w	r3, r3, #7
 800cc7c:	3308      	adds	r3, #8
 800cc7e:	9303      	str	r3, [sp, #12]
 800cc80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc82:	443b      	add	r3, r7
 800cc84:	9309      	str	r3, [sp, #36]	; 0x24
 800cc86:	e767      	b.n	800cb58 <_vfiprintf_r+0x94>
 800cc88:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc8c:	460c      	mov	r4, r1
 800cc8e:	2001      	movs	r0, #1
 800cc90:	e7a5      	b.n	800cbde <_vfiprintf_r+0x11a>
 800cc92:	2300      	movs	r3, #0
 800cc94:	3401      	adds	r4, #1
 800cc96:	9305      	str	r3, [sp, #20]
 800cc98:	4619      	mov	r1, r3
 800cc9a:	f04f 0c0a 	mov.w	ip, #10
 800cc9e:	4620      	mov	r0, r4
 800cca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cca4:	3a30      	subs	r2, #48	; 0x30
 800cca6:	2a09      	cmp	r2, #9
 800cca8:	d903      	bls.n	800ccb2 <_vfiprintf_r+0x1ee>
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d0c5      	beq.n	800cc3a <_vfiprintf_r+0x176>
 800ccae:	9105      	str	r1, [sp, #20]
 800ccb0:	e7c3      	b.n	800cc3a <_vfiprintf_r+0x176>
 800ccb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	2301      	movs	r3, #1
 800ccba:	e7f0      	b.n	800cc9e <_vfiprintf_r+0x1da>
 800ccbc:	ab03      	add	r3, sp, #12
 800ccbe:	9300      	str	r3, [sp, #0]
 800ccc0:	462a      	mov	r2, r5
 800ccc2:	4b16      	ldr	r3, [pc, #88]	; (800cd1c <_vfiprintf_r+0x258>)
 800ccc4:	a904      	add	r1, sp, #16
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	f7fd fe80 	bl	800a9cc <_printf_float>
 800cccc:	4607      	mov	r7, r0
 800ccce:	1c78      	adds	r0, r7, #1
 800ccd0:	d1d6      	bne.n	800cc80 <_vfiprintf_r+0x1bc>
 800ccd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccd4:	07d9      	lsls	r1, r3, #31
 800ccd6:	d405      	bmi.n	800cce4 <_vfiprintf_r+0x220>
 800ccd8:	89ab      	ldrh	r3, [r5, #12]
 800ccda:	059a      	lsls	r2, r3, #22
 800ccdc:	d402      	bmi.n	800cce4 <_vfiprintf_r+0x220>
 800ccde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cce0:	f7fd fcdc 	bl	800a69c <__retarget_lock_release_recursive>
 800cce4:	89ab      	ldrh	r3, [r5, #12]
 800cce6:	065b      	lsls	r3, r3, #25
 800cce8:	f53f af12 	bmi.w	800cb10 <_vfiprintf_r+0x4c>
 800ccec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccee:	e711      	b.n	800cb14 <_vfiprintf_r+0x50>
 800ccf0:	ab03      	add	r3, sp, #12
 800ccf2:	9300      	str	r3, [sp, #0]
 800ccf4:	462a      	mov	r2, r5
 800ccf6:	4b09      	ldr	r3, [pc, #36]	; (800cd1c <_vfiprintf_r+0x258>)
 800ccf8:	a904      	add	r1, sp, #16
 800ccfa:	4630      	mov	r0, r6
 800ccfc:	f7fe f90a 	bl	800af14 <_printf_i>
 800cd00:	e7e4      	b.n	800cccc <_vfiprintf_r+0x208>
 800cd02:	bf00      	nop
 800cd04:	0800d7c0 	.word	0x0800d7c0
 800cd08:	0800d7e0 	.word	0x0800d7e0
 800cd0c:	0800d7a0 	.word	0x0800d7a0
 800cd10:	0800da24 	.word	0x0800da24
 800cd14:	0800da2e 	.word	0x0800da2e
 800cd18:	0800a9cd 	.word	0x0800a9cd
 800cd1c:	0800ca9f 	.word	0x0800ca9f
 800cd20:	0800da2a 	.word	0x0800da2a

0800cd24 <_read_r>:
 800cd24:	b538      	push	{r3, r4, r5, lr}
 800cd26:	4d07      	ldr	r5, [pc, #28]	; (800cd44 <_read_r+0x20>)
 800cd28:	4604      	mov	r4, r0
 800cd2a:	4608      	mov	r0, r1
 800cd2c:	4611      	mov	r1, r2
 800cd2e:	2200      	movs	r2, #0
 800cd30:	602a      	str	r2, [r5, #0]
 800cd32:	461a      	mov	r2, r3
 800cd34:	f7f8 f9b2 	bl	800509c <_read>
 800cd38:	1c43      	adds	r3, r0, #1
 800cd3a:	d102      	bne.n	800cd42 <_read_r+0x1e>
 800cd3c:	682b      	ldr	r3, [r5, #0]
 800cd3e:	b103      	cbz	r3, 800cd42 <_read_r+0x1e>
 800cd40:	6023      	str	r3, [r4, #0]
 800cd42:	bd38      	pop	{r3, r4, r5, pc}
 800cd44:	20001cd4 	.word	0x20001cd4

0800cd48 <__assert_func>:
 800cd48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd4a:	4614      	mov	r4, r2
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	4b09      	ldr	r3, [pc, #36]	; (800cd74 <__assert_func+0x2c>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4605      	mov	r5, r0
 800cd54:	68d8      	ldr	r0, [r3, #12]
 800cd56:	b14c      	cbz	r4, 800cd6c <__assert_func+0x24>
 800cd58:	4b07      	ldr	r3, [pc, #28]	; (800cd78 <__assert_func+0x30>)
 800cd5a:	9100      	str	r1, [sp, #0]
 800cd5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd60:	4906      	ldr	r1, [pc, #24]	; (800cd7c <__assert_func+0x34>)
 800cd62:	462b      	mov	r3, r5
 800cd64:	f000 f80e 	bl	800cd84 <fiprintf>
 800cd68:	f000 f85f 	bl	800ce2a <abort>
 800cd6c:	4b04      	ldr	r3, [pc, #16]	; (800cd80 <__assert_func+0x38>)
 800cd6e:	461c      	mov	r4, r3
 800cd70:	e7f3      	b.n	800cd5a <__assert_func+0x12>
 800cd72:	bf00      	nop
 800cd74:	200004d4 	.word	0x200004d4
 800cd78:	0800da35 	.word	0x0800da35
 800cd7c:	0800da42 	.word	0x0800da42
 800cd80:	0800da70 	.word	0x0800da70

0800cd84 <fiprintf>:
 800cd84:	b40e      	push	{r1, r2, r3}
 800cd86:	b503      	push	{r0, r1, lr}
 800cd88:	4601      	mov	r1, r0
 800cd8a:	ab03      	add	r3, sp, #12
 800cd8c:	4805      	ldr	r0, [pc, #20]	; (800cda4 <fiprintf+0x20>)
 800cd8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd92:	6800      	ldr	r0, [r0, #0]
 800cd94:	9301      	str	r3, [sp, #4]
 800cd96:	f7ff fe95 	bl	800cac4 <_vfiprintf_r>
 800cd9a:	b002      	add	sp, #8
 800cd9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cda0:	b003      	add	sp, #12
 800cda2:	4770      	bx	lr
 800cda4:	200004d4 	.word	0x200004d4

0800cda8 <_fstat_r>:
 800cda8:	b538      	push	{r3, r4, r5, lr}
 800cdaa:	4d07      	ldr	r5, [pc, #28]	; (800cdc8 <_fstat_r+0x20>)
 800cdac:	2300      	movs	r3, #0
 800cdae:	4604      	mov	r4, r0
 800cdb0:	4608      	mov	r0, r1
 800cdb2:	4611      	mov	r1, r2
 800cdb4:	602b      	str	r3, [r5, #0]
 800cdb6:	f7f8 f983 	bl	80050c0 <_fstat>
 800cdba:	1c43      	adds	r3, r0, #1
 800cdbc:	d102      	bne.n	800cdc4 <_fstat_r+0x1c>
 800cdbe:	682b      	ldr	r3, [r5, #0]
 800cdc0:	b103      	cbz	r3, 800cdc4 <_fstat_r+0x1c>
 800cdc2:	6023      	str	r3, [r4, #0]
 800cdc4:	bd38      	pop	{r3, r4, r5, pc}
 800cdc6:	bf00      	nop
 800cdc8:	20001cd4 	.word	0x20001cd4

0800cdcc <_isatty_r>:
 800cdcc:	b538      	push	{r3, r4, r5, lr}
 800cdce:	4d06      	ldr	r5, [pc, #24]	; (800cde8 <_isatty_r+0x1c>)
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	4608      	mov	r0, r1
 800cdd6:	602b      	str	r3, [r5, #0]
 800cdd8:	f7f8 f978 	bl	80050cc <_isatty>
 800cddc:	1c43      	adds	r3, r0, #1
 800cdde:	d102      	bne.n	800cde6 <_isatty_r+0x1a>
 800cde0:	682b      	ldr	r3, [r5, #0]
 800cde2:	b103      	cbz	r3, 800cde6 <_isatty_r+0x1a>
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	bd38      	pop	{r3, r4, r5, pc}
 800cde8:	20001cd4 	.word	0x20001cd4

0800cdec <__ascii_mbtowc>:
 800cdec:	b082      	sub	sp, #8
 800cdee:	b901      	cbnz	r1, 800cdf2 <__ascii_mbtowc+0x6>
 800cdf0:	a901      	add	r1, sp, #4
 800cdf2:	b142      	cbz	r2, 800ce06 <__ascii_mbtowc+0x1a>
 800cdf4:	b14b      	cbz	r3, 800ce0a <__ascii_mbtowc+0x1e>
 800cdf6:	7813      	ldrb	r3, [r2, #0]
 800cdf8:	600b      	str	r3, [r1, #0]
 800cdfa:	7812      	ldrb	r2, [r2, #0]
 800cdfc:	1e10      	subs	r0, r2, #0
 800cdfe:	bf18      	it	ne
 800ce00:	2001      	movne	r0, #1
 800ce02:	b002      	add	sp, #8
 800ce04:	4770      	bx	lr
 800ce06:	4610      	mov	r0, r2
 800ce08:	e7fb      	b.n	800ce02 <__ascii_mbtowc+0x16>
 800ce0a:	f06f 0001 	mvn.w	r0, #1
 800ce0e:	e7f8      	b.n	800ce02 <__ascii_mbtowc+0x16>

0800ce10 <__ascii_wctomb>:
 800ce10:	b149      	cbz	r1, 800ce26 <__ascii_wctomb+0x16>
 800ce12:	2aff      	cmp	r2, #255	; 0xff
 800ce14:	bf85      	ittet	hi
 800ce16:	238a      	movhi	r3, #138	; 0x8a
 800ce18:	6003      	strhi	r3, [r0, #0]
 800ce1a:	700a      	strbls	r2, [r1, #0]
 800ce1c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ce20:	bf98      	it	ls
 800ce22:	2001      	movls	r0, #1
 800ce24:	4770      	bx	lr
 800ce26:	4608      	mov	r0, r1
 800ce28:	4770      	bx	lr

0800ce2a <abort>:
 800ce2a:	b508      	push	{r3, lr}
 800ce2c:	2006      	movs	r0, #6
 800ce2e:	f000 f82b 	bl	800ce88 <raise>
 800ce32:	2001      	movs	r0, #1
 800ce34:	f7f8 f92c 	bl	8005090 <_exit>

0800ce38 <_raise_r>:
 800ce38:	291f      	cmp	r1, #31
 800ce3a:	b538      	push	{r3, r4, r5, lr}
 800ce3c:	4604      	mov	r4, r0
 800ce3e:	460d      	mov	r5, r1
 800ce40:	d904      	bls.n	800ce4c <_raise_r+0x14>
 800ce42:	2316      	movs	r3, #22
 800ce44:	6003      	str	r3, [r0, #0]
 800ce46:	f04f 30ff 	mov.w	r0, #4294967295
 800ce4a:	bd38      	pop	{r3, r4, r5, pc}
 800ce4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ce4e:	b112      	cbz	r2, 800ce56 <_raise_r+0x1e>
 800ce50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce54:	b94b      	cbnz	r3, 800ce6a <_raise_r+0x32>
 800ce56:	4620      	mov	r0, r4
 800ce58:	f000 f830 	bl	800cebc <_getpid_r>
 800ce5c:	462a      	mov	r2, r5
 800ce5e:	4601      	mov	r1, r0
 800ce60:	4620      	mov	r0, r4
 800ce62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce66:	f000 b817 	b.w	800ce98 <_kill_r>
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d00a      	beq.n	800ce84 <_raise_r+0x4c>
 800ce6e:	1c59      	adds	r1, r3, #1
 800ce70:	d103      	bne.n	800ce7a <_raise_r+0x42>
 800ce72:	2316      	movs	r3, #22
 800ce74:	6003      	str	r3, [r0, #0]
 800ce76:	2001      	movs	r0, #1
 800ce78:	e7e7      	b.n	800ce4a <_raise_r+0x12>
 800ce7a:	2400      	movs	r4, #0
 800ce7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce80:	4628      	mov	r0, r5
 800ce82:	4798      	blx	r3
 800ce84:	2000      	movs	r0, #0
 800ce86:	e7e0      	b.n	800ce4a <_raise_r+0x12>

0800ce88 <raise>:
 800ce88:	4b02      	ldr	r3, [pc, #8]	; (800ce94 <raise+0xc>)
 800ce8a:	4601      	mov	r1, r0
 800ce8c:	6818      	ldr	r0, [r3, #0]
 800ce8e:	f7ff bfd3 	b.w	800ce38 <_raise_r>
 800ce92:	bf00      	nop
 800ce94:	200004d4 	.word	0x200004d4

0800ce98 <_kill_r>:
 800ce98:	b538      	push	{r3, r4, r5, lr}
 800ce9a:	4d07      	ldr	r5, [pc, #28]	; (800ceb8 <_kill_r+0x20>)
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	4604      	mov	r4, r0
 800cea0:	4608      	mov	r0, r1
 800cea2:	4611      	mov	r1, r2
 800cea4:	602b      	str	r3, [r5, #0]
 800cea6:	f7f8 f8eb 	bl	8005080 <_kill>
 800ceaa:	1c43      	adds	r3, r0, #1
 800ceac:	d102      	bne.n	800ceb4 <_kill_r+0x1c>
 800ceae:	682b      	ldr	r3, [r5, #0]
 800ceb0:	b103      	cbz	r3, 800ceb4 <_kill_r+0x1c>
 800ceb2:	6023      	str	r3, [r4, #0]
 800ceb4:	bd38      	pop	{r3, r4, r5, pc}
 800ceb6:	bf00      	nop
 800ceb8:	20001cd4 	.word	0x20001cd4

0800cebc <_getpid_r>:
 800cebc:	f7f8 b8de 	b.w	800507c <_getpid>

0800cec0 <fmod>:
 800cec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec2:	ed2d 8b02 	vpush	{d8}
 800cec6:	ec57 6b10 	vmov	r6, r7, d0
 800ceca:	ec55 4b11 	vmov	r4, r5, d1
 800cece:	f000 f825 	bl	800cf1c <__ieee754_fmod>
 800ced2:	4622      	mov	r2, r4
 800ced4:	462b      	mov	r3, r5
 800ced6:	4630      	mov	r0, r6
 800ced8:	4639      	mov	r1, r7
 800ceda:	eeb0 8a40 	vmov.f32	s16, s0
 800cede:	eef0 8a60 	vmov.f32	s17, s1
 800cee2:	f7f3 fe4b 	bl	8000b7c <__aeabi_dcmpun>
 800cee6:	b990      	cbnz	r0, 800cf0e <fmod+0x4e>
 800cee8:	2200      	movs	r2, #0
 800ceea:	2300      	movs	r3, #0
 800ceec:	4620      	mov	r0, r4
 800ceee:	4629      	mov	r1, r5
 800cef0:	f7f3 fe12 	bl	8000b18 <__aeabi_dcmpeq>
 800cef4:	b158      	cbz	r0, 800cf0e <fmod+0x4e>
 800cef6:	f7fd f9db 	bl	800a2b0 <__errno>
 800cefa:	2321      	movs	r3, #33	; 0x21
 800cefc:	6003      	str	r3, [r0, #0]
 800cefe:	2200      	movs	r2, #0
 800cf00:	2300      	movs	r3, #0
 800cf02:	4610      	mov	r0, r2
 800cf04:	4619      	mov	r1, r3
 800cf06:	f7f3 fcc9 	bl	800089c <__aeabi_ddiv>
 800cf0a:	ec41 0b18 	vmov	d8, r0, r1
 800cf0e:	eeb0 0a48 	vmov.f32	s0, s16
 800cf12:	eef0 0a68 	vmov.f32	s1, s17
 800cf16:	ecbd 8b02 	vpop	{d8}
 800cf1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cf1c <__ieee754_fmod>:
 800cf1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf20:	ec53 2b11 	vmov	r2, r3, d1
 800cf24:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800cf28:	ea5e 0402 	orrs.w	r4, lr, r2
 800cf2c:	ec51 0b10 	vmov	r0, r1, d0
 800cf30:	ee11 7a10 	vmov	r7, s2
 800cf34:	ee11 ca10 	vmov	ip, s2
 800cf38:	461e      	mov	r6, r3
 800cf3a:	d00d      	beq.n	800cf58 <__ieee754_fmod+0x3c>
 800cf3c:	4c7a      	ldr	r4, [pc, #488]	; (800d128 <__ieee754_fmod+0x20c>)
 800cf3e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800cf42:	45a0      	cmp	r8, r4
 800cf44:	4689      	mov	r9, r1
 800cf46:	dc07      	bgt.n	800cf58 <__ieee754_fmod+0x3c>
 800cf48:	4254      	negs	r4, r2
 800cf4a:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 800d134 <__ieee754_fmod+0x218>
 800cf4e:	4314      	orrs	r4, r2
 800cf50:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800cf54:	455c      	cmp	r4, fp
 800cf56:	d909      	bls.n	800cf6c <__ieee754_fmod+0x50>
 800cf58:	f7f3 fb76 	bl	8000648 <__aeabi_dmul>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	460b      	mov	r3, r1
 800cf60:	f7f3 fc9c 	bl	800089c <__aeabi_ddiv>
 800cf64:	ec41 0b10 	vmov	d0, r0, r1
 800cf68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf6c:	45f0      	cmp	r8, lr
 800cf6e:	ee10 aa10 	vmov	sl, s0
 800cf72:	ee10 4a10 	vmov	r4, s0
 800cf76:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800cf7a:	dc09      	bgt.n	800cf90 <__ieee754_fmod+0x74>
 800cf7c:	dbf2      	blt.n	800cf64 <__ieee754_fmod+0x48>
 800cf7e:	4290      	cmp	r0, r2
 800cf80:	d3f0      	bcc.n	800cf64 <__ieee754_fmod+0x48>
 800cf82:	d105      	bne.n	800cf90 <__ieee754_fmod+0x74>
 800cf84:	4b69      	ldr	r3, [pc, #420]	; (800d12c <__ieee754_fmod+0x210>)
 800cf86:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 800cf8a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cf8e:	e7e9      	b.n	800cf64 <__ieee754_fmod+0x48>
 800cf90:	ea19 0f0b 	tst.w	r9, fp
 800cf94:	d14a      	bne.n	800d02c <__ieee754_fmod+0x110>
 800cf96:	f1b8 0f00 	cmp.w	r8, #0
 800cf9a:	d13f      	bne.n	800d01c <__ieee754_fmod+0x100>
 800cf9c:	4964      	ldr	r1, [pc, #400]	; (800d130 <__ieee754_fmod+0x214>)
 800cf9e:	4653      	mov	r3, sl
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	dc38      	bgt.n	800d016 <__ieee754_fmod+0xfa>
 800cfa4:	4b63      	ldr	r3, [pc, #396]	; (800d134 <__ieee754_fmod+0x218>)
 800cfa6:	4033      	ands	r3, r6
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d14f      	bne.n	800d04c <__ieee754_fmod+0x130>
 800cfac:	f1be 0f00 	cmp.w	lr, #0
 800cfb0:	d144      	bne.n	800d03c <__ieee754_fmod+0x120>
 800cfb2:	4a5f      	ldr	r2, [pc, #380]	; (800d130 <__ieee754_fmod+0x214>)
 800cfb4:	463b      	mov	r3, r7
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	dc3d      	bgt.n	800d036 <__ieee754_fmod+0x11a>
 800cfba:	4b5f      	ldr	r3, [pc, #380]	; (800d138 <__ieee754_fmod+0x21c>)
 800cfbc:	4299      	cmp	r1, r3
 800cfbe:	db4a      	blt.n	800d056 <__ieee754_fmod+0x13a>
 800cfc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cfc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfc8:	485b      	ldr	r0, [pc, #364]	; (800d138 <__ieee754_fmod+0x21c>)
 800cfca:	4282      	cmp	r2, r0
 800cfcc:	db57      	blt.n	800d07e <__ieee754_fmod+0x162>
 800cfce:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800cfd2:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800cfd6:	1a89      	subs	r1, r1, r2
 800cfd8:	1b98      	subs	r0, r3, r6
 800cfda:	eba4 070c 	sub.w	r7, r4, ip
 800cfde:	2900      	cmp	r1, #0
 800cfe0:	d164      	bne.n	800d0ac <__ieee754_fmod+0x190>
 800cfe2:	4564      	cmp	r4, ip
 800cfe4:	bf38      	it	cc
 800cfe6:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800cfea:	2800      	cmp	r0, #0
 800cfec:	bfa4      	itt	ge
 800cfee:	463c      	movge	r4, r7
 800cff0:	4603      	movge	r3, r0
 800cff2:	ea53 0104 	orrs.w	r1, r3, r4
 800cff6:	d0c5      	beq.n	800cf84 <__ieee754_fmod+0x68>
 800cff8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cffc:	db6b      	blt.n	800d0d6 <__ieee754_fmod+0x1ba>
 800cffe:	494e      	ldr	r1, [pc, #312]	; (800d138 <__ieee754_fmod+0x21c>)
 800d000:	428a      	cmp	r2, r1
 800d002:	db6e      	blt.n	800d0e2 <__ieee754_fmod+0x1c6>
 800d004:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d008:	431d      	orrs	r5, r3
 800d00a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800d00e:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800d012:	4620      	mov	r0, r4
 800d014:	e7a6      	b.n	800cf64 <__ieee754_fmod+0x48>
 800d016:	3901      	subs	r1, #1
 800d018:	005b      	lsls	r3, r3, #1
 800d01a:	e7c1      	b.n	800cfa0 <__ieee754_fmod+0x84>
 800d01c:	4946      	ldr	r1, [pc, #280]	; (800d138 <__ieee754_fmod+0x21c>)
 800d01e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800d022:	2b00      	cmp	r3, #0
 800d024:	ddbe      	ble.n	800cfa4 <__ieee754_fmod+0x88>
 800d026:	3901      	subs	r1, #1
 800d028:	005b      	lsls	r3, r3, #1
 800d02a:	e7fa      	b.n	800d022 <__ieee754_fmod+0x106>
 800d02c:	ea4f 5128 	mov.w	r1, r8, asr #20
 800d030:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d034:	e7b6      	b.n	800cfa4 <__ieee754_fmod+0x88>
 800d036:	3a01      	subs	r2, #1
 800d038:	005b      	lsls	r3, r3, #1
 800d03a:	e7bc      	b.n	800cfb6 <__ieee754_fmod+0x9a>
 800d03c:	4a3e      	ldr	r2, [pc, #248]	; (800d138 <__ieee754_fmod+0x21c>)
 800d03e:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800d042:	2b00      	cmp	r3, #0
 800d044:	ddb9      	ble.n	800cfba <__ieee754_fmod+0x9e>
 800d046:	3a01      	subs	r2, #1
 800d048:	005b      	lsls	r3, r3, #1
 800d04a:	e7fa      	b.n	800d042 <__ieee754_fmod+0x126>
 800d04c:	ea4f 522e 	mov.w	r2, lr, asr #20
 800d050:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d054:	e7b1      	b.n	800cfba <__ieee754_fmod+0x9e>
 800d056:	1a5c      	subs	r4, r3, r1
 800d058:	2c1f      	cmp	r4, #31
 800d05a:	dc0a      	bgt.n	800d072 <__ieee754_fmod+0x156>
 800d05c:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800d060:	fa08 f804 	lsl.w	r8, r8, r4
 800d064:	fa2a f303 	lsr.w	r3, sl, r3
 800d068:	ea43 0308 	orr.w	r3, r3, r8
 800d06c:	fa0a f404 	lsl.w	r4, sl, r4
 800d070:	e7aa      	b.n	800cfc8 <__ieee754_fmod+0xac>
 800d072:	4b32      	ldr	r3, [pc, #200]	; (800d13c <__ieee754_fmod+0x220>)
 800d074:	1a5b      	subs	r3, r3, r1
 800d076:	fa0a f303 	lsl.w	r3, sl, r3
 800d07a:	2400      	movs	r4, #0
 800d07c:	e7a4      	b.n	800cfc8 <__ieee754_fmod+0xac>
 800d07e:	eba0 0c02 	sub.w	ip, r0, r2
 800d082:	f1bc 0f1f 	cmp.w	ip, #31
 800d086:	dc0a      	bgt.n	800d09e <__ieee754_fmod+0x182>
 800d088:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800d08c:	fa0e fe0c 	lsl.w	lr, lr, ip
 800d090:	fa27 f606 	lsr.w	r6, r7, r6
 800d094:	ea46 060e 	orr.w	r6, r6, lr
 800d098:	fa07 fc0c 	lsl.w	ip, r7, ip
 800d09c:	e79b      	b.n	800cfd6 <__ieee754_fmod+0xba>
 800d09e:	4e27      	ldr	r6, [pc, #156]	; (800d13c <__ieee754_fmod+0x220>)
 800d0a0:	1ab6      	subs	r6, r6, r2
 800d0a2:	fa07 f606 	lsl.w	r6, r7, r6
 800d0a6:	f04f 0c00 	mov.w	ip, #0
 800d0aa:	e794      	b.n	800cfd6 <__ieee754_fmod+0xba>
 800d0ac:	4564      	cmp	r4, ip
 800d0ae:	bf38      	it	cc
 800d0b0:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	da05      	bge.n	800d0c4 <__ieee754_fmod+0x1a8>
 800d0b8:	0fe0      	lsrs	r0, r4, #31
 800d0ba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800d0be:	0064      	lsls	r4, r4, #1
 800d0c0:	3901      	subs	r1, #1
 800d0c2:	e789      	b.n	800cfd8 <__ieee754_fmod+0xbc>
 800d0c4:	ea50 0307 	orrs.w	r3, r0, r7
 800d0c8:	f43f af5c 	beq.w	800cf84 <__ieee754_fmod+0x68>
 800d0cc:	0ffb      	lsrs	r3, r7, #31
 800d0ce:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800d0d2:	007c      	lsls	r4, r7, #1
 800d0d4:	e7f4      	b.n	800d0c0 <__ieee754_fmod+0x1a4>
 800d0d6:	0fe1      	lsrs	r1, r4, #31
 800d0d8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800d0dc:	0064      	lsls	r4, r4, #1
 800d0de:	3a01      	subs	r2, #1
 800d0e0:	e78a      	b.n	800cff8 <__ieee754_fmod+0xdc>
 800d0e2:	1a89      	subs	r1, r1, r2
 800d0e4:	2914      	cmp	r1, #20
 800d0e6:	dc0a      	bgt.n	800d0fe <__ieee754_fmod+0x1e2>
 800d0e8:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d0ec:	fa03 f202 	lsl.w	r2, r3, r2
 800d0f0:	40cc      	lsrs	r4, r1
 800d0f2:	4322      	orrs	r2, r4
 800d0f4:	410b      	asrs	r3, r1
 800d0f6:	ea43 0105 	orr.w	r1, r3, r5
 800d0fa:	4610      	mov	r0, r2
 800d0fc:	e732      	b.n	800cf64 <__ieee754_fmod+0x48>
 800d0fe:	291f      	cmp	r1, #31
 800d100:	dc07      	bgt.n	800d112 <__ieee754_fmod+0x1f6>
 800d102:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d106:	40cc      	lsrs	r4, r1
 800d108:	fa03 f202 	lsl.w	r2, r3, r2
 800d10c:	4322      	orrs	r2, r4
 800d10e:	462b      	mov	r3, r5
 800d110:	e7f1      	b.n	800d0f6 <__ieee754_fmod+0x1da>
 800d112:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800d116:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d11a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800d11e:	32e2      	adds	r2, #226	; 0xe2
 800d120:	fa43 f202 	asr.w	r2, r3, r2
 800d124:	e7f3      	b.n	800d10e <__ieee754_fmod+0x1f2>
 800d126:	bf00      	nop
 800d128:	7fefffff 	.word	0x7fefffff
 800d12c:	0800db80 	.word	0x0800db80
 800d130:	fffffbed 	.word	0xfffffbed
 800d134:	7ff00000 	.word	0x7ff00000
 800d138:	fffffc02 	.word	0xfffffc02
 800d13c:	fffffbe2 	.word	0xfffffbe2

0800d140 <_init>:
 800d140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d142:	bf00      	nop
 800d144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d146:	bc08      	pop	{r3}
 800d148:	469e      	mov	lr, r3
 800d14a:	4770      	bx	lr

0800d14c <_fini>:
 800d14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14e:	bf00      	nop
 800d150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d152:	bc08      	pop	{r3}
 800d154:	469e      	mov	lr, r3
 800d156:	4770      	bx	lr
